[{"title":"Python从入门到放弃（5）","date":"2017-05-25T07:30:08.000Z","path":"2017/05/25/17-05-25/","text":"概述 迭代器&amp;生成器 装饰器 Json &amp; pickle 数据序列化 软件目录结构规范 迭代器&amp;生成器装饰器定义：本质是函数，（装饰其他函数）几十为了其他函数添加附加功能原则： 不能修改被装饰的函数的源代码 不能修改被装饰的函数的调用方式Json &amp; pickle 数据序列化 软件目录结构规范","categories":[{"name":"Python从入门到放弃","slug":"Python从入门到放弃","permalink":"http://dinson.win/categories/Python从入门到放弃/"}],"tags":[]},{"title":"Python从入门到放弃（4）","date":"2017-05-24T01:51:53.000Z","path":"2017/05/24/17-05-24/","text":"概述 函数基本语法及特性 参数与局部变量 返回值 嵌套函数 递归 匿名函数 函数式编程介绍 高阶函数 内置函数 函数基本语法及特性背景提要现在老板让你写一个监控程序，监控服务器的系统状况，当cpu＼memory＼disk等指标的使用量超过阀值时即发邮件报警，你掏空了所有的知识量，写出了以下代码123456789101112131415161718while True： if cpu利用率 &gt; 90%: #发送邮件提醒 连接邮箱服务器 发送邮件 关闭连接 if 硬盘使用空间 &gt; 90%: #发送邮件提醒 连接邮箱服务器 发送邮件 关闭连接 if 内存占用 &gt; 80%: #发送邮件提醒 连接邮箱服务器 发送邮件 关闭连接 上面的代码实现了功能，但即使是邻居老王也看出了端倪，老王亲切的摸了下你家儿子的脸蛋，说，你这个重复代码太多了，每次报警都要重写一段发邮件的代码，太low了，这样干存在2个问题： 代码重复过多，一个劲的copy and paste不符合高端程序员的气质 如果日后需要修改发邮件的这段代码，比如加入群发功能，那你就需要在所有用到这段代码的地方都修改一遍 你觉得老王说的对，你也不想写重复代码，但又不知道怎么搞，老王好像看出了你的心思，此时他抱起你儿子，笑着说，其实很简单，只需要把重复的代码提取出来，放在一个公共的地方，起个名字，以后谁想用这段代码，就通过这个名字调用就行了，如下12345678910111213141516def 发送邮件(内容) #发送邮件提醒 连接邮箱服务器 发送邮件 关闭连接 while True： if cpu利用率 &gt; 90%: 发送邮件('CPU报警') if 硬盘使用空间 &gt; 90%: 发送邮件('硬盘报警') if 内存占用 &gt; 80%: 发送邮件('内存报警') 函数是什么? 函数一词来源于数学，但编程中的「函数」概念，与数学中的函数是有很大不同的，具体区别，我们后面会讲，编程中的函数在英文中也有很多不同的叫法。在BASIC中叫做subroutine(子过程或子程序)，在Pascal中叫做procedure(过程)和function，在C中只有function，在Java里面叫做method。 定义: 函数是指将一组语句的集合通过一个名字(函数名)封装起来，要想执行这个函数，只需调用其函数名即可特性: 减少重复代码 使程序变的可扩展 使程序变得易维护 语法定义 1234def sayhi():#函数名 print(\"Hello, I'm nobody!\") sayhi() #调用函数 可以带参数12345678910111213#下面这段代码a,b = 5,8c = a**bprint(c) #改成用函数写def calc(x,y): res = x**y return res #返回函数执行结果 c = calc(a,b) ＃结果赋值给c变量print(c) 函数参数与局部变量形参变量只有在被调用时才分配内存单元，在调用结束时，即刻释放所分配的内存单元。因此，形参只在函数内部有效。函数调用结束返回主调用函数后则不能再使用该形参变量 实参可以是常量、变量、表达式、函数等，无论实参是何种类型的量，在进行函数调用时，它们都必须有确定的值，以便把这些值传送给形参。因此应预先用赋值，输入等办法使参数获得确定值 默认参数看下面代码12345678910def stu_register(name,age,country,course): print(\"----注册学生信息------\") print(\"姓名:\",name) print(\"age:\",age) print(\"国籍:\",country) print(\"课程:\",course) stu_register(\"王山炮\",22,\"CN\",\"python_devops\")stu_register(\"张叫春\",21,\"CN\",\"linux\")stu_register(\"刘老根\",25,\"CN\",\"linux\") 发现 country 这个参数 基本都 是”CN”, 就像我们在网站上注册用户，像国籍这种信息，你不填写，默认就会是 中国， 这就是通过默认参数实现的，把country变成默认参数非常简单1def stu_register(name,age,course,country=\"CN\"): 这样，这个参数在调用时不指定，那默认就是CN，指定了的话，就用你指定的值。 另外，你可能注意到了，在把country变成默认参数后，我同时把它的位置移到了最后面，为什么呢？ 关键参数正常情况下，给函数传参数要按顺序，不想按顺序就可以用关键参数，只需指定参数名即可，但记住一个要求就是，关键参数必须放在位置参数之后。1stu_register(age=22,name='alex',course=\"python\",) 非固定参数若你的函数在定义时不确定用户想传入多少个参数，就可以使用非固定参数12345678910def stu_register(name,age,*args): # *args 会把多传入的参数变成一个元组形式 print(name,age,args) stu_register(\"Alex\",22)#输出#Alex 22 () #后面这个()就是args,只是因为没传值,所以为空 stu_register(\"Jack\",32,\"CN\",\"Python\")#输出# Jack 32 ('CN', 'Python') 还可以有一个**kwargs12345678910def stu_register(name,age,*args,**kwargs): # *kwargs 会把多传入的参数变成一个dict形式 print(name,age,args,kwargs) stu_register(\"Alex\",22)#输出#Alex 22 () &#123;&#125;#后面这个&#123;&#125;就是kwargs,只是因为没传值,所以为空 stu_register(\"Jack\",32,\"CN\",\"Python\",sex=\"Male\",province=\"ShanDong\")#输出# Jack 32 ('CN', 'Python') &#123;'province': 'ShanDong', 'sex': 'Male'&#125; 局部变量1234567891011name = \"Disnon\" def change_name(name): print(\"before change:\",name) name = \"Mike\" print(\"after change\", name) change_name(name) print(\"在外面看看name改了么?\",name) 输出123before change: Disnonafter change Mike在外面看看name改了么? Disnon 全局与局部变量在子程序中定义的变量称为局部变量，在程序的一开始定义的变量称为全局变量。全局变量作用域是整个程序，局部变量作用域是定义该变量的子程序。当全局变量与局部变量同名时：在定义局部变量的子程序内，局部变量起作用；在其它地方全局变量起作用。 返回值要想获取函数的执行结果，就可以用return语句把结果返回注意: 函数在执行过程中只要遇到return语句，就会停止执行并返回结果，so 也可以理解为 return 语句代表着函数的结束 如果未在函数中指定return,那这个函数的返回值为None 嵌套函数(函数套函数) 1234567891011121314name = \"Dinson\"def change_name(): name = \"Dinson2\" def change_name2(): name = \"Dinson3\" print(\"第3层打印\", name) change_name2() # 调用内层函数 print(\"第2层打印\", name)change_name()print(\"最外层打印\", name) 输出123第3层打印 Dinson3第2层打印 Dinson2最外层打印 Dinson 递归在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。1234567def calc(n): print(n) if int(n / 2) == 0: return n return calc(int(n / 2))calc(10) 输出：123410521 递归特性: 必须有一个明确的结束条件 每次进入更深一层递归时，问题规模相比上次递归都应有所减少 递归效率不高，递归层次过多会导致栈溢出（在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出） 递归函数实际应用案例，二分查找(要二分查找必须先排序)123456789101112131415161718192021222324data = [1, 3, 6, 7, 9, 12, 14, 16, 17, 18, 20, 21, 22, 23, 30, 32, 33, 35]def binary_search(dataset, find_num): print(dataset) if len(dataset) &gt; 1: mid = int(len(dataset) / 2) if dataset[mid] == find_num: # find it print(\"找到数字\", dataset[mid]) elif dataset[mid] &gt; find_num: # 找的数在mid左面 print(\"\\033[31;1m找的数在mid[%s]左面\\033[0m\" % dataset[mid]) return binary_search(dataset[0:mid], find_num) else: # 找的数在mid右面 print(\"\\033[32;1m找的数在mid[%s]右面\\033[0m\" % dataset[mid]) return binary_search(dataset[mid + 1:], find_num) else: if dataset[0] == find_num: # find it print(\"找到数字啦\", dataset[0]) else: print(\"没的分了,要找的数字[%s]不在列表里\" % find_num)binary_search(data, 66) 匿名函数匿名函数就是不需要显式的指定函数12345678#这段代码def calc(n): return n**nprint(calc(10)) #换成匿名函数calc = lambda n:n**nprint(calc(10)) 你也许会说，用上这个东西没感觉有毛方便呀， 。。。。呵呵，如果是这么用，确实没毛线改进，不过匿名函数主要是和其它函数搭配使用的呢，如下 123res = map(lambda x:x**2,[1,5,7,4,8])for i in res: print(i) 输出12345125491664 函数式编程介绍 函数是Python内建支持的一种封装，我们通过把大段代码拆成函数，通过一层一层的函数调用，就可以把复杂任务分解成简单的任务，这种分解可以称之为面向过程的程序设计。函数就是面向过程的程序设计的基本单元。 函数式编程中的函数这个术语不是指计算机中的函数（实际上是Subroutine），而是指数学中的函数，即自变量的映射。也就是说一个函数的值仅决定于函数参数的值，不依赖其他状态。比如sqrt(x)函数计算x的平方根，只要x不变，不论什么时候调用，调用几次，值都是不变的。 Python对函数式编程提供部分支持。由于Python允许使用变量，因此，Python不是纯函数式编程语言。 定义简单说，”函数式编程”是一种”编程范式“（programming paradigm），也就是如何编写程序的方法论。 主要思想是把运算过程尽量写成一系列嵌套的函数调用。举例来说，现在有这样一个数学表达式：1(1 + 2) * 3 - 4 传统的过程式编程，可能这样写：123var a = 1 + 2;var b = a * 3;var c = b - 4; 函数式编程要求使用函数，我们可以把运算过程定义为不同的函数，然后写成下面这样：1var result = subtract(multiply(add(1,2), 3), 4); 这段代码再演进以下，可以变成这样1add(1,2).multiply(3).subtract(4) 这基本就是自然语言的表达了。再看下面的代码，大家应该一眼就能明白它的意思吧：1merge([1,2],[3,4]).sort().search(\"2\") 因此，函数式编程的代码更容易理解。要想学好函数式编程，不要玩py,玩Erlang,Haskell, 好了，我只会这么多了。。。 高阶函数变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。123456def add(x,y,f): return f(x) + f(y) res = add(3,-6,abs)print(res) 内置参数内置参数详解：https://docs.python.org/3/library/functions.html?highlight=built#ascii 1234567891011121314151617181920212223242526272829303132333435363738394041424344#compilef = open(\"函数递归.py\")data =compile(f.read(),'','exec')exec(data)#printmsg = \"又回到最初的起点\"f = open(\"tofile\",\"w\")print(msg,\"记忆中你青涩的脸\",sep=\"|\",end=\"\",file=f)# #slice# a = range(20)# pattern = slice(3,8,2)# for i in a[pattern]: #等于a[3:8:2]# print(i)###memoryview#usage:#&gt;&gt;&gt; memoryview(b'abcd')#&lt;memory at 0x104069648&gt;#在进行切片并赋值数据时，不需要重新copy原列表数据，可以直接映射原数据内存，import timefor n in (100000, 200000, 300000, 400000): data = b'x'*n start = time.time() b = data while b: b = b[1:] print('bytes', n, time.time()-start)for n in (100000, 200000, 300000, 400000): data = b'x'*n start = time.time() b = memoryview(data) while b: b = b[1:] print('memoryview', n, time.time()-start)几个内置方法用法提醒","categories":[{"name":"Python从入门到放弃","slug":"Python从入门到放弃","permalink":"http://dinson.win/categories/Python从入门到放弃/"}],"tags":[]},{"title":"2017 年最流行的 15 个数据科学 Python 库","date":"2017-05-23T00:34:58.000Z","path":"2017/05/23/17-05-23/","text":"概述 Python 近几年在数据科学行业获得了人们的极大青睐，各种资源也层出不穷。数据科学解决方案公司 ActiveWizards 近日根据他们自己的应用开发经验，总结了数据科学家和工程师将在 2017 年最常使用的 Python 库。 核心库NumPy地址：http://www.numpy.org 当使用 Python 开始处理科学任务时，不可避免地需要求助 Python 的 SciPy Stack，它是专门为 Python 中的科学计算而设计的软件的集合（不要与 SciPy 混淆，它只是这个 stack 的一部分，以及围绕这个 stack 的社区）。这个 stack 相当庞大，其中有十几个库，所以我们想聚焦在核心包上（特别是最重要的）。 NumPy（代表 Numerical Python）是构建科学计算 stack 的最基础的包。它为 Python 中的 n 维数组和矩阵的操作提供了大量有用的功能。该库还提供了 NumPy 数组类型的数学运算向量化，可以提升性能，从而加快执行速度。 SciPy地址：https://www.scipy.org SciPy 是一个工程和科学软件库。除此以外，你还要了解 SciPy Stack 和 SciPy 库之间的区别。SciPy 包含线性代数、优化、集成和统计的模块。SciPy 库的主要功能建立在 NumPy 的基础之上，因此它的数组大量使用了 NumPy。它通过其特定的子模块提供高效的数值例程操作，比如数值积分、优化和许多其他例程。SciPy 的所有子模块中的函数都有详细的文档，这也是一个优势。 Pandas地址：http://pandas.pydata.org Pandas 是一个 Python 包，旨在通过「标记（labeled）」和「关系（relational）」数据进行工作，简单直观。Pandas 是 data wrangling 的完美工具。它设计用于快速简单的数据操作、聚合和可视化。库中有两个主要的数据结构： Series：一维 Data Frames：二维 例如，当你要从这两种类型的结构中接收到一个新的「Dataframe」类型的数据时，你将通过传递一个「Series」来将一行添加到「Dataframe」中来接收这样的 Dataframe：这里只是一小撮你可以用 Pandas 做的事情： 轻松删除并添加「Dataframe」中的列 将数据结构转换为「Dataframe」对象 处理丢失数据，表示为 NaN（Not a Number） 功能强大的分组 可视化Matplotlib地址：https://matplotlib.org Matplotlib 是另一个 SciPy Stack 核心软件包和另一个 Python 库，专为轻松生成简单而强大的可视化而量身定制。它是一个顶尖的软件，使得 Python（在 NumPy、SciPy 和 Pandas 的帮助下）成为 MatLab 或 Mathematica 等科学工具的显著竞争对手。然而，这个库比较底层，这意味着你需要编写更多的代码才能达到高级的可视化效果，通常会比使用更高级工具付出更多努力，但总的来说值得一试。花一点力气，你就可以做到任何可视化： 线图 散点图 条形图和直方图 饼状图 茎图 轮廓图 场图 频谱图还有使用 Matplotlib 创建标签、网格、图例和许多其他格式化实体的功能。基本上，一切都是可定制的。 该库支持不同的平台，并可使用不同的 GUI 工具套件来描述所得到的可视化。许多不同的 IDE（如 IPython）都支持 Matplotlib 的功能。 还有一些额外的库可以使可视化变得更加容易。 Seaborn地址：https://seaborn.pydata.org Seaborn 主要关注统计模型的可视化；这种可视化包括热度图（heat map），可以总结数据但也描绘总体分布。Seaborn 基于 Matplotlib，并高度依赖于它。 Bokeh地址：http://bokeh.pydata.org Bokeh 也是一个很好的可视化库，其目的是交互式可视化。与之前的库相反，这个库独立于 Matplotlib。正如我们已经提到的那样，Bokeh 的重点是交互性，它通过现代浏览器以数据驱动文档（D3.js）的风格呈现。 Plotly地址：https://plot.ly 最后谈谈 Plotly。它是一个基于 Web 的工具箱，用于构建可视化，将 API 呈现给某些编程语言（其中包括 Python）。在 plot.ly 网站上有一些强大的、开箱即用的图形。为了使用 Plotly，你需要设置你的 API 密钥。图形处理会放在服务器端，并在互联网上发布，但也有一种方法可以避免这么做。 机器学习SciKit-Learn地址：http://scikit-learn.orgScikits 是 SciPy Stack 的附加软件包，专为特定功能（如图像处理和辅助机器学习）而设计。在后者方面，其中最突出的一个是 scikit-learn。该软件包构建于 SciPy 之上，并大量使用其数学操作。 scikit-learn 有一个简洁和一致的接口，可利用常见的机器学习算法，让我们可以简单地在生产中应用机器学习。该库结合了质量很好的代码和良好的文档，易于使用且有着非常高的性能，是使用 Python 进行机器学习的实际上的行业标准。 深度学习：Keras / TensorFlow / Theano 在深度学习方面，Python 中最突出和最方便的库之一是 Keras，它可以在 TensorFlow 或者 Theano 之上运行。让我们来看一下它们的一些细节。 Theano地址：https://github.com/Theano 首先，让我们谈谈 Theano。Theano 是一个 Python 包，它定义了与 NumPy 类似的多维数组，以及数学运算和表达式。该库是经过编译的，使其在所有架构上能够高效运行。这个库最初由蒙特利尔大学机器学习组开发，主要是为了满足机器学习的需求。 要注意的是，Theano 与 NumPy 在底层的操作上紧密集成。该库还优化了 GPU 和 CPU 的使用，使数据密集型计算的性能更快。 效率和稳定性调整允许更精确的结果，即使是非常小的值也可以，例如，即使 x 很小，log(1+x) 也能得到很好的结果。 TensorFlow地址：https://www.tensorflow.orgTensorFlow 来自 Google 的开发人员，它是用于数据流图计算的开源库，专门为机器学习设计。它是为满足 Google 对训练神经网络的高要求而设计的，是基于神经网络的机器学习系统 DistBelief 的继任者。然而，TensorFlow 并不是谷歌的科学专用的——它也足以支持许多真实世界的应用。 TensorFlow 的关键特征是其多层节点系统，可以在大型数据集上快速训练人工神经网络。这为 Google 的语音识别和图像识别提供了支持。 Keras地址：https://keras.io 最后，我们来看看 Keras。它是一个使用高层接口构建神经网络的开源库，它是用 Python 编写的。它简单易懂，具有高级可扩展性。它使用 Theano 或 TensorFlow 作为后端，但 Microsoft 现在已将 CNTK（Microsoft 的认知工具包）集成为新的后端。 其简约的设计旨在通过建立紧凑型系统进行快速和容易的实验。 Keras 极其容易上手，而且可以进行快速的原型设计。它完全使用 Python 编写的，所以本质上很高层。它是高度模块化和可扩展的。尽管它简单易用且面向高层，但 Keras 也非常深度和强大，足以用于严肃的建模。 Keras 的一般思想是基于神经网络的层，然后围绕层构建一切。数据以张量的形式进行准备，第一层负责输入张量，最后一层用于输出。模型构建于两者之间。 自然语言处理NLTK地址：http://www.nltk.org 这套库的名称是 Natural Language Toolkit（自然语言工具包），顾名思义，它可用于符号和统计自然语言处理的常见任务。NLTK 旨在促进 NLP 及相关领域（语言学、认知科学和人工智能等）的教学和研究，目前正被重点关注。 NLTK 允许许多操作，例如文本标记、分类和 tokenizing、命名实体识别、建立语语料库树（揭示句子间和句子内的依存性）、词干提取、语义推理。所有的构建块都可以为不同的任务构建复杂的研究系统，例如情绪分析、自动摘要。 Gensim地址：http://radimrehurek.com/gensim 这是一个用于 Python 的开源库，实现了用于向量空间建模和主题建模的工具。这个库为大文本进行了有效的设计，而不仅仅可以处理内存中内容。其通过广泛使用 NumPy 数据结构和 SciPy 操作而实现了效率。它既高效又易于使用。 Gensim 的目标是可以应用原始的和非结构化的数字文本。Gensim 实现了诸如分层 Dirichlet 进程（HDP）、潜在语义分析（LSA）和潜在 Dirichlet 分配（LDA）等算法，还有 tf-idf、随机投影、word2vec 和 document2vec，以便于检查一组文档（通常称为语料库）中文本的重复模式。所有这些算法是无监督的——不需要任何参数，唯一的输入是语料库。 数据挖掘与统计Scrapy地址：https://scrapy.org Scrapy 是用于从网络检索结构化数据（如联系人信息或 URL）的爬虫程序（也称为 spider bots）的库。它是开源的，用 Python 编写。它最初是为 scraping 设计的，正如其名字所示的那样，但它现在已经发展成了一个完整的框架，可以从 API 收集数据，也可以用作通用的爬虫。 该库在接口设计上遵循著名的 Don』t Repeat Yourself 原则——提醒用户编写通用的可复用的代码，因此可以用来开发和扩展大型爬虫。 Scrapy 的架构围绕 Spider 类构建，该类包含了一套爬虫所遵循的指令。 Statsmodels地址：http://www.statsmodels.org statsmodels 是一个用于 Python 的库，正如你可能从名称中猜出的那样，其让用户能够通过使用各种统计模型估计方法以及执行统计断言和分析来进行数据探索。 许多有用的特征是描述性的，并可通过使用线性回归模型、广义线性模型、离散选择模型、稳健的线性模型、时序分析模型、各种估计器进行统计。 该库还提供了广泛的绘图函数，专门用于统计分析和调整使用大数据统计数据的良好性能。 结论这个列表中的库被很多数据科学家和工程师认为是最顶级的，了解和熟悉它们是很有价值的。这里有这些库在 GitHub 上活动的详细统计：当然，这并不是一份完全详尽的列表，还有其它很多值得关注的库、工具包和框架。比如说用于特定任务的 SciKit 包，其中包括用于图像的 SciKit-Image。","categories":[],"tags":[]},{"title":"Python从入门到放弃（3）","date":"2017-05-22T01:04:43.000Z","path":"2017/05/22/17-05-22/","text":"概述 集合操作 文件操作 字符编码与转码 集合操作集合是一个无序的，不重复的数据组合，它的主要作用如下： 去重，把一个列表变成集合，就自动去重了,天生去重 关系测试，测试两组数据之前的交集、差集、并集等关系 创建123456789101112131415161718192021222324252627282930313233343536373839404142434445s = set([5, 2, 1, 4, 3])# 增# s.add(\"Dinson\") # &#123;1, 2, 3, 4, 5, 'Dinson'&#125;# s.update([\"Disnon\", 4, 6]) # &#123;1, 2, 3, 4, 5, 'Disnon', 6&#125;# 删# s.remove(1) # &#123;2, 3, 4, 5&#125; 删除一项# s.discard(8) # &#123;1, 2, 3, 4, 5&#125; 有则删，不会崩溃# s.pop(); # &#123;2, 3, 4, 5&#125; 随机删除一项# 查# print(4 in s) # True# print(4 not in s) # False# 其他# print(len(s)) # 5 集合长度# print(s.clear()) # None# print(s.copy()) # 浅copys1 = set([1, 2])s2 = set([2, 3])# 交集# print(s1 &amp; s2) # &#123;2&#125;# print(s1.intersection(s2)) # &#123;2&#125;# 并集# print(s1 | s2) # &#123;1, 2, 3&#125;# print(s1.union(s2)) # &#123;1, 2, 3&#125;# 差集# print(s1 - s2) # &#123;1&#125;# print(s1.difference(s2)) # &#123;1&#125;# 对称差集# print(s1 ^ s2) # &#123;1, 3&#125;# print(s1.symmetric_difference(s2)) # &#123;1, 3&#125;# 两个集合是否不相交# print(s1.isdisjoint(s2)) # False# 判断子父集# print(s1.issubset(s2)) # False# print(s1.issuperset(s2)) # False 文件操作对文件操作流程 打开文件，得到文件句柄并赋值给一个变量 通过句柄对文件进行操作 关闭文件 基本操作 12345678f = open('source_name') #打开文件first_line = f.readline()print('first line:',first_line) #读一行print('我是分隔线'.center(50,'-'))data = f.read()# 读取剩下的所有内容,文件大时不要用print(data) #打印文件 f.close() #关闭文件 打开文件的模式有： r，只读模式（默认）。 w，只写模式。【不可读；不存在则创建；存在则删除内容；】 a，追加模式。【可读； 不存在则创建；存在则只追加内容；】 “+” 表示可以同时读写某个文件 r+，可读写文件。【可读；可写；可追加】 w+，写读 a+，同a “U”表示在读取时，可以将 \\r \\n \\r\\n自动转换成 \\n （与 r 或 r+ 模式同使用） rU r+U “b”表示处理二进制文件（如：FTP发送上传ISO镜像文件，linux可忽略，windows处理二进制文件时需标注） rb wb ab 1234567891011121314151617181920212223242526f = open(\"lyrice\", encoding=\"utf-8\")# print(f.read(50)) # 读取，带参表示读取字符数# print(f.readline(50)) # 读取一行，带参表示读取字符数# print(f.readable()) # Ture or False 判断文件是否可读# f.write() # 写数据# print(f.writelines()) # 写一行数据# print(f.writable()) # Ture or False 判断文件是否可写# print(f.name) # lyrice 文件名# print(f.encoding) # utf-8 文件格式# print(f.errors)# print(f.closed) # Ture or False 查询文件是否关闭# print(f.buffer) # &lt;_io.BufferedReader name='lyrice'&gt;# print(f.newlines)# print(f.line_buffering)# print(f.flush()) # 强制刷新# print(f.close()) # 关闭文件# print(f.fileno()) # 3 操作系统IO在内存的编号# print(f.isatty()) # 是否是终端设备(打印机之类)# print(f.tell()) # 查询当前光标在第几个字符位置# print(f.seek(10)) # 光标移动到指定字符# print(f.seekable()) # 光标是否可移动(tty file,device file等返回False)# print(f.truncate(10)) # 截断，无视光标位置# print(f.detach()) # 有问题，会造成文件格式异常 with语句为了避免打开文件后忘记关闭，可以通过管理上下文，即：123with open('log','r') as f: ... 如此方式，当with代码块执行完毕时，内部会自动关闭并释放文件资源。在Python 2.7 后，with又支持同时对多个文件的上下文进行管理，即：12with open('log1') as obj1, open('log2') as obj2: pass 字符编码与转码详细文章:http://www.cnblogs.com/yuanchenqi/articles/5956943.htmlhttp://www.diveintopython3.net/strings.html 需知 1.在python2默认编码是ASCII, python3里默认是unicode 2.unicode 分为 utf-32(占4个字节),utf-16(占两个字节)，utf-8(占1-4个字节)， so utf-16就是现在最常用的unicode版本， 不过在文件里存的还是utf-8，因为utf8省空间 3.在py3中encode,在转码的同时还会把string 变成bytes类型，decode在解码的同时还会把bytes变回string","categories":[{"name":"Python从入门到放弃","slug":"Python从入门到放弃","permalink":"http://dinson.win/categories/Python从入门到放弃/"}],"tags":[]},{"title":"Python从入门到放弃（2）","date":"2017-05-21T12:19:17.000Z","path":"2017/05/21/17-05-21/","text":"概述 列表、元组操作 字符串操作 字典操作 列表、元组操作列表是我们最以后最常用的数据类型之一，通过列表可以对数据实现最方便的存储、修改等操作12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667name = [\"张三\", \"李四\", \"王五\", \"赵六\", \"赵六\"]print(name.clear()) # []print(name.count(\"赵六\")) # 2print(name.index(\"赵六\")) # 3print(name[0], name[2], name[-4]) # 张三 王五 李四print(name[:]) # ['张三', '李四', '王五', '赵六', '赵六']print(name[0:2]) # ['张三', '李四']name.remove(\"李四\")print(name) # ['张三', '王五', '赵六', '赵六']del name[2]print(name) # ['张三', '李四', '赵六', '赵六']name[4] = \"孙七\"print(name) # ['张三', '李四', '王五', '赵六', '孙七']name.insert(2, \"周八\")print(name) # ['张三', '李四', '周八', '王五', '赵六', '赵六']name.append(\"孙七\")print(name) # ['张三', '李四', '王五', '赵六', '孙七']name.pop()print(name) # ['张三', '李四', '王五', '赵六']name.pop(1) # 李四print(name) # ['张三', '王五', '赵六', '赵六']name.remove(\"赵六\")print(name) # ['张三', '李四', '王五', '赵六']name.reverse();print(name) # ['赵六', '赵六', '王五', '李四', '张三']name2 = [\"b\", \"d\", \"a\", \"e\", \"c\"]name2.sort();print(name2) # ['a', 'b', 'c', 'd', 'e']name2 = [\"b\", \"d\", \"a\", \"e\", \"c\"]name.extend(name2)print(name) # ['张三', '李四', '王五', '赵六', '赵六', 'b', 'd', 'a', 'e', 'c']# 浅copyname1 = [\"a\", \"b\", [\"张三\", \"李四\"], \"d\", \"e\"]name2 = name.copy();name1[1] = \"f\"name1[2][0] = \"王五\"print(name1) # ['a', 'f', ['王五', '李四'], 'd', 'e']print(name2) # ['a', 'b', ['王五', '李四'], 'd', 'e']# 深copyimport copyname1 = [\"a\", \"b\", [\"张三\", \"李四\"], \"d\", \"e\"]name2 = copy.deepcopy(name1)name1[1] = \"f\"name1[2][0] = \"王五\"print(name1) # ['a', 'f', ['王五', '李四'], 'd', 'e']print(name2) # ['a', 'b', ['张三', '李四'], 'd', 'e']# 遍历print(name[0:-1:2]) # ['张三', '王五', '赵六']print(name[::2]) # ['张三', '王五', '赵六']print(name[:]) # ['张三', '李四', '王五', '赵六', '赵六']for i in name: print(i) # 张三李四王五赵六赵六 元组元组其实跟列表差不多，也是存一组数，只不是它一旦创建，便不能再修改，所以又叫只读列表12names = (\"alex\",\"jack\",\"eric\")它只有2个方法，一个是count,一个是index，完毕。 字符串操作1234567891011121314151617181920212223242526272829303132333435363738394041424344454647str = \"My Name is Dinson\"# print(str.index(\"n\")) # 13 索引字符 无该字符则报错# print(str.rindex(\"n\")) # 16 从右边开始索引字符 无该字符则报错# print(str.find(\"y\")) # 1 索引字符 无该字符则返回-1# print(str.rfind(\"n\")) # 16 从右边开始索引字符 无该字符则返回-1# print(str.count(\"n\")) # 2 字符出现的个数# print(\"dinson\".capitalize()) # Dinson 首字母大写# print(str.center(24, \"-\")) # ---My Name is Dinson----# print(str.ljust(24, \"-\")) # My Name is Dinson-------# print(str.rjust(24, \"-\")) # -------My Name is Dinson# print(str.zfill(24)) # 0000000My Name is Dinson# print(str.endswith(\"on\")) # True 判断是否以该字符结束# print(str.startswith(\"my\")) # False 判断是否以该字符开始# print(\"a\\ta\".expandtabs(10)) # a a# print(\"_\".join([\"a\", \"b\", \"c\", \"d\"])) # a_b_c_d# print(str.swapcase()) # mY nAME IS dINSON 大小写互换# print(str.lower()) # my name is dinson# print(str.upper()) # MY NAME IS DINSON# print(str.replace(\"Dinson\", \"Mike\")) # My Name is Mike# print(\"\\n Dinson \\n\".strip()) # Dinson 去除左右空格和换行# print(\"\\n Dinson \\n\".lstrip()) # Dinson \\n 去除左边空格和换行# print(\"\\n Dinson \\n\".rstrip()) # \\n Dinson 去除右边空格和换行# print(\"aaaaa\".split(\"a\", 2)) # ['', '', 'aaa'] 从左切割# print(\"aaaaa\".rsplit(\"a\", 2)) # ['aaa', '', ''] 从右切割# print(\"Dinson\".partition(\"n\")) # ('Di', 'n', 'son') 切割成固定三个元组# print(\"Dinson\".rpartition(\"n\")) # ('Dinso', 'n', '')从右边切割成固定三个元组# print(\"a\\nb\".splitlines()) # ['a', 'b'] 根据不用系统换行符分割# print(\"my name is dinson\".title()) # My Name Is Dinson# p1 = str.maketrans(\"abcdefghijklmnopqrstuvwxyz MND\", \"9352401867peiwqcmzoshlmabv$*&amp;^\")# p2 = str.maketrans(\"9352401867peiwqcmzoshlmabv$*&amp;^\", \"abcdefghijklmnopqrstuvwxyz MND\")# print(str.translate(p1)) # *b$&amp;9i4$6o$^6woqw# print(str.translate(p1).translate(p2)) # My Name is Dinson# print(\"name:&#123;name&#125;,age:&#123;age&#125;\".format(name=\"Dinson\", age=18)) # name:Dinson,age:18# print(\"name:&#123;name&#125;,age:&#123;age&#125;\".format_map(&#123;\"name\": \"Dinson\", \"age\": 18&#125;)) # name:Dinson,age:18# print(\"123\".isdecimal()) # True 是否为阿拉伯数字(非负整数)# print(\"123\".isalnum()) # True 是否为阿拉伯数字(非负整数)# print(\"123\".isnumeric()) # True 是否为阿拉伯数字(非负整数)# print(\"123\".isdigit()) # True 是否为阿拉伯数字(非负整数)# print(\"abcdABCD\".isalpha()) # True 是否为字母# print(\"_1a中国\".isidentifier()) # True 是否为合法标识符# print(\"abcd\".islower()) # True 是否全部为小写# print(\"ABCD\".isupper()) # True 是否全部为大写# print(\"My Name Is Dinson\".istitle()) # True 是否为标题格式# print(\"\\t\".isspace()) # True 是否全部为空格# print(str.isprintable()) # True tty file,drive file不可打印 字典操作字典一种key - value 的数据类型，使用就像我们上学用的字典，通过笔划、字母来查对应页的详细内容。12345cinfo = &#123; 'stu1101': \"TengLan Wu\", 'stu1102': \"LongZe Luola\", 'stu1103': \"XiaoZe Maliya\",&#125; 字典的特性 dict是无序的 key必须是唯一的,so 天生去重 增加1info[\"stu1104\"] = \"苍井空\" 修改1info['stu1101'] = \"武藤兰\" 删除12345info.pop(\"stu1101\") #标准删除姿势或者del info['stu1103'] #换个姿势删除或者info.popitem() #随机删除 查找123456\"stu1102\" in info #标准用法，返回Ture，False或者info.get(\"stu1102\") #获取，返回value或者info[\"stu1102\"] #同上，但是看下面info[\"stu1105\"] #如果一个key不存在，就报错，get不会，不存在只返回None 其它姿势123456789101112131415161718192021222324252627282930313233#values&gt;&gt;&gt; info.values()dict_values(['LongZe Luola', 'XiaoZe Maliya'])#keys&gt;&gt;&gt; info.keys()dict_keys(['stu1102', 'stu1103'])#setdefault&gt;&gt;&gt; info.setdefault(\"stu1106\",\"Alex\")'Alex'&gt;&gt;&gt; info&#123;'stu1102': 'LongZe Luola', 'stu1103': 'XiaoZe Maliya', 'stu1106': 'Alex'&#125;&gt;&gt;&gt; info.setdefault(\"stu1102\",\"龙泽萝拉\")'LongZe Luola'&gt;&gt;&gt; info&#123;'stu1102': 'LongZe Luola', 'stu1103': 'XiaoZe Maliya', 'stu1106': 'Alex'&#125;#update &gt;&gt;&gt; info&#123;'stu1102': 'LongZe Luola', 'stu1103': 'XiaoZe Maliya', 'stu1106': 'Alex'&#125;&gt;&gt;&gt; b = &#123;1:2,3:4, \"stu1102\":\"龙泽萝拉\"&#125;&gt;&gt;&gt; info.update(b)&gt;&gt;&gt; info&#123;'stu1102': '龙泽萝拉', 1: 2, 3: 4, 'stu1103': 'XiaoZe Maliya', 'stu1106': 'Alex'&#125;#itemsinfo.items()dict_items([('stu1102', '龙泽萝拉'), (1, 2), (3, 4), ('stu1103', 'XiaoZe Maliya'), ('stu1106', 'Alex')])#通过一个列表生成默认dict,有个没办法解释的坑，少用吧这个&gt;&gt;&gt; dict.fromkeys([1,2,3],'testd')&#123;1: 'testd', 2: 'testd', 3: 'testd'&#125; 循环dict1234567#方法1for key in info: print(key,info[key])#方法2for k,v in info.items(): #会先把dict转成list,数据里大时莫用 print(k,v)","categories":[{"name":"Python从入门到放弃","slug":"Python从入门到放弃","permalink":"http://dinson.win/categories/Python从入门到放弃/"}],"tags":[]},{"title":"Python从入门到放弃（1）","date":"2017-05-20T09:40:27.000Z","path":"2017/05/20/17-05-20/","text":"概述 Python介绍 发展史 Python 2 or 3? 安装 Hello World程序 变量 用户输入 模块初识 .pyc是个什么鬼？ 数据类型初识 数据运算 表达式if …else语句 表达式for 循环 break and continue 表达式while 循环 一切皆对象 Python介绍python的创始人为吉多·范罗苏姆（Guido van Rossum）。1989年的圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间，决心开发一个新的脚本解释程序，作为ABC语言的一种继承。 最新的TIOBE排行榜，Python赶超PHP占据第四， Python崇尚优美、清晰、简单，是一个优秀并广泛使用的语言。 由上图可见，Python整体呈上升趋势，反映出Python应用越来越广泛并且也逐渐得到业内的认可！！！ Python可以应用于众多领域，如：数据分析、组件集成、网络服务、图像处理、数值计算和科学计算等众多领域。目前业内几乎所有大中型互联网企业都在使用Python，如：Youtube、Dropbox、BT、Quora（中国知乎）、豆瓣、知乎、Google、Yahoo!、Facebook、NASA、百度、腾讯、汽车之家、美团等。 目前Python主要应用领域： 云计算: 云计算最火的语言， 典型应用OpenStack WEB开发: 众多优秀的WEB框架，众多大型网站均为Python开发，Youtube, Dropbox, 豆瓣。。。， 典型WEB框架有Django 科学运算、人工智能: 典型库NumPy, SciPy, Matplotlib, Enthought librarys,pandas 系统运维: 运维人员必备语言 金融：量化交易，金融分析，在金融工程领域，Python不但在用，且用的最多，而且重要性逐年提高。原因：作为动态语言的Python，语言结构清晰简单，库丰富，成熟稳定，科学计算和统计分析都很牛逼，生产效率远远高于c,c++,java,尤其擅长策略回测 图形GUI: PyQT, WxPython,TkInter Python在一些公司的应用： 谷歌：Google App Engine 、code.google.com 、Google earth 、谷歌爬虫、- - - Google广告等项目都在大量使用Python开发 CIA: 美国中情局网站就是用Python开发的 NASA: 美国航天局(NASA)大量使用Python进行数据分析和运算 YouTube:世界上最大的视频网站YouTube就是用Python开发的 Dropbox:美国最大的在线云存储网站，全部用Python实现，每天网站处理10亿个文件的上传和下载 Instagram:美国最大的图片分享社交网站，每天超过3千万张照片被分享，全部用python开发 Facebook:大量的基础库均通过Python实现的 Redhat: 世界上最流行的Linux发行版本中的yum包管理工具就是用python开发的 豆瓣: 公司几乎所有的业务均是通过Python开发的 知乎: 国内最大的问答社区，通过Python开发(国外Quora) 春雨医生：国内知名的在线医疗网站是用Python开发的 除上面之外，还有搜狐、金山、腾讯、盛大、网易、百度、阿里、淘宝 、土豆、新浪、果壳等公司都在使用Python完成各种各样的任务。 Python 是一门什么样的语言？ 编程语言主要从以下几个角度为进行分类，编译型和解释型、静态语言和动态语言、强类型定义语言和弱类型定义语言，每个分类代表什么意思呢，我们一起来看一下。 编译和解释的区别是什么？ 编译器是把源程序的每一条语句都编译成机器语言,并保存成二进制文件,这样运行时计算机可以直接以机器语言来运行此程序,速度很快;而解释器则是只在执行程序时,才一条一条的解释成机器语言给计算机来执行,所以运行速度是不如编译后的程序运行的快的. 这是因为计算机不能直接认识并执行我们写的语句,它只能认识机器语言(是二进制的形式) 编译型vs解释型编译型优点：编译器一般会有预编译的过程对代码进行优化。因为编译只做一次，运行时不需要编译，所以编译型语言的程序执行效率高。可以脱离语言环境独立运行。缺点：编译之后如果需要修改就需要整个模块重新编译。编译的时候根据对应的运行环境生成机器码，不同的操作系统之间移植就会有问题，需要根据运行的操作系统环境编译不同的可执行文件。 解释型优点：有良好的平台兼容性，在任何环境中都可以运行，前提是安装了解释器（虚拟机）。灵活，修改代码的时候直接修改就可以，可以快速部署，不用停机维护。缺点：每次运行的时候都要解释一遍，性能上不如编译型语言。 一、低级语言与高级语言 最初的计算机程序都是用0和1的序列表示的，程序员直接使用的是机器指令，无需翻译，从纸带打孔输入即可执行得到结果。后来为了方便记忆，就将用0、1序列表示的机器指令都用符号助记，这些与机器指令一一对应的助记符就成了汇编指令，从而诞生了汇编语言。无论是机器指令还是汇编指令都是面向机器的，统称为低级语言。因为是针对特定机器的机器指令的助记符，所以汇编语言是无法独立于机器(特定的CPU体系结构)的。但汇编语言也是要经过翻译成机器指令才能执行的，所以也有将运行在一种机器上的汇编语言翻译成运行在另一种机器上的机器指令的方法，那就是交叉汇编技术。 高级语言是从人类的逻辑思维角度出发的计算机语言，抽象程度大大提高，需要经过编译成特定机器上的目标代码才能执行，一条高级语言的语句往往需要若干条机器指令来完成。高级语言独立于机器的特性是靠编译器为不同机器生成不同的目标代码(或机器指令)来实现的。那具体的说，要将高级语言编译到什么程度呢，这又跟编译的技术有关了，既可以编译成直接可执行的目标代码，也可以编译成一种中间表示，然后拿到不同的机器和系统上去执行，这种情况通常又需要支撑环境，比如解释器或虚拟机的支持，Java程序编译成bytecode，再由不同平台上的虚拟机执行就是很好的例子。所以，说高级语言不依赖于机器，是指在不同的机器或平台上高级语言的程序本身不变，而通过编译器编译得到的目标代码去适应不同的机器。从这个意义上来说，通过交叉汇编，一些汇编程序也可以获得不同机器之间的可移植性，但这种途径获得的移植性远远不如高级语言来的方便和实用性大。 二、编译与解释 编译是将源程序翻译成可执行的目标代码，翻译与执行是分开的；而解释是对源程序的翻译与执行一次性完成，不生成可存储的目标代码。这只是表象，二者背后的最大区别是：对解释执行而言，程序运行时的控制权在解释器而不在用户程序；对编译执行而言，运行时的控制权在用户程序。 解释具有良好的动态特性和可移植性，比如在解释执行时可以动态改变变量的类型、对程序进行修改以及在程序中插入良好的调试诊断信息等，而将解释器移植到不同的系统上，则程序不用改动就可以在移植了解释器的系统上运行。同时解释器也有很大的缺点，比如执行效率低，占用空间大，因为不仅要给用户程序分配空间，解释器本身也占用了宝贵的系统资源。 编译器是把源程序的每一条语句都编译成机器语言,并保存成二进制文件,这样运行时计算机可以直接以机器语言来运行此程序,速度很快;而解释器则是只在执行程序时,才一条一条的解释成机器语言给计算机来执行,所以运行速度是不如编译后的程序运行的快的. 三、编译型和解释型 我们先看看编译型，其实它和汇编语言是一样的：也是有一个负责翻译的程序来对我们的源代码进行转换，生成相对应的可执行代码。这个过程说得专业一点，就称为编译（Compile），而负责编译的程序自然就称为编译器（Compiler）。如果我们写的程序代码都包含在一个源文件中，那么通常编译之后就会直接生成一个可执行文件，我们就可以直接运行了。但对于一个比较复杂的项目，为了方便管理，我们通常把代码分散在各个源文件中，作为不同的模块来组织。这时编译各个文件时就会生成目标文件（Object file）而不是前面说的可执行文件。一般一个源文件的编译都会对应一个目标文件。这些目标文件里的内容基本上已经是可执行代码了，但由于只是整个项目的一部分，所以我们还不能直接运行。待所有的源文件的编译都大功告成，我们就可以最后把这些半成品的目标文件“打包”成一个可执行文件了，这个工作由另一个程序负责完成，由于此过程好像是把包含可执行代码的目标文件连接装配起来，所以又称为链接（Link），而负责链接的程序就叫……就叫链接程序（Linker）。链接程序除了链接目标文件外，可能还有各种资源，像图标文件啊、声音文件啊什么的，还要负责去除目标文件之间的冗余重复代码，等等，所以……也是挺累的。链接完成之后，一般就可以得到我们想要的可执行文件了。 上面我们大概地介绍了编译型语言的特点，现在再看看解释型。噢，从字面上看，“编译”和“解释”的确都有“翻译”的意思，它们的区别则在于翻译的时机安排不大一样。打个比方：假如你打算阅读一本外文书，而你不知道这门外语，那么你可以找一名翻译，给他足够的时间让他从头到尾把整本书翻译好，然后把书的母语版交给你阅读；或者，你也立刻让这名翻译辅助你阅读，让他一句一句给你翻译，如果你想往回看某个章节，他也得重新给你翻译。 两种方式，前者就相当于我们刚才所说的编译型：一次把所有的代码转换成机器语言，然后写成可执行文件；而后者就相当于我们要说的解释型：在程序运行的前一刻，还只有源程序而没有可执行程序；而程序每执行到源程序的某一条指令，则会有一个称之为解释程序的外壳程序将源代码转换成二进制代码以供执行，总言之，就是不断地解释、执行、解释、执行……所以，解释型程序是离不开解释程序的。像早期的BASIC就是一门经典的解释型语言，要执行BASIC程序，就得进入BASIC环境，然后才能加载程序源文件、运行。解释型程序中，由于程序总是以源代码的形式出现，因此只要有相应的解释器，移植几乎不成问题。编译型程序虽然源代码也可以移植，但前提是必须针对不同的系统分别进行编译，对于复杂的工程来说，的确是一件不小的时间消耗，况且很可能一些细节的地方还是要修改源代码。而且，解释型程序省却了编译的步骤，修改调试也非常方便，编辑完毕之后即可立即运行，不必像编译型程序一样每次进行小小改动都要耐心等待漫长的Compiling…Linking…这样的编译链接过程。不过凡事有利有弊，由于解释型程序是将编译的过程放到执行过程中，这就决定了解释型程序注定要比编译型慢上一大截，像几百倍的速度差距也是不足为奇的。 编译型与解释型，两者各有利弊。前者由于程序执行速度快，同等条件下对系统要求较低，因此像开发操作系统、大型应用程序、数据库系统等时都采用它，像C/C++、Pascal/Object Pascal（Delphi）、VB等基本都可视为编译语言，而一些网页脚本、服务器脚本及辅助开发接口这样的对速度要求不高、对不同系统平台间的兼容性有一定要求的程序则通常使用解释性语言，如Java、JavaScript、VBScript、Perl、Python等等。 但既然编译型与解释型各有优缺点又相互对立，所以一批新兴的语言都有把两者折衷起来的趋势，例如Java语言虽然比较接近解释型语言的特征，但在执行之前已经预先进行一次预编译，生成的代码是介于机器码和Java源代码之间的中介代码，运行的时候则由JVM（Java的虚拟机平台，可视为解释器）解释执行。它既保留了源代码的高抽象、可移植的特点，又已经完成了对源代码的大部分预编译工作，所以执行起来比“纯解释型”程序要快许多。而像VB6（或者以前版本）、C#这样的语言，虽然表面上看生成的是.exe可执行程序文件，但VB6编译之后实际生成的也是一种中介码，只不过编译器在前面安插了一段自动调用某个外部解释器的代码（该解释程序独立于用户编写的程序，存放于系统的某个DLL文件中，所有以VB6编译生成的可执行程序都要用到它），以解释执行实际的程序体。C#（以及其它.net的语言编译器）则是生成.net目标代码，实际执行时则由.net解释系统（就像JVM一样，也是一个虚拟机平台）进行执行。当然.net目标代码已经相当“低级”，比较接近机器语言了，所以仍将其视为编译语言，而且其可移植程度也没有Java号称的这么强大，Java号称是“一次编译，到处执行”，而.net则是“一次编码，到处编译”。呵呵，当然这些都是题外话了。总之，随着设计技术与硬件的不断发展，编译型与解释型两种方式的界限正在不断变得模糊。 四、动态语言和静态语言 通常我们所说的动态语言、静态语言是指动态类型语言和静态类型语言。 （1）动态类型语言：动态类型语言是指在运行期间才去做数据类型检查的语言，也就是说，在用动态类型的语言编程时，永远也不用给任何变量指定数据类型，该语言会在你第一次赋值给变量时，在内部将数据类型记录下来。Python和Ruby就是一种典型的动态类型语言，其他的各种脚本语言如VBScript也多少属于动态类型语言。 （2）静态类型语言：静态类型语言与动态类型语言刚好相反，它的数据类型是在编译其间检查的，也就是说在写程序时要声明所有变量的数据类型，C/C++是静态类型语言的典型代表，其他的静态类型语言还有C#、JAVA等。 五、强类型定义语言和弱类型定义语言 （1）强类型定义语言：强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。举个例子：如果你定义了一个整型变量a,那么程序根本不可能将a当作字符串类型处理。强类型定义语言是类型安全的语言。 （2）弱类型定义语言：数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。 强类型定义语言在速度上可能略逊色于弱类型定义语言，但是强类型定义语言带来的严谨性能够有效的避免许多错误。另外，“这门语言是不是动态语言”与“这门语言是否类型安全”之间是完全没有联系的！例如：Python是动态语言，是强类型定义语言（类型安全的语言）; VBScript是动态语言，是弱类型定义语言（类型不安全的语言）; JAVA是静态语言，是强类型定义语言（类型安全的语言）。 通过上面这些介绍，我们可以得出，python是一门动态解释性的强类型定义语言。那这些基因使成就了Python的哪些优缺点呢？我们继续往下看。 Python的优缺点优点 Python的定位是“优雅”、“明确”、“简单”，所以Python程序看上去总是简单易懂，初学者学Python，不但入门容易，而且将来深入下去，可以编写那些非常非常复杂的程序。 开发效率非常高，Python有非常强大的第三方库，基本上你想通过计算机实现任何功能，Python官方库里都有相应的模块进行支持，直接下载调用后，在基础库的基础上再进行开发，大大降低开发周期，避免重复造轮子。 高级语言————当你用Python语言编写程序的时候，你无需考虑诸如如何管理你的程序使用的内存一类的底层细节 可移植性————由于它的开源本质，Python已经被移植在许多平台上（经过改动使它能够工 作在不同平台上）。如果你小心地避免使用依赖于系统的特性，那么你的所有Python程序无需修改就几乎可以在市场上所有的系统平台上运行 可扩展性————如果你需要你的一段关键代码运行得更快或者希望某些算法不公开，你可以把你的部分程序用C或C++编写，然后在你的Python程序中使用它们。 可嵌入性————你可以把Python嵌入你的C/C++程序，从而向你的程序用户提供脚本功能。 缺点 速度慢，Python 的运行速度相比C语言确实慢很多，跟JAVA相比也要慢一些，因此这也是很多所谓的大牛不屑于使用Python的主要原因，但其实这里所指的运行速度慢在大多数情况下用户是无法直接感知到的，必须借助测试工具才能体现出来，比如你用C运一个程序花了0.01s,用Python是0.1s,这样C语言直接比Python快了10倍,算是非常夸张了，但是你是无法直接通过肉眼感知的，因为一个正常人所能感知的时间最小单位是0.15-0.4s左右，哈哈。其实在大多数情况下Python已经完全可以满足你对程序速度的要求，除非你要写对速度要求极高的搜索引擎等，这种情况下，当然还是建议你用C去实现的。 代码不能加密，因为PYTHON是解释性语言，它的源码都是以名文形式存放的，不过我不认为这算是一个缺点，如果你的项目要求源代码必须是加密的，那你一开始就不应该用Python来去实现。 线程不能利用多CPU问题，这是Python被人诟病最多的一个缺点，GIL即全局解释器锁（Global Interpreter Lock），是计算机程序设计语言解释器用于同步线程的工具，使得任何时刻仅有一个线程在执行，Python的线程是操作系统的原生线程。在Linux上为pthread，在Windows上为Win thread，完全由操作系统调度线程的执行。一个python解释器进程内有一条主线程，以及多条用户程序的执行线程。即使在多核CPU平台上，由于GIL的存在，所以禁止多线程的并行执行。关于这个问题的折衷解决方法，我们在以后线程和进程章节里再进行详细探讨。 当然，Python还有一些其它的小缺点，在这就不一一列举了，我想说的是，任何一门语言都不是完美的，都有擅长和不擅长做的事情，建议各位不要拿一个语言的劣势去跟另一个语言的优势来去比较，语言只是一个工具，是实现程序设计师思想的工具，就像我们之前中学学几何时，有的时候需要要圆规，有的时候需要用三角尺一样，拿相应的工具去做它最擅长的事才是正确的选择。之前很多人问我Shell和Python到底哪个好？我回答说Shell是个脚本语言，但Python不只是个脚本语言，能做的事情更多，然后又有钻牛角尖的人说完全没必要学Python, Python能做的事情Shell都可以做，只要你足够牛B,然后又举了用Shell可以写俄罗斯方块这样的游戏，对此我能说表达只能是，不要跟SB理论，SB会把你拉到跟他一样的高度，然后用充分的经验把你打倒。 Python解释器当我们编写Python代码时，我们得到的是一个包含Python代码的以.py为扩展名的文本文件。要运行代码，就需要Python解释器去执行.py文件。 由于整个Python语言从规范到解释器都是开源的，所以理论上，只要水平够高，任何人都可以编写Python解释器来执行Python代码（当然难度很大）。事实上，确实存在多种Python解释器。 CPython当我们从Python官方网站下载并安装好Python 2.7后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行python就是启动CPython解释器。 CPython是使用最广的Python解释器。教程的所有代码也都在CPython下执行。 IPythonIPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。 CPython用&gt;&gt;&gt;作为提示符，而IPython用In [序号]:作为提示符。 PyPyPyPy是另一个Python解释器，它的目标是执行速度。PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。 绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。如果你的代码要放到PyPy下执行，就需要了解PyPy和CPython的不同点。 JythonJython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。 IronPythonIronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。 小结Python的解释器很多，但使用最广泛的还是CPython。如果要和Java或.Net平台交互，最好的办法不是用Jython或IronPython，而是通过网络调用来交互，确保各程序之间的独立性。 Python发展史 1989年，为了打发圣诞节假期，Guido开始写Python语言的编译器。Python这个名字，来自Guido所挚爱的电视剧Monty Python’s Flying Circus。他希望这个新的叫做Python的语言，能符合他的理想：创造一种C和shell之间，功能全面，易学易用，可拓展的语言。 1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。 Granddaddy of Python web frameworks, Zope 1 was released in 1999 Python 1.0 - January 1994 增加了 lambda, map), filter) and reduce). Python 2.0 - October 16, 2000，加入了内存回收机制，构成了现在Python语言框架的基础 Python 2.4 - November 30, 2004, 同年目前最流行的WEB框架Django 诞生 Python 2.5 - September 19, 2006 Python 2.6 - October 1, 2008 Python 2.7 - July 3, 2010 In November 2014, it was announced that Python 2.7 would be supported until 2020, and reaffirmed that there would be no 2.8 release as users were expected to move to Python 3.4+ as soon as possible Python 3.0 - December 3, 2008 Python 3.1 - June 27, 2009 Python 3.2 - February 20, 2011 Python 3.3 - September 29, 2012 Python 3.4 - March 16, 2014 Python 3.5 - September 13, 2015 Python 3.6 - December 23, 2016 Python 2 or 3?In summary : Python 2.x is legacy, Python 3.x is the present and future of the language Python 3.0 was released in 2008. The final 2.x version 2.7 release came out in mid-2010, with a statement of extended support for this end-of-life release. The 2.x branch will see no new major releases after that. 3.x is under active development and has already seen over five years of stable releases, including version 3.3 in 2012, 3.4 in 2014, and 3.5 in 2015. This means that all recent standard library improvements, for example, are only available by default in Python 3.x. Guido van Rossum (the original creator of the Python language) decided to clean up Python 2.x properly, with less regard for backwards compatibility than is the case for new releases in the 2.x range. The most drastic improvement is the better Unicode support (with all text strings being Unicode by default) as well as saner bytes/Unicode separation. Besides, several aspects of the core language (such as print and exec being statements, integers using floor division) have been adjusted to be easier for newcomers to learn and to be more consistent with the rest of the language, and old cruft has been removed (for example, all classes are now new-style, “range()” returns a memory efficient iterable, not a list as in 2.x). py2与3的详细区别PRINT IS A FUNCTIONThe statement has been replaced with a print() function, with keyword arguments to replace most of the special syntax of the old statement (PEP 3105). Examples:1234567Old: print \"The answer is\", 2*2 New: print(\"The answer is\", 2*2)Old: print x, # Trailing comma suppresses newline New: print(x, end=\" \") # Appends a space instead of a newlineOld: print # Prints a newlineNew: print() # You must call the function!Old: print &gt;&gt;sys.stderr, \"fatal error\" New: print(\"fatal error\", file=sys.stderr)Old: print (x, y) # prints repr((x, y))New: print((x, y)) # Not the same as print(x, y)! You can also customize the separator between items, e.g.:1print(\"There are &lt;\", 2**32, \"&gt; possibilities!\", sep=\"\") ALL IS UNICODE NOW从此不再为讨厌的字符编码而烦恼 还可以这样玩： (A,*REST,B)=RANGE(5)1234&lt;strong&gt;&gt;&gt;&gt; a,*rest,b = range(5)&gt;&gt;&gt; a,rest,b(0, [1, 2, 3], 4)&lt;/strong&gt; 某些库改名了 Old Name New Name _winreg winreg ConfigParser configparser copy_reg copyreg Queue queue SocketServer socketserver markupbase _markupbase repr reprlib test.test_support test.support 还有谁不支持PYTHON3?One popular module that don’t yet support Python 3 is Twisted (for networking and other applications). Most actively maintained libraries have people working on 3.x support. For some libraries, it’s more of a priority than others: Twisted, for example, is mostly focused on production servers, where supporting older versions of Python is important, let alone supporting a new version that includes major changes to the language. (Twisted is a prime example of a major package where porting to 3.x is far from trivial ） Python安装windows 下载安装包https://www.python.org/downloads/ 安装 配置环境变量 linux、Mac无需安装，原装Python环境 ps：如果自带2.6，请更新至2.7 Hello World程序创建一个文件叫hello.py,并输入1print(\"Hello World!\") 然后执行命令:python hello.py ,输出1Hello World! 指定解释器那么就需要在 hello.py 文件的头部指定解释器，如下：1#!/usr/bin/env python 指定字符编码那么就需要在 hello.py 文件的头部指定解释器，如下：1# -*- coding: utf-8 -*- 变量声明变量123#_*_coding:utf-8_*_ name = \"Dinson\" 上述代码声明了一个变量，变量名为： name，变量name的值为：”Dinson” 变量定义的规则： 变量名只能是 字母、数字或下划线的任意组合 变量名的第一个字符不能是数字 以下关键字不能声明为变量名[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’] 用户输入 1234567#!/usr/bin/env python#_*_coding:utf-8_*_ #name = raw_input(\"What is your name?\") #only on python 2.xname = input(\"What is your name?\")print(\"Hello \" + name ) 输入密码时，如果想要不可见，需要利用getpass 模块中的 getpass方法，即：12345678910#!/usr/bin/env python# -*- coding: utf-8 -*- import getpass # 将用户输入的内容赋值给 name 变量pwd = getpass.getpass(\"请输入密码：\") # 打印输入的内容print(pwd) 模块初识 Python的强大之处在于他有非常丰富和强大的标准库和第三方库，几乎你想实现的任何功能都有相应的Python库支持，以后的课程中会深入讲解常用到的各种库，现在，我们先来象征性的学2个简单的。 sys1234567891011#!/usr/bin/env python# -*- coding: utf-8 -*- import sys print(sys.argv) #输出$ python test.py helo world['test.py', 'helo', 'world'] #把执行脚本时传递的参数获取到了 os123456#!/usr/bin/env python# -*- coding: utf-8 -*- import os os.system(\"df -h\") #调用系统命令 完全结合一下123import os,sys os.system(''.join(sys.argv[1:])) #把用户的输入的参数当作一条命令交给os.system来执行 .pyc是个什么鬼？1. Python是一门解释型语言？我初学Python时，听到的关于Python的第一句话就是，Python是一门解释性语言，我就这样一直相信下去，直到发现了.pyc文件的存在。如果是解释型语言，那么生成的.pyc文件是什么呢？c应该是compiled的缩写才对啊！为了防止其他学习Python的人也被这句话误解，那么我们就在文中来澄清下这个问题，并且把一些基础概念给理清。 2. 解释型语言和编译型语言 计算机是不能够识别高级语言的，所以当我们运行一个高级语言程序的时候，就需要一个“翻译机”来从事把高级语言转变成计算机能读懂的机器语言的过程。这个过程分成两类，第一种是编译，第二种是解释。编译型语言在程序执行之前，先会通过编译器对程序执行一个编译的过程，把程序转变成机器语言。运行时就不需要翻译，而直接执行就可以了。最典型的例子就是C语言。解释型语言就没有这个编译的过程，而是在程序运行的时候，通过解释器对程序逐行作出解释，然后直接运行，最典型的例子是Ruby。通过以上的例子，我们可以来总结一下解释型语言和编译型语言的优缺点，因为编译型语言在程序运行之前就已经对程序做出了“翻译”，所以在运行时就少掉了“翻译”的过程，所以效率比较高。但是我们也不能一概而论，一些解释型语言也可以通过解释器的优化来在对程序做出翻译时对整个程序做出优化，从而在效率上超过编译型语言。此外，随着Java等基于虚拟机的语言的兴起，我们又不能把语言纯粹地分成解释型和编译型这两种。用Java来举例，Java首先是通过编译器编译成字节码文件，然后在运行时通过解释器给解释成机器文件。所以我们说Java是一种先编译后解释的语言。 3. Python到底是什么 其实Python和Java/C#一样，也是一门基于虚拟机的语言，我们先来从表面上简单地了解一下Python程序的运行过程吧。当我们在命令行中输入python hello.py时，其实是激活了Python的“解释器”，告诉“解释器”：你要开始工作了。可是在“解释”之前，其实执行的第一项工作和Java一样，是编译。熟悉Java的同学可以想一下我们在命令行中如何执行一个Java的程序：12javac hello.javajava hello 只是我们在用Eclipse之类的IDE时，将这两部给融合成了一部而已。其实Python也一样，当我们执行python hello.py时，他也一样执行了这么一个过程，所以我们应该这样来描述Python，Python是一门先编译后解释的语言。 4. 简述Python的运行过程在说这个问题之前，我们先来说两个概念，PyCodeObject和pyc文件。我们在硬盘上看到的pyc自然不必多说，而其实PyCodeObject则是Python编译器真正编译成的结果。我们先简单知道就可以了，继续向下看。当python程序运行时，编译的结果则是保存在位于内存中的PyCodeObject中，当Python程序运行结束时，Python解释器则将PyCodeObject写回到pyc文件中。当python程序第二次运行时，首先程序会在硬盘中寻找pyc文件，如果找到，则直接载入，否则就重复上面的过程。所以我们应该这样来定位PyCodeObject和pyc文件，我们说pyc文件其实是PyCodeObject的一种持久化保存方式。 数据类型初识1. 数字 2 是一个整数的例子。长整数 不过是大一些的整数。3.23和52.3E-4是浮点数的例子。E标记表示10的幂。在这里，52.3E-4表示52.3 * 10-4。(-5+4j)和(2.3-4.6j)是复数的例子，其中-5,4为实数，j为虚数，数学中表示复数是什么？。 bytes(字节) Python 3最重要的新特性大概要算是对文本和二进制数据作了更为清晰的区分。文本总是Unicode，由str类型表示，二进制数据则由bytes类型表示。Python 3不会以任意隐式的方式混用str和bytes，正是这使得两者的区分特别清晰。你不能拼接字符串和字节包，也无法在字节包里搜索字符串（反之亦然），也不能将字符串传入参数为字节包的函数（反之亦然）。int（整型） 在32位机器上，整数的位数为32位，取值范围为-231～231-1，即-2147483648～2147483647 在64位系统上，整数的位数为64位，取值范围为-263～263-1，即-9223372036854775808～9223372036854775807long（长整型） 跟C语言不同，Python的长整数没有指定位宽，即：Python没有限制长整数数值的大小，但实际上由于机器内存有限，我们使用的长整数数值不可能无限大。 注意，自从Python2.2起，如果整数发生溢出，Python会自动将整数数据转换为长整数，所以如今在长整数数据后面不加字母L也不会导致严重后果了。float（浮点型） 浮点数用来处理实数，即带有小数的数字。类似于C语言中的double类型，占8个字节（64位），其中52位表示底，11位表示指数，剩下的一位表示符号。complex（复数） 复数由实数部分和虚数部分组成，一般形式为x＋yj，其中的x是复数的实数部分，y是复数的虚数部分，这里的x和y都是实数。注：Python中存在小数字池：-5 ～ 257 2、布尔值 真或假 1 或 0 3、字符串 “hello world” 万恶的字符串拼接： python中的字符串在C语言中体现为是一个字符数组，每次创建字符串时候需要在内存中开辟一块连续的空，并且一旦需要修改字符串的话，就需要再次开辟空间，万恶的+号每出现一次就会在内从中重新开辟一块空间。 字符串格式化输出1234name = \"Dinson\"print \"i am %s \" % name #输出: i am Dinson PS: 字符串是 %s;整数 %d;浮点数%f 字符串常用功能： 移除空白 分割 长度 索引 切片 4、列表创建列表：123name_list = ['dinson', 'nick', 'decy']或name_list ＝ list(['dinson', 'nick', 'decy']) 基本操作： 索引 切片 追加 删除 长度 切片 循环 包含 5、元组(不可变列表)创建元组：123ages = (11, 22, 33, 44, 55)或ages = tuple((11, 22, 33, 44, 55)) 6、字典（无序）创建字典：123person = &#123;\"name\": \"mr.wu\", 'age': 18&#125;或person = dict(&#123;\"name\": \"mr.wu\", 'age': 18&#125;) 常用操作： 索引 新增 删除 键、值、键值对 循环 长度 数据运算 算数运算：比较运算：赋值运算：逻辑运算：成员运算：身份运算：位运算：运算符优先级：更多内容：猛击这里 表达式if … else场景一、用户登陆验证123456789101112131415161718# 提示输入用户名和密码 # 验证用户名和密码# 如果错误，则输出用户名或密码错误# 如果成功，则输出 欢迎，XXX! #!/usr/bin/env python# -*- coding: encoding -*- import getpass name = raw_input('请输入用户名：')pwd = getpass.getpass('请输入密码：') if name == \"dinson\" and pwd == \"cmd\": print(\"欢迎，dinson！\")else: print(\"用户名和密码错误\") 场景二、猜年龄游戏 在程序里设定好你的年龄，然后启动程序让用户猜测，用户输入后，根据他的输入提示用户输入的是否正确，如果错误，提示是猜大了还是小了123456789101112#!/usr/bin/env python# -*- coding: utf-8 -*- my_age = 28user_input = int(input(\"input your guess num:\")) if user_input == my_age: print(\"Congratulations, you got it !\")elif user_input &lt; my_age: print(\"Oops,think bigger!\")else: print(\"think smaller!\") 外层变量，可以被内层代码使用内层变量，不应被外层代码使用 表达式for loop最简单的循环10次12345#_*_coding:utf-8_*___author__ = 'Alex Li' for i in range(10): print(\"loop:\", i ) 需求一：还是上面的程序，但是遇到小于5的循环次数就不走了，直接跳入下一次循环1234for i in range(10): if i&lt;5: continue #不往下走了,直接进入下一次loop print(\"loop:\", i ) 需求二：还是上面的程序，但是遇到大于5的循环次数就不走了，直接退出1234for i in range(10): if i&gt;5: break #不往下走了,直接跳出整个loop print(\"loop:\", i ) while loop 有一种循环叫死循环，一经触发，就运行个天荒地老、海枯石烂。1234count = 0while True: print(\"你是风儿我是沙,缠缠绵绵到天涯...\",count) count +=1 其实除了时间，没有什么是永恒的，死loop还是少写为好 上面的代码循环100次就退出吧1234567count = 0while True: print(\"你是风儿我是沙,缠缠绵绵到天涯...\",count) count +=1 if count == 100: print(\"去你妈的风和沙,你们这些脱了裤子是人,穿上裤子是鬼的臭男人..\") break 回到上面for 循环的例子，如何实现让用户不断的猜年龄，但只给最多3次机会，再猜不对就退出程序。123456789101112131415161718#!/usr/bin/env python# -*- coding: utf-8 -*- my_age = 28count = 0while count &lt; 3: user_input = int(input(\"input your guess num:\")) if user_input == my_age: print(\"Congratulations, you got it !\") break elif user_input &lt; my_age: print(\"Oops,think bigger!\") else: print(\"think smaller!\") count += 1 #每次loop 计数器+1else: print(\"猜这么多次都不对,fuck off.\") 一切皆对象对于Python，一切事物都是对象，对象基于类创建所以，以下这些值都是对象： “wupeiqi”、38、[‘北京’, ‘上海’, ‘深圳’]，并且是根据不同的类生成的对象。","categories":[{"name":"Python从入门到放弃","slug":"Python从入门到放弃","permalink":"http://dinson.win/categories/Python从入门到放弃/"}],"tags":[]},{"title":"Kotlin学习资料","date":"2017-05-19T09:42:09.000Z","path":"2017/05/19/17-05-19/","text":"概述 Kotlin 成为 Android 官方支持的编程语言 官方资料首发的肯定是kotlin的官方github地址了： https://github.com/JetBrains/kotlin github trending，会有很多的新新优质资源 https://github.com/trending/java Readme中包含官方的tutorials、推荐的图书《Kotlin in Action》、《Kotlin for Android Developers》以及其他资源。 英文不太好的不要担心，有官方中文翻译站点： https://www.kotlincn.net/docs/reference/https://www.gitbook.com/book/hltj/kotlin-reference-chinese/details 《Kotlin for android developers》中文版翻译在线版阅读地址 https://wangjiegulu.gitbooks.io/kotlin-for-android-developers-zh/zhe_ben_shu_shi_he_ni_ma_ff1f.html 离线版PDF下载地址 https://www.gitbook.com/download/pdf/book/wangjiegulu/kotlin-for-android-developers-zh 张涛的开源实验室之前在推送中推荐过张涛的博客，博客质量都很高，在很早的时候就开始编写Kotlin相关博客，此外还有很多比较新的知识~ https://kymjs.com/column/kotlin.html 大精-wing的地方酒馆让你的代码量减少3倍！使用kotlin开发Android系列~ http://androidwing.net/index.php/89 还有个Kotlin项目： https://github.com/githubwing/GankClient-Kotlin Kotlin 视频教程腾讯视频： http://v.qq.com/boke/gplay/903446d6231d8612d198c58fb86eb4dc_t6d000101bd9lx1.html 百度云： http://pan.baidu.com/s/1nvGYAfB 开源项目一个用Kotlin写的简单漫画APP https://github.com/wuapnjie/PoiShuhui-Kotlin 其他文章为什么我要改用Kotlin-by:技术小黑屋 http://droidyue.com/blog/2017/05/18/why-do-i-turn-to-kotlin/ Android开发必备知识：为什么说Kotlin值得一试-by:腾讯Bugly公众号https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=404087761&amp;idx=1&amp;sn=d80625ee52f860a7a2ed4c238d2151b6 使用Kotlin进行Android开发 http://ragnraok.github.io/using-kotlin-to-write-android-app.html 使用Kotlin在Android Studio上开发App-by:Blincheng http://blog.csdn.net/qq_25867141/article/details/52875330","categories":[{"name":"Kotlin从放弃到入门","slug":"Kotlin从放弃到入门","permalink":"http://dinson.win/categories/Kotlin从放弃到入门/"}],"tags":[]},{"title":"Kotlin基本语法","date":"2017-05-18T10:24:15.000Z","path":"2017/05/18/17-05-18/","text":"概述 如果你觉得Java 7是一个过期的语言，并决定找一个更现代的语言代替。恭喜你！就如你知道的，虽然Java 8已经发布了，它包含了很多我们期待的像现代语言中那样的改善，但是我们Android开发者还是被迫在使用Java 7.这是因为法律的问题。但是就算没有这个限制，并且新的Android设备从今天开始使用新的能理解Java8的VM，在当前的设备过期、几乎没有人使用它们之前我们也不能使用Java 8，所以恐怕我们不会很快等到这一天的到来。但是并不是没有补救的方法。多亏使用了JVM，我们可以使用任何语言去编写Android应用，只要它能够编译成JVM能够认识的字节码就可以了。正如你所想，有很多选择，比如Groovy，Scala，Clojure，当然还有Kotlin。通过实践，只有其中一些能够被考虑来作为替代品。上述的每一种语言都有它的利弊，如果你还没有真正确定你该使用那种语言，我建议你可以去尝试一下它们。 类和函数Kotlin中的类遵循一个简单的结构。尽管与Java有一点细微的差别。你可以使用try.kotlinlang.org在不需要一个真正的项目和不需要部署到机器的前提下来测试一些简单的代码范例。 怎么定义一个类如果你想定义一个类，你只需要使用class关键字。123class MainActivity&#123;&#125; 它有一个默认唯一的构造器。我们会在以后的课程中学习在特殊的情况下创建其它额外的构造器，但是请记住大部分情况下你只需要这个默认的构造器。你只需要在类名后面写上它的参数。如果这个类没有任何内容可以省略大括号：1class Person(name: String, surname: String) 那么构造函数的函数体在哪呢？你可以写在init块中：12345class Person(name: String, surname: String) &#123; init&#123; ... &#125;&#125; 类继承默认任何类都是基础继承自Any（与java中的Object类似），但是我们可以继承其它类。所有的类默认都是不可继承的（final），所以我们只能继承那些明确声明open或者abstract的类：12open class Animal(name: String)class Person(name: String, surname: String) : Animal(name) 当我们只有单个构造器时，我们需要在从父类继承下来的构造器中指定需要的参数。这是用来替换Java中的super调用的。 函数(方法)函数（我们Java中的方法）可以使用fun关键字就可以定义:123fun onCreate(savedInstanceState: Bundle?) &#123;&#125; 如果你没有指定它的返回值，它就会返回Unit，与Java中的void类似，但是Unit是一个真正的对象。你当然也可以指定任何其它的返回类型：123fun add(x: Int, y: Int) : Int &#123; return x + y&#125; 就想你在上面的例子中看到的那样，我在每句的最后没有使用分号。当然你也可以使用分号，分号不是必须的，而且不使用分号是一个不错的实践。当你这么做了，你会发现这节约了你很多时间。 然而如果返回的结果可以使用一个表达式计算出来，你可以不使用括号而是使用等号：1fun add(x: Int,y: Int) : Int = x + y 构造方法和函数参数Kotlin中的参数与Java中有些不同。如你所见，我们先写参数的名字再写它的类型：123fun add(x: Int, y: Int) : Int &#123; return x + y&#125; 我们可以给参数指定一个默认值使得它们变得可选，这是非常有帮助的。这里有一个例子，在Activity中创建了一个函数用来toast一段信息：123fun toast(message: String, length: Int = Toast.LENGTH_SHORT) &#123; Toast.makeText(this, message, length).show()&#125; 如你所见，第二个参数（length）指定了一个默认值。这意味着你调用的时候可以传入第二个值或者不传，这样可以避免你需要的重载函数：12toast(\"Hello\")toast(\"Hello\", Toast.LENGTH_LONG) 这个与下面的Java代码是一样的：123456void toast(String message)&#123;&#125;void toast(String message, int length)&#123; Toast.makeText(this, message, length).show();&#125; 这跟你想象的一样复杂。再看看这个例子：12345fun niceToast(message: String, tag: String = javaClass&lt;MainActivity&gt;().getSimpleName(), length: Int = Toast.LENGTH_SHORT) &#123; Toast.makeText(this, \"[$className] $message\", length).show()&#125; 我增加了第三个默认值是类名的tag参数。如果在Java中总数开销会以几何增长。现在可以通过以下方式调用：123toast(\"Hello\")toast(\"Hello\", \"MyTag\")toast(\"Hello\", \"MyTag\", Toast.LENGTH_SHORT) 而且甚至还有其它选择，因为你可以使用参数名字来调用，这表示你可以通过在值前写明参数名来传入你希望的参数：1toast(message = \"Hello\", length = Toast.LENGTH_SHORT) 你可以在String中直接使用模版表达式。它可以帮助你很简单地在静态值和变量的基础上编写复杂的String。在上面的例子中，我使用了”[$className] $message”。如你所见，任何时候你使用一个$符号就可以插入一个表达式。如果这个表达式有一点复杂，你就需要使用一对大括号括起来：”Your name is ${user.name}”。 Layout的编写 以天气预报应用为例","categories":[{"name":"Kotlin从放弃到入门","slug":"Kotlin从放弃到入门","permalink":"http://dinson.win/categories/Kotlin从放弃到入门/"}],"tags":[{"name":"Kotlin","slug":"Kotlin","permalink":"http://dinson.win/tags/Kotlin/"}]},{"title":"Google I/O 2017","date":"2017-05-17T09:38:37.000Z","path":"2017/05/17/17-05-17/","text":"概述 美国时间5月17日-19日，Google I/O 2017大会将于美国加利福尼亚州山景城的海岸线圆形剧场召开，下面一起看看此次I/O大会将会有哪些值得期待的看点 Google AssistantGoogle宣布其AI语音助手Google Assistant将推出iPhone版，并对其加入了文字输入、Google Lens图像输入，支持到更多设备和语言等新功能升级。Google Assistant将推出iPhone版，iPhone用户也能享受Google这个语音AI助手进行语音搜索、查看Gmail、Youtube和网页搜索等操作。为了方便用户在不能使用语音输入情况下，Google Assistant加入了文字输入方式和通过新公布的Google Lens技术进行图像识别。Goolge还推出Assistant SDK给开发者，并联合大量硬件制造商，推出内置Google Assistant的设备，这些设备将标有Google Assistant Built-in。 Google系统Android O本次Google I/O 2017上最重要的发布，自然就是Android O了，迄今Android激活设备已经达到20亿部，包括了智能手机、手表、车载和TV等，早在两个月前Android O开发者阅览版便已经放出，现在Google正式介绍了Android O的新功能，包括流动性体验和关键功能改进两部分。Android O提供流动式体验（Fluid Experience），包括画中画分屏功能、在App图标中显示通知的通知点、更好用的网页自动填写、可自动识别文字中地址和电话的智能选择，Google还为新系统推出TensorFlow Lite智能AI学习系统，用于加强语音、图像学习和识别能力。画中画通知点智能选择 TensorFlow LiteAndroid O另一新部分为关键功能（Vitals），这包括了安全性改进、系统调整和更方便的开发者工具。其中系统调整中，Android O的开机启动时间比N快了2倍，而App的运行也更快更流畅，以Google Sheets作例子，在没有对App作改动情况下，Android O上运行快了两倍，新系统还在后台管理部分更智能，提供App定位和执行的限制。关键性功能改进开机速度快2倍，App运行速度快2倍支持KotlinAndroid O最新支持Kotlin开发语言，这是由JetBrains基于JVM的一种编程语言，Google表示这是开发者社区强烈要求加入的。最后Android O还有一些新功能，其中当然少不了增加更多EMOJI表情！Android O Preview开发者阅览版在今天已经提供下载，但Google未透露正式版的推送时间。 Google I/O 宣布Galaxy S8将支持Daydream，推出独立式移动VR设备Google宣布了三星Galaxy S8手机将可支持移动VR平台Daydream，Google还联合高通、HTC和联想推独立式移动VR设备，在今年晚些时候开卖。这次Google I/O 2017大会上VR和AR部分，为移动VR平台Daydream和AR项目Tango的新介绍，其中宣布了三星Galaxy S8手机将可支持Daydream，Google还联合高通、HTC和联想推独立式移动VR设备，Tango部分则宣布了华硕ZenFone AR手机和VPS定位技术。除了这类需要搭配Daydream View头显使用的智能手机VR外，Google还宣布推出独立式移动VR设备（Standalone VR）。独立式移动VR设备不需要PC、手机和线缆，有更好易用性和身体定位，相比智能手机VR有更好的WorldSense运动追踪技术。Google将于与高通、HTC和联想合作推出相关的产品，后者两款独立式VR设备将在今年晚些时候开卖。AR部分也就是Google的Tango项目，从2015的DK到去年发布首款AR手机，Tango发展顺利，今年华硕将在夏天开卖第二代Tango手机ZenFone AR。技术方面，Tango与Google地图团体合作开发推出VPS（Visual Positioning Service，可视定位服务），提供准确的室内定位能力，可通过摄像头对室内的物体进行识别。Tango还加入到Google的学校和教育项目Google Expeditions中，为学生展示AR技术。 Google Home智能音箱Google的智能家庭助手Google Home也迎来四个功能升级，包括主动通知和免提电话在内，并将在更多国家提供服务。在今天凌晨的I/O 2017大会上，Google的智能家庭助手Google Home也迎来功能升级，包括主动式通知助手、免提电话、更多流媒体服务支持和可视化反馈，Google Home还将在更多国家提供服务。Google Home将扩展在英国、加拿大、澳洲、法国、德国和日本六个国家，这次新加入了Proactive Assistance主动式助手，会自动通过底部的指示灯，提醒用户将下来的行程、事件、重要约会等。Google Home另一个新功能为Hands-Free Calling免提拨打功能，无需设置可免费拨打电话，支持现有的电话号码。Google Home支持更多音乐流媒体服务商，并加入蓝牙连接播放手机上音乐支持，视频流媒体也加入更多电视内容。可视化反馈让Google Home可以通过Chromecast连接用户家中的电视，作为屏幕显示Google Assistant搜索返回的内容。 Google公布可180万亿次浮点运算的Cloud TPU，自动帮你画猫猫Google在这次I/O 2017大会上公布了最新一代Cloud TPU，可提供每秒能进行180万亿次浮点运算，另外Google还利用AI资源建立Google.ai，用于多方面的AI运算。Google CEO Sundar Pichai在这次I/O 2017大会上宣布Goolge要建立Ai First数据中心，用到最新一代Cloud TPU打造，为机器学习提供足够的运算能力，Google还结合现有AI资源推出Google.ai，用在科研项目和自动帮你画猫猫上…在去年Google便公布了他们的TPU（Tensor Processing Unit，张量处理器），相比以往的CPU和GPU快15-30倍、效能高30-80倍，用于Google所有产品背后的计算，包括在AlphaGO上，但机器学习太复杂，经过锻炼和推断两个阶段，这需要超高的亿万级运算能力，所以Google为此推出了Cloud TPU。Google的Cloud TPU在一块运算板上包括了四个处理单元，每秒能进行180万亿次浮点运算，64块板可组成一套超级计算机，Google称为TPU Pods，每个Pods能提供11.5千万亿次浮点运算（PetaFLOPS）。Could TPU除了AI云计算外，还将在今天开始加入到Google Computing Engine，提供给他们客户使用。Google通过结合自身的AI优势建立了Google.ai，包括AtuoML用在AI的Learing to learn上，还有科研和医疗的活体组织检测模型建立预测、DNA序列研究上。另外除了那些复杂庞大的项目，Google.ai还能做简单有趣的事情，可以帮你自动纠正画猫猫。","categories":[],"tags":[{"name":"I/O大会","slug":"I-O大会","permalink":"http://dinson.win/tags/I-O大会/"}]},{"title":"适配器模式在Android开发中的应用","date":"2017-05-14T02:57:58.000Z","path":"2017/05/14/17-05-14/","text":"概述 适配器：Adapter，大家看到这个单词是不是非常眼熟了？没错，这就是我们平时用到 ListView 和 RecyclerView 时必定会配合使用的 Adapter。列表显示数据几乎是任何一个安卓项目都会用到的一个功能，谷歌使用适配器模式来封装等使之异常灵活且非常实用，我们想要了解谷歌为什么这样做，就要先理解Java适配器模式是怎样运作的，这篇文章我们就学习一下java设计模式之一的适配器模式以及它在安卓中的应用。 适配器模式使用场景：适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。 引用网上的一个例子：笔记本电脑电源一般用的都是5V电压，但是我们的家用电是220V，我们要让笔记本充上电，最好的办法应该是通过一个工具把220V的电压转换成5V，这个工具就是适配器 好好理解一下设计模式的使用场景比起去记住代码是怎样写的效果要好很多，说不定你哪天编码的时候灵光一现用上了，那就是你真正掌握了。 适配器模式的种类 类适配器 UML图(强烈建议大家去了解一下UML图，它很简单粗暴的把类与类之间的关系描述的很清楚易懂) 我们可以看到，目标接口 Target 就相当于是上面的5V电压，Adaptee 就是被适配的220V电压，Adapter 就是适配器。看代码： 输出结果：12充5V电啦充220V电啦 结合上面给点UML图稍微分析一下： Adapter类 继承了 Adaptee220V类 然后实现了接口 Target5V 并实现了目标方法 chong5V()，类适配器的一个特点就是 Adapter 会去继承被适配类，这样适配器就直接拥有了被适配类中的方法，所以类适配器的缺点就是不够灵活，让我们看一下另外一种适配器。 2.对象适配器 这里的 Target 依然是 5V电压，Adaptee 依然是 220V电压，比起类适配器，Adapter 和 Adaptee 的关系从继承变成了组合，上代码： 输出结果：12充5V电啦充220V电啦 这里我们把 Adaptee220V 通过 Adapter 的构造方法传入到 Adapter 中，当调用 Adapter 的 chong220V()方法 时，实际是调用传进来 Adaptee220V 对象的 chong220V 方法，这样就会变得很灵活。 项目中的运用之所以写这篇关于适配器设计模式的文章，是因为作者在以前有一次实际开发中，在没有学习过适配器模式的前提下，为了解决项目中的一个开发痛点，自己费劲脑筋想出来的一种模式，到现在才知道原来这个叫适配器模式，在学习了这个设计模式之后更加深入了解了一下。接下来，就来演示一下作者在实际工作中使用到的变异形态的对象适配器模式。 当时开发场景：当时作者开发一个基于POS机的APP，APP要求有打印功能，像订单打印、日期打印等等。我们知道POS机是有多种型号的，每种型号的POS机会有他们单独的SDK，也就是说打印方法是不同的！首先，我们每次调用打印的时候都会先判断 POS机 型号，因为型号不对程序肯定会报错，假如某一天，APP适配的 POS机 类型要增加一款，也就是说我每个判断 POS机 型号的地方都要多家一个if语句，并且还要把 新POS机型 的打印方法加上去，如果我有5个地方用到了打印，就要加5次，这样是很痛苦的，别问我为什么知道。。。经过2次这样的真实情况发生后，我暴走了，痛定思痛要想个办法结局，于是有了以下代码：每种 POS机 都实现 IPrint 中的打印方法：这里我把 POS机 型号判断的代码放到了 PrintManager 的构造方法中，每次 new 出实例时就会去判断。然后我让 PrintManager 也实现了IPrint接口，因为我认为项目中的打印管理类必须要拥有这三种打印方法。发现没，改过之后的代码，在不同的调用的地方再也不用担心新增POS机型需要改代码了，只需要在 PrintManager 的构造方法中增加一个判断就好了。要是改成单例：改完之后我哭了。。。我他吗的是个天才啊。。。后面果然加了多款POS机，但是我再也不痛苦了！看一下我的UML图：其实，光看UML图，作者在项目中的这种写法已经不算是适配器模式了，因为 Adaptee 已经直接实现了Target中的方法，也就是说根本就不存在不满足目标接口这个说法了。。不过作者这样写完全是自己想出来的，没有基于任何设计模式，就现在目前的效果来说还是不错的，通过这篇文章，我对于适配器模式有了一个清晰的理解，同时也反思了一下我这种写法，还是很有收获的。","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://dinson.win/tags/设计模式/"}]},{"title":"Android录屏与截图功能(5.0以上有效)","date":"2017-05-13T06:20:59.000Z","path":"2017/05/13/17-05-12/","text":"概述 这篇文章，会带你学习如何使用 MediaProjection，MediaCodec 以及 MediaMuxer 来实现简单的截屏和录屏功能。 因为 MediaProjection 是 5.0以上 才出现的，所以今天所讲述功能实现，只在 5.0以上 的系统有效。 截屏步骤如下1：获取 MediaProjectionManager 2：通过 MediaProjectionManager.createScreenCaptureIntent() 获取 Intent 3：通过 startActivityForResult 传入 Intent 然后在 onActivityResult 中通过 MediaProjectionManager.getMediaProjection(resultCode,data) 获取 MediaProjection 4：创建 ImageReader,构建 VirtualDisplay 5 : 最后就是通过 ImageReader 截图，就可以从 ImageReader 里获得 Image 对象。 6 : 将 Image 对象转换成 bitmap 实现步骤已经给出了，我们就按照步骤来实现代码吧。 首先 MediaProjectionManager 是系统服务，我们通过getSystemService(MEDIA_PROJECTION_SERVICE)获取它 1projectionManager = (MediaProjectionManager)getSystemService(MEDIA_PROJECTION_SERVICE); 然后调用 startActivityForResult 传入 projectionManager.createScreenCaptureIntent() 创建的 Intent 1startActivityForResult(projectionManager.createScreenCaptureIntent(), SCREEN_SHOT); 紧接着我们就可以在 onActivityResult(int requestCode, int resultCode, Intent data) 中通过 resultCode 和 data 来获取 MediaProjection：然后就是创建 ImageReader 和 VirtualDisplay：这里我们依次讲解一下：首先是 ImageReader.newInstance 方法：1public static ImageReader newInstance(int width, int height, int format, int maxImages) 方法里接收四个参数。前两个 width,height 是用来指定生成图像的宽和高。第三个参数 format 是图像的格式，这个格式必须是 ImageFormat或 PixelFormat 中的一个，这两个 Format 里有很多格式，大家可以点进去看看，我们例子中使用的是 PixelFormat.RGBA_8888 格式(需要注意的是并不是所有的格式都被 ImageReader 支持，比如说 ImageFormat.NV21)。 第四个参数 maxImages，这个参数指的是你想同时在 ImageReader 里获取到的 Image对象 的个数，这个参数我不是很懂，我不理解同时的意思。我的理解是 ImageReader 是一个类似数组的东西，然后我们可以通过 acquireLatestImage() 或 acquireNextImage() 方法来得到里面的 Image对象(可能有误，仅供参考)。这个值应该设置的越小越好，但是得大于0，所以我们上面设置的是1。 然后我们看看 mediaProjection.createVirtualDisplay 方法：首先这个方法返回的是 VirtualDisplay。前四个不用说了，分别是 VirtualDisplay 的名字，宽，高和dpi。 第五个参数，大家可以访问 https://developer.android.google.cn/reference/android/hardware/display/DisplayManager.html 查看 DisplayManager 的所有flags，我没有具体的研究过，在本次要实现的例子里，除了 VIRTUAL_DISPLAY_FLAG_SECURE 这个会报错，其他的 flags 效果都一样。 第六个参数 是一个 Surface。我这里表达一下我的理解，当 VirtualDisplay 被创建出来时，也就是 createVirtualDisplay 调用后，你在真实屏幕上的每一帧都会输入到 Surface参数 里。也就是说，如果你放个 SurfaceView，然后传入 SurfaceView 的 Surface 那么你在屏幕上的操作都会显示在 SurfaceView 里(这里我们后面录屏会讲)。我们这里传入的是 ImageReader 的 Surface。这其中的逻辑我的理解是这样的，真实屏幕的每一帧都都会传给 ImageReader，根据 ImageReader 的 maxImages参数，比如说 maxImages 是 2，那么 ImageReader 始终保持两帧图片，但这两帧图片是一直随着真实屏幕的操作而更新的(不知道大家有没有听懂)。 第七个参数 是一个回调函数，在 VirtualDisplay 状态改变时调用。因为我们这里没有，所以传 null。 第八个参数 这里我给出原文：“The Handler on which the callback should be invoked, or null if the callback should be invoked on the calling thread’s main Looper.” 因为我翻译不好。不过和普通的 Handler 使用场景类似。 现在我们 ImageReader 和 VirtualDisplay，接下来我们就可以通过 ImageReader 的 acquireLatestImage() 或 acquireNextImage() 来得到 Image对象 了。 12SystemClock.sleep(1000);Image image = imageReader.acquireNextImage(); 这里有个坑，就是你在获取 Image 的时候，得先暂停1秒左右，不然就会获取失败(原因未知)。 现在我们有了 Image对象，但是 Image对象 并不能直接作为UI资源被使用，我们可以将它转换成 Bitmap对象。 这里最主要的逻辑就是像素与字节的转换，我们需要将 Image对象 的字节流写进 Bitmap 里，但是 Bitmap 接收的是像素格式的。 我们一行一行来看： 首先获取 image对象 的宽和高，注意 width 和 height 是像素格式的。 然后获取 ByteBuffer，里面存放的就是图片的字节流，是字节格式的。我是这么理解的，ByteBuffer 里面是一长串的字节序列，按照某种格式分成行列就变成了图片。 然后获取 PixelStride，这指的是两个像素的距离(就是一个像素头部到相邻像素的头部)，这是字节格式的。 RowStride 是一行占用的距离(就是一行像素头部到相邻行像素的头部)，这个大小和 width 有关，这里需要注意，因为内存对齐的原因，所以每行会有一些空余。这个值也是字节格式的。 紧接着我们需要创建一个 Bitmap 用来接受 Image 的 buffer 的输入，buffer 是字节流，它会按照我们设置的 format 转换成像素，所以这里最重要的一个地方就是 Bitmap 创建的大小，因为高度就是行数所以就是 height，但是宽度因为上面说的内存对齐问题会有些空余，所以我们要先求出空余部分，然后加上 width。 1int rowPadding = rowStride - pixelStride * width; 这句话用整行的距离减去了一行里像素及空隙占用的距离，剩下的就是空余部分。但是这个是字节格式的。我们将它除以 pixelStride，也就是一个像素及空隙占用的字节大小，就转换成了像素格式。然后： 1width + rowPadding / pixelStride 这个就是一行里像素的占用了，我们将它传给Bitmap： 创建出合适大小的 Bitmap，然后把 Image 的 buffer 传给它，就成功的将 Image对象 转换成了 Bitmap。这里我可能讲的不清楚，我给大家画了张图： 上面的一小格一小格是一块块像素。 好了，现在我们已经获取到了 bitmap 了，我们可以把它放到 ImageView 里显示一下，我写了一个例子，效果如下： 点击按钮，弹出一个对话框请求截屏，点击立即开始的话，截屏就会显示在下面的 ImageView 里。 录屏步骤录屏的前三步和截屏是一样的，出现分歧点的地方在于 VirtualDisplay 创建时传入的 Surface，还记得我们上面说的吗，说在创建 VirtualDisplay 的时候，传入一个 SurfaceView 的 Surface 的话，那么你在真实屏幕上的操作，都会重现在 SurfaceView 上。我们来试一下： 我们在Surface参数中传入一个 SurfaceView 的 Surface，效果如下： 可以看到我们放了一个 Button，放了一个 ImageView，放了一个 SurfaceView。点击 Button，然后点立即开始之后，真实屏幕就映射到了 SurfaceView 里。 所以当创建 VirtualDisplay 时，真实屏幕就映射到了 Surface，也就是我们可以再 Surface 里拿到屏幕的一个输入。那我们要录屏的话，就只要把 Surface 转换成我们需要的格式就行了。 在本篇文章的例子中，我们会将 Surface对象 转换成 mp4格式。这就需要用到MediaCodec类 和 MediaMuxer类。MediaCodec 生成一个 Surface 用来接收屏幕的输出并按照格式编码，然后传给 MediaMuxer 用来封装成 mp4格式 的视频。上面讲了 MediaCodec 的创建，我们也可以从中看到屏幕数据是怎么进入 MediaCodec 的。具体的我已经注释了。 接下来我们创建一个 MediaMuxer对象：然后创建 VirtualDisplay，把 MediaCodec的surface 传进去：最后就是视频的编码与转换MP4还有保存了：好了，录屏到此结束了。我们来看下实例演示：","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"录屏","slug":"录屏","permalink":"http://dinson.win/tags/录屏/"},{"name":"截图","slug":"截图","permalink":"http://dinson.win/tags/截图/"}]},{"title":"Android ConstraintLayout 使用指南","date":"2017-05-11T09:19:18.000Z","path":"2017/05/11/17-05-11/","text":"概述 升级Android Studio 2.3之后，IDE默认生成的Activity布局都是以ConstraintLayout做为根布局，体验了一把这个Google去年就开始力推的ConstraintLayout后，觉得非常不错，本文用于记录ConstraintLayout各个方面的使用知识。 平台支持 ConstraintLayout最低兼容Android 2.3； 目前Android Studio 2.3默认使用ConstraintLayout作为布局文件的根布局； 想要使用ConstraintLayout，需在项目的build.gradle添加com.android.support.constraint:constraint-layout：XXX版本号依赖； 基础使用ConstraintLayout翻译成中文也称为约束布局，在整个使用体验过程中真的是贯穿约束二字，这一节先来介绍一些基础使用，后面你就会慢慢感受到约束布局的魅力。创建完工程后打开布局文件，底部切换Design的Tab上，可以看到整个操作界面 左上角的面板是放置了系统内置各种各样的控件，想要布局直接拖到到布局文件中即可（所见即所得），右边的面板是选中布局文件中的控件时期各种各样的空间属性，ConstraintLayout最大的好处在于让我们通过拖控件的形式进行布局，并且不用担心适配问题。所以，先来拖个控件试试看，将一个Button拖动到屏幕正中央，然后运行显示看看效果。 而实际运行后却发现，这个Button还是位于屏幕左上角，说好的居中效果呢？这里就要开始引入ConstraintLayout的约束概念，我们切换回去看xml的布局代码，发现了两个问题。第一，布局预览时能够看到显示居中的Button，是因为控件属性设置中引用了两个tools命名空间下的属性。我们都知道，这两个属性只在布局编辑器的预览中有效，实际运行效果是不生效的。 第二，Button标签下有红色波浪线警告，我们把鼠标移到对应位置会发现警告内容，告诉我们Button没有任何约束设置，当前效果只支持预览，实际运行后会返回到左上角去，同时提示我们应该给控件添加约束。如何增加约束？回到Design页面，对着控件上下左右四个原点拖动添加对应的约束即可成功添加约束后，即可得到正常的运行效果了。实际操作不一定要在Tab，也可以直接在Text页面拖动控件添加约束成功实现添加约束后，可以看到Button多了下面几个属性设置 app:layout_constraintBottom_toBottomOf=&quot;parent&quot; 意思是Button底部的布局约束是位于parent的底部，parent是指包裹着它的ConstraintLayout，也可以设置指定某个控件的id，其他类似的属性就不再赘述，以上四个约束联合起来便实现了Button的居中，ConstraintLayout总共有下面这些同类的属性12345678910111213141516171819app:layout_constraintLeft_toLeftOfapp:layout_constraintLeft_toRightOfapp:layout_constraintRight_toLeftOfapp:layout_constraintRight_toRightOfapp:layout_constraintTop_toTopOfapp:layout_constraintTop_toBottomOfapp:layout_constraintBottom_toTopOfapp:layout_constraintBottom_toBottomOfapp:layout_constraintStart_toEndOfapp:layout_constraintStart_toStartOfapp:layout_constraintEnd_toStartOfapp:layout_constraintEnd_toEndOfapp:layout_constraintBaseline_toBaselineOf 你会发现ConstraintLayout非常灵活的把RelativeLayout的活给干了，关于left、right、top、bottom、start、end、baseline的基准可以参照下图如果我想加多一个Button2并且将其放置到原先居中Button的右方并且与其底部对齐，只需如下操作即可并且你也可以发现，Button2依赖与Button后会随着Button的移动而跟着发生相对移动，目的是了保证我设置的依赖，时刻保持Button2就在Button的右边，并且底部对齐。你也可以看到布局文件中也为Button2添加了如下两个属性如果你已经理解上面提到的属性含义，这里应该不会有疑惑。 介绍完上下左右的依赖设置后，下面介绍一些Margin属性，除了Android常见的各种android:layout_marginXXX外，ConstraintLayout自行添加了如下属性123456app:layout_goneMarginBottomapp:layout_goneMarginEndapp:layout_goneMarginLeftapp:layout_goneMarginRightapp:layout_goneMarginStartapp:layout_goneMarginTop 这些设置生效于当依赖的约束对象被设置visibility为gone时。12app:layout_constraintVertical_biasapp:layout_constraintHorizontal_bias 当为目标控件设置好横纵向的约束时（app:layout_constraintLeft_toLeftOf=”parent”、app:layout_constraintRight_toRightOf=”parent”或者app:layout_constraintTop_toTopOf=”parent”、app:layout_constraintBottom_toBottomOf=”parent”），这个两个属性才会生效。实际操作过程中，你会发现对着设置好横纵向约束的Button进行拖动，布局中的layout_constraintHorizontal_bias和layout_constraintVertical_bias会一直发生相应的变化，如果你需要Button居中，那么直接将这两个属性的参数值设置为0.5即可。 进阶使用 这里先补充一个关于ConstraintLayout的知识点，与其他Layout不同之处在于，它的layout_width和layout_height不支持设置match_parent，其属性取值只有以下三种情况： wrap_content； 指定具体dp值； 0dp（match_constraint），代表填充约束之意，注意不要以为和match_parent是一样的； 想想如果没有ConstraintLayout，我们要让一个控件的宽高按某个比例进行布局应该怎么做？有了ConstraintLayout后，我们可以使用layout_constraintDimentionRatio属性设置宽高比例，前提是目标控件的layout_width和layout_height至少有一个设置为0dp，如下让一个ImageView宽高按照2:1的比例显示 layout_constraintDimentionRatio默认参数比例是指宽：高，变成高:宽可以设app:layout_constraintDimensionRatio=”H,2:1”。 ConstraintLayout的链条（Chains）特性非常强大，在没有ConstraintLayout之前，线性布局我们主要都依靠LinearLayout来完成，有了ConstraintLayout之后，它把LinearLayout的活也干了，例如要把按钮水平排成一行，可以这样操作这样ButtonA、B、C就在水平方向形成了一条Chain，并且底部对齐。回去看xml文件，会见到ButtonA新增app:layout_constraintHorizontal_chainStyle的属性设置，这个属性在一条Chain中只会出现在第一个控件中，这个控件是整条Chain的Head。除了水平方向的layout_constraintHorizontal_chainStyle外还有垂直方向的layout_constraintVertical_chainStyle，两者均有spread,spread_inside,packed这三种取值，如果将控件的layout_width和layout_height设置成为0dp，还可以配合layout_constraintHorizontal_weight、layout_constraintVertical_weight两个属性实现和LinearLayout中设置layout_weight相同的效果，具体的操作这里就不再展示了，下面一张图告诉你Chain的强大之处。关于Chain的就介绍到此，进阶的最后一部分再介绍一下Guideline功能，如果我们需要对着屏幕的中轴线进行布局，就可以使用到Guideline进行操作，例如下面两个Button分别分布在中轴线的左右两侧从操作上我们可以看到Guideline也分为垂直和水平两种，并且支持设置在屏幕中所处的位置，可以使用layout_constraintGuide_begin和layout_constraintGuide_end设置具体dp值，也可以使用layout_constraintGuide_percent来设置比例。实际上它也只是一个辅助我们布局的View而已，其源码内部实现也非常简单，并且默认设置了visibility为gone，关于ConstraintLayout的进阶使用便介绍到这里。 总结ConstraintLayout的使用优势 高效布局，Android这么多年以来真正意义上的实现了所见即所得的拖曳方式布局，极大的提高开发效率； 轻松灵活的实现复杂的布局； 解决多重布局嵌套问题，通过前面介绍你会发现ConstraintLayout真的是非常灵活，可以很大程度的避免Layout之间的嵌套； 满足屏幕适配的需求，想想没有ConstraintLayout之前的拖曳式布局，你就知道有多恶心；","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"ConstraintLayout","slug":"ConstraintLayout","permalink":"http://dinson.win/tags/ConstraintLayout/"}]},{"title":"Android全屏／沉浸式状态栏下，各种键盘挡住输入框解决办法","date":"2017-05-10T01:24:17.000Z","path":"2017/05/10/17-05-10/","text":"概述 在开发中，经常会遇到键盘挡住输入框的情况，比如登录界面或注册界面，弹出的软键盘把登录或注册按钮挡住了，用户必须把软键盘收起，才能点击相应按钮，这样的用户体验非常不好。像微信则直接把登录按钮做在输入框的上面，但有很多情况下，这经常满足不了需求。同时如果输入框特别多的情况下，点击输入时，当前输入框没被挡住，但是当前输入框下面的输入框却无法获取焦点，必须先把键盘收起，再去获取下面输入框焦点，这样用户体验也非常不好，那有什么办法呢？ 方法一 非透明状态栏下使用adjustResize和adjustPan，或是透明状态栏下使用fitsSystemWindows=true属性 主要实现方法：在AndroidManifest.xml对应的Activity里添加Android:windowSoftInputMode=”adjustPan”或是android:windowSoftInputMode=”adjustResize”属性 这两种属性的区别，官方的解释是： 属性 描述 adjustResize 该活动的主窗口始终调整大小，以使屏幕上的软键盘的余地。 adjustPan 该活动的主窗口无法调整大小，使软键盘的余地。相反，窗口的内容是自动平移以便当前焦点从来没有遮挡键盘，用户始终可以看到他们正在键入。这是比调整大小，一般是较不可取，因为用户可能需要关闭软键盘在获取和与模糊部分窗口的互动。 这两个属性作用都是为了调整界面使键盘不挡住输入框 ，我这里对这两种属性使用场景、优缺点、注意事项进行了全方面总结，不知大家平时使用时是否注意到了。 属性 注意事项 优缺点 失效情况 适用情况 adjustResize 需要界面本身可调整尺寸，如在布局添加ScrollView，或输入控件属于RecycleView/ListView某一项 优点：1.不会把标题栏顶出当前布局；2.有多项输入时，当前输入框下面的输入框可上下滑动输入缺点：1.需要界面本身可调整尺寸;2. 全屏时失效 1.Activity主窗口尺寸无法调整；2.Activity全屏3.android5.0以上通过style设置沉浸式状态栏模式而不设置fitSystemWindow为true 非全屏或是非沉浸式状态栏输入界面，输入框比较多 adjustPan 页面不会重新布局，当前输入框和键盘会直接将当前输入框以上界面整体向上平移，这样即使界面包含标题栏，也会被顶上去 优点： 使用简单，不需要界面本身可调整尺寸，不会有失效情况 缺点： 会把标题栏顶出当前布局；有多项输入时，当前输入框下面的输入框无法输入，必须收起键盘显示输入框再输入 无 有少量输入项，且输入量居界面上方 fitsSystemWindows 如果多个View设置了fitsSystemWindows=”true”,只有初始的view起作用，都是从第一个设置了fitsSystemWindows的view开始计算padding 优点：使用简单，需要沉浸式状态栏的界面，不需要自己计算padding状态栏的高度缺点：使用有限制 1.View 的其他 padding 值被重新改写了2.手机系统版本&gt;=android 4.4 1.界面全屏2.设置界面主题为沉浸式状态栏 adjustResize失效情况：activity设置了全屏属性指Theme.Light.NotittleBar.Fullscreen(键盘弹起时会将标题栏也推上去)或者设置了activity对应的主题中android:windowTranslucentStatus属性，设置方式为：android:windowTranslucentStatus=true，这时如果对应的页面上含有输入框，将会导致点击输入框时软键盘弹出后键盘覆盖输入框，导致输入框看不见。 fitsSystemWindows=”true”,只有初始的view起作用：如果在布局中不是最外层控件设置fitsSystemWindows=”true”, 那么设置的那个控件高度会多出一个状态栏高度。若有多个view设置了，因第一个view已经消耗掉insect，其他view设置了也会被系统忽略。 假设原始界面是一个LinearLayout包含若干EditText,如下图所示，在分别使用两种属性时的表现。 adjustPan整个界面向上平移，使输入框露出，它不会改变界面的布局；界面整体可用高度还是屏幕高度，这个可以通过下面的截图看出，如点击输入框6,输入框会被推到键盘上方，但输入框1被顶出去了，如果界面包含标题栏，也会被顶出去。 adjustResize 但使用这两种属性，我们可以总结以下几点：1) 使用adjustPan, 如果需要输入的项比较多时，点击输入框，当前输入项会被顶到软键盘上方，但若当前输入框下面还有输入项时，却需要先收起键盘，再点击相应的输入项才能输入。这样操作太繁琐了，对于用户体验不大好；2) adjustResize的使用，需要界面本身可显示的窗口内容能调整，可结合scrollview使用； 方法二 在界面最外层布局包裹ScrollView 只使用ScrollView在相应界面的xml布局中，最外层添加一个ScrollView，不在AndroidMainfest.xml中设置任何android:windowSoftInputMode属性，此时点击输入框，输入框均不会被软键盘档住。即使当前输入框下方也有输入框，在键盘显示的情况下，也可以通过上下滑动界面来输入，而不用先隐藏键盘，点击下方输入框，再显示键盘输入。 我们可以根据Android Studio的Inspect Layout工具来查看界面真正占用的布局高度，工具在通过该工具，我们看到：界面真正能用的高度=屏幕高度-状态栏高度-软键盘高度界面中蓝框是真正界面所用的高度： ScrollView+adjustPan我们再在该类的AndroidMainfest.xml中设置windowSoftInputMode属性为adjustPan1&lt;activity android:name=\".TestInputActivity\" android:windowSoftInputMode=\"adjustPan\"&gt; 发现当前输入框不会被挡住，但是输入框比较多时，在有键盘显示时，界面上下滑动，但只能滑动部分，且如果输入框在界面靠下方时，点击输入框，标题栏也会被顶出去，如下图所示： 我们借助Inspect Layout工具查看此设置布局可用高度，从下图可以看出，此时布局可用高度是屏幕的高度，上下滑动也只是此屏的高度，在输入框9以下的输入框滑不出来，向上滑动，也只能滑到输入框1。 ScrollView+adjustResize我们前面说过adjustResize的使用必须界面布局高度是可变的，如最外层套个ScrollView或是界面可收缩的，才起作用。这里在该类的AndroidMainfest.xml中设置windowSoftInputMode属性为adjustResize1&lt;activity android:name=\".TestInputActivity\" android:windowSoftInputMode=\"adjustResize\"&gt; 发现效果和1不设置任何windowSoftInputMode属性类似，其使用高度也是：屏幕高度-状态栏高度-软键盘高度 我们再来看看windowSoftInputMode默认属性值stateUnspecified: 属性 描述 stateUnspecified 软键盘的状态(隐藏或可见)没有被指定。系统将选择一个合适的状态或依赖于主题的设置 可以看出，系统将选择合适的状态，也就是在界面最外层包含一层ScrollView时，设置默认属性值stateUnspecified其实就是adjustResize属性。 但以下两方面无法满足需求：1) 当Activity设置成全屏fullscreen模式时或是使用沉浸式状态栏时，界面最外层包裹 ScrollView，当输入框超过一屏，当前输入框下面的输入框并不能上下滑动来输入，情况类似于ScrollView+adjustPan，只能滑动部分，通过Inspect Layout也可以看到，界面可用高度是整个屏幕高度，并不会进行调整高度。即使设置adjustResize，也不起作用。2) 如果是类似于注册界面或是登录界面，键盘会挡住输入框下面的登录按钮。 沉浸式状态栏／透明状态栏情况下自android系统4.4(API&gt;=19）就开始支持沉浸式状态栏，当使用觉System windows(系统窗口),显示系统一些属性和操作区域，如 最上方的状态及没有实体按键的最下方的虚拟导航栏。android:fitsSystemWindows=“true”会使得屏幕上的可布局空间位于状态栏下方与导航栏上方 方法三 使用scrollTo方法，当键盘弹起时，让界面整体上移；键盘收起，让界面整体下移使用场景：针对界面全屏或是沉浸式状态栏，输入框不会被键盘遮挡。主要用于一些登录界面，或是需要把界面整体都顶上去的场景。 主要实现步骤 获取Activity布局xml的最外层控件，如xml文件如下： 123456789101112131415161718192021222324252627282930&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:id=\"@+id/main\" tools:context=\"com.example.liubin1.softkeyboardhelper.MainActivity\"&gt; &lt;EditText android:id=\"@+id/name\" android:hint=\"请输入用户名：\" android:layout_centerInParent=\"true\" android:layout_width=\"match_parent\" android:layout_height=\"50dp\" /&gt; &lt;EditText android:id=\"@+id/pas\" android:layout_below=\"@id/name\" android:hint=\"请输入密码：\" android:layout_centerInParent=\"true\" android:layout_width=\"match_parent\" android:layout_height=\"50dp\" /&gt; &lt;Button android:id=\"@+id/login_btn\" android:layout_below=\"@id/rpas\" android:layout_centerHorizontal=\"true\" android:text=\"登录\" android:layout_width=\"180dp\" android:layout_height=\"50dp\" /&gt;&lt;/RelativeLayout&gt; 先获取到最外层控件，再获取到最后一个控件，如上面的xml文件，最后一个控件是Button 12RelativeLayout main = (RelativeLayout) findViewById(R.id.main);Button login_btn = (Button) findViewById(R.id.login_btn); 给最外层控件和最后一个控件添加监听事件 12345678910111213141516171819202122232425262728293031323334//在Activity的onCreate里添加如下方法addLayoutListener(main,login_btn);/** * addLayoutListener方法如下 * @param main 根布局 * @param scroll 需要显示的最下方View */public void addLayoutListener(final View main, final View scroll) &#123; main.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() &#123; @Override public void onGlobalLayout() &#123; Rect rect = new Rect(); //1、获取main在窗体的可视区域 main.getWindowVisibleDisplayFrame(rect); //2、获取main在窗体的不可视区域高度，在键盘没有弹起时，main.getRootView().getHeight()调节度应该和rect.bottom高度一样 int mainInvisibleHeight = main.getRootView().getHeight() - rect.bottom; int screenHeight = main.getRootView().getHeight();//屏幕高度 //3、不可见区域大于屏幕本身高度的1/4：说明键盘弹起了 if (mainInvisibleHeight &gt; screenHeight / 4) &#123; int[] location = new int[2]; scroll.getLocationInWindow(location); // 4､获取Scroll的窗体坐标，算出main需要滚动的高度 int srollHeight = (location[1] + scroll.getHeight()) - rect.bottom; //5､让界面整体上移键盘的高度 main.scrollTo(0, srollHeight); &#125; else &#123; //3、不可见区域小于屏幕高度1/4时,说明键盘隐藏了，把界面下移，移回到原有高度 main.scrollTo(0, 0); &#125; &#125; &#125;);&#125; 实现原理此方法通过监听Activity最外层布局控件来检测软键盘是否弹出，然后去手动调用控件的scrollTo方法达到调整布局目的。 弊端此种方法需要在当前界面写比较多的代码，在某些手机上，若输入时，软键盘高度是可变的，如中英文切换，高度变化时，会发现适配的不大好。如下图：从上图可以看出，如果键盘高度变化，键盘还是会挡住登录按钮。 方法四 适配键盘高度变化情况，当键盘弹起时，让界面整体上移；键盘收起，让界面整体下移此方法主要是通过在需要移动的控件外套一层scrollView，同时最布局最外层使用自定义view监听键盘弹出状态，计算键盘高度，再进行计算需要移动的位置，这个和方法三有点类似，但能适配键盘高度变化情况。 实现步骤 先写自定义View，实时临听界面键盘弹起状态，计算键盘高度 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081public class KeyboardLayout extends FrameLayout &#123; private KeyboardLayoutListener mListener; private boolean mIsKeyboardActive = false; //输入法是否激活 private int mKeyboardHeight = 0; // 输入法高度 public KeyboardLayout(Context context) &#123; this(context, null, 0); &#125; public KeyboardLayout(Context context, AttributeSet attrs) &#123; this(context, attrs, 0); &#125; public KeyboardLayout(Context context, AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); // 监听布局变化 getViewTreeObserver().addOnGlobalLayoutListener(new KeyboardOnGlobalChangeListener()); &#125; public void setKeyboardListener(KeyboardLayoutListener listener) &#123; mListener = listener; &#125; public KeyboardLayoutListener getKeyboardListener() &#123; return mListener; &#125; public boolean isKeyboardActive() &#123; return mIsKeyboardActive; &#125; /** * 获取输入法高度 * * @return */ public int getKeyboardHeight() &#123; return mKeyboardHeight; &#125; public interface KeyboardLayoutListener &#123; /** * @param isActive 输入法是否激活 * @param keyboardHeight 输入法面板高度 */ void onKeyboardStateChanged(boolean isActive, int keyboardHeight); &#125; private class KeyboardOnGlobalChangeListener implements ViewTreeObserver.OnGlobalLayoutListener &#123; int mScreenHeight = 0; private int getScreenHeight() &#123; if (mScreenHeight &gt; 0) &#123; return mScreenHeight; &#125; mScreenHeight = ((WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE)) .getDefaultDisplay().getHeight(); return mScreenHeight; &#125; @Override public void onGlobalLayout() &#123; Rect rect = new Rect(); // 获取当前页面窗口的显示范围 ((Activity) getContext()).getWindow().getDecorView().getWindowVisibleDisplayFrame(rect); int screenHeight = getScreenHeight(); int keyboardHeight = screenHeight - rect.bottom; // 输入法的高度 boolean isActive = false; if (Math.abs(keyboardHeight) &gt; screenHeight / 4) &#123; isActive = true; // 超过屏幕五分之一则表示弹出了输入法 mKeyboardHeight = keyboardHeight; &#125; mIsKeyboardActive = isActive; if (mListener != null) &#123; mListener.onKeyboardStateChanged(isActive, keyboardHeight); &#125; &#125; &#125;&#125; xml文件编写，在界面最外层套上自定义view，在需要滚动的控件外层添加scrollView 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293&lt;com.example.smilexie.softboradblockedittext.util.KeyboardLayout android:id=\"@+id/main_ll\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:background=\"@mipmap/login_bg\" android:orientation=\"vertical\"&gt; &lt;ScrollView android:id=\"@+id/login_ll\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:orientation=\"vertical\"&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginLeft=\"50dp\" android:layout_marginRight=\"50dp\" android:layout_marginTop=\"200dp\" android:background=\"@mipmap/login_input_field_icon\" android:orientation=\"horizontal\"&gt; &lt;ImageView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_gravity=\"center_vertical\" android:layout_marginLeft=\"20dp\" android:background=\"@mipmap/login_yonghuming_icon\" /&gt; &lt;EditText android:id=\"@+id/ui_username_input\" style=\"@style/editext_input_style\" android:layout_marginLeft=\"40dp\" android:layout_marginRight=\"20dp\" android:background=\"@null\" android:hint=\"@string/login_hint_username\" android:imeOptions=\"actionNext\" android:textColor=\"@android:color/white\" android:textColorHint=\"@android:color/white\"&gt; &lt;requestFocus /&gt; &lt;/EditText&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginLeft=\"50dp\" android:layout_marginRight=\"50dp\" android:layout_marginTop=\"20dp\" android:background=\"@mipmap/login_input_field_icon\" android:orientation=\"horizontal\"&gt; &lt;ImageView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_gravity=\"center_vertical\" android:layout_marginLeft=\"20dp\" android:background=\"@mipmap/login_mima_icon\" /&gt; &lt;EditText android:id=\"@+id/ui_password_input\" style=\"@style/editext_input_style\" android:layout_marginLeft=\"40dp\" android:layout_marginRight=\"20dp\" android:background=\"@null\" android:hint=\"@string/login_hint_pwd\" android:imeOptions=\"actionDone\" android:inputType=\"textPassword\" android:textColor=\"@android:color/white\" android:textColorHint=\"@android:color/white\"&gt;&lt;/EditText&gt; &lt;/LinearLayout&gt; &lt;Button android:id=\"@+id/login_btn\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginLeft=\"50dp\" android:layout_marginRight=\"50dp\" android:layout_marginTop=\"20dp\" android:background=\"@mipmap/login_button_bg_icon\" android:text=\"@string/login\" android:textColor=\"@color/titlebar_main_color\" android:textSize=\"@dimen/font_normal\" /&gt; &lt;/LinearLayout&gt; &lt;/ScrollView&gt;&lt;/com.example.smilexie.softboradblockedittext.util.KeyboardLayout&gt; Activity调用，自定义view控件添加键盘响应，在键盘变化时调用scrollView的smoothScrollTo去滚动界面 1234567891011121314151617181920212223242526272829/** * 监听键盘状态，布局有变化时，靠scrollView去滚动界面 */public void addLayoutListener() &#123; bindingView.mainLl.setKeyboardListener(new KeyboardLayout.KeyboardLayoutListener() &#123; @Override public void onKeyboardStateChanged(boolean isActive, int keyboardHeight) &#123; Log.e(\"onKeyboardStateChanged\", \"isActive:\" + isActive + \" keyboardHeight:\" + keyboardHeight); if (isActive) &#123; scrollToBottom(); &#125; &#125; &#125;); &#125; /** * 弹出软键盘时将SVContainer滑到底 */ private void scrollToBottom() &#123; bindingView.loginLl.postDelayed(new Runnable() &#123; @Override public void run() &#123; bindingView.loginLl.smoothScrollTo(0, bindingView.loginLl.getBottom() + SoftKeyInputHidWidget.getStatusBarHeight(LoginActivityForDiffkeyboardHeight.this)); &#125; &#125;, 100); &#125;&#125; 具体实现代码见demo中的LoginActivityForDiffkeyboardHeight类。实现效果如下：可以看到键盘高度变化了，也不会影响界面布局 方法五 监听Activity顶层View，判断软键盘是否弹起，对界面重新绘制使用场景：针对界面全屏或是沉浸式状态栏，界面包含比较多输入框，界面即使包裹了一层ScrollView,在键盘显示时，当前输入框下面的输入不能通过上下滑动界面来输入。 实现步骤 把SoftHideKeyBoardUtil类复制到项目中； 在需要使用的Activity的onCreate方法中添加：SoftHideKeyBoardUtil.assistActivity(this);即可。 实现原理SoftHideKeyBoardUtil类具体代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869/** * 解决键盘档住输入框 * Created by SmileXie on 2017/4/3. */public class SoftHideKeyBoardUtil &#123; public static void assistActivity (Activity activity) &#123; new SoftHideKeyBoardUtil(activity); &#125; private View mChildOfContent; private int usableHeightPrevious; private FrameLayout.LayoutParams frameLayoutParams; //为适应华为小米等手机键盘上方出现黑条或不适配 private int contentHeight;//获取setContentView本来view的高度 private boolean isfirst = true;//只用获取一次 private int statusBarHeight;//状态栏高度 private SoftHideKeyBoardUtil(Activity activity) &#123; //1､找到Activity的最外层布局控件，它其实是一个DecorView,它所用的控件就是FrameLayout FrameLayout content = (FrameLayout) activity.findViewById(android.R.id.content); //2､获取到setContentView放进去的View mChildOfContent = content.getChildAt(0); //3､给Activity的xml布局设置View树监听，当布局有变化，如键盘弹出或收起时，都会回调此监听 mChildOfContent.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() &#123; //4､软键盘弹起会使GlobalLayout发生变化 public void onGlobalLayout() &#123; if (isfirst) &#123; contentHeight = mChildOfContent.getHeight();//兼容华为等机型 isfirst = false; &#125; //5､当前布局发生变化时，对Activity的xml布局进行重绘 possiblyResizeChildOfContent(); &#125; &#125;); //6､获取到Activity的xml布局的放置参数 frameLayoutParams = (FrameLayout.LayoutParams) mChildOfContent.getLayoutParams(); &#125; // 获取界面可用高度，如果软键盘弹起后，Activity的xml布局可用高度需要减去键盘高度 private void possiblyResizeChildOfContent() &#123; //1､获取当前界面可用高度，键盘弹起后，当前界面可用布局会减少键盘的高度 int usableHeightNow = computeUsableHeight(); //2､如果当前可用高度和原始值不一样 if (usableHeightNow != usableHeightPrevious) &#123; //3､获取Activity中xml中布局在当前界面显示的高度 int usableHeightSansKeyboard = mChildOfContent.getRootView().getHeight(); //4､Activity中xml布局的高度-当前可用高度 int heightDifference = usableHeightSansKeyboard - usableHeightNow; //5､高度差大于屏幕1/4时，说明键盘弹出 if (heightDifference &gt; (usableHeightSansKeyboard/4)) &#123; // 6､键盘弹出了，Activity的xml布局高度应当减去键盘高度 if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT)&#123; frameLayoutParams.height = usableHeightSansKeyboard - heightDifference + statusBarHeight; &#125; else &#123; frameLayoutParams.height = usableHeightSansKeyboard - heightDifference; &#125; &#125; else &#123; frameLayoutParams.height = contentHeight; &#125; //7､ 重绘Activity的xml布局 mChildOfContent.requestLayout(); usableHeightPrevious = usableHeightNow; &#125; &#125; private int computeUsableHeight() &#123; Rect r = new Rect(); mChildOfContent.getWindowVisibleDisplayFrame(r); // 全屏模式下：直接返回r.bottom，r.top其实是状态栏的高度 return (r.bottom - r.top); &#125;&#125; 原理分析( 1 ) 找到Activity的最外层布局控件，我们知道所有的Activity都是DecorView，它就是一个FrameLayout控件，该控件id是系统写死叫R.id.content，就是我们setContentView时，把相应的View放在此FrameLayout控件里1FrameLayout content = (FrameLayout) activity.findViewById(android.R.id.content); 所以content.getChildAt(0)获取到的mChildOfContent，也就是我们用setContentView放进去的View。 ( 2 ) 给我们的Activity的xml布局View设置一个Listener监听123mChildOfContent.getViewTreeObserver().addOnGlobalLayoutListener(&#123; possiblyResizeChildOfContent();&#125;); View.getViewTreeObserver()可以获取一个ViewTreeObserver对象——它是一个观察者，用以监听当前View树所发生的变化。这里所注册的addOnGlobalLayoutListener，就是会在当前的View树的全局布局（GlobalLayout）发生变化、或者其中的View可视状态有变化时，进行通知回调。『软键盘弹出/隐 』都能监听到。 ( 3 ) 获取当前界面可用高度123456private int computeUsableHeight() &#123; Rect rect = new Rect(); mChildOfContent.getWindowVisibleDisplayFrame(rect); // rect.top其实是状态栏的高度，如果是全屏主题，直接 return rect.bottom就可以了 return (rect.bottom - rect.top);&#125; 如下图所示： ( 4 ) 重设高度， 我们计算出的可用高度，是目前在视觉效果上能看到的界面高度。但当前界面的实际高度是比可用高度要多出一个软键盘的距离的。 注意：如果既使用了沉浸式状态栏，又加了fitSystetemWindow=true属性，就需要在AndroidMainfest.xml注册Activity的地方添加上以下属性。因为你两种都用，系统不知道用哪种了。fitSystetemWindow已经有resize屏幕的作用。 总结下面对上面几种方法进行对比： 方法一：优点：使用简单，只需在Activity的AndroidMainfest.xml中设置windowSoftInput属性即可。注意点：adjustResize属性必须要界面大小可以自身改变；缺点：当输入框比较多时，当前输入框下方的输入框会初键盘挡住，须收起键盘再进入输入；使用adjustPan，输入框较多时，因它是把界面当成一个整体，只会显示一屏的高度，会把ActionBar顶上去。 方法二：优点：使用简单，只需在Activity的最外层布局包裹一个ScrollView即可。注意点：不可使用adjustPan属性，否则ScrollView失效；缺点：对于全屏时，在键盘显示时，无法上下滑动界面达到输入的目的； 方法三：优点：可以解决全屏时，键盘挡入按钮问题。缺点：只要有此需求的Activity均需要获取到最外层控件和最后一个控件，监测键盘是否弹出，再调用控件的scrollTo方法对界面整体上移或是下移。代码冗余。对于键盘高度变化时，适配不好。 方法四：优点：可以解决全屏时，键盘挡入按钮问题。缺点：只要有此需求的Activity均需要获取到最外层控件和最后一个控件，布局多出一层。 方法五：优点：可以解决全屏时，键盘挡入输入框问题。只需要写一个全局类，其他有需求的界面直接在onCreate方法里调用此类的全局方法，即可。缺点：多用了一个类。 综上所述： 当输入框比较少时，界面只有一个输入框时，可以通过方法一设置adjustPan； 如果对于非全屏/非沉浸式状态栏需求，只需要使用方法二ScrollView+adjustResize； 如果对于使用沉浸式状态栏，使用fitSystemWindow=true属性，按道理android系统已经做好适配，键盘不会挡住输入框； 如果全屏/沉浸式状态栏界面，类似于登录界面，有需要把登录键钮或是评论按钮也顶起，如果键盘没有变化需求，可以使用方法三，若需要适配键盘高度变化，则需要使用方法四； 如果界面使用全屏或沉浸式状态栏，没有使用fitSystemWindow=true属性，一般如需要用到抽屈而且状态栏颜色也需要跟着变化，则选择方法五更恰当。","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"Android软键盘","slug":"Android软键盘","permalink":"http://dinson.win/tags/Android软键盘/"}]},{"title":"Android双缓冲绘图技术分析","date":"2017-05-09T15:12:42.000Z","path":"2017/05/09/17-05-09/","text":"概述 双缓冲、多缓冲技术在计算机科学中其实是一个广义的概念，不过其本质上的意思都是差不多的。今天我们就来讲一讲双缓冲技术在android绘图中的应用。所谓的双缓冲技术其实就是当程序需要在指定的View上进行绘制时，程序并不需要直接绘制到该View组件，而是先绘制到一个内存中的Bitmap图片上（就是缓冲），等内存中的Bitmap绘制好之后，再一次性将Bitmap绘制到View组件上。当进行复杂的绘制操作时会导致呈现的图像闪烁或具有 其他不可接受的外观。双缓冲的使用解决这些问题。双缓冲使用内存缓冲区来解决由多重 绘制操作造成的闪烁问题。当使用双缓冲时，首先在内存缓冲区里完成所有绘制操作，而 不是在屏幕上直接进行绘图。当所有绘制操作完成后，把内存缓冲区完成的图像直接复制 到屏幕。因为在屏幕上只执行一个图形操作，所以消除了由复杂绘制操作造成的图像闪烁 问题。 Android绘图中的双缓冲我们知道，我们在绘图时有两样东西是少不了的，一个是Canvas（画布），一个是Paint(画笔）。Canvas提供画各种图形的方法，如画圆（drawCircle)，画矩形（drawRect）等等，Paint用来设置画笔的样式，比如笔的粗细，颜色等。每个Canvas内部持有一个Bitmap对象的引用，画图的过程其实就是往这个Bitmap当中写入ARGB信息。比如我们现在自定义一个View,在上面画一个矩形和一个圆：12345@Overrideprotected void onDraw(Canvas canvas) &#123; canvas.drawRect(rect,mPaint); canvas.drawCircle(cx,cy,100,mPaint);&#125; 那么现在有一个问题，画矩形和画圆是两个独立的动作，会不会在drawRect执行完之后屏幕上马上就会显示出来一个矩形呢？为了验证我们的猜想，我们在两个绘图动作中加一个sleep:12345678910@Overrideprotected void onDraw(Canvas canvas) &#123; canvas.drawRect(rect,mPaint); try &#123; TimeUnit.MILLISECONDS.sleep(2000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; canvas.drawCircle(cx,cy,100,mPaint);&#125; 我们会看到，并不是先显示矩形再显示圆，而是两个几乎同时一起显示出来的。这就说明必须要等onDraw方法执行完成之后，才会把数据交给GPU去处理展示。这就是android绘图当中的第一道缓冲，即显示缓冲区。 而所谓的双缓冲，在android绘图中其实就是再创建一个Canvas和对应的Bitmap，然后在onDraw方法里默认的Canvas通过drawBitmap画刚才new的那个bitmap从而实现双缓冲。用代码简单的表述是这样的：12345678910111213141516private void init()&#123; Bitmap bufferBm = Bitmap.create(getWidth,getHeight,Bitmap.Config.ARGB_8888); Canvas bufferCanvas = new Canvas(bufferBm);&#125;private void drawSomething()&#123; bufferCanvas.drawRect(); bufferCanvas.drawCircle(); ... invalidate();&#125;@Overrideprotected void onDraw(Canvas canvas) &#123; canvas.drawBitmap(bufferBm,0,0,null);&#125; 示意图： 双缓冲绘图的优缺点及适用场景我们通过一个例子来说明。实现这样一个功能，一个自定义View,每次点击的时候在点击处画一个圆。我们先不使用双缓冲来实现： 不用双缓冲的代码123456789101112131415161718192021222324252627282930313233343536373839public class MyView extends View&#123; private Paint mPaint; private List&lt;Point&gt; mPoints; public MyView(Context context) &#123; super(context); &#125; public MyView(Context context, AttributeSet attrs) &#123; super(context, attrs); mPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG); mPaint.setStyle(Paint.Style.FILL); mPaint.setColor(Color.GREEN); setBackgroundColor(Color.WHITE); mPoints = new ArrayList&lt;&gt;(); &#125; @Override public boolean onTouchEvent(MotionEvent event) &#123; int action = event.getAction(); switch (action)&#123; case MotionEvent.ACTION_DOWN: mPoints.add(new Point((int)event.getX(),(int)event.getY())); break; case MotionEvent.ACTION_UP: invalidate(); break; &#125; return true; &#125; @Override protected void onDraw(Canvas canvas) &#123; for (Point p : mPoints) &#123; canvas.drawCircle(p.x,p.y,50,mPaint); &#125; &#125;&#125; 在实验之前，我们先打开开发者选项里的”GPU呈现模式分析“，设置为“在屏幕上显示为条形图”。可以看到，当画的圆数目比较少时，GPU的负荷较低，但是出现一个逐步上升的趋势： 当画的圆数目增加到比较大时，GPU负荷有点惨不妨睹了： 我们现在改用双缓冲来绘图，代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344public class MyView extends View&#123; private Paint mPaint; private Canvas mBufferCanvas; private Bitmap mBufferBitmap; public MyView(Context context) &#123; super(context); &#125; public MyView(Context context, AttributeSet attrs) &#123; super(context, attrs); mPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG); mPaint.setStyle(Paint.Style.FILL); mPaint.setColor(Color.GREEN); setBackgroundColor(Color.WHITE); &#125; @Override public boolean onTouchEvent(MotionEvent event) &#123; int action = event.getAction(); switch (action)&#123; case MotionEvent.ACTION_DOWN: if (mBufferBitmap == null) &#123; mBufferBitmap = Bitmap.createBitmap(getWidth(),getHeight(), Bitmap.Config.ARGB_8888); mBufferCanvas = new Canvas(mBufferBitmap); &#125; mBufferCanvas.drawCircle((int)event.getX(),(int)event.getY(),50,mPaint); break; case MotionEvent.ACTION_UP: invalidate(); break; &#125; return true; &#125; @Override protected void onDraw(Canvas canvas) &#123; if (mBufferBitmap == null) &#123; return; &#125; canvas.drawBitmap(mBufferBitmap,0,0,null); &#125;&#125; 使用双缓冲，在数量较小时的GPU使用情况是这样的： 使用双缓冲，在数量非常大的时候，GPU使用情况是这样的： 从上面的实验数据我们可以得出结论： 在绘制数据量较小时，不使用双缓冲，GPU的负荷更低，即绘制性能更高； 在绘制数据量较大时，使用双缓冲绘图，绘制性能明显高于不使用双缓冲的情况； 使用双缓冲会增加内存消耗。 其实上面的结论也很好理解，就像上面举的搬砖的例子，如果砖少的话，用车来拉明显是划不来的，砖的数量很多的时候，用车来拉就可以节省很多时间，但是用车就要消耗额外的资源，这就需要根据不同的情况做出正确的选择。","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"优化","slug":"优化","permalink":"http://dinson.win/tags/优化/"},{"name":"自定义控件","slug":"自定义控件","permalink":"http://dinson.win/tags/自定义控件/"}]},{"title":"你真的了解SharedPreferences吗？","date":"2017-05-08T14:50:54.000Z","path":"2017/05/08/17-05-08/","text":"SharedPreferences踩坑 在日常开发中SharedPreferences想必肯定是经常被我们使用的了，通常情况下使用它并不会发生什么问题，但是假如遇到了在不同进程中使用SharedPreferences（例如指定了process的activity/service），那坑就来了。 这里我们可以实验一下，创建两个Activity，在AndroidManifest其中一个将其process指定为second进程 代码比较简单，就是将输入框的内容存入到SharedPreferences中，并显示到TextView上，点击跳转按钮跳转到SecondActivity SecondActivity就是点击按钮获取SharedPreferences的值并显示到TextView，不过这里要注意它是运行在不同的进程中的。 这里我们将值改为hello，然后点击修改，可以看到SharedPreferences的值已经改成功了。 然后我们跳转到SecondActivity并获取值， 一切正常，好现在我们回到MainActivity，并再次修改SharedPreferences中的值， 可以看到SharedPreferences的值已经再次被修改成功，这时我们再跳转到SecondActivity并获取值， 不管怎么获取都是之前的值，然后重启app，再进入SecondActivity，便又能获取到正确的值了。-SecondActivity(重启app后)- 这里我们先总结一下结论 先启动主进程并获取SharedPreferences对象，然后启动其他进程并获取SharedPreferences对象，那么此时对SharedPreferences的数值进行修改均不能对其他进程产生作用。 先启动主进程并获取SharedPreferences对象，然后对值进行修改，然后启动其他进程并获取SharedPreferences对象，能取得修改后的值，但此时如果再对此值进行修改，均不能对其他进程产生作用。 总结下来就是，其他进程在启动时获取到的SharedPreferences的值只能是这个进程启动前这个值的最后值，即在进程启动后对值的修改只对当前进程有效，须等到进程重启或者app重启才能与其他进程进行“同步”。 这里即使把获取SharedPreferences对象的模式改为MODE_MULTI_PROCESS，也仅仅是在Android 3.0以下才有效，在Android 3.0以上也是一样不行的。 那么为什么会这样子呢，笔者带大家从源码的角度来分析一下，我们来看一下关于SharedPreferences的源码。 源码分析通常我们获取SharedPreferences对象一般是这样123SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);//或者这样SharedPreferences sharedPreferences = getSharedPreferences(\"name\", Context.MODE_PRIVATE); 实际上PreferenceManager.getDefaultSharedPreferences(context)方法也是对getSharedPreferences做了封装 所以不管通过哪种方式，最终都是通过Context中的getSharedPreferences方法来获取SharedPreferences对象，在Context中，getSharedPreferences方法是一个抽象方法，没有具体实现。12public abstract SharedPreferences getSharedPreferences(String name, int mode); 我们知道Context的实现类其实就是ContextImpl，所以这里我们直接去到ContextImpl的getSharedPreferences方法中， 这里比较简单，先判断了ArrayMap中是否存在该File对象，不存在则创建一个并放入ArrayMap，然后调用getSharedPreferences的重载方法getSharedPreferences(file, mode)，我们看一下这个方法的源码 可以看到，这里将SharedPreferences的实例对象SharedPreferencesImpl缓存起来，以后每次获取如果内存中已经存在那么直接返回，如果不存在才会进行重新创建; 那么这里我们可以有个猜想，即是否只有在创建SharedPreferences对象的时候才会从磁盘中进行读取，读取后的值保存在了内存中，获取SharedPreferences对象优先从缓存中获取，再次创建时才会重新从磁盘中再次读取文件。 我们直接看一下SharedPreferencesImpl的源码，验证一下我们的猜想。 可以看到，在SharedPreferencesImpl的构造方法中调用了startLoadFromDisk，startLoadFromDisk方法中开启了一个线程加载磁盘中的文件，loadFromDisk源码如下 看到这里，已经逐步验证了我们之前的猜想，在构造方法中读取了磁盘文件的内容并赋值给了成员变量mMap集合，我们只需要看看所有的get方法是不是从mMap成员变量中获取值就能完全验证我们的猜想是否正确，因为get方法都大同小异，所以我们就只分析一下getString方法就可以了。 可以看到，果然是这样的，从mMap集合中直接取出值进行返回，那么看到这里肯定会有个疑问，为什么在同个进程却又没有问题呢，或者其他进程对SharedPreferences的获取在值修改完毕之后也没有问题，这里我们看一下SharedPreferencesImpl的内部类EditorImpl的源码，EditorImpl是Editor的实现类。 可以看到，EditorImpl内部有一个mModified的Map成员变量，我们所有的修改在调用了commit或者apply方法后才会执行保存，可以看到，不管调用哪个方法都会调用commitToMemory()和enqueueDiskWrite方法，那么我们看一下这两个方法的源码 其实通过方法名我们也可以猜到，就是将值提交到内存，从代码上也可以看出来，就是将Editor的所有put进去的值添加到SharedPreferences的mMap成员变量中。 那么最后将内容写入磁盘的方法就是enqueueDiskWrite了，我们看一下它的源码 源码比较简单，其中最主要的就是区分了apply方法调用和commit的调用,apply调用的话会将写入磁盘的任务加入到一个线程池中在后台运行，直接commit的话则会在当前线程进行写入。 总结整个获取SharedPreferences对象过程的流程图如下","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"SharedPreferences","slug":"SharedPreferences","permalink":"http://dinson.win/tags/SharedPreferences/"}]},{"title":"全世界最著名的 icons 网站都在这了","date":"2017-05-05T02:45:52.000Z","path":"2017/05/05/17-05-05/","text":"概述 分享几个高逼格，免费的icons网站 icons8icons8：拥有 48,900 个免费图标，提供各个平台的基础图标与分类图标，其特色是大小和颜色随意自定义。 iconfindericonfinder：哥本哈根一个团队做的 icon 专业图标网站，拥有 1,667,626 个图标和 40,113 图标集，是最专业的 icon 图标网站之一。 iconfonticonfont：国内功能很强大且图标内容很丰富的矢量图标库,提供矢量图标下载、在线存储、格式转换等功能，是阿里妈妈 MUX 组业余时间做的的矢量图标管理、交流平台。 Font-AwesomeFont-Awesome：一套专门为 Twitter Boostrap 设计的图标字体库。这套图标字体集几乎囊括了网页中可能用到的所有图标，除了包括 Twitter Boostrap 的默认图标外，还有社交网络图标、Web 应用程序图标和编辑器图标等等，可以免费用于商业项目。 iconstoreiconstore：Icon Store 提供高质量的免费的/收费的图标，包括卡通风格图标，极简主义图标，扁平化设计风格图标，手绘风格图标，像素风格图标等等，也包括各种类型主题图标，比如圣诞节主题图标，情人节主题图标，天气图标，办公室图标,动物图标，美容美发图标等等。 Material iconsMaterial icons：Google 官方的扁平化图标手册，收集了多达10,000+图标，包括了网页，排版，音频，商务等等主题的绝大多数图标。格式包括SVG,PNG,ICON,以及字体图标，你可以在网页中轻松引用图标。 swifticonsswifticons：覆盖 20 个大类包含 2,264 个高质量图标 flat-icon-designflat-icon-design：一个日本的免费扁平化设计图示网站，总数量大约有 500 个左右！网站提供的图示风格设计都很简约、可爱，非常适合使用于网页设计、应用程序开发或投影片报告，而且这些图示明确标示为「可以作为商业用途」，网站开放 Illustrator AI、EPS、JPEG、PNG 和 SVG 五种格式下载。 Noun ProjectNoun Project：国外三位设计师 2010 创建一个收录、并可免费使用高清符号图示的媒体库，包含25个语言版本，每天都有来自世界各地的设计师提交新 icon。 FlaticonFlaticon：搜索海量扁平化图标，让图标搜索和转换变得非常简单和快速，并提供常用格式 SVG、PSD 源文件和 PNG 下载。","categories":[{"name":"UI设计","slug":"UI设计","permalink":"http://dinson.win/categories/UI设计/"}],"tags":[{"name":"UI","slug":"UI","permalink":"http://dinson.win/tags/UI/"},{"name":"设计师","slug":"设计师","permalink":"http://dinson.win/tags/设计师/"}]},{"title":"Android Studio 打包时Signature Version V1 V2","date":"2017-04-18T01:00:16.000Z","path":"2017/04/18/17-04-18/","text":"前几天更新了一下Android Studio ,今天在打正式包的时候发现多了个签名版本选择： 从图中可以看到多了签名版本的选择，因为刚开始默认勾选的v2(Full APK Signature)，没多想一路下一步下去，结果在测试机上（5.0.1）一直都安装失败，想着和那个选择签名版本有关系，那就查查吧。 问题描述 Android 7.0中引入了APK Signature Scheme v2，v1呢是jar Signature来自JDK V1：应该是通过ZIP条目进行验证，这样APK 签署后可进行许多修改，可以移动甚至重新压缩文件。V2：验证压缩文件的所有字节，而不是单个 ZIP 条目，因此，在签名后无法再更改(包括 zipalign)。正因如此，现在在编译过程中，我们将压缩、调整和签署合并成一步完成。好处显而易见，更安全而且新的签名可缩短在设备上进行验证的时间（不需要费时地解压缩然后验证），从而加快应用安装速度。 解决方案一v1和v2的签名使用只勾选v1签名并不会影响什么，但是在7.0上不会使用更安全的验证方式只勾选V2签名7.0以下会直接安装完显示未安装，7.0以上则使用了V2的方式验证同时勾选V1和V2则所有机型都没问题 解决方案二在app的build.gradle的android标签下加入如下12345678910signingConfigs &#123; debug &#123; v1SigningEnabled true v2SigningEnabled true &#125; release &#123; v1SigningEnabled true v2SigningEnabled true &#125; &#125;","categories":[{"name":"Android庶系","slug":"Android庶系","permalink":"http://dinson.win/categories/Android庶系/"}],"tags":[{"name":"AS","slug":"AS","permalink":"http://dinson.win/tags/AS/"},{"name":"签名","slug":"签名","permalink":"http://dinson.win/tags/签名/"}]},{"title":"Minimum supported Gradle version is 3.3. Current version is 2.14.1","date":"2017-04-17T10:31:16.000Z","path":"2017/04/17/17-04-17/","text":"最近gradle更新到了3.3，studio 每次重新进入项目都会提醒更新，于是手贱便点击了update。点击更新后发现我的项目就瘫痪了，但是打开其他的项目发现并没有出现什么问题。结果就是自己挖的坑把自己埋了一天半，在这记录一下 首先要搞懂两个概念，gradle版本和gradle插件版本，比如我现在as升级到了2.3，那么2.3就是gradle版本，2.14.1就是gradle插件版本，这两个概念的一一对应的，而之所以出现这个报错信息，就是因为当前项目的gradle插件版本是2.14.1，而gradle2.3对应的插件版本就是3.3，所以导致了报错。（gradle2.2.3对应的插件版本是2.14.1）那应该怎么解决呢？ 首先我们先查看一下gradle版本，打开根目录的build.gradle文件，框选的即为当前项目的gradle版本 再来看一下gradle插件版本，打开gradle/wrapper/gradle-wrapper.properties文件，框选的即为gradle插件版本 这里我们是修改了gradle版本，即在build.gradle中把2.3改为了2.2.0，当然我们也可以修改gradle插件的版本，在gradle-wrapper.properties文件中把2.14.1改为3.3，这时候联网下载gradle3.3插件的时候会非常慢，其实我们可以直接从网上下载好对应的gradle-3.3-all.zip包，然后直接放在C:\\Users\\用户名.gradle\\wrapper\\dists\\gradle-3.3-all\\xxxxxxxxxxxxxx文件下（这里注意不要解压缩），然后重新编译就可以了~ 对应关系","categories":[{"name":"Android庶系","slug":"Android庶系","permalink":"http://dinson.win/categories/Android庶系/"}],"tags":[{"name":"AS","slug":"AS","permalink":"http://dinson.win/tags/AS/"},{"name":"Gradle","slug":"Gradle","permalink":"http://dinson.win/tags/Gradle/"},{"name":"异常","slug":"异常","permalink":"http://dinson.win/tags/异常/"}]},{"title":"查看Android应用包名、Activity的几个方法","date":"2016-07-25T12:49:20.000Z","path":"2016/07/25/16-07-25/","text":"概述 使用自动化测试工具monkeyrunner启动应用时，需要填写被测程序的包名和启动的Activity，以下有两种查看应用包名package和入口activity名称的方法： 有源码情况直接打开AndroidManifest.xml文件，找到包含Android.intent.action.MAIN和android.intent.category.LAUNCHER对应的activity。 如下图中第三行package为com.cola.ui，第七行主Activity为com.cola.ui.ColaBox(.ColaBox为Activity简写方式)。 只有Apk的情况aapt使用命令行aapt dump xmltree xxxxxx.apk AndroidManifest.xml aapt使用命令行aapt dump badging xxxxxx.apk 反编译使用反编译工具apktool，反编译后打开AndroidManifest.xml文件，查找方式同“有源码情况”反编译传送门 没有apk，应用已经安装到手机或虚拟机中logcat 清除logcat内容，使用命令adb logcat -c 启动logcat，使用命令adb logcat ActivityManager:I *:s 启动要查看的程序 dumpsys 启动要查看的程序； 命令行输入：adb shell dumpsys window w |findstr \\/ |findstr name=","categories":[{"name":"Android庶系","slug":"Android庶系","permalink":"http://dinson.win/categories/Android庶系/"}],"tags":[{"name":"应用包名","slug":"应用包名","permalink":"http://dinson.win/tags/应用包名/"}]},{"title":"Android keycode","date":"2016-07-21T10:44:33.000Z","path":"2016/07/21/16-07-21/","text":"概述 Android 常用按键大全 电话键 键名 描述 键值 KEYCODE_CALL 拨号键 5 KEYCODE_ENDCALL 挂机键 6 KEYCODE_HOME 按键Home 3 KEYCODE_MENU 菜单键 82 KEYCODE_BACK 返回键 4 KEYCODE_SEARCH 搜索键 84 KEYCODE_CAMERA 拍照键 27 KEYCODE_FOCUS 拍照对焦键 80 KEYCODE_POWER 电源键 26 KEYCODE_NOTIFICATION 通知键 83 KEYCODE_MUTE 话筒静音键 91 KEYCODE_VOLUME_MUTE 扬声器静音键 164 KEYCODE_VOLUME_UP 音量增加键 24 KEYCODE_VOLUME_DOWN 音量减小键 25 ##控制键 键名 描述 键值 KEYCODE_ENTER 回车键 66 KEYCODE_ESCAPE ESC键 111 KEYCODE_DPAD_CENTER 导航键 确定键 23 KEYCODE_DPAD_UP 导航键 向上 19 KEYCODE_DPAD_DOWN 导航键 向下 20 KEYCODE_DPAD_LEFT 导航键 向左 21 KEYCODE_DPAD_RIGHT 导航键 向右 22 KEYCODE_MOVE_HOME 光标移动到开始键 122 KEYCODE_MOVE_END 光标移动到末尾键 123 KEYCODE_PAGE_UP 向上翻页键 92 KEYCODE_PAGE_DOWN 向下翻页键 93 KEYCODE_DEL 退格键 67 KEYCODE_FORWARD_DEL 删除键 112 KEYCODE_INSERT 插入键 124 KEYCODE_TAB Tab键 61 KEYCODE_NUM_LOCK 小键盘锁 143 KEYCODE_CAPS_LOCK 大写锁定键 115 KEYCODE_BREAK Break/Pause键 121 KEYCODE_SCROLL_LOCK 滚动锁定键 116 KEYCODE_ZOOM_IN 放大键 168 KEYCODE_ZOOM_OUT 缩小键 169 组合键 键名 描述 KEYCODE_ALT_LEFT Alt+Left KEYCODE_ALT_RIGHT Alt+Right KEYCODE_CTRL_LEFT Control+Left KEYCODE_CTRL_RIGHT Control+Right KEYCODE_SHIFT_LEFT Shift+Left KEYCODE_SHIFT_RIGHT Shift+Right 基本 键名 描述 键值 KEYCODE_0 按键’0’ 7 KEYCODE_1 按键’1’ 8 KEYCODE_2 按键’2’ 9 KEYCODE_3 按键’3’ 10 KEYCODE_4 按键’4’ 11 KEYCODE_5 按键’5’ 12 KEYCODE_6 按键’6’ 13 KEYCODE_7 按键’7’ 14 KEYCODE_8 按键’8’ 15 KEYCODE_9 按键’9’ 16 KEYCODE_A 按键’A’ 29 KEYCODE_B 按键’B’ 30 KEYCODE_C 按键’C’ 31 KEYCODE_D 按键’D’ 32 KEYCODE_E 按键’E’ 33 KEYCODE_F 按键’F’ 34 KEYCODE_G 按键’G’ 35 KEYCODE_H 按键’H’ 36 KEYCODE_I 按键’I’ 37 KEYCODE_J 按键’J’ 38 KEYCODE_K 按键’K’ 39 KEYCODE_L 按键’L’ 40 KEYCODE_M 按键’M’ 41 KEYCODE_N 按键’N’ 42 KEYCODE_O 按键’O’ 43 KEYCODE_P 按键’P’ 44 KEYCODE_Q 按键’Q’ 45 KEYCODE_R 按键’R’ 46 KEYCODE_S 按键’S’ 47 KEYCODE_T 按键’T’ 48 KEYCODE_U 按键’U’ 49 KEYCODE_V 按键’V’ 50 KEYCODE_W 按键’W’ 51 KEYCODE_X 按键’X’ 52 KEYCODE_Y 按键’Y’ 53 KEYCODE_Z 按键’Z’ 54 符号 键名 描述 KEYCODE_PLUS 按键’+’ KEYCODE_MINUS 按键’-‘ KEYCODE_STAR 按键’*’ KEYCODE_SLASH 按键’/‘ KEYCODE_EQUALS 按键’=’ KEYCODE_AT 按键’@’ KEYCODE_POUND 按键’#’ KEYCODE_APOSTROPHE 按键’’’ (单引号) KEYCODE_BACKSLASH 按键’\\’ KEYCODE_COMMA 按键’,’ KEYCODE_PERIOD 按键’.’ KEYCODE_LEFT_BRACKET 按键’[‘ KEYCODE_RIGHT_BRACKET 按键’]’ KEYCODE_SEMICOLON 按键’;’ KEYCODE_GRAVE 按键’`’ KEYCODE_SPACE 空格键 小键盘 键名 描述 KEYCODE_NUMPAD_0 小键盘按键’0’ KEYCODE_NUMPAD_1 小键盘按键’1’ KEYCODE_NUMPAD_2 小键盘按键’2’ KEYCODE_NUMPAD_3 小键盘按键’3’ KEYCODE_NUMPAD_4 小键盘按键’4’ KEYCODE_NUMPAD_5 小键盘按键’5’ KEYCODE_NUMPAD_6 小键盘按键’6’ KEYCODE_NUMPAD_7 小键盘按键’7’ KEYCODE_NUMPAD_8 小键盘按键’8’ KEYCODE_NUMPAD_9 小键盘按键’9’ KEYCODE_NUMPAD_ADD 小键盘按键’+’ KEYCODE_NUMPAD_SUBTRACT 小键盘按键’-‘ KEYCODE_NUMPAD_MULTIPLY 小键盘按键’*’ KEYCODE_NUMPAD_DIVIDE 小键盘按键’/‘ KEYCODE_NUMPAD_EQUALS 小键盘按键’=’ KEYCODE_NUMPAD_COMMA 小键盘按键’,’ KEYCODE_NUMPAD_DOT 小键盘按键’.’ KEYCODE_NUMPAD_LEFT_PAREN 小键盘按键’(‘ KEYCODE_NUMPAD_RIGHT_PAREN 小键盘按键’)’ KEYCODE_NUMPAD_ENTER 小键盘按键回车 功能键 键名 描述 KEYCODE_F1 按键F1 KEYCODE_F2 按键F2 KEYCODE_F3 按键F3 KEYCODE_F4 按键F4 KEYCODE_F5 按键F5 KEYCODE_F6 按键F6 KEYCODE_F7 按键F7 KEYCODE_F8 按键F8 KEYCODE_F9 按键F9 KEYCODE_F10 按键F10 KEYCODE_F11 按键F11 KEYCODE_F12 按键F12 多媒体键 键名 描述 KEYCODE_MEDIA_PLAY 多媒体键 播放 KEYCODE_MEDIA_STOP 多媒体键 停止 KEYCODE_MEDIA_PAUSE 多媒体键 暂停 KEYCODE_MEDIA_PLAY_PAUSE 多媒体键 播放/暂停 KEYCODE_MEDIA_FAST_FORWARD 多媒体键 快进 KEYCODE_MEDIA_REWIND 多媒体键 快退 KEYCODE_MEDIA_NEXT 多媒体键 下一首 KEYCODE_MEDIA_PREVIOUS 多媒体键 上一首 KEYCODE_MEDIA_CLOSE 多媒体键 关闭 KEYCODE_MEDIA_EJECT 多媒体键 弹出 KEYCODE_MEDIA_RECORD 多媒体键 录音 手柄按键 键名 描述 KEYCODE_BUTTON_1 通用游戏手柄按钮 #1 KEYCODE_BUTTON_2 通用游戏手柄按钮 #2 KEYCODE_BUTTON_3 通用游戏手柄按钮 #3 KEYCODE_BUTTON_4 通用游戏手柄按钮 #4 KEYCODE_BUTTON_5 通用游戏手柄按钮 #5 KEYCODE_BUTTON_6 通用游戏手柄按钮 #6 KEYCODE_BUTTON_7 通用游戏手柄按钮 #7 KEYCODE_BUTTON_8 通用游戏手柄按钮 #8 KEYCODE_BUTTON_9 通用游戏手柄按钮 #9 KEYCODE_BUTTON_10 通用游戏手柄按钮 #10 KEYCODE_BUTTON_11 通用游戏手柄按钮 #11 KEYCODE_BUTTON_12 通用游戏手柄按钮 #12 KEYCODE_BUTTON_13 通用游戏手柄按钮 #13 KEYCODE_BUTTON_14 通用游戏手柄按钮 #14 KEYCODE_BUTTON_15 通用游戏手柄按钮 #15 KEYCODE_BUTTON_16 通用游戏手柄按钮 #16 KEYCODE_BUTTON_A 游戏手柄按钮 A KEYCODE_BUTTON_B 游戏手柄按钮 B KEYCODE_BUTTON_C 游戏手柄按钮 C KEYCODE_BUTTON_X 游戏手柄按钮 X KEYCODE_BUTTON_Y 游戏手柄按钮 Y KEYCODE_BUTTON_Z 游戏手柄按钮 Z KEYCODE_BUTTON_L1 游戏手柄按钮 L1 KEYCODE_BUTTON_L2 游戏手柄按钮 L2 KEYCODE_BUTTON_R1 游戏手柄按钮 R1 KEYCODE_BUTTON_R2 游戏手柄按钮 R2 KEYCODE_BUTTON_MODE 游戏手柄按钮 Mode KEYCODE_BUTTON_SELECT 游戏手柄按钮 Select KEYCODE_BUTTON_START 游戏手柄按钮 Start KEYCODE_BUTTON_THUMBL Left Thumb Button KEYCODE_BUTTON_THUMBR Right Thumb Button 待查 键名 描述 KEYCODE_NUM 按键Number modifier KEYCODE_INFO 按键Info KEYCODE_APP_SWITCH 按键App switch KEYCODE_BOOKMARK 按键Bookmark KEYCODE_AVR_INPUT 按键A/V Receiver input KEYCODE_AVR_POWER 按键A/V Receiver power KEYCODE_CAPTIONS 按键Toggle captions KEYCODE_CHANNEL_DOWN 按键Channel down KEYCODE_CHANNEL_UP 按键Channel up KEYCODE_CLEAR 按键Clear KEYCODE_DVR 按键DVR KEYCODE_ENVELOPE 按键Envelope special function KEYCODE_EXPLORER 按键Explorer special function KEYCODE_FORWARD 按键Forward KEYCODE_FORWARD_DEL 按键Forward Delete KEYCODE_FUNCTION 按键Function modifier KEYCODE_GUIDE 按键Guide KEYCODE_HEADSETHOOK 按键Headset Hook KEYCODE_META_LEFT 按键Left Meta modifier KEYCODE_META_RIGHT 按键Right Meta modifier KEYCODE_PICTSYMBOLS 按键Picture Symbols modifier KEYCODE_PROG_BLUE 按键Blue “programmable” KEYCODE_PROG_GREEN 按键Green “programmable” KEYCODE_PROG_RED 按键Red “programmable” KEYCODE_PROG_YELLOW 按键Yellow “programmable” KEYCODE_SETTINGS 按键Settings KEYCODE_SOFT_LEFT 按键Soft Left KEYCODE_SOFT_RIGHT 按键Soft Right KEYCODE_STB_INPUT 按键Set-top-box input KEYCODE_STB_POWER 按键Set-top-box power KEYCODE_SWITCH_CHARSET 按键Switch Charset modifier KEYCODE_SYM 按键Symbol modifier KEYCODE_SYSRQ 按键System Request / Print Screen KEYCODE_TV 按键TV KEYCODE_TV_INPUT 按键TV input KEYCODE_TV_POWER 按键TV power KEYCODE_WINDOW 按键Window KEYCODE_UNKNOWN 未知按键","categories":[{"name":"Android庶系","slug":"Android庶系","permalink":"http://dinson.win/categories/Android庶系/"}],"tags":[{"name":"安卓按键","slug":"安卓按键","permalink":"http://dinson.win/tags/安卓按键/"}]},{"title":"Android自动测试之Monkey工具","date":"2016-07-20T06:07:39.000Z","path":"2016/07/20/16-07-20/","text":"概述 Monkey是一个命令行工具，可以运行在模拟器里或实际设备中，使用安卓调试桥(adb)来运行它，向系统发送伪随机的用户事件流，实现对正在开发的应用程序进行压力测试，可以根据获取的log信息进行修复。 Monkey的基本使用 连接设备：adb devices 查看设备是否连接成功 adb shell 进入shell界面 设备安装要运行的程序包或apk（或者通过查看data/data下的程序包)：adb安装apk：在所安装的apk路径下，使用adb install **.apk 执行monkey测试命令：monkey -p your.package.name -v 500 在不知道所安装的apk的包名的时候，采用adb命令查看包名： 清除logcat内容，使用命令adb logcat -c 启动logcat，使用命令adb logcat ActivityManager:I *:s 启动要查看的程序， 打开已安装的apk，查看出现的ActivityManager信息，cmp=name，此name就是打开的apk的包名。 Monkey命令使用 -help列出简单用法 -v作用：命令行上的每一个-v都将增加反馈信息的详细级别。Lv0：默认，除了启动、测试完成和最终结果外只提供较少的信息。Lv1：提供了较为详细的测试信息，如逐个发送到Activity的事件信息。Lv2：提供了更多的设置信息，如测试中选中或未选中的Activity信息。例：adb shell monkey -v 10 adb shell monkey -v -v 10 adb shell monkey -v -v -v 10 -s 伪随机数生成器的seed值。如果用相同的seed值再次运行monkey，将生成相同的事件序列。例： adb shell monkey -s 12345 -v 10 -p 如果你指定一个或多个包，Monkey将只允许访问这些包中的Activity。如果你的应用程序需要访问这些包(如选择联系人)以外的Activity，你需要指定这些包。如果你不指定任何包，Monkey将允许系统启动所有包的Activity。指定多个包，使用多个-p，一个-p后面接一个包名。例： adb shell monkey -p com.android.browser -v 10 -c 如果你指定一个或多个类别，Monkey将只允许系统启动这些指定类别中列出的Activity。如果你不指定任何类别，Monkey将选择谢列类别中列出的Activity，Intent.CATEGORY_LAUNCHER和Intent.CATEGORY_MONKEY。指定多个类别使用多个-c，每个-c指定一个类别。例： adb shell monkey -p com.paipai.ershou -v 10 -c –ignore-crashes通常，应用发生崩溃或异常时Monkey会停止运行。如果设置此项，Monkey将继续发送事件给系统，直到事件计数完成。 –ignore-timeouts事件请求超时会影响monkey的测试。如果设置此项，Monkey将继续发送事件给系统，直到事件计数完成。 adb shell monkey -p com.ihongqiqu -v -v -v 500 &gt; monkeytest.txt保存测试日志 九个事件及百分比控制0 –pct-touch 调整触摸事件的百分比(触摸事件是一个down-up事件，它发生在屏幕上的某单一位置)（——点击事件，涉及down、up） 1 –pct-motion 调整动作事件的百分比(动作事件由屏幕上某处的一个down事件、一系列的伪随机事件和一个up事件组成) （——注：move事件，涉及down、up、move三个事件） 2 –pct-pinchzoom 二指缩放百分比，即智能机上的放大缩小手势操作 3 –pct-trackball 调整轨迹事件的百分比(轨迹事件由一个或几个随机的移动组成，有时还伴随有点击)–（轨迹球） 4 –pct-rotation 屏幕旋转百分比，横屏竖屏 5 –pct-permission 权限变换测试 6–pct-nav 调整“基本”导航事件的百分比(导航事件由来自方向输入设备的up/down/left/right组成) 7–pct-majornav 调整“主要”导航事件的百分比(这些导航事件通常引发图形界面中的动作，如：5-way键盘的中间按键、回退按键、菜单按键) 8–pct-syskeys 调整“系统”按键事件的百分比(这些按键通常被保留，由系统使用，如Home、Back、Start Call、End Call及音量控制键) 9–pct-appswitch 调整启动Activity的百分比。在随机间隔里，Monkey将执行一个startActivity()调用，作为最大程度覆盖包中全部Activity的一种方法。（从一个Activity跳转到另一个Activity） 10–pct-flip 调整“键盘翻转”事件的百分比。 11–pct-anyevent 调整其它类型事件的百分比。它包罗了所有其它类型的事件，如：按键、其它不常用的设备按钮、等等。红色的数字对应下面百分比对应的数字。比如下图中0：15.0%，表示分配–pct-touch事件15%。测试100次分配15次测试down-up。 如果在monkey参数中不指定上述参数，这些动作都是随机分配的，9个动作其每个动作分配的百分比之和为100%，我们可以通过添加命令选项来控制每个事件的百分比，进而可以将操作限制在一定的范围内。我们先来看一下不加动作百分比控制，系统默认分配事件百分比的情况 再看一下指定事件，控制事件百分比之后的情况 Monkey测试信息 在Monkey测试过程中可能会出现程序崩溃(CRASH)和程序无响应的情况(ANR),要将测试的log信息获取到，从而解决bug。 CRASH:即崩溃信息，程序在运行中非正常退出。 不设置忽略crashes，在测试过程中出现CRASH，会中断测试，并显示CRASH信息和seed信息根据seed值来完成bug的复现：adb shell monkey -p com.feicuiedu.monkeytestdemo -s 1476474162566 -v 1000 ANR:同样在monkey测试过程中，如果出现ANR现象，会输出相应的信息，以ANR开头，获取到信息进行问题的解决，同样可以通过seed来进行复现。 附：如果在手动测试过程中出现ANR，日志信息出现在手机中： adb shell cd /data/anr 切换到设备路径下 ls 可以看到traces.txt 里面即为log信息 MonkeyScript MonkeyScript是monkey的脚本语言，是一组可以被Monkey识别的命令集合，可以帮我们完成一系列的被固定的重复性操作，Monkey通过脚本来进行测试，简单快捷、不需要任何工具，只是一个记事本文件，缺点是在坐标、按键等方面没有逻辑性。 脚本格式123456789#头文件、控制monkey发送消息的参数type=raw eventscount=10speed=1.0#以下为monkey命令start data &gt;&gt;DispatchPress (KEYCODE_HOME)DispatchPress (KEYCODE_MENU) 常用API 常用API的介绍，其中keycode参考keycode列表 LaunchActivity(pkg_name, cl_name) 启动应用的Activity。参数：包名和启动的Activity。 Tap(x, y, tapDuration) 模拟一次手指单击事件。参数：x,y为控件坐标，tapDuration为点击的持续时间，此参数可省略。 DispatchPress(keyName) 按键。参数： keycode RotateScreen(rotationDegree, persist) 旋转屏幕。 参数：rotationDegree为旋转角度， e.g. 1代表90度；persist表示旋转之后是否固定，0表示旋转后恢复，非0则表示固定不变。 DispatchFlip(true/false) 打开或者关闭软键盘。 LongPress() 长按2秒。 PressAndHold(x, y, pressDuration) 模拟长按事件。 DispatchString(input) 输入字符串。 Drag(xStart, yStart, xEnd, yEnd, stepCount) 用于模拟一个拖拽操作。 PinchZoom(x1Start, y1Start, x1End, y1End, x2Start, y2Start, x2End, y2End, stepCount) 模拟缩放手势。 UserWait(sleepTime) 休眠一段时间 DeviceWakeUp() 唤醒屏幕。 PowerLog(power_log_type, test_case_status) 模拟电池电量信息。 WriteLog() 将电池信息写入sd卡。 RunCmd(cmd) 运行shell命令。 DispatchPointer(downtime,eventTime,action,x,yxpressure,size,metastate,xPrecision,yPrecision,device,edgeFlags) 向指定位置，发送单个手势。 DispatchPointer(downtime,eventTime,action,x,yxpressure,size,metastate,xPrecision,yPrecision,device,edgeFilags) 发送按键消息。 LaunchInstrumentation(test_name,runner_name) 运行一个instrumentation测试用例。 DispatchTrackball 模拟发送轨迹球事件。 ProfileWait 等待5秒。 StartCaptureFramerate() 获取帧率。 EndCaptureFramerate(input) 结束获取帧率。 API方法中控件位置(X,Y轴的坐标)的获取：使用Android提供的工具uiautomatorviewer.bat 在Android SDK路径下–&gt; tools –&gt; uiautomatorviewer.bat，打开就可以展示设备/模拟器上展示的视图，展示视图结构和坐标。 简单示例1234567891011121314151617181920212223#头文件、控制monkey发送消息的参数type=raw eventscount=10speed=1.0#以下为脚本正文start data &gt;&gt;#1.打开浏览器LaunchActivity(com.android.browser,com.android.browser.BrowserActivity)ProfileWait()#2.清空网址Tap(223,146)ProfileWait()DispatchPress(112)ProfileWait()#3.输入网址DispatchString(www.baidu.com)ProfileWait()#4.确认，载入网址DispatchPress(KEYCODE_ENTER)ProfileWait()#5.完成退出浏览器DispatchPress(KEYCODE_HOME)ProfileWait() 1.脚本完成后将.txt 文件push到手机中 1adb push name.txt path 其中name是指monkey脚本文件的名称，path是要push到手机上的路径 2.运行Monkey脚本 1monkey -f path/name.txt -v 500 path是push的路径，name是脚本文件的名称。 案例实践随机事件流对MonketTestDemo进行测试： adb devices 查看设备是否连接 adb shell 进入shell界面 monkey -p com.feicuiedu.monkeytestdemo -v 500 执行monkey命令 (可选)monkey -p com.feicuiedu.monkeytestdemo -v 500 &gt; monkeytest.txt 执行monkey命令，并将monkey日志存储 一次随机的自动化Monkey测试完成。MonkeyScript对MonkeyTestDemo进行测试： 完成monkey.txt脚本的编写，保存到某一路径下 切换到monkey.txt路径下 adb push monkey.txt /data/local/temp/(设备的任一路径，无确切规定) adb shell 切换到设备下 cd /data/local/temp 切换到monkey.txt路径下 monkey -f monkey.txt -v 10 执行monkey脚本及执行次数 一次MonkeyScript的自动化Monkey测试完成。 关于Monkey测试的停止条件Monkey Test执行过程中在下列三种情况下会自动停止： 如果限定了Monkey运行在一个或几个特定的包上，那么它会监测试图转到其它包的操作，并对其进行阻止。 如果应用程序崩溃或接收到任何失控异常，Monkey将停止并报错。 如果应用程序产生了应用程序不响应(application not responding)的错误，Monkey将会停止并报错。 通过多次并且不同设定下的Monkey测试才算它是一个稳定性足够的程序。","categories":[{"name":"Android庶系","slug":"Android庶系","permalink":"http://dinson.win/categories/Android庶系/"}],"tags":[{"name":"Monkey工具","slug":"Monkey工具","permalink":"http://dinson.win/tags/Monkey工具/"},{"name":"自动化测试","slug":"自动化测试","permalink":"http://dinson.win/tags/自动化测试/"}]},{"title":"Hexo设置指南","date":"2016-07-17T05:56:19.000Z","path":"2016/07/17/16-07-17/","text":"概述 设置指南 设置阅读全文 建议使用第一种方式，除了可以精确控制需要显示的摘录内容以外， 这种方式也可以让 Hexo 中的插件更好的识别。 在文章中使用&lt;!–more–> 手动进行截断。这种方法可以根据文章的内容，自己在合适的位置添加&lt;!–more–>标签，使用灵活，也是Hexo推荐的方法。 在文章中的front-matter中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。 自动形成摘要，在主题配置_config.yml文件中添加。默认截取的长度为 150 字符，可以根据需要自行设定。 123auto_excerpt: enable: truelength: 150","categories":[{"name":"个人博客辛酸系列","slug":"个人博客辛酸系列","permalink":"http://dinson.win/categories/个人博客辛酸系列/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://dinson.win/tags/Hexo/"}]},{"title":"GitHub+Hexo搭建个人博客辛酸史--分支控制(贰)","date":"2016-07-15T02:05:54.000Z","path":"2016/07/15/16-07-15/","text":"概述 利用github的不同分支来分别保存网站静态文件与hexo源码（md原始文件及主题等），实现在不同电脑上都可以自由写博客 当然，这种方式也有缺点，那就是所有的静态页面由于都需要保存在github里的自己名下的网站同名项目仓库内，所以如果项目仓库是public的，那么所有人都会看到你的网站代码， 这个其实应该也没有关系吧！！！hexo都是开源的，而且静态博客是编译后的，框架和主题都是用的别人开源出来的，但博客写了不就是让别人看的？所以应该真的无所谓。。。 如果你实在不想让别人看到你的md原件，那么就不要使用本文所说的同一个项目的分支啦，就去新建一个项目来单独保存源码文件吧，并且把这个项目设为priviate的，要花钱的哦，这样别人就看不到啦。。。 新建hexo分支 如上图在红色输入框内写入新建的branch名 hexo 后，回车即可建立新的branch-hexo； 设置默认分支因为我们写博客更多的是更新这个分支，网站文件所在的 master 分支则由 hexo d 命令发布文章的时候进行推送，所以我们将 hexo分支设置为默认分支，这样我们在新的电脑环境下 git clone 该仓库时，自动切到 hexo分支。按下图进行操作。 配置hexo deploy参数为了保证 hexo d 命令可以正确部署到 master 分支，在hexo 的配置文件 _config.yml 文件中配置参数如下：1234deploy: type: git repo: https://github.com/username/username.github.io.git branch: master hexo 3.0之后 deploy type，将github改为了git，这样适用性更广了，如果你发现无法 hexo d ，使用下面的命令安装git deployer插件后重试即可。1npm install hexo-deployer-git --save 修改推送到hexo分支上一步的deploy参数正确配置后，文章写完使用 hexo g -d 命令就可以直接部署了，生成的博客静态文件会自动部署到 username.github.io 仓库的 master 分支上。 网站页面是保存了，但这时候我们还没有保存我们的hexo原始文件，包括我们的文章md文件，我们千辛万苦修改的主题配置等。。。接下来使用下面的步骤将他们都统统推送到 hexo 分支上去。123git add .git commit -m “change description”git push origin hexo 这样就OK了，我们的原始文件就都上去了，换电脑也不怕了。 日常写博客有时候我们可能会在不同的电脑上写博客，那在不同的电脑上配置 hexo、git、node.js，以及配置git ssh key等都要折腾一下的，这是免不了的，也是比wordpress等其他博客框架麻烦的一点。 已有环境如果在电脑上已经写过博客，那么可以在已有的工作目录下同步之前写的博客。在你的仓库目录下右键’git bash shell’，起来bash命令行，然后1git pull 这样你的状态就更新了，之后就是 hexo 命令写文章啦。。。 写完 hexo g -d 部署好后，使用123git add .git commit -m “change description”git push origin hexo 推送上去。 新的环境到了新的电脑上时，我们需要将项目先下载到本地，然后再进行hexo初始化。1234git clone https://github.com/username/username.github.io.gitnpm install hexonpm installnpm install hexo-deployer-git --save 之后开始写博客，写好部署好之后，别忘记 git add , … , git push origin hexo…推上去…","categories":[{"name":"个人博客辛酸系列","slug":"个人博客辛酸系列","permalink":"http://dinson.win/categories/个人博客辛酸系列/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://dinson.win/tags/博客/"},{"name":"Hexo","slug":"Hexo","permalink":"http://dinson.win/tags/Hexo/"}]},{"title":"Android主题换肤 无缝切换","date":"2016-07-11T15:29:23.000Z","path":"2016/07/11/16-07-11/","text":"概述 关于Android的主题换肤都是个老生常谈的问题了。网上给出的方案也是层出不穷，最近我也是很想去了解这方面的知识，所以我去搜一下就会有一大堆介绍这方面的文章，但是最后的结果都是不尽人意的，有的确实是给出了一些比较好的解决方案，但是没有一个实质性的Demo可以参考，所以也只能是纸上谈兵罢了，有的呢，确实是给出了一个参考的Demo但是最后的结果不是我想要的。关于Android的换肤方案技术的总结，这篇文章还是挺有参考价值的Android换肤技术总结。感兴趣的同学可以去了解下，就当做是一个知识的普及。 今天我要实现的一个换肤方案是基于github上的这个开源框架Android-Skin-Loader。 这个框架的换肤机制是使用动态加载的机制去加载皮肤包里面的内容，无需Acitvity重启即可实现皮肤的实时更换，皮肤包是可以与原安装包相分离的，需要自己定做（这个皮肤包其实也就是一个普通的Android项目，只是只有资源文件没有类文件而已），这样做的好处就是可以在线提供皮肤包供用户去下载，也可以大大的减少安装包的体积，同时也很好的实现了插件化。 其实这个框架是可以拿来直接来用的，直接几行代码基本上就可以解决Android的主题换肤，但是作为一个程序员怎么可以只是简单的知道怎么用就行了吗？如果真是这样就真的太low了。遇到一个好的开源项目我们至少需要把他的源码大致看一下，走一下基本的流程，了解一下他的基本原理，这样我们在技术上才会有所提升。 好了说了这么多，通过本文你可以学到什么，这个可能是大家比较关心的一点 设计出一个基于MaterialDesign风格的App 自己实现一个主题换肤的框架 高仿网易云音乐的主题换肤（ps：其实本来我想以这个作为标题的，这样做也可以增加流量，可我不想单纯的做个标题党，给大家带来干货才是最重要的） 让你的技术更上一层楼（这个说了也是白说） 说了这么久可能就会有人按捺不住了：我是来看干货的，不是来这听你瞎BB的。不要急干货马上来。如果实在感觉枯燥可以直接跳到文末去看源码。下面先来几张效果图来爽一下 网易云音乐换肤界面 这个是网易云音乐的换肤界面，他提供了几个默认的，也提供了可以在线下载的主题，他的切换效果还是非常赞的，用过这个软件的同学肯定是知道的。学习完本文后就可以做出类似于这个换肤效果。这个动态图是最终我们这个Demo实现的效果，这个Demo总体来说还是比较简单的，只提供了三种皮肤。实现了一个基本的换肤效果，主要还是用于拿来学习使用。当然更复杂的换肤基于这个Demo也是可以办到的，这里主要还是去讲解原理。 在介绍之前还需要先给大家普及一下LayoutInflaterFactory相关的知识。如果已经知道了这方面的知识点，下面这一段可以直接略过。 对于LayoutInflater大家可能都不太陌生，当你需要把xml文件转化成对应View的时候就必须用到它，我想对于他怎么使用的就不用我介绍了。LayoutInflater 提供了setFactory(LayoutInflater.Factory factory)和setFactory2(LayoutInflater.Factory2 factory)两个方法可以让你去自定义布局的填充（有点类似于过滤器，我们在填充这个View之前可以做一些额外的事，但不完全是），Factory2 是在API 11才添加的。他们提供了下面的方法让你去重写。在这里面你完全可以自己去定义去创建你所想要的View，如果在你在重写的方法中返回null的话，就会以系统默认的方式去创建View。 123View onCreateView(String name, Context context, AttributeSet attrs)//LayoutInflater.FactoryView onCreateView(View parent, String name, Context context, AttributeSet attrs)//LayoutInflater.Factory2 LayoutInflater都被设置了一个默认的Factory，Activity 是实现了LayoutInflater.Factory接口的,因此在你的Activity中直接重写onCreateView就可以自定义View的填充了。 下面这句是对LayoutInflater.Factory一个比较好的理解 Inflating your own custom views, instead of letting the system do it这个也是这个Demo其中的一个比较重要技术点。如果有想更详细了解的文末会有参考链接。 下面就正式开始介绍怎么去做这个主题换肤吧。 先来看看这个Demo的项目结构： 至于xRecyclerView可以不用管，这里我们用不到（这是之前用到的，与本次无关），他只是一个RecyclerView的一个扩展框架，支持下拉刷新和上拉加载，是一个在github上的一个开源项目。 这里我们直接来看看lib_skinloader这个库吧（这里面的内容大部分是来源于Android-Skin-Loader这个框架，我只做了部分修改，主要是适配AppCompatActivity，原框架是基于最初的Activty开发的），这个库就是今天所讲的核心内容lib_skinloader包结构图 我们都知道在Android中如果想去获取资源文件都必须通过Resources去获取。这个库的核心思想就是动态的去加载第三方包里面的包，获取到其Resources然后以获取到的这个Resources去获取第三方包里面的资源内容，最后设置到我们有需响应皮肤更改的View上。 这里我就只介绍load和base两个包，其他包的内容在讲解的时候会涉及到 Load包我们先来看看这个load包里面的内容（其实这里就是今天核心内容的核心）。 里面有两个类文件：SkinInflaterFactory、SkinManager我们先来看看SkinManager的实现，直接跳到load方法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public void load(String skinPackagePath, final ILoaderListener callback) &#123; new AsyncTask&lt;String, Void, Resources&gt;() &#123; @Override protected void onPreExecute() &#123; if (callback != null) &#123; callback.onStart(); &#125; &#125; @Override protected Resources doInBackground(String... params) &#123; try &#123;if (params.length == 1) &#123; String skinPkgPath = params[0]; Log.i(\"loadSkin\", skinPkgPath); File file = new File(skinPkgPath); if (file == null || !file.exists()) &#123; return null; &#125; PackageManager mPm = context.getPackageManager(); PackageInfo mInfo = mPm.getPackageArchiveInfo(skinPkgPath, PackageManager.GET_ACTIVITIES); skinPackageName = mInfo.packageName; AssetManager assetManager = AssetManager.class.newInstance(); Method addAssetPath = assetManager.getClass().getMethod(\"addAssetPath\", String.class); addAssetPath.invoke(assetManager, skinPkgPath); Resources superRes = context.getResources(); Resources skinResource = new Resources(assetManager, superRes.getDisplayMetrics(), superRes.getConfiguration()); SkinConfig.saveSkinPath(context, skinPkgPath); skinPath = skinPkgPath; isDefaultSkin = false; return skinResource; &#125; return null; &#125; catch (Exception e) &#123; e.printStackTrace(); return null; &#125; &#125; protected void onPostExecute(Resources result) &#123; mResources = result; if (mResources != null) &#123; if (callback != null) callback.onSuccess(); notifySkinUpdate(); &#125; else &#123; isDefaultSkin = true; if (callback != null) callback.onFailed(); &#125; &#125; &#125;.execute(skinPackagePath);&#125; 这个方法有两个参数，第一个是皮肤包的路径，第二个就是一个简单的回调 其中doInBackground方法里面就实现了动态的去获取皮肤包的Resources，当获取成功之后，在onPostExecute方法中就将这个Resources赋值到我们定义好的变量中去，以方便我们之后的使用，注意到当获取到的这个Resources不为空时，也就是我们已经获取到了皮肤包里面的资源，我们就调用notifySkinUpdate()这个方法来通知界面去更改皮肤，如果为空就还是使用默认的皮肤。 我们来看看notifySkinUpdate()的实现 这里很简单，就是去遍历mSkinObservers这个集合，然后去通知更新。对于ISkinUpdate是一个接口，每个需要皮肤更新的Activity都需要去实现这个接口。 SkinManager这个类里面还有诸如getColor(int resId)、getDrawable(int resId)这样的方法，就是去获取第三方包对应的资源文件，值得注意的是如果你的第三方包里没有对应的资源文件，那么就会使用默认的资源文件，如果你有需求，你完全可以去添加一些类似getMipmap(int resID)这样的方法。 对了，还有一个比较重要的方法忘了讲，restoreDefaultTheme 这个方法就是恢复到系统的默认主题，原理和load都差不多，实现还简单了很多。 我们再来看看SkinInflaterFactory，在这里面主要就是做一些填充View相关的一些工作。我实现的是LayoutInflaterFactory这个接口而不是文章之前提到的LayoutInflater.Factory这个接口是因为这里需要与AppCompatActivity兼容，如果你还是用之前的那个就会出现一些错误，反正我刚弄的时候是折腾了很久的。不管怎么样原理始终是一样的。SkinInflaterFactory的作用就是去搜集那些有需要响应皮肤更改的View。 我们来看看onCreateView的实现 首先我们先去判断这个当前将要View是否有更改皮肤的需求，如果没有我们就返回默认的实现。如果有，我们就自己去处理来看看createView方法的实现 看起来很多，其实这个方法就是去动态的去创建View。 下面来看看parseSkinAttr的实现： 这个方法其实就是去搜集View中换肤的时候可以更改的属性，当我们换肤的时候就是去更改的这些属性的值，这里你必须要注意一点，这个属性的值一定要是引用类型的（例如:@color/red），千万不能写死，第二个if的判断就是这个作用。到这里可能你就会有个疑问，我怎么知道哪些属性在换肤的时候需要更改。如果你细心一点肯定注意到了这行代码 1SkinAttr mSkinAttr = AttrFactory.get(attrName, id, entryName, typeName); 这里有个AttrFacory他的作用就是根据属性名，动态的去创建SkinAttr。在AttrFacory中定义了一些类似于这样的常量： 这就是我们换肤的时候可以更改的那些属性。SkinAttr是一个抽象类，比如background就会去创建一个BackgroundAttr,本项目所用到的属性全都在attr包中。SkinAttr是比较灵活的一个地方,如果你有哪个属性在换肤的时候需要更改，你就去实现一个对应的SkinAttr。 在parseSkinAttr这个方法的最后我们将View和SkinAttr封装成了一个SkinItem然后添加到一个集合中去，最后还需注意的是，如果当前皮肤不是默认皮肤，一定要去apply一下，这样做主要是防止换了皮肤启动一些新的页面有可能导致换肤不及时的问题。SkinInflaterFactory这个类里面还提供了动态的添加SkinItem的方法，原理都和这里差不多，我就不过多的去说了。 load包里面的这两个类讲的差不多了，这里看懂了后面的内容也就是小菜一碟了，我相信你看了这里再去看源码一定会轻松地多。 Base包base包结构 可以看见这个包里面肯定就是Activity、Fragment、Application的实现，作用肯定就是封装一些公用的方法和属性在里面。 下面我们一个一个来分析 SkinBaseApplication： SkinBaseApplication SkinBaseActivity 我们来看看其onCreate方法 在这里使用了我们之前自定义的View的InflaterFactory，来替换默认的Factory。记住一定要在super.onCreate(savedInstanceState);这个方法之前调用。SkinBaseActivity里面还提供了动态添加可以响应皮肤更改需求的View的相关方法。当然需要响应换肤更改的Activity都需要继承SkinBaseActivity。详细实现请看源码。 SkinBaseFragment 这个和SkinBaseActivity的思想差不多。具体实现看源码，这里我只是给大家提供这个换肤框架的思想，让大家在看源码的时候更轻松。 这个框架就介绍到这，下面我们来看看怎么去使用。 在使用的时候一定要记得要Activity要去继承于SkinBaseActivity，Fragment要继承于SkinBaseFragment，Application要继承于SkinBaseApplication。当然把这个框架做为你的项目依赖项肯定是必不可少的。为了Demo的简单，这里我只使用了下面三个颜色作为可以换肤的资源，当然如果你想要使用drawable文件也是可以办到的，前提是你一定要把这个Demo看懂。 来看一个布局文件 其中 xmlns:skin=”http://schemas.android.com/android/skin&quot;` 是我们自定义的，在SkinConfig有。我们只需在有皮肤更改需求的View中加入skin:enable=”true” 就OK了。 再来看看MainActicvity的部分代码 这里就是动态的添加有皮肤更改需求的View。 上面就介绍完了在布局文件中使用方法和在代码中使用方法。 我们应该怎么去换肤呢？很简单，只需调用SkinManager的load方法就可以了，把皮肤路径传进去就可以了，我的这个Demo为了简单起见，没有做在线换肤的功能，只是在本地提供了可以更换的皮肤，看到这里我相信你对怎样在线换肤已经有想法了。 怎样去换肤最最后我们来看看怎么去开发皮肤包。其实这个是最简单的，皮肤包实际上就是一个基本的Android项目，里面不包含类文件，只有资源文件。这里只需注意 这里的资源文件名字一定要和原项目中的相同，并且只用包含那些在皮肤更改时需要改变的那些就行了！例如我的这个Demo就只是简单对上面的三种颜色做了简单的切换。开发了棕色和黑色两款皮肤，所以资源文件中只有三个color的值，开发完成之后我们需要将其打包成apk文件，为防止用户点击安装，我们将其后缀改成了skin，这样做也具有标识性。如果还是不太清楚可以直接去源码中查看。 这下再来看一看文章开头效果图是不是突然变得有思路了,快动起你的小手指去敲一个主题换肤的框架吧~~~ 参考链接: LayoutInflater Factories（需梯子） How to Get the Right LayoutInflater Android apk动态加载机制的研究 Android换肤技术总结","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"主题换肤","slug":"主题换肤","permalink":"http://dinson.win/tags/主题换肤/"}]},{"title":"Android换肤技术总结","date":"2016-07-08T15:42:21.000Z","path":"2016/07/08/16-07-08/","text":"概述 纵观现在各种Android app，其换肤需求可以归为 白天/黑夜主题切换（或者别的名字，通常2套），如同花顺/自选股/天天动听等，UI表现为一个switcher。 多种主题切换，通常为会员特权，如QQ/QQ空间。 对于第一种来说，目测应该是直接通过本地theme来做的，即所有图片/颜色的资源都在apk里面打包了。 而对于第二种，则相对复杂一些，由于作为一种线上服务，可能上架新皮肤，且那么多皮肤包放在apk里面实在太占体积了，所以皮肤资源会在选择后再进行下载，也就不能直接使用android的那套theme。 技术方案内部资源加载方案和动态下载资源下载两种。 动态下载可以称为一种黑科技了，因为往往需要hack系统的一些方法，所以在部分机型和新的API上有时候可能有坑，但相对好处则很多 图片/色值等资源由于是后台下发的，可以随时更新 APK体积减小 对应用开发者来说，换肤几乎是透明的，不需要关心有几套皮肤 可以作为增值服务卖钱！！ 内部资源加载方案内部资源加载都是通过android本身那套theme来做的，相对业务开发来说工作量更大（需要定义attr和theme），不同方案类似地都是在BaseActivity里面做setTheme，差别主要在解决以下2个问题的策略： setTheme后如何实时刷新，而不用重新创建页面（尤其是listview里面的item）。 哪些view需要刷新，刷新什么（背景？字体颜色？ImageView的src？）。 自定义viewMultipleTheme做自定义view是为了在setTheme后会去立即刷新，更新页面UI对应资源（如TextView替换背景图和文字颜色），在上述项目中，则是通过对rootView进行遍历，对所有实现了ColorUiInterface的view/viewgroup进行setTheme操作来实现即使刷新的。 显然这样太重了，需要把应用内的各种view/viewgroup进行替换。 手动绑定view和要改变的资源类型Colorful 这个…我们看看用法吧….12345678910111213ViewGroupSetter listViewSetter = new ViewGroupSetter(mNewsListView);// 绑定ListView的Item View中的news_title视图，在换肤时修改它的text_color属性listViewSetter.childViewTextColor(R.id.news_title, R.attr.text_color);// 构建Colorful对象来绑定View与属性的对象关系mColorful = new Colorful.Builder(this) .backgroundDrawable(R.id.root_view, R.attr.root_view_bg) // 设置view的背景图片 .backgroundColor(R.id.change_btn, R.attr.btn_bg) // 设置背景色 .textColor(R.id.textview, R.attr.text_color) .setter(listViewSetter) // 手动设置setter .create(); // 设置文本颜色 我就是想换个皮肤，还得在activity里自己去设置要改变哪个view的什么属性，对应哪个attribute？是不是成本太高了？而且activity的逻辑也很容易被弄得乱七八糟。 动态资源加载方案 resource替换 覆盖application的getResource方法，实现自己的resource，优先加载本地皮肤包文件夹下的资源包，对于性能问题，可以通过attribute或者资源名称规范(如需要换肤则用skin_开头)来优化，从而不对不换肤的资源进行额外检查开销。 不过由于Android5.1源码里，drawable初始化的时候调用的是loadDrawable，而不是resource.getDrawable，而loadDrawable是私有的方法，无法覆盖，所以虽然很方便，却无法继续使用（不用关心任何皮肤相关的事情，android:color指定颜色就行了，神奇滴会自动换肤）。 自定义LayoutInflator.Factory 开源项目可参照Android-Skin-Loader。 即setFactory使用自定义的LayoutInflator.Factory，可以重点关注该项目中的SkinInflaterFactory和SkinManager（实现了自己的getColor、getDrawable、getBitmap、getColorStateList等等方法）。 需要自定义一个tag比如app:customStyle，重写所有的style，转成set方法，这样带来的牺牲就是增加了换肤的成本，要写很多style，自己去set，并不完全透明了。 Hack Resources internally 黑科技方法，直接对Resources进行hack，Resources.java:12345678// Information about preloaded resources. Note that they are not// protected by a lock, because while preloading in zygote we are all// single-threaded, and after that these are immutable.private static final LongSparseArray&lt;Drawable.ConstantState&gt;[] sPreloadedDrawables;private static final LongSparseArray&lt;Drawable.ConstantState&gt; sPreloadedColorDrawables = new LongSparseArray&lt;Drawable.ConstantState&gt;();private static final LongSparseArray&lt;ColorStateList&gt; sPreloadedColorStateLists = new LongSparseArray&lt;ColorStateList&gt;(); 直接对Resources里面的这三个LongSparseArray进行替换，由于apk运行时的资源都是从这三个数组里面加载的，所以只要采用interceptor模式： 1public class DrawablePreloadInterceptor extends LongSparseArray&lt;Drawable.ConstantState&gt; 自己实现一个LongSparseArray，并通过反射set回去，就能实现换肤，具体getDrawable等方法里是怎么取preload数组的，可以自己看Resources的源码。 等等，就这么简单？，NONO，少年你太天真了，怎么去加载xml，9patch的padding怎么更新，怎么打包/加载自定义的皮肤包，drawable的状态怎么刷新，等等。这些都是你需要考虑的，在存在插件的app中，还需要考虑是否会互相覆盖resource id的问题，进而需要修改apt，把resource id按位放在2个range。 手机Q和独立版QQ空间使用的是这种方案，效果挺好。 总结尽管动态加载方案比较黑科技，可能因为系统API的更改而出问题 好处有 灵活性高，后台可以随时更新皮肤包 相对透明，开发者几乎不用关心有几套皮肤，不用去定义各种theme和attr，甚至连皮肤包的打包都可以交给设计或者专门的同学 apk体积节省 存在的问题 没有完善的开源项目，如果我们采用动态加载的第二种方案，需要的项目功能包括： 自定义皮肤包结构 换肤引擎，加载皮肤包资源并load，实时刷新。 皮肤包打包工具 对各种rom的兼容 内部加载方案大同小异，主要解决的都是即时刷新的问题，然而从目前的一些开源项目来看，仍然没有特别简便的方案。让我选的话，我宁愿让界面重新创建，比如重启activity，或者remove所有view再添加回来（或者你可能想遍历rootview，然后一个个检查是否需要换肤然后set…）。","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"主题换肤","slug":"主题换肤","permalink":"http://dinson.win/tags/主题换肤/"}]},{"title":"Fragment实现懒加载，让应用更优化","date":"2016-06-15T15:06:28.000Z","path":"2016/06/15/16-06-15/","text":"概述 玩过微信的都知道，微信用的是懒加载的模式，之所以使用懒加载是因为：当使用viewpager+adapter作为应用大的布局时，viewpager会通过setOffscreenPageLimit来设置预加载的项目，不设置setOffscreenPageLimit，则默认为1（设置0无效，可以查看该方法源码知道），也就是当我们打开应用看到的时候fragmentOne时，实际上其他fragment（例如fragmentSecond）也进行了加载，只不过没有显示出来罢了，但是这样就造成了不必要的资源浪费（例如，fragmentSecond没有显示，但是却进行了大量的网络加载操作）。 基于上述情况，就有了懒加载方式的诞生（即只加载当前显示页面且只加载一次，滑动到其他页面时才加载其他页面数据，当再滑动到已加载过数据的页面时不再进行数据加载操作，若想要刷新数据，再调用相应的加载数据方法就好了） Fragment生命周期基本探索为了更好的知道懒加载的实现原理,下面通过几个测试来学习下。测试的几个文件如下（可以看到有3个fragment，由FragmentPagerAdapter+viewpager构成） 情况一 setOffscreenPageLimit（1） （即默认情况） 情况二 setOffscreenPageLimit（3） （即设置预加载数目为实际fragment数目） Fragment懒加载实现可以看到无论是情况一还是情况二,fragment都会调用fragment的setUserVisibleHint进行判断，所以我们就需要在这里做文章。123当isVisibleToUser 为true则进行数据加载，当isVisibleToUser为false则不进行数据加载对于已经加载过数据的fragment，再次被滑动到也不在进行加载数据，也就是每个fragment仅做一次数据加载工作 下面就来看代码实现主要代码都在BaseFragment中1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798public abstract class BaseFragment extends Fragment &#123; private boolean isVisible = false;//当前Fragment是否可见 private boolean isInitView = false;//是否与View建立起映射关系 private boolean isFirstLoad = true;//是否是第一次加载数据 private View convertView; private SparseArray&lt;View&gt; mViews; @Nullable @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; LogUtil.m(\" \" + this.getClass().getSimpleName()); convertView = inflater.inflate(getLayoutId(), container, false); mViews = new SparseArray&lt;&gt;(); initView(); isInitView = true; lazyLoadData(); return convertView; &#125; @Override public void onViewCreated(View view, Bundle savedInstanceState) &#123; super.onViewCreated(view, savedInstanceState); LogUtil.m(\" \" + this.getClass().getSimpleName()); &#125; @Override public void onAttach(Context context) &#123; super.onAttach(context); LogUtil.m(\"context\" + \" \" + this.getClass().getSimpleName()); &#125; @Override public void setUserVisibleHint(boolean isVisibleToUser) &#123; LogUtil.m(\"isVisibleToUser \" + isVisibleToUser + \" \" + this.getClass().getSimpleName()); if (isVisibleToUser) &#123; isVisible = true; lazyLoadData(); &#125; else &#123; isVisible = false; &#125; super.setUserVisibleHint(isVisibleToUser); &#125; private void lazyLoadData() &#123; if (isFirstLoad) &#123; LogUtil.m(\"第一次加载 \" + \" isInitView \" + isInitView + \" isVisible \" + isVisible + \" \" + this.getClass().getSimpleName()); &#125; else &#123; LogUtil.m(\"不是第一次加载\" + \" isInitView \" + isInitView + \" isVisible \" + isVisible + \" \" + this.getClass().getSimpleName()); &#125; if (!isFirstLoad || !isVisible || !isInitView) &#123; LogUtil.m(\"不加载\" + \" \" + this.getClass().getSimpleName()); return; &#125; LogUtil.m(\"完成数据第一次加载\"); initData(); isFirstLoad = false; &#125; /** * 加载页面布局文件 * @return */ protected abstract int getLayoutId(); /** * 让布局中的view与fragment中的变量建立起映射 */ protected abstract void initView(); /** * 加载要显示的数据 */ protected abstract void initData(); /** * fragment中可以通过这个方法直接找到需要的view，而不需要进行类型强转 * @param viewId * @param &lt;E&gt; * @return */ protected &lt;E extends View&gt; E findView(int viewId) &#123; if (convertView != null) &#123; E view = (E) mViews.get(viewId); if (view == null) &#123; view = (E) convertView.findViewById(viewId); mViews.put(viewId, view); &#125; return view; &#125; return null; &#125;&#125; 可以看到initView方法是在onCreateView中调用，而initData只有执行过onCreateView才会调用，这样的顺序安排就不会导致在initData中执行数据加载过程，找不到需要的view而报错。 项目结构 演示效果 可以看到fragment只会进行执行一次initData，懒加载到此完整","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"Fragment","slug":"Fragment","permalink":"http://dinson.win/tags/Fragment/"},{"name":"懒加载","slug":"懒加载","permalink":"http://dinson.win/tags/懒加载/"},{"name":"优化","slug":"优化","permalink":"http://dinson.win/tags/优化/"}]},{"title":"MarkdownPad2在Win10下HTML渲染错误解决办法及注册码","date":"2016-06-14T15:33:10.000Z","path":"2016/06/14/16-06-14/","text":"HTML渲染错误解决办法在win10上安装MarkdownPad2 时，出现如下的错误信息：HTML渲染组出错，这个问题可以通过安装某个缺失组件来解决，是否想要了解详细信息？ MarkdownPad 的FAQ文档中给出了解决办法：http://markdownpad.com/faq.html#livepreview-directx LivePreview is not working - it displays an error message stating This view has crashed! 官方给出的解释是：这个问题一般多见于win8（*当然现在win10也有，官方文档该更新啦）。错误的表现形式即：不能实时预览Markdown生成的HTML页面。 This issue has been specifically observed in Windows 8. You may see an error message as shown here, and no HTML will be rendered when you type in the Markdown Editor pane. 为了修复这个问题，你需要安装这么一个SDK工具包，点击链接获取。 To fix this issue, please try installing the Awesomium 1.6.6 SDK. 如果还没有解决，那就买个新电脑吧！哦！不是，让你再装个微软的渲染插件If you continue to experience issues, please install Microsoft’s DirectX End-User Runtimes (June 2010) MarkdownPad2.5注册码邮箱： Soar360@live.com 授权密钥： GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==","categories":[{"name":"软件破解","slug":"软件破解","permalink":"http://dinson.win/categories/软件破解/"}],"tags":[{"name":"破解","slug":"破解","permalink":"http://dinson.win/tags/破解/"}]},{"title":"Android Studio插件整理","date":"2016-06-10T15:33:10.000Z","path":"2016/06/10/16-06-10/","text":"概述 在现如今这个极度推崇敏捷开发的年代，开发时间的节省将会直接压缩开发成本，在这其中，一些开发工具的合理利用讲会极大简化开发工作并增强开发效率。本文将介绍笔者自己在平时开发中经常用到的一些插件，我只能说它们都很实用，当然都是适用于Android Studio的啦。 GsonFormat快速将json字符串转换成一个Java Bean，免去我们根据json字符串手写对应Java Bean的过程。使用方法：快捷键Alt+S也可以使用Alt+Insert选择GsonFormat Android ButterKnife Zelezny 配合ButterKnife实现注解，从此不用写findViewById，想着就爽啊。在Activity，Fragment，Adapter中选中布局xml的资源id自动生成butterknife注解。使用方法：Ctrl+Shift+B选择图上所示选项 Android Code Generator 根据布局文件快速生成对应的Activity，Fragment，Adapter，Menu。 Android Methods Count 显示依赖库中得方法数 Lifecycle Sorter 可以根据Activity或者fragment的生命周期对其生命周期方法位置进行先后排序使用方法：快捷键Ctrl + alt + K CodeGlance 在右边可以预览代码，实现快速定位 FindBugs-IDEA 查找bug的插件，Android Studio也提供了代码审查的功能（Analyze-Inspect Code…） ADB WIFI 使用wifi无线调试你的app，无需root权限 Android Styler 根据xml自动生成style代码的插件使用方法：快捷键Ctrl+Shift+D (or context menu) Android Drawable Importer 这是一个非常强大的图片导入插件。它导入Android图标与Material图标的Drawable ，批量导入Drawable ，多源导入Drawable（即导入某张图片各种dpi对应的图片） SelectorChapek for Android 通过资源文件命名自动生成Selector文件。 LeakCanary 帮助你在开发阶段方便的检测出内存泄露的问题，使用起来更简单方便。 Android Postfix Completion 可根据后缀快速完成代码，这个属于拓展吧，系统已经有这些功能，如sout、notnull等，这个插件在原有的基础上增添了一些新的功能 Android Holo Colors Generator 通过自定义Holo主题颜色生成对应的Drawable和布局文件 GradleDependenciesHelperPlugin maven gradle 依赖支持自动补全 Idea-markdown markdown插件 Sexy Editor 设置AS代码编辑区的背景图 Android-DPI-Calculator DPI计算插件 使用： 或者： Gradle-retrolambda 在java 6 7中使用 lambda表达式插件 Material Theme UI 添加Material主题到你的AS ECTranslation Android Studio Plugin,Translate English to Chinese. Android Studio 翻译插件,可以将英文翻译为中文 PermissionsDispatcher plugin 自动生成6.0权限的代码 WakaTime 记录你在IDE上的工作时间 AndroidLocalizationer 可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件","categories":[{"name":"Android庶系","slug":"Android庶系","permalink":"http://dinson.win/categories/Android庶系/"}],"tags":[{"name":"插件","slug":"插件","permalink":"http://dinson.win/tags/插件/"},{"name":"AS","slug":"AS","permalink":"http://dinson.win/tags/AS/"}]},{"title":"安卓反编译","date":"2016-06-08T06:45:46.000Z","path":"2016/06/08/16-06-08/","text":"准备工作 apktool:资源文件获取，可以提取出图片文件和布局文件进行使用查看 dex2jar:将apk反编译成Java源码（classes.dex转化成jar文件） jd-gui:查看APK中classes.dex转化成出的jar文件，即源码文件 网盘： http://pan.baidu.com/s/1eSkSctc &emsp; 密码：low6 反编译得到源代码、图片、XML配置、语言资源等打开命令行界面（运行-CMD），定位到apktool文件夹，输入以下命令：apktool.bat&emsp;d&emsp;-f&emsp;[apk文件 ]&emsp;[输出文件夹] 例：apktool.bat&emsp;d&emsp;-f&emsp;test.apk&emsp;test 之后发现在文件夹下多了个test文件，点击便可以查看该应用的所有资源文件了。 如果你想将反编译完的文件重新打包成apk，那你可以：输入apktool.bat&emsp;b&emsp;test（你编译出来文件夹）便可。之后在之前的test文件下便可以发现多了2个文件夹:&emsp;&emsp; - build&emsp;&emsp; - dist(里面存放着打包出来的APK文件) 反编译得到Java源代码将APK后缀名改为.rar或.zip，并解压，得到其中的额classes.dex文件（它就是java文件编译再通过dx工具打包而成的），将获取到的classes.dex放到之前解压出来的工具dex2jar-0.0.9.15 文件夹内，在命令行下定位到dex2jar.bat所在目录，输入1dex2jar.bat classes.dex 将生成classes.dex.dex2jar.jar，如下图运行JD-GUI（jd-gui.exe），打开上面生成的jar包，即可看到源代码了HelloAndroid源码（编译前的apk源码对照）如下：","categories":[{"name":"Android庶系","slug":"Android庶系","permalink":"http://dinson.win/categories/Android庶系/"}],"tags":[{"name":"反编译","slug":"反编译","permalink":"http://dinson.win/tags/反编译/"}]},{"title":"常用配置","date":"2016-06-07T10:11:53.000Z","path":"2016/06/07/16-06-07/","text":"Java环境变量123456新建：值为JDK安装目录JAVA_HomePath中添加%JAVA_HOME%\\bin%JAVA_HOME%\\jre\\bin Android环境变量123456新建：值为SDK安装目录 Android_HomePath中添加%Android_Home%\\tools%Android_Home%\\platform-tools","categories":[{"name":"系统配置","slug":"系统配置","permalink":"http://dinson.win/categories/系统配置/"}],"tags":[{"name":"系统配置","slug":"系统配置","permalink":"http://dinson.win/tags/系统配置/"}]},{"title":"GitHub+Hexo搭建个人博客辛酸史--基础搭建(壹)","date":"2016-06-06T15:33:10.000Z","path":"2016/06/06/16-06-06/","text":"概述 hexo是一款基于Node.js的静态博客框架, Hexo github 链接 链接 ,这篇教程是针对与Mac的，参考链接，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。 PS : 以下教程是针对hexo的版本为3.x 准备工作 安装node 到 Node.js 官网下载相应平台的最新版本，一路安装即可。 安装Git 下载 msysgit 并执行即可完成安装。 安装hexo 使用以下命令安装hexo到全局（在任意位置点击鼠标右键，选择Git bash） 1npm install -g hexo ps : npm ERR! registry error parsing json 错误(可能需要设置npm代理,执行命令) 1npm config set registry http://registry.cnpmjs.org 创建hexo文件夹 安装完成后，在你喜爱的文件夹下（如H:\\hexo），执行以下指令(在H:\\hexo内点击鼠标右键，选择Git bash)，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。 1hexo init 安装依赖包 1npm install 本地查看 至此，我们的博客就已经搭建完毕了，执行下面命令部署到本地服务器，然后到浏览器输入localhost:4000看看。 12hexo generatehexo server 执行hexo server提示找不到该指令在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下： 1npm install hexo-server --save 这里我碰到了一个问题，就是提示 npm WARN deprecated swig@1.4.2: This package is no longer maintained 如下图： 起初以为是报了个错误，于是网上一顿搜，各种更新各种折腾。后来发现，其实一直是在安装中，只是速度慢而已，导致我认为出了错误。通过google，通过npm config set registry “https://registry.npm.taobao.org&quot;设置淘宝镜像源后，很快就安装完毕了，弹出了如下界面 Hexo插件 1234567891011$ npm install hexo-generator-index --save #索引生成器$ npm install hexo-generator-archive --save #归档生成器$ npm install hexo-generator-category --save #分类生成器$ npm install hexo-generator-tag --save #标签生成器$ npm install hexo-server --save #本地服务$ npm install hexo-deployer-git --save #hexo通过git发布（必装）$ npm install hexo-renderer-marked@0.2.7 --save #渲染器$ npm install hexo-renderer-stylus@0.3.0 --save #渲染器$ npm install hexo-generator-sitemap --save #站点地图$ npm install hexo-generator-baidu-sitemap --save #百度站点地图 Github 创建博客空间 注册账号 地址：https://github.com/ 创建页面仓库 命名规则：你的github账号.github.io（必须，否则部署完毕之后会404）笔者因为已创建所以报错 生成SSH密钥 1ssh-keygen -t rsa -C “你的邮箱地址” 按3个回车，密码为空。 在C:\\Users\\Administrator.ssh下，得到两个文件id_rsa和id_rsa.pub。 在GitHub上添加SSH密钥 打开id_rsa.pub，复制全文。https://github.com/settings/ssh ，Add SSH key，粘贴进去。 Hexo简单介绍 目录结构 12345678910├── .deploy #需要部署的文件├── node_modules #Hexo插件├── public #生成的静态网页文件├── scaffolds #模板├── source #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里 ├── _drafts #草稿 └── _posts #文章├── themes #主题├── _config.yml #全局配置文件└── package.json 全局配置 _config.yml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# Hexo Configuration# Docs: http://hexo.io/docs/configuration.html# Source: https://github.com/hexojs/hexo/# Site #站点信息title: #标题subtitle: #副标题description: #站点描述，给搜索引擎看的author: #作者email: #电子邮箱language: zh-CN #语言# URL #链接格式url: #网址root: / #根目录permalink: :year/:month/:day/:title/ #文章的链接格式tag_dir: tags #标签目录archive_dir: archives #存档目录category_dir: categories #分类目录code_dir: downloads/codepermalink_defaults:# Directory #目录source_dir: source #源文件目录public_dir: public #生成的网页文件目录# Writing #写作new_post_name: :title.md #新文章标题default_layout: post #模板，包括 post、page、photo、draft（文章、页面、照片、草稿）titlecase: false #标题转换成大写external_link: true #在新选项卡中打开连接filename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsehighlight: #语法高亮 enable: true #是否启用 line_number: true #显示行号 tab_replace:# Category &amp; Tag #分类和标签default_category: uncategorized #默认分类category_map:tag_map:# Archives2: 开启分页1: 禁用分页0: 全部禁用archive: 2category: 2tag: 2# Server #本地服务器port: 4000 #端口号server_ip: localhost #IP 地址logger: falselogger_format: dev# Date / Time format #日期时间格式date_format: YYYY-MM-DD #参考http://momentjs.com/docs/#/displaying/format/time_format: H:mm:ss# Pagination #分页per_page: 10 #每页文章数，设置成 0 禁用分页pagination_dir: page# Disqus #Disqus评论，替换为多说disqus_shortname:# Extensions #拓展插件theme: landscape-plus #主题exclude_generator:plugins: #插件，例如生成 RSS 和站点地图的- hexo-generator-feed- hexo-generator-sitemap# Deployment #部署，将 lmintlcx 改成用户名deploy: type: git repo: 刚刚github创库地址.git branch: master 常用命令 12345678hexo help #查看帮助hexo init #初始化一个目录hexo new \"postName\" #新建文章，简写 hexo nhexo new page \"pageName\" #新建页面hexo generate #生成网页，可以在 public 目录查看整个网站的文件，简写 hexo ghexo server #本地预览，'Ctrl+C'关闭，简写 hexo shexo deploy #部署.deploy目录，简写 hexo d，部署的地址为全局配置设置hexo clean #清除缓存 部署 1hexo g -d hexo deploy问题：Deployer not found: git 1npm install hexo-deployer-git --save Hexo文章格式 1234567---title: #文章的标题date: 2015-07-30 07:56:29 #发表日期，一般不改动（可以改动）categories: categories1 #文章文类tags: [tags1,tags2] #文章标签，多于一项时用这种格式---正文，使用Markdown语法书写 域名的绑定 创建CNAME文件 在站点source目录或者在Repository的根目录下面，新建一个名为CNAME的文本文件，里面写入你要绑定的域名，比如dinson.win DNS域名指向 在你购买域名的网站的控制台修改，例如我在阿里云买的，则去阿里云登录，再把你的域名指向你项目的IP地址，如何知道你项目的ip地址呢，在命令提示符中输入下面代码 1ping \"你的用户名\".github.io","categories":[{"name":"个人博客辛酸系列","slug":"个人博客辛酸系列","permalink":"http://dinson.win/categories/个人博客辛酸系列/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://dinson.win/tags/博客/"},{"name":"Hexo","slug":"Hexo","permalink":"http://dinson.win/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"http://dinson.win/tags/GitHub/"}]}]