[{"title":"Android分屏功能,适配及相关问题","date":"2018-02-03T14:38:20.000Z","path":"2018/02/03/18-02-03/","text":"概述 所谓分屏多任务，就是同时开两个应用时，将手机屏幕一分为二，一个应用占据屏幕上方，一个应用占据屏幕下方，两个应用分别独立工作，并且相互之间不受影响。 如何分屏如果您的应用是使用 N Preview SDK 构建的，且未禁用多窗口支持，则应用默认支持分屏操作。 12345678910compileSdkVersion 'android-N'buildToolsVersion \"24.0.0 rc4\"defaultConfig &#123; applicationId \"com.yll520wcf.myapplication\" minSdkVersion 14 targetSdkVersion 'N' versionCode 1 versionName \"1.0\"&#125; 多窗口生命周期还需要注意的是多窗口不会影响Activity的生命周期。 在多窗口模式中，在指定时间只有最近与用户交互过的 Activity 为活动状态。 该 Activity 将被视为顶级 Activity。 所有其他 Activity 虽然可见，但均处于暂停状态。 但是，这些已暂停但可见的 Activity 在系统中享有比不可见 Activity 更高的优先级。 如果用户与其中一个暂停的 Activity 交互，该 Activity 将恢复，而之前的顶级 Activity 将暂停。 在多窗口模式中，用户仍可以看到处于暂停状态的应用。 应用在暂停状态下可能仍需要继续其操作。 例如，处于暂停模式但可见的视频播放应用应继续显示视频。因此，我们建议播放视频的 Activity 不要在 onPause()方法中暂停视频，应在onStop()暂停视频播放，并在 onStart()中恢复视频播放。 用户使用多窗口模式显示应用时，系统将通知 Activity 发生配置变更。 该变更与系统通知应用设备从纵向模式切换到横向模式时的 Activity 生命周期影响基本相同，但设备不仅仅是交换尺寸，而是会变更尺寸。您的 Activity 可以自行处理配置变更，或允许系统销毁 Activity，并以新的尺寸重新创建该 Activity。 给Activity加上如下配置可以保证切换成多屏模式或者画中画模式时Activity不会销毁重建。 1android:configChanges=\"screenSize|smallestScreenSize|screenLayout|orientation\"&gt; 针对多窗口进行配置在清单文件的 或 节点中设置该属性，启用或禁用多窗口显示：1android:resizeableActivity=[\"true\" | \"false\"] 如果该属性设置为 true，Activity 将能以分屏和自由形状模式启动。 如果此属性设置为 false，Activity 将不支持多窗口模式。 如果该值为 false，且用户尝试在多窗口模式下启动 Activity，该 Activity 将全屏显示。 如果您的应用面向 Android N，但未对该属性指定值，则该属性的值默认设为 true。如果做电视开发或其它特殊需求，还有一个属性需要注意：1android:supportsPictureInPicture=[\"true\" | \"false\"] 在清单文件的 节点中设置该属性，指明 Activity 是否支持画中画显示。如果 android:resizeableActivity为 false，将忽略该属性。 当然你还可以指定在自由形状模式时 Activity 的默认大小、位置和最小尺寸：123456&lt;activity android:name=\".MainActivity\"&gt; &lt;layout android:defaultHeight=\"500dp\" android:defaultWidth=\"600dp\" android:gravity=\"top|end\" android:minimalSize=\"450dp\" /&gt;&lt;/activity&gt; 对于 Android N，清单文件元素支持以下几种属性，这些属性影响 Activity 在多窗口模式中的行为： android:defaultWidth 以自由形状模式启动时 Activity 的默认宽度。 android:defaultHeight 以自由形状模式启动时 Activity 的默认高度。 android:gravity 以自由形状模式启动时 Activity 的初始位置。 android:minimalSize 分屏和自由形状模式中 Activity 的最小高度和最小宽度。 如果用户在分屏模式中移动分界线，使 Activity 尺寸低于指定的最小值，系统会将 Activity 裁剪为用户请求的尺寸。 多窗口模式中运行应用注意事项在设备处于多窗口模式中时，某些功能会被禁用或忽略，因为这些功能对与其他 Activity 或应用共享设备屏幕的 Activity 而言没有意义。 此类功能包括： 某些自定义选项将被禁用；例如，在非全屏模式中，应用无法隐藏状态栏。 系统将忽略对 android:screenOrientation属性所作的更改 Activity类中添加了以下新方法，以支持多窗口显示。 Activity.inMultiWindow()调用该方法以确认 Activity 是否处于多窗口模式。 Activity.inPictureInPicture() 调用该方法以确认 Activity 是否处于画中画模式。注：画中画模式是多窗口模式的特例。 如果myActivity.inPictureInPicture()返回 true，则 myActivity.inMultiWindow()也返回 true。 Activity.onMultiWindowChanged() Activity 进入或退出多窗口模式时系统将调用此方法。 在 Activity 进入多窗口模式时，系统向该方法传递 true 值，在退出多窗口模式时，则传递 false 值。 Activity.onPictureInPictureChanged() Activity 进入或退出画中画模式时系统将调用此方法。 在 Activity 进入画中画模式时，系统向该方法传递 true 值，在退出画中画模式时，则传递 false 值。 每个方法还有 Fragment版本，例如 Fragment.inMultiWindow()。 在多窗口模式中启动新Activity在启动新 Activity 时，用户可以提示系统如果可能，应将新 Activity 显示在当前 Activity 旁边。 要执行此操作，可使用标志Intent.FLAG_ACTIVITY_LAUNCH_TO_ADJACENT。传递此标志将请求以下行为： 如果设备处于分屏模式，系统会尝试在启动系统的 Activity 旁创建新 Activity，这样两个 Activity 将共享屏幕。 系统并不一定能实现此操作，但如果可以，系统将使两个 Activity 处于相邻的位置。如果设备不处于分屏模式，则该标志无效。1234567public void click(View v)&#123; Intent intent=new Intent(); intent.setAction(Intent.ACTION_VIEW); intent.setFlags(Intent.FLAG_ACTIVITY_LAUNCH_ADJACENT); intent.setData(Uri.parse(\"http://www.baidu.com\")); startActivity(intent);&#125; 支持拖放用户可以在两个 Activity 共享屏幕的同时在这两个 Activity 之间拖放。因此，如果您的应用目前不支持拖放功能，您可以在其中添加此功能。 android.view.DropPermissions令牌对象，负责指定对接收拖放数据的应用授予的权限。 View.startDragAndDrop() View.startDrag()的新别名。要启用跨 Activity 拖放，请传递新标志 View.DRAG_FLAG_GLOBAL。如需对接收拖放数据的 Activity 授予 URI 权限，可根据情况传递新标志 View.DRAG_FLAG_GLOBAL_URI_READ或 View.DRAG_FLAG_GLOBAL_URI_WRITE。 View.cancelDragAndDrop() 取消当前正在进行的拖动操作。只能由发起拖动操作的应用调用。 View.updateDragShadow() 替换当前正在进行的拖动操作的拖动阴影。只能由发起拖动操作的应用调用。 Activity.requestDropPermissions() 请求使用 DragEvent中包含的 ClipData传递的内容 URI 的权限。","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[]},{"title":"Android进程保活","date":"2017-07-11T01:08:38.000Z","path":"2017/07/11/17-07-11/","text":"概述 所谓保活即进程在后台一直运行不被杀死。统计一下目前的保活手段： 监听系统广播，如开机、充电状态、网络变化、安装卸载app、锁屏解锁、集成的推送消息等等，亲测无效，在进程被杀了之后也无法再监听到系统广播，也就不存在拉起，只能作为辅助手段，稍后会提起。 实现一个隐藏的前台服务，这个网上很多实现方法，也是我最开始使用的手段。实际上是把进程的优先级给提高了一级，锁屏时间长了还是会被杀死。 使用Linux命令启动一个新进程进行相互保护。才疏学浅，并不太理解原理，不敢多说，详情看这篇博客。亲测无效，不敢说是大神写的不对，可能是我姿势不对。 使用子进程进行相互保护，简而言之就是建两个service,一个是子进程： android:process=”:remote”亲测无效，这个一点点用都没有，因为进程被杀了之后子进程也同时被杀。 谣传QQ曾经让自己不被杀死，曾使用过后台显示一个全透明的、只有1x1像素大小的窗口，这个很匪夷所思，像IOS5之后的后台无限播放无声音乐一样狗血。 以上所有出现的”被杀死”字样全部指的是进程后台状态自动被杀死，而不是指用户手用杀死，类似iphone连按两次HOME键上划杀死后台进程，这个只有一种办法保证不被杀死，就是把你应用加入到系统杀死进程的白名单。所谓跟手机厂商合作加入白名单就是指这个。这里不得不说一个很有意思的app：日程管理时间管理。它里面有引导用户进行白名单设置的操作，很有意思，同事让我看的时候我只想说 简单说上它就是引导用户手动设置了“厂商把你的app加入白名单”这个操作，这个也被我学了过去，连带着页面一起。这只是第一步。接下来如我上面所说，除了4被遗弃之外，把所有的手段都用上了，一开始并没有用5，因为我感觉已经够了。但是依然无法阻止在锁屏+后台的情况下被杀。于是我用上了最后一种手段。 最后一步，我参考了360，在双击返回键后并没有1Process.killProcess(Process.myPid()); 和1System.exit(0); 而是1234Intent intent = new Intent(Intent.ACTION_MAIN);intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);intent.addCategory(Intent.CATEGORY_HOME);getAppContext().startActivity(intent); 并且在清单文件中加入了1android:excludeFromRecents=\"true\" 作用是不在最近使用的列表中出现，也就是连按两次HOME键就不会出现我的app了。 1像素页面保活 新建一个Activity，作为1像素页面的主体，我姑且叫它HooliganActivity: 1234567891011121314151617181920212223242526272829303132333435363738394041public class HooliganActivity extends Activity &#123; private static HooliganActivity instance; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); instance = this; Window window = getWindow(); window.setGravity(Gravity.LEFT | Gravity.TOP); WindowManager.LayoutParams params = window.getAttributes(); params.x = 0; params.y = 0; params.height = 1; params.width = 1; window.setAttributes(params); &#125; /** * 开启保活页面 */ public static void startHooligan() &#123; Intent intent = new Intent(DWApplication.getAppContext(), HooliganActivity.class); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); DWApplication.getAppContext().startActivity(intent); &#125; @Override protected void onDestroy() &#123; super.onDestroy(); instance = null; &#125; /** * 关闭保活页面 */ public static void killHooligan() &#123; if(instance != null) &#123; instance.finish(); &#125; &#125;&#125; 注册清单文件 123456789101112131415&lt;activity android:name=\".activity.HooliganActivity\" android:configChanges=\"keyboardHidden|orientation|screenSize|navigation|keyboard\" android:excludeFromRecents=\"true\" android:exported=\"false\" android:finishOnTaskLaunch=\"false\" android:launchMode=\"singleInstance\" android:theme=\"@style/HooliganActivityStyle\"/&gt; &lt;style name=\"HooliganActivityStyle\"&gt; &lt;item name=\"android:windowBackground\"&gt;@color/transparent&lt;/item&gt; &lt;item name=\"android:windowContentOverlay\"&gt;@null&lt;/item&gt; &lt;item name=\"android:windowIsTranslucent\"&gt;true&lt;/item&gt; &lt;item name=\"android:windowNoDisplay\"&gt;false&lt;/item&gt; &lt;item name=\"android:windowDisablePreview\"&gt;true&lt;/item&gt;&lt;/style&gt; 监听锁屏和解锁通知，不能静态注册广播，只能动态注册 1234IntentFilter filter = new IntentFilter();filter.addAction(Intent.ACTION_SCREEN_ON);filter.addAction(Intent.ACTION_SCREEN_OFF);registerReceiver(new BootCompleteReceiver(),filter); 分别在解锁和锁屏时唤醒我的HooliganActivity 12345678910public class BootCompleteReceiver extends BroadcastReceiver &#123; @Override public void onReceive(Context context, Intent intent) &#123; if(intent.getAction().equals(Intent.ACTION_SCREEN_OFF)) &#123; HooliganActivity. startHooligan(); &#125; else if(intent.getAction().equals(Intent.ACTION_SCREEN_ON))&#123; HooliganActivity. killHooligan(); &#125; &#125;&#125; 这样你在后台每次锁屏，实际上都会吊起一个一像素的页面，假装app在前台，拥有最高进程优先级。 不推荐使用，太流氓了- -！。 最后 技术无罪。——王欣 但人有罪。","categories":[],"tags":[]},{"title":"在百度地图上绘制运动轨迹图及相关事件处理","date":"2017-07-10T02:44:08.000Z","path":"2017/07/10/17-07-03/","text":"概述 上篇文章讲述了如何在地图显示位置点，这篇文章主要讲述如何在地图上画运动轨迹，以及地图图层点击事件的处理。 本篇将要实现的效果 跑步结束后，静态的画出整个运动轨迹 跑步过程中，时时动态的画运动轨迹很多运动类的app都有画出跑步者运动轨迹的需求，拿咕咚来说，我们看一下它的效果图： 如何实现： 将点与点连成线，在百度地图MapView上画出线条图层； 获取定位点List：通过百度定位sdk：LocationClient类获取，户外运动画运动轨迹，要求位置点的精度高，所以我们必须使用gps定位类型的位置结果。 12//允许使用gps定位mOption.setOpenGps(true); 静态画整个运动轨迹画轨迹123456789101112131415161718192021222324252627282930//伪代码public void onCreate()&#123; // 地图初始化 MapView mMapView = (MapView) findViewById(R.id.bmapView); BaiduMap mBaiduMap = mMapView.getMap(); // 开启定位图层 mBaiduMap.setMyLocationEnabled(true); //获取运动后的定位点 coordinateConvert(); //设置缩放中点LatLng target，和缩放比例 MapStatus.Builder builder = new MapStatus.Builder(); builder.target(target).zoom(18f); //地图设置缩放状态 mBaiduMap.animateMapStatus(MapStatusUpdateFactory.newMapStatus(builder.build())); /** * 配置线段图层参数类： PolylineOptions * ooPolyline.width(13)：线宽 * ooPolyline.color(0xAAFF0000)：线条颜色红色 * ooPolyline.points(latLngs)：List&lt;LatLng&gt; latLngs位置点，将相邻点与点连成线就成了轨迹了 */ OverlayOptions ooPolyline = new PolylineOptions().width(13).color(0xAAFF0000).points(latLngs); //在地图上画出线条图层，mPolyline：线条图层 mPolyline = (Polyline) mBaiduMap.addOverlay(ooPolyline); mPolyline.setZIndex(3);&#125; 1234567891011121314151617181920212223242526272829303132/** * 我这里是在google地图取下来的wgs84坐标集合Const.googleWGS84，模拟的运动后获取的坐标集合， 所以需要转化成百度坐标；实际应该是将定位sdk返回的位置点加入到位置集合中， 定位sdk需要设置返回坐标为百度坐标：mOption.setCoorType(\"bd09ll\")，这样就直接用，不用转换了。 */private void coordinateConvert()&#123; //百度坐标转化工具类CoordinateConverter CoordinateConverter converter = new CoordinateConverter(); /** * 设置需要转化的坐标类型 CoordType.COMMON：google地图、腾讯地图、高德地图所用坐标 CoordType.GPS：设备采集的原始GPS坐标 */ converter.from(CoordType.COMMON); double lanSum = 0; double lonSum = 0; for (int i = 0; i &lt; Const.googleWGS84.length; i++) &#123; //\"39.881970,116.456218\" String[] ll = Const.googleWGS84[i].split(\",\"); LatLng sourceLatLng = new LatLng(Double.valueOf(ll[0]), Double.valueOf(ll[1])); converter.coord(sourceLatLng); //需要转化的坐标点 LatLng desLatLng = converter.convert(); //转化成百度坐标点 latLngs.add(desLatLng);//加入定位点集合 lanSum += desLatLng.latitude; lonSum += desLatLng.longitude; &#125; //我这里设置地图的缩放中心点为所有点的几何中心点 target = new LatLng(lanSum/latLngs.size(), lonSum/latLngs.size());&#125; 添加起始图标图层、点击图层响应事件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485//始点图层图标BitmapDescriptor startBD= BitmapDescriptorFactory .fromResource(R.drawable.ic_me_history_startpoint);//终点图层图标BitmapDescriptor finishBD= BitmapDescriptorFactory .fromResource(R.drawable.ic_me_history_finishpoint);//地图中显示信息窗口InfoWindow mInfoWindow;MarkerOptions oStart = new MarkerOptions();//地图标记类型的图层参数配置类 oStart.position(latLngs.get(0));//图层位置点，第一个点为起点oStart.icon(startBD);//设置图层图片oStart.zIndex(1);//设置图层Index//添加起点图层Marker mMarkerA = (Marker) (mBaiduMap.addOverlay(oStart)); //添加终点图层MarkerOptions oFinish = new MarkerOptions().position(latLngs.get(latLngs.size()-1)).icon(finishBD).zIndex(2);Marker mMarkerB = (Marker) (mBaiduMap.addOverlay(oFinish));//设置图层点击监听回调mBaiduMap.setOnMarkerClickListener(new OnMarkerClickListener() &#123; public boolean onMarkerClick(final Marker marker) &#123; if (marker.getZIndex() == mMarkerA.getZIndex() ) &#123;//如果是起始点图层 TextView textView = new TextView(getApplicationContext()); textView.setText(\"起点\"); textView.setTextColor(Color.BLACK); textView.setGravity(Gravity.CENTER); textView.setBackgroundResource(R.drawable.popup); //设置信息窗口点击回调 OnInfoWindowClickListener listener = new OnInfoWindowClickListener() &#123; public void onInfoWindowClick() &#123; //这里是主线线程，可以实现自己的一些功能 Toast.makeText(getApplicationContext(),\"这里是起点\", Toast.LENGTH_SHORT).show(); mBaiduMap.hideInfoWindow();//隐藏信息窗口 &#125; &#125;; LatLng latLng = marker.getPosition();//信息窗口显示的位置点 /** * 通过传入的 bitmap descriptor 构造一个 InfoWindow * bd - 展示的bitmap position - InfoWindow显示的位置点 yOffset - 信息窗口会与图层图标重叠，设置Y轴偏移量可以解决 listener - 点击监听者 */ mInfoWindow = new InfoWindow(BitmapDescriptorFactory.fromView(textView), latLng, -47, listener); mBaiduMap.showInfoWindow(mInfoWindow);//显示信息窗口 &#125; else if (marker.getZIndex() == mMarkerB.getZIndex()) &#123;//如果是终点图层 Button button = new Button(getApplicationContext()); button.setText(\"终点\"); button.setOnClickListener(new OnClickListener() &#123; public void onClick(View v) &#123; Toast.makeText(getApplicationContext(),\"这里是终点\", Toast.LENGTH_SHORT).show(); mBaiduMap.hideInfoWindow(); &#125; &#125;); LatLng latLng = marker.getPosition(); /** * 通过传入的 view 构造一个 InfoWindow, 此时只是利用该view生成一个Bitmap绘制在地图中，监听事件由自己实现。 view - 展示的 view position - 显示的地理位置 yOffset - Y轴偏移量 */ mInfoWindow = new InfoWindow(button, latLng, -47); mBaiduMap.showInfoWindow(mInfoWindow); &#125; return true; &#125;&#125;);//也可以给运动轨迹添加点击事件mBaiduMap.setOnPolylineClickListener(new BaiduMap.OnPolylineClickListener() &#123; @Override public boolean onPolylineClick(Polyline polyline) &#123; if (polyline.getZIndex() == mPolyline.getZIndex()) &#123; Toast.makeText(getApplicationContext(),\"点数：\" + polyline.getPoints().size() + \",width:\" + polyline.getWidth(), Toast.LENGTH_SHORT).show(); &#125; return false; &#125;&#125;); 到这里，运动结束后画出整个轨迹图和图层添加点击事件就介绍完了。 时时动态的画运动轨迹 关键在于取点：gps刚接收到信号时返回的一些点精度不高，容易造成位置偏移，如何取点很重要。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189//伪代码public void onCreate() &#123; mMapView = (MapView) findViewById(R.id.bmapView); mBaiduMap = mMapView.getMap(); // 开启定位图层 mBaiduMap.setMyLocationEnabled(true); /**添加地图缩放状态变化监听，当手动放大或缩小地图时，拿到缩放后的比例，然后获取到下次定位， * 给地图重新设置缩放比例，否则地图会重新回到默认的mCurrentZoom缩放比例 */ mCurrentZoom = 18; mBaiduMap.setOnMapStatusChangeListener(new OnMapStatusChangeListener() &#123; @Override public void onMapStatusChangeStart(MapStatus arg0) &#123; &#125; @Override public void onMapStatusChangeFinish(MapStatus arg0) &#123; mCurrentZoom = arg0.zoom;//获取手指缩放地图后的值 &#125; @Override public void onMapStatusChange(MapStatus arg0) &#123; &#125; &#125;); //设置定位图标类型为跟随模式 mBaiduMap.setMyLocationConfiguration(new MyLocationConfiguration( com.baidu.mapapi.map.MyLocationConfiguration.LocationMode.FOLLOWING, true, null)); // 定位初始化 mLocClient = new LocationClient(this); mLocClient.registerLocationListener(myListener); LocationClientOption option = new LocationClientOption(); option.setLocationMode(LocationMode.Device_Sensors);//只接受gps位置 option.setOpenGps(true); // 允许gps定位 option.setCoorType(\"bd09ll\"); // 设置坐标类型 option.setScanSpan(1000);//一秒一个gps mLocClient.setLocOption(option);&#125;//开始获取位置点public void onStart() &#123; start.setOnClickListener(new OnClickListener() &#123; @Override public void onClick(View v) &#123; if (mLocClient != null &amp;&amp; !mLocClient.isStarted()) &#123; mLocClient.start(); &#125; &#125; &#125;);&#125;//位置回调，取点很重要public class MyLocationListenner implements BDLocationListener &#123; @Override public void onReceiveLocation(final BDLocation location) &#123; if (location == null || mMapView == null) &#123; return; &#125; if (location.getLocType() == BDLocation.TypeGpsLocation) &#123;//只要gps点 if (isFirstLoc) &#123;//首次定位 /**第一个点很重要，决定了轨迹的效果，gps刚接收到信号时返回的一些点精度不高， * 尽量选一个精度相对较高的起始点，这个过程大概从gps刚接收到信号后5-10秒就可以完成，不影响效果。 * 注：gps接收卫星信号少则十几秒钟，多则几分钟， * 如果长时间手机收不到gps，退出，重启手机再试，这是硬件的原因 */ LatLng ll = null; //选一个精度相对较高的起始点 ll = getMostAccuracyLocation(location); if(ll == null)&#123; return; &#125; isFirstLoc = false; points.add(ll);//加入集合 last = ll; //显示当前定位点，缩放地图 locateAndZoom(location, ll); //标记起点图层位置 MarkerOptions oStart = new MarkerOptions();// 地图标记覆盖物参数配置类 oStart.position(points.get(0));// 覆盖物位置点，第一个点为起点 oStart.icon(startBD);// 设置覆盖物图片 mBaiduMap.addOverlay(oStart); // 在地图上添加此图层 return;//画轨迹最少得2个点，首地定位到这里就可以返回了 &#125; //从第二个点开始 LatLng ll = new LatLng(location.getLatitude(), location.getLongitude()); //sdk回调gps位置的频率是1秒1个，位置点太近动态画在图上不是很明显，可以设置点之间距离大于为5米才添加到集合中 if (DistanceUtil.getDistance(last, ll) &lt; 5) &#123; return; &#125; points.add(ll);//如果要运动完成后画整个轨迹，位置点都在这个集合中 last = ll; //显示当前定位点，缩放地图 locateAndZoom(location, ll); //清除上一次轨迹，避免重叠绘画 mMapView.getMap().clear(); //起始点图层也会被清除，重新绘画 MarkerOptions oStart = new MarkerOptions(); oStart.position(points.get(0)); oStart.icon(startBD); mBaiduMap.addOverlay(oStart); //将points集合中的点绘制轨迹线条图层，显示在地图上 OverlayOptions ooPolyline = new PolylineOptions().width(13).color(0xAAFF0000).points(points); mPolyline = (Polyline) mBaiduMap.addOverlay(ooPolyline); &#125; &#125;&#125;//首次定位很重要，选一个精度相对较高的起始点private LatLng getMostAccuracyLocation(final BDLocation location)&#123; if (location.getRadius()&gt;25) &#123;//gps位置精度大于25米的点直接弃用 return null; &#125; LatLng ll = new LatLng(location.getLatitude(), location.getLongitude()); if (DistanceUtil.getDistance(last, ll ) &gt; 5) &#123; last = ll; points.clear();//有两点位置大于5，重新来过 return null; &#125; points.add(ll); last = ll; //有5个连续的点之间的距离小于5，认为gps已稳定，以最新的点为起始点 if(points.size() &gt;= 5)&#123; points.clear(); return ll; &#125; return null;&#125;//显示当前定位点，缩放地图private void locateAndZoom(BDLocation location, LatLng ll) &#123; /** * 记录当前经纬度，当位置不变，手机转动，取得方向传感器的方向， 给地图重新设置位置参数，在跟随模式下可使地图箭头随手机转动而转动 */ mCurrentLat = location.getLatitude(); mCurrentLon = location.getLongitude(); locData = new MyLocationData.Builder().accuracy(0)//去掉精度圈 //此mCurrentDirection为自己获取到的手机传感器方向信息，顺时针0-360 .direction(mCurrentDirection).latitude(location.getLatitude()) .longitude(location.getLongitude()).build(); mBaiduMap.setMyLocationData(locData);//显示当前定位位置点 //给地图设置缩放中心点，和缩放比例值 builder = new MapStatus.Builder(); builder.target(ll).zoom(mCurrentZoom); mBaiduMap.animateMapStatus(MapStatusUpdateFactory.newMapStatus(builder.build()));&#125;//运动结束增加终点图标finish.setOnClickListener(new OnClickListener() &#123; @Override public void onClick(View v) &#123; if (mLocClient != null &amp;&amp; mLocClient.isStarted()) &#123; mLocClient.stop();//停止定位 if(points.size() &lt;= 0)&#123; return; &#125; //运动结束记得标记终点图标 MarkerOptions oFinish = new MarkerOptions(); oFinish.position(points.get(points.size() - 1)); oFinish.icon(finishBD); mBaiduMap.addOverlay(oFinish); &#125; &#125;&#125;); 退出记得释放资源12345678910111213//伪代码protected void onDestroy() &#123; // 退出时销毁定位 mLocClient.unRegisterLocationListener(myListener); mLocClient.stop(); // 关闭定位图层 mBaiduMap.setMyLocationEnabled(false); mMapView.getMap().clear(); mMapView.onDestroy(); mMapView = null; startBD.recycle(); finishBD.recycle();&#125; 我们画运动轨迹要求定位sdk返回的位置精度很高，轨迹的效果才会好，因而必须接受gps位置点。但是gps位置的在刚开始收到信号时精度不高，会出现位置漂移的情况，所以要选取一个精度较好的点。在建筑物、桥梁、大树、隧道里面，gps信号不好，精度不高，所以在开阔地带，运动轨迹效果更好。","categories":[],"tags":[]},{"title":"Lambda 表达式在 Android 开发中的使用","date":"2017-07-01T00:44:44.000Z","path":"2017/07/01/17-07-01/","text":"概述 Lambda ,希腊字母 “λ” 的英文名称。没错，就是你高中数学老师口中的那个“兰布达”。在编程世界中，它是匿名函数的别名， Java 从 Java 8 开始引入 lambda 表达式。而 Android 开发者的世界里，直到 Android Studio 2.4 Preview 4 及其之后的版本里，lambda 表达式才得到完全的支持（在此之前需要使用 Jack 编译器或 retrolambda 等插件，详见链接）。新版本 Android Studio 使用向导详见 《在 Android Studio 上使用 Java 8 新特性》。 Oracle 官方推出的 lambda 教程开篇第一句就表扬了其对匿名内部类笨拙繁琐的代码的简化，然而，在各大 RxJava 教程下的评论中，最受吐槽的就是作者提供的示例代码用了 lambda 表达式，给阅读造成了很大的障碍。 所以，在这篇文章中，我会先讲解 lambda 表达式的作用和三种形式，之后提供一个在 Android Studio 便捷使用 lambda 的小技巧，然后说一说 lambda 表达式中比较重要的变量捕获概念，最后再讲一些使用 lambda 表达式前后的差异。 作用前面提到，lambda 是匿名函数的别名。简单来说，lambda 表达式是对匿名内部类的进一步简化。使用 lambda 表达式的前提是编译器可以准确的判断出你需要哪一个匿名内部类的哪一个方法。 我们最经常接触使用匿名内部类的行为是为 view 设置 OnClickListener ，这时你的代码是这样的：12345button.setOnClickListener(new View.OnClickListener()&#123; @Override public void onClick(View v)&#123; doSomeWork(); &#125;&#125;); 使用匿名内部类，实现了对象名的隐匿；而匿名函数，则是对方法名的隐匿。所以当使用 lambda 表达式实现上述代码时，是这样的：12345button.setOnClickListener( (View v) -&gt; &#123; doSomeWork(); &#125;); 看不懂？没关系,在这两个示例中，你只要理解，lambda 表达式不仅对对象名进行隐匿，更完成了方法名的隐匿，展示了一个接口抽象方法最有价值的两点：参数列表和具体实现。下面我会对 lambda 的各种形式进行列举。 形式 在 Java 中，lambda 表达式共有三种形式：函数式接口、方法引用和构造器引用。其中，函数式接口形式是最基本的 lambda 形式，其余两种形式都是基于此形式进行拓展。 PS：为了更好的展示使用 lambda 表达式前后的代码区别，本文将使用 lambda 表达式给引用赋值的形式作为实例展示，而不是常用的直接将 lambda 表达式传入方法之中。同时，举例也不一定具有实际意义。 函数式接口函数式接口是指有且只有一个抽象方法的接口，比如各种 Listener 接口和 Runnable 接口。lambda 表达式就是对这类接口的匿名内部类进行简化。基本形式如下：( 参数列表… ) -&gt; { 语句块… } 下面以 Java 提供的 Comparator 接口来展示一个实例，该接口常用于排序比较：1234567891011interface Comparator&lt;T&gt; &#123;int compare(T var1, T var2);&#125;Comparator&lt;String&gt; comparator = new Comparator&lt;String&gt; ()&#123; @Override public int compare(String s1, String s2) &#123; doSomeWork(); return result; &#125;&#125;;Comparator&lt;String&gt; comparator = (String s1, String s2) -&gt; &#123; doSomeWork(); return result;&#125;; 当编译器可以推导出具体的参数类型时，我们可以从参数列表中忽略参数类型，那么上面的代码就变成了：1234Comparator&lt;String&gt; comparator = ( s1 , s2 ) -&gt; &#123; doSomeWork(); return result;&#125;; 当参数只有一个时，参数列表两侧的圆括号也可省略，比如 OnClickListener 接口可写成 ：12interface OnClickListener &#123; void onClick(View v); &#125;OnClickListener listener = v -&gt; &#123; 语句块... &#125; ; 然而，当方法没有传入参数的时候，则记得提供一对空括号假装自己是参数列表（雾），比如 Runnable 接口：12interface Runnable &#123; void run(); &#125;Runnable runnable = () -&gt; &#123; 语句块... &#125; ; 当语句块内的处理逻辑只有一句表达式时，其两侧的花括号也可省略，特别注意这句处理逻辑表达式后面也不带分号。比如这个关闭 activity 的点击方法：1button.setOnClickListener( v -&gt; activity.finish() ); 同时，当只有一句去除花括号的表达式且接口方法需要返回值时，这个表达式不用（也不能）在表达式前加 return ，就可以当作返回语句。下面用 Java 的 Function 接口作为示例，这是一个用于转换类型的接口，在这里我们获取一个 User 对象的姓名字符串并返回：1234567interface Function &lt;T, R&gt; &#123; R apply(T t); &#125;Function &lt;User, String&gt; function = new Function &lt;User, String&gt;()&#123; @Override public String apply(User user) &#123; return user.getName(); &#125;&#125;;Function &lt;User, String&gt; function = user -&gt; user.getName() ; 方法引用在介绍第一种形式的之前，我曾写道：函数式接口形式是最基本的 lambda 表达式形式，其余形式都是由其拓展而来。那么，现在来介绍第二种形式：方法引用形式。 当我们使用第一种 lambda 表达式的时候，进行逻辑实现的时候我们既可以自己实现一系列处理，也可以直接调用已经存在的方法，下面以 Java 的 Predicate 接口作为示例，此接口用来实现判断功能，我们来对字符串进行全面的判空操作：123456interface Predicate&lt;T&gt; &#123; boolean test(T t); &#125;Predicate&lt;String&gt; predicate= s -&gt; &#123; //用基本代码组合进行判断 return s==null || s.length()==0 ; &#125;; 我们知道，TextUtils 的 isEmpty() 方法实现了上述功能，所以我们可以写作：1Predicate&lt;String&gt; predicate = s -&gt; TextUtils.isEmpty(s) ; 这时我们调用了已存在的方法来进行逻辑判断，我们就可以使用方法引用的形式继续简化这一段 lambda 表达式：1Predicate&lt;String&gt; predicate = TextUtils::isEmpty ; 惊不惊喜？意不意外？ 方法引用形式就是当逻辑实现只有一句且调用了已存在的方法进行处理( this 和 super 的方法也可包括在内)时，对函数式接口形式的 lambda 表达式进行进一步的简化。传入引用方法的参数就是原接口方法的参数。 接下来总结一下方法引用形式的三种格式： object :: instanceMethod直接调用任意对象的实例方法，如 obj::equals 代表调用 obj 的 equals 方法与接口方法参数比较是否相等，效果等同 obj.equals(t);。当前类的方法可用this::method进行调用，父类方法同理。 ClassName :: staticMethod直接调用某类的静态方法，并将接口方法参数传入，如上述 TextUtils::isEmpty ，效果等同 TextUtils.isEmpty(s); ClassName :: instanceMethod较为特殊,将接口方法参数列表的第一个参数作为方法调用者，其余参数作为方法参数。由于此类接口较少，故选择 Java 提供的 BiFunction 接口作为示例，该接口方法接收一个 T1 类对象和一个 T2 类对象，通过处理后返回 R 类对象： 1234567891011interface BiFunction&lt;T1, T2, R&gt; &#123; R apply(T1 t1, T2 t2);&#125;BiFunction&lt;String,String,Boolean&gt; biFunction= new BiFunction&lt;String, String, Boolean&gt;() &#123; @Override public Boolean apply(String s1, String s2)&#123; return s1.equals(s2); &#125; &#125;;// ClassName 为接口方法的第一个参数的类名，同时利用接口方法的第一个参数作为方法调用者，其余参数作为方法参数，实现 s1.equals(s2);BiFunction&lt;String,String,Boolean&gt; biFunction= String::equals; 构造器引用Lambda 表达式的第三种形式，其实和方法引用十分相似，只不过方法名替换为 new 。其格式为ClassName :: new。这时编译器会通过上下文判断传入的参数的类型、顺序、数量等，来调用适合的构造器，返回对象。 使用技巧Android Studio 会在可以转化为 lambda 表达式的代码上进行如图的灰色标识，这时将光标移至灰色区域，按下 Alt + Enter ，选择第一项（方法引用和构造器引用在第二项），IDE 就会自动进行转换。 变量捕获在使用匿名内部类时，若要在内部类中使用外部变量，则需要将此变量定义为 final 变量。因为我们并不知道所实现的接口方法何时会被调用，所以通过设立 final 来确保安全。在 lambda 表达式中，仍然需要遵守这个标准。 不过在 Java 8 中，新增了一个 effective final 功能，只要一个变量没有被修改过引用（基本变量则不能更改变量值），即为实质上的 final 变量，那么不用再在声明变量时加上 final 修饰符。接下来还是通过一个示例解释，示例中共有三句被注释掉的赋值语句，去除任意一句的注释，都会报错：Variable used in lambda expression should be final or effectively final。12345678int effectiveFinalInt=666;//外部变量//①effectiveFinalInt=233；button.setOnClickListener(v -&gt; &#123; Toast.makeText( effectiveFinalInt + \"\").show(); //②effectiveFinalInt=233; &#125;); //③effectiveFinalInt=233; 可以看到，我们可以不做任何声明上的改变即可在 lambda 中使用外部变量，前提是我们以 final 的规则对待这个变量。 一点玄学this 关键字在匿名内部类中，this 关键字指向的是匿名类本身的对象，而在 lambda 中，this 指向的是 lambda 表达式的外部类。 方法数差异当前 Android Studio 对 Java 8 新特性编译时采用脱糖（desugar）处理，lambda 表达式经过编译器编译后，每一个 lambda 表达式都会增加 1~2 个方法数。而 Android 应用的方法数不能超过 65536 个。虽然一般应用较难触发，但仍需注意。 参考资料 书籍：《 Java 核心技术 》 网络文章：在 Android Studio 上使用 Java 8 新特性(官方)Oracle 官方 lambda 教程匿名函数–维基百科（需科学上网）深入浅出 Java 8 Lambda 表达式","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"Lambda","slug":"Lambda","permalink":"http://dinson.win/tags/Lambda/"}]},{"title":"2017年Android百大框架排行榜","date":"2017-06-28T00:57:07.000Z","path":"2017/06/28/17-06-28/","text":"概述 排行榜包括四大类： 单一框架：仅提供路由、网络层、UI层、通信层或其他单一功能的框架 混合开发框架：提供开发hybrid app、h5与webview结合能力、web app能力的框架。 企业级开源项目：可以独立运行的app，有极高的学习价值、思路借鉴意义 书籍类开源项目：类似Open-sourc-project这样的导航类项目，大型公司的Android课程的学习目录 百大框架排行榜 框架名称 上榜关键字 1.Retrofit 网络 2.okhttp 网络 3.Butter Knife 代码模板 4.MPAndroidChart 图表 5.glide 图片 6.leakcanary 内存 7.Android-Universal-Image-Loader 图片 8.EventBus 事件消息 9.zxing 条码扫描 10.picasso 图片 11.lottie-android 动画 12.fresco 图片 13.RxAndroid 异步 14.SlidingMenu 菜单 15.PhotoView 图片 16.material-dialogs UI 17.droid-async-http 网络 18.androidannotations 注解 19.fastjson json 20.Material-Animations 动画 21.tinker 热修复 22.ViewPagerIndicator UI 23.Android-CleanArchitecture 架构 24.Android-PullToRefresh 刷新 25.flexbox-layout UI 26.AndroidSwipeLayout UI 27.realm-java 数据库 28.greenDAO 数据 29.stetho 调试 30.BaseRecyclerViewAdapterHelper UI 31.AndroidViewAnimations 动画 32.MaterialDrawer 菜单 33.Android-ObservableScrollView UI 34.CircleImageView 图片 35.logger 调试 36.agera 异步 37.BottmBar 菜单 38.Calligraphy 字体 39.AndroidSlidingUpPanel UI 40.AppIntro UI 41.recyclerview-animators 动画 42.dagger 依赖注入 43.Android-Bootstarp UI 44.RxBinding 响应式 45.ListViewAnimations 动画 46.UItimateRecyclerView UI 47.uCrop 图片 48.RxJava-Android-Samples 用例 49.AndroidAutoLayout 适配 50.EffectiveAndroidUI 性能 51.Luban 图片 52.DroidPlugin 插件化 53.otto 响应式 54.u2020 用例 55.buck 构建 56.PermissionsDispatcher 权限 57.android-gif-drawable GIF 58.Apktool 反编译 59.dynamic-load-apk 插件化 60.atlas 插件化 61.volley 网络 62.androidmvp 用例 63.SwipeBackLayout 手势 64.FlycoTabLayout UI 65.android-testing 测试 66.FileDownloader 下载 67.JieCaoVideoPlayer 多媒体 68.glide-transformations 图片 69.android-gpuimage 图片 70.RxPermissions 权限 71.freeline 编译 72.RxLifecycle 生命周期 73.classyshark 反编译 74.acra 崩溃日志 75.DiskLruCache 文件 76.dexposed 热修复 77.Litho 性能 78.mosby MVP 79.AndResGuard 混淆 80.StatusBarUtil 状态栏 81.robolectric 测试 82.Fragmentation 嵌套 83.Small 插件化 84.JsBridge hybrid 85.richeditor-android UI 86.Transitions-Everywhere 动画 87.android-viewbadger 勋章 88.AndroidWiFiADB 调试 89.emojicon 表情包 90.packer-ng-plugin 多渠道 91.android-priority-jobqueue 多线程 92.Android-Debug-Database 调试 93.conceal 加密 94.ARouter 页面路由 95.MagicaSakura 多主题 96.CustomActivityOnCrash 崩溃 97.XhsEmoticonsKeyboard 键盘 Retrofit 一句话介绍：Retrofit是一款类型安全的网络框架，基于HTTP协议，服务于Android和java语言 上榜理由：Retrofit以21.8k的stars量雄踞github中android子标题榜首，第一当之无愧。 官网地址：http://square.github.io/retrofit/ github：https://github.com/square/retrofit 作者：square团队 使用：1compile 'com.squareup.retrofit2:retrofit:2.3.0' okhttp 一句话介绍：okhttp是一款基于HTTP和HTTP2.0协议的网络框架，服务于java和android客户端 上榜理由：okhttp以20.4k的stars量雄踞github中android子标题第二名。大型公司比如淘宝也封装的是okhttp。Retrofit2.0开始内置okhttp框架，Retrofit专注封装接口完成业务需求，okhttp专注网络请求的安全高效，笔者将两者区分开，是想让后来学习者知道，这是两套框架，学习框架原理时可以分开学习，以免理解混乱。 官网地址：http://square.github.io/okhttp/ github：https://github.com/square/okhttp 作者：square团队 使用：1compile 'com.squareup.okhttp3:okhttp:3.8.0' Butter Knife 一句话介绍：Butter Knife所提供了一种能力——使用注解生成模板代码，将view与方法和参数绑定。 上榜理由：github上16.5K个star，配合Androidstudio提供的Butter Knife插件，帮助开发者省却了频繁findviewbyid的烦恼，最新的Butter Knife还提供了onclick绑定以及字符串的初始化，初学者可以查阅Butter Knife以及Butter Knife插件进一步学习！ 官网地址：http://jakewharton.github.io/butterknife/ github：https://github.com/JakeWharton/butterknife 作者：JakeWharton ，也是square团队成员之一 使用：1234dependencies &#123; compile 'com.jakewharton:butterknife:8.6.0' annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'&#125; MPAndroidChart 一句话介绍：MPAndroidChart是一款图表框架 上榜理由：github上16.1K个star，以快速、简洁。强大著称的图表框架 官网地址：https://github.com/PhilJay/MPAndroidChart github：https://github.com/PhilJay/MPAndroidChart 作者：PhilJay 使用： 在根目录的 build.gradle上加入: 12345allprojects &#123; repositories &#123; maven &#123; url \"https://jitpack.io\" &#125; &#125;&#125; 在app的build.gradle上加入： 123dependencies &#123; compile 'com.github.PhilJay:MPAndroidChart:v3.0.2'&#125; glide 一句话介绍：glide是一款专注于提供流畅划动能力的“图片加载和缓存框架” 上榜理由：15.9k个star，图片加载类框架排名第一的框架，google 在2014开发者大会上演示的camera app就是基于gilde框架开发的 github：https://github.com/bumptech/glide 作者：Bump Technologies团队 使用：12345678repositories &#123; mavenCentral()&#125;dependencies &#123; compile 'com.github.bumptech.glide:glide:3.8.0' compile 'com.android.support:support-v4:19.1.0'&#125; leakcanary 一句话介绍：一款内存检测框架，服务于java和android客户端 上榜理由：方便，简洁是leakcanary最大的特点，只需在应用的apllication中集成，就可以直接使用它；15.5k个star说明了它有多么受欢迎 github：https://github.com/square/leakcanary 作者：square团队 使用：12345dependencies &#123; debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1' releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1' testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'&#125; 在 Application 中写入:123456789101112public class ExampleApplication extends Application &#123; @Override public void onCreate() &#123; super.onCreate(); if (LeakCanary.isInAnalyzerProcess(this)) &#123; // This process is dedicated to LeakCanary for heap analysis. // You should not init your app in this process. return; &#125; LeakCanary.install(this); // Normal app init code... &#125;&#125; Android-Universal-Image-Loader 一句话介绍：曾经的图片加载框架王者，android开发老手都用过它 上榜理由:android端图片加载框架的老大哥了，15.3k个star足以证明它的热门，UIL与gilde最大区别是可定制，UIL提供了大量配置方式，图片加载状态的回调（成功，失败，进行中），加载动画等；以及提供了移动端图片加载框架的缓存思路：三级缓存策略 sd卡-内存-网络；值得注意的是，UIL以及两年未更新了，但笔者仍推荐各位使用！ github：https://github.com/nostra13/Android-Universal-Image-Loader 作者：nostra13 使用：下载地址 universal-image-loader-1.9.5.jar EventBus 一句话介绍：EventBus是一款本地组件间通信框架 上榜理由：组件间通信框架star量第一：14.8k，在大型项目的Activities，fragments，Threads，Services都可以看到它的使用场景，尽管EventBus在向未创建的组件传递事件时有些局限，仅适合在“活着的”组件间传递消息，但仍不妨碍它活跃在各个大型项目各个场景里。 官网地址：http://greenrobot.org/eventbus/documentation/how-to-get-started/ github：https://github.com/greenrobot/EventBus 作者：greenrobot 使用：1compile 'org.greenrobot:eventbus:3.0.0' zxing 一句话介绍：条码图像处理库 上榜理由：如果你用过二维码，你肯定已经间接使用过大名鼎鼎的zxing了。13.9K的star量，让它排在本榜单第九，实至名归，如果你有了解二维码的需求，不妨从了解、修改它源码入手。 github：https://github.com/zxing/zxing 作者：Sean Owen picasso 一句话介绍：强力的图片下载、缓存框架 上榜理由：本榜单出现的第三款图片类框架，不同的是picasso更强调图片下载，你可以将picasso集成进你的项目中，你也可以结合gilde和UIL与picasso，三者一齐封装至你的项目中，按需所用。 官网地址：http://square.github.io/picasso/ github：https://github.com/square/picasso 作者：square团队 使用：1compile 'com.squareup.picasso:picasso:2.5.2' lottie-android 一句话介绍：一款可以在Android端快速展示Adobe Afeter Effect（AE）工具所作动画的框架 上榜理由：动画类框架第一名，github上13.3k个star证明了他的优越性，利用json文件快速实现动画效果是它最大的便利，而这个json文件也是由Adobe提供的After Effects（AE）工具制作的，在AE中装一个Bodymovin的插件，使用这个插件最终将动画效果生成json文件，这个json文件即可由LottieAnimationView解析并生成绚丽的动画效果。而且它还支持跨平台哟。 github：https://github.com/airbnb/lottie-android 作者：Airbnb 团队 fresco 一句话介绍：一款可以管理图片内存的框架 上榜理由:github上12.8k个star，图片类排行榜第四名，facebook的出身证明了它并非是重复造的轮子，在管理图片内存领域上有着它的一片天地，渐进式加载、加载gif都是它与前三位相比独有的特性 官网地址： https://www.fresco-cn.org/ github：https://github.com/facebook/fresco 作者：facebook 使用：1234dependencies &#123; // 其他依赖 compile 'com.facebook.fresco:fresco:0.12.0'&#125; 下面的依赖需要根据需求添加：1234567891011121314dependencies &#123; // 在 API &lt; 14 上的机器支持 WebP 时，需要添加 compile 'com.facebook.fresco:animated-base-support:0.12.0' // 支持 GIF 动图，需要添加 compile 'com.facebook.fresco:animated-gif:0.12.0' // 支持 WebP （静态图+动图），需要添加 compile 'com.facebook.fresco:animated-webp:0.12.0' compile 'com.facebook.fresco:webpsupport:0.12.0' // 仅支持 WebP 静态图，需要添加 compile 'com.facebook.fresco:webpsupport:0.12.0'&#125; RxAndroid 一句话介绍：一款Android客户端组件间异步通信的框架 上榜理由：github上12.7k个star，位居组件通信框架的第二名，仅在EventBus之后，如果要问两者的区别，Eventbus是用来取代组件间繁琐的interface，RxAndroid是用来取代AnsyTask的，并不冲突；当然RxAndroid的优点并不仅限于此，更多优雅的实现，可以去官网查阅！ github：https://github.com/ReactiveX/RxAndroid 作者：JakeWharton 使用：12compile 'io.reactivex.rxjava2:rxandroid:2.0.1'compile 'io.reactivex.rxjava2:rxjava:2.1.0' SlidingMenu 一句话介绍：侧滑菜单栏框架 上榜理由：与Userval-Image-loader 齐名的上古神器框架——为你的app提供侧滑菜单栏的功能；github闪更有10.5k个star，证明了它的经久不衰，即使在Google推出了NavigationDrawer，仍然没有减少开发者对SildingMenu的拥簇，经典总是经得起考验的，这个上古神兽已经四年没有更新了；有太多太多的app使用过它，这些都可以在软件的开源许可上看到！ github：https://github.com/jfeinstein10/SlidingMenu 作者：Jeremy Feinstein 使用：1在gihub上fork源码，集成进项目中 PhotoView 一句话介绍：一款ImageView展示框架，支持缩放，响应手势 上榜理由：10.3k的star数量，位于图片类框架排行榜第五位，PhotoView与前四位不同的是这次带来的是图片的展示能力，你一定好奇微信的头像点击放大是如何实现的，很多App的图片显示响应手势按压是如何实现的，了解PhotoView，你一定会开心的！（笔者也不会告诉你ImageView的点击放大效果在Android的sample也有） github：https://github.com/chrisbanes/PhotoView 作者：chrisbanes 使用：在app根目录的build.gradle中加入：12345allprojects &#123; repositories &#123; maven &#123; url \"https://jitpack.io\" &#125; &#125;&#125; 在app的module目录的build.gralde中加入：123dependencies &#123; compile 'com.github.chrisbanes:PhotoView:latest.release.here'&#125; 使用12345678&lt;com.github.chrisbanes.photoview.PhotoView android:id=\"@+id/photo_view\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"/&gt;PhotoView photoView = (PhotoView) findViewById(R.id.photo_view);photoView.setImageResource(R.drawable.image); material-dialogs 一句话介绍：一款自定义dialog框架 上榜理由：9.9k个star，也是继PhotoView，SlidingMenu之后第三款自定义View框架，也许你还是自定义View的新人，对Dialog使用的还有点生疏，你可以通过它提升你的Dilaog使用能力 github：https://github.com/afollestad/material-dialogs 作者：Aidan Follestad 使用：1234dependencies &#123; // ... other dependencies here compile 'com.afollestad.material-dialogs:core:0.9.4.5'&#125; droid-async-http 一句话介绍：一款基于Http协议的异步请求的网络框架， 上榜理由：虽然你有无数个使用retrofit+okhttp的理由，但9.8k个star，证明它仍然值得你深入学习。值得注意的是，它也已经有两年没更新了，你尽管拿去当你懒惰的理由！ github：https://github.com/loopj/android-async-http 作者：James Smith 使用：12345678repositories &#123; maven &#123; url 'https://oss.sonatype.org/content/repositories/snapshots/' &#125;&#125;dependencies &#123; compile 'com.loopj.android:android-async-http:1.5.0-SNAPSHOT'&#125; androidannotations 一句话介绍：一款基于注解的快速开发框架 上榜理由：与Butterknife一样基于注解，利用注解快速完成view的初始化，不同的是androidannotations提供了更多的能力：简单的线程模型等；笔者只接触过Butterknife，无法更进一步叙述androidannotations的优势，如果你志在深入了解注解的妙用，可以尝试探索一下！ 官网地址：http://androidannotations.org/ github：https://github.com/androidannotations/androidannotations 作者： WonderCsabo fastjson 一句话介绍:一款基于json解析、生成的框架 上榜理由：从它的名字不难看出，快速是它最大的特性，阿里巴巴的出身保证了代码的质量和优越，9.4k的star数量，也是榜单里第一个出现的中国开源框架，涉及网络的app都会用到json，fastjson值得作为你的首选！ github：https://github.com/alibaba/fastjson 作者：alibaba 使用：1compile 'com.alibaba:fastjson:1.1.58.android' Material-Animations 一句话介绍：一款提供场景转换过渡能力的动画框架 上榜理由：Android动画框架排行榜第二名，9.3k个star数量，与动画框架榜单第一名lottie-android不同的是，Material-Animations提供的是场景切换的动画效果。Android 官网sample中已经提供了部分Transition （转场动画）的展示，作为初学者很难快速拓展到自己项目中，Material-Animations的示例出现为开发者省去了此类麻烦，直接照搬应用到自己的App中吧。 github：https://github.com/lgvalle/Material-Animations 作者：Luis G. Valle 使用：1down源码，修改学习 tinker 一句话介绍：它是微信官网的Android热补丁解决方案 上榜理由：9.1k个star，微信在用的热补丁方案，心动不如行动 官网地址：http://www.tinkerpatch.com/Docs/intro github：https://github.com/Tencent/tinker 作者：Tencent ViewPagerIndicator 一句话介绍：一款基于ViewPager的页面指示器开源框架 上榜理由：上古神器，尽管已经五年未更新了，但你仍然可以在淘宝等app中看到它的使用场景，8.9K的star量让它不愠不火的在矗立在榜单里 官网地址：http://viewpagerindicator.com/ github：https://github.com/JakeWharton/ViewPagerIndicator 作者：JakeWharton 使用： 下载地址 JakeWharton-ViewPagerIndicator-2.4.1-0 Android-CleanArchitecture 一句话介绍：一个讲解设计框架的demo 上榜理由：它不是框架，你可以把它当作一本书，它将教会你如何设计简洁的架构，工程里有一个sample app，配合图文讲解，你将对Android客户端的架构有更深一层的认识。8.8k的star数量，证明了它是一本“好书”哟。 github：https://github.com/android10/Android-CleanArchitecture 作者：Fernando Cejas Android-PullToRefresh 一句话介绍：一款为普通视图提供刷新UI的视图框架 上榜理由：8.2K的star数量使它位居刷新类UI框架榜首，强大的兼容能力，该框架支持ListView，GrdiView，WebViewScrollView，ViewPager等众多View增加刷新的能力，如果你有增加上拉加载，下拉加载的需求，你应该考虑它了！ github：https://github.com/chrisbanes/Android-PullToRefresh 作者：Chris Banes 使用：1github：fork源码，集成到项目中 flexbox-layout 一句话介绍：一款弹性伸缩布局 上榜理由：8.1k个star，前端H5开发者转Android开发的福音，FlexboxLayout作为LinearLayout和RelativeLayout的替代者，值得各位一试，与其一同推出的还有ConstraintLayout。 github：https://github.com/google/flexbox-layout 作者：Google 使用：123dependencies &#123; compile 'com.google.android:flexbox:0.3.0-alpha3'&#125; AndroidSwipeLayout 一句话介绍：非常强大滑动式布局 上榜理由:滑动删除是国产app常见需求，商品详情的上下滑动需求作为开发者的我们也经常遇到，AndroidSwipeLayout在github上拥有8K个star，证明它经受住了检验，各位值得一试 github：https://github.com/daimajia/AndroidSwipeLayout 作者：daimajia 使用：12345dependencies &#123; compile 'com.android.support:recyclerview-v7:21.0.0' compile 'com.android.support:support-v4:20.+' compile \"com.daimajia.swipelayout:library:1.2.0@aar\"&#125; 或下载 AndroidSwipeLayout-v1.1.8.jar realm-java 一句话介绍：Realm是一款移动端数据库框架 上榜理由：核心数据引擎C++打造，比普通的Sqlite型数据库快的多。笔者猜测正是如此，realm以7892个star数让它位于大名鼎鼎的数据库框架GreenDao（7877）之前 官网地址：https://realm.io/cn/ github：https://github.com/realm/realm-java 作者：Realm团队 使用：1https://realm.io/docs/java/latest/ greenDAO 一句话介绍：greenDAO是一款高效、快速的SQLite型数据库 上榜理由：greenDAO的star数量与Realm不相上下，且与EventBus师出同门，也是由greenrobot团队开发维护的，质量有所保证，但若拷问笔者Realm与greenDao两者的优劣性，只能具体到实际使用当中，模拟线上的使用情形，进行高强度测试后才能下判断，故在此不能一言两语说完，深表遗憾 官网地址：http://greenrobot.org/greendao/ github：https://github.com/greenrobot/greenDAO 使用：12345678910111213141516171819buildscript &#123; repositories &#123; jcenter() mavenCentral() // add repository &#125; dependencies &#123; classpath 'com.android.tools.build:gradle:2.3.1' classpath 'org.greenrobot:greendao-gradle-plugin:3.2.2' // add plugin &#125;&#125; -----apply plugin: 'com.android.application'apply plugin: 'org.greenrobot.greendao' // apply plugin dependencies &#123; compile 'org.greenrobot:greendao:3.2.2' // add library&#125; stetho 一句话介绍：一款提供在Chrome开发者工具上调试Android app能力的开源框架 上榜理由：上古时期Android程序员要调试本地数据库，需要进入Android Device Monitor找到/data/data/com.xxx.xxx/databases里面的db文件，导出到PC端，用PC的数据工具查看，现在使用stetho省却了如此的麻烦；如今的Android程序员如果想调试网络请求响应过程中的报文段，需要在请求中加入Log语句，一个信息一个信息打印出来，相当繁琐，现在请使用stetho，省却诸如此类的麻烦把！7.8K个star数，广大Android开发者调试的福音，你值得拥有！ 作者：FaceBook 官网地址： http://facebook.github.io/stetho/ github：https://github.com/facebook/stetho 使用：1compile 'com.facebook.stetho:stetho:1.5.0' BaseRecyclerViewAdapterHelper 一句话介绍：强大、流畅的Recyvlerview通用适配器 上榜理由：如果你是RecyclerView的拥簇者，你一定要体验这款专门服务该view的适配器，7.7K个star，让这个家伙位于github上Android 适配器排行榜第一，还有很多惊喜等你去探寻！ 官网地址：http://www.recyclerview.org/ 作者：陈宇明以及他的小伙伴 使用：12345678910allprojects &#123; repositories &#123; ... maven &#123; url \"https://jitpack.io\" &#125; &#125;&#125;dependencies &#123; compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:VERSION_CODE'&#125; AndroidViewAnimations 一句话介绍：一款提供可爱动画集合的框架 上榜理由：正如作者所说，它囊括了开发需求过程中所有的动画效果，集成进了这个简洁可爱的动画框架。7.6K的star数，证明了它在动画框架领域的战斗力，让它仅仅位列lottie-android和Material-Animations两个动画框架霸主之后，屈居第三名 github：https://github.com/daimajia/AndroidViewAnimations 作者：daimajia 使用：12345dependencies &#123; compile 'com.android.support:support-compat:25.1.1' compile 'com.daimajia.easing:library:2.0@aar' compile 'com.daimajia.androidanimations:library:2.2@aar'&#125; sample：1234YoYo.with(Techniques.Tada) .duration(700) .repeat(5) .playOn(findViewById(R.id.edit_area)); MaterialDrawer 一句话介绍：强大的塑料风格的抽屉框架 上榜理由：7.6K的star数量，作者的持续更新状态，如果你还在犹豫上手SlidingMenu遇到bug没人管的困境，那么你可以入手它作为你的抽屉布局 github：https://github.com/mikepenz/MaterialDrawer 作者：Mike Penz 使用:123456compile('com.mikepenz:materialdrawer:5.9.2@aar') &#123; transitive = true&#125; new DrawerBuilder().withActivity(this).build(); Android-ObservableScrollView 一句话介绍：一款让视图滑动更具有视觉效果的滑动式框架 上榜理由：7.5K的star数量，证明了它曾经的价值，github上提供了12种滑动效果，你可以用它弥补其他框架的不足，提升你的App体验！ github：https://github.com/ksoichiro/Android-ObservableScrollView 作者：Soichiro Kashima 使用：1compile com.github.ksoichiro:android-observablescrollview CircleImageView 一句话介绍：圆角ImageView 上榜理由：也许你已经听说过无数种展示圆角图片的方法，但如果你不尝试尝试CircleImageView，那么你的知识库会因为少了它黯然失色，有的时候完成需求是开发者优先考虑的，不同实现方法牵扯到的性能差异更值得让人深思，如果你有心在图片性能上有所涉猎，那么CircleImageView绝对不会让你败兴而归。最后别忘了记得去看Romain Guy的建议哟。 github：https://github.com/hdodenhof/CircleImageView 作者：Henning Dodenhof 使用：123456789101112131415dependencies &#123; ... compile 'de.hdodenhof:circleimageview:2.1.0'&#125; &lt;de.hdodenhof.circleimageview.CircleImageView xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:id=\"@+id/profile_image\" android:layout_width=\"96dp\" android:layout_height=\"96dp\" android:src=\"@drawable/profile\" app:civ_border_width=\"2dp\" app:civ_border_color=\"#FF000000\"/&gt; logger 一句话介绍：一款让log日志优雅显示的框架 上榜理由：logger作为调试框架，并未给出很强大的能力，它最大的亮点是优雅的输出log信息，并且支持多种格式：线程、Json、Xml、List、Map等，如果你整日沉迷于汪洋大海般的log信息不能自拔，logger就是你的指路明灯！6.6k个star让他位列调试框架第二名，屈居facebook的stetho之后 github：https://github.com/orhanobut/logger 作者：Orhan Obut 使用：123456789compile 'com.orhanobut:logger:2.1.1' Logger.d(MAP);Logger.d(SET);Logger.d(LIST);Logger.d(ARRAY);Logger.json(JSON_CONTENT);Logger.xml(XML_CONTENT); agera 一句话介绍:一款服务于Android平台的响应式编程框架 上榜理由：google专门推出一套响应式编程框架服务于Android开发者，相比于之响应式编程框架榜首的 RxJava RxAndroid，它更轻量，两者最大的不同点在于agera基于push event、pull data （VS Rx系列 push data）。 github：https://github.com/google/agera 作者：Google 使用：1compile 'com.google.android.agera:agera:1.3.0' 扩展能力12345compile 'com.google.android.agera:content:1.3.0'compile 'com.google.android.agera:database:1.3.0'compile 'com.google.android.agera:net:1.3.0'compile 'com.google.android.agera:rvadapter:1.3.0'compile 'com.google.android.agera:rvdatabinding:1.3.0' BottmBar 一句话介绍：一款底部导航栏视图框架 上榜理由：底部栏里的王者框架，6.3K的star数量，证明了它的优秀，完全遵循材料设计规范，上手非常方便。如果说缺点，无法设置icon与titile的间距，无法自定义视图的大小等，但这些都可以通过修改源代码解决，笔者献丑也修改了一套符合国内开发者的底部导航框架，即将开源。 github：https://github.com/roughike/BottomBar 作者：Iiro Krankka 使用：1compile 'com.roughike:bottom-bar:2.3.1' Calligraphy 一句话介绍：一款自定义字体框架 上榜理由：如果你还在为一键修改App内所有字体样式而烦恼，6.3K个star的Calligraphy就值得你拥有，它可以同时修改整个整个项目的Textview字体，也可以单独 设置某个Textview的字体，还在等什么，快来试试吧！ github：https://github.com/chrisjenx/Calligraphy 作者：Christopher Jenkins 使用：123dependencies &#123; compile 'uk.co.chrisjenx:calligraphy:2.3.0'&#125; AndroidSlidingUpPanel 一句话介绍：可拖动的滑动面板视图框架 上榜理由：如果你的项目需要一个可拖拽的滑动式面板（展示某些详情信息，播放音乐，地图信息等），那么推荐你使用它，6.3k个star，来自创业公司umano的作品，证明它是用心推出的杰作 github：https://github.com/umano/AndroidSlidingUpPanel 作者：umano 使用：1234567dependencies &#123; repositories &#123; mavenCentral() &#125; compile 'com.sothree.slidinguppanel:library:3.3.1'&#125; AppIntro 一句话介绍：一款提供快速制作欢迎页的框架 上榜理由：笔者从未把打算把欢迎页框架纳入排行榜当中，作为国内开发者，ViewPager开发App的欢迎页已经是手到擒来的需求，为何一个开源的欢迎页框架会在github上拥有6.3k个star？也许你会不屑一顾，是的，往往就在不屑一顾的瞬间，机遇就悄悄溜走了。 github：https://github.com/apl-devs/AppIntro 作者：Paolo Rotolo12345678910allprojects &#123; repositories &#123; ... maven &#123; url 'https://jitpack.io' &#125; &#125;&#125;dependencies &#123; compile 'com.github.apl-devs:appintro:v4.2.0'&#125; recyclerview-animators 一句话介绍：一款为Recyclerview提供扩展动画能力的框架 上榜理由：有一句老话：如果有天你失去对新事物的兴趣，那就说明你老了。recyclerview已经推出快三年了，还在用listview的人们，是否已经发掘自己渐渐变老；不要灰心，快为你的项目加入recyclerview-animators框架吧，为“自己”加入新鲜的血液和能量！（笔者备注：6.2K个star） github：https://github.com/wasabeef/recyclerview-animators 作者；https://github.com/wasabeef 使用：1234dependencies &#123; // jCenter compile 'jp.wasabeef:recyclerview-animators:2.2.6'&#125; dagger 一句话介绍：一款通过依赖注入降低程序间耦合的开发框架 上榜理由：github：上dagger1版本 有6.2k个star ， dagger2版本有7.3k个；由square完成的dagger1版本，到如今google团队接手的dagger2版本，强力开发团队保证了代码在设计上的优越性；如果你想探究Android 领域的设计模式，这也是不错的选择。 官网地址：https://google.github.io/dagger/ github：：https://github.com/google/dagger 作者：google 使用：1234dependencies &#123; compile 'com.google.dagger:dagger:2.x' annotationProcessor 'com.google.dagger:dagger-compiler:2.x'&#125; If you’re using classes in dagger.android you’ll also want to include:123compile 'com.google.dagger:dagger-android:2.x'compile 'com.google.dagger:dagger-android-support:2.x' annotationProcessor 'com.google.dagger:dagger-android-processor:2.x' Android-Bootstarp 一句话介绍：一款提供在Android应用上实现Bootstrap（web框架）所作出效果的框架 上榜理由：榜单上第二款响应web技术的Android 端框架，还记得第一名是谁吗——flexbox-layout，作为Android开发者，你有必要去了解Web技术了。5.9k个star，证明它不容小觑 github：https://github.com/Bearded-Hen/Android-Bootstrap 作者:Bearded-Hen团队 使用：123dependencies &#123; compile 'com.beardedhen:androidbootstrap:&#123;X.X.X&#125;'&#125; RxBinding 一句话介绍：一款提供UI组件事件响应能力的框架 上榜理由：如果你还未开始RxAndroid 之旅，RxBinding可以作为你的第一站，通过RXBinding，你将理解响应式编程的快乐，让项目里的事件流程更清晰。5.6K个star，RxAndroid作者亲自操刀，快来试用吧！ github：https://github.com/JakeWharton/RxBinding 作者：JakeWharton Platform bindings:12345678910111213141516compile 'com.jakewharton.rxbinding2:rxbinding:2.0.0''support-v4' library bindings:compile 'com.jakewharton.rxbinding2:rxbinding-support-v4:2.0.0''appcompat-v7' library bindings:compile 'com.jakewharton.rxbinding2:rxbinding-appcompat-v7:2.0.0''design' library bindings:compile 'com.jakewharton.rxbinding2:rxbinding-design:2.0.0''recyclerview-v7' library bindings:compile 'com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:2.0.0''leanback-v17' library bindings:compile 'com.jakewharton.rxbinding2:rxbinding-leanback-v17:2.0.0' ListViewAnimations 一句话介绍：一款为ListView提供动展示画效果能力的框架 上榜理由：如果有一天我承认自己老了，我还会排排我的兄弟——ListView，证明我和它一起战斗过。ListViewAnimations的存在就是证明我们这些“老年人”仍有用武之地，也许你有说不出口的难处，无法体会到RecyclerView里动画的快乐，拥有ListViewAnimations，你一样可以骄傲的说，我的孩子（每个item）也有自己的动效啦。（笔者备注 5.6K个star） github：https://github.com/nhaarman/ListViewAnimations 作者：nhaarman 使用：123456789repositories &#123; mavenCentral()&#125;dependencies &#123; compile 'com.nhaarman.listviewanimations:lib-core:3.1.0@aar' compile 'com.nhaarman.listviewanimations:lib-manipulation:3.1.0@aar' compile 'com.nhaarman.listviewanimations:lib-core-slh:3.1.0@aar'&#125; UItimateRecyclerView 一句话介绍：一款提供刷新、加载更多、动画特效等额外能力的RecyclerView框架 上榜理由：榜单上第三次出现RecyclerView的身影，足以证明RecyclerView的优异性，5.5K个star，框架里所提供众多的能力，如果你是个功利开发者，那么此框架会为你节省很多学习时间，它可以完成多item式布局的大多数需求，值得注意的是，这个项目也是在其他项目的思路上二次开发的。 github：https://github.com/cymcsg/UltimateRecyclerView 作者：MarshalChen 使用：1234567repositories &#123; jcenter() &#125;dependencies &#123; ... compile 'com.marshalchen.ultimaterecyclerview:library:0.7.2'&#125; uCrop 一句话介绍：一款优雅的图片裁剪框架 上榜理由：5.3K个star，图片编辑模块单独拎出来也是一款优雅的App。 github：https://github.com/Yalantis/uCrop 作者：Yalantis 使用：12345678allprojects &#123; repositories &#123; jcenter() maven &#123; url \"https://jitpack.io\" &#125; &#125;&#125;compile 'com.github.yalantis:ucrop:2.2.1' RxJava-Android-Samples 一句话介绍：一款介绍RxJava使用场景的app 上榜理由：榜单出现的第一个“仅仅为告诉你如何使用另一个项目”的开源项目，它可以说是RxJava的用例，你想得到的想不到的RxJava用法这里都有，这就是为什么它以5.2k个star矗立在这份榜单里的原因。遗憾自己没有创作这么一个受人追捧的demo？赶快动手写个其他的“XX项目用例吧” github：https://github.com/kaushikgopal/RxJava-Android-Samples 作者：kaushikgopal 使用：1clone到本地慢慢探索吧 AndroidAutoLayout 一句话介绍：一个提供适配能力的框架 上榜理由：5.2K个star，鸿洋老弟的作品，适合小项目的开发团队，拿到设计MM的px像素设计稿是不是很头疼捏？这个框架一键式搞定你的问题，它有很多的不足，但在追求完美适配的路上，你值得探索和了解它！笔者并不推荐把它应用到已经成熟运行的项目中，毕竟市面上已经有太多的适配解决方案了，适配问题就像是个大杂烩，想炒一盘好菜，就得备好各种佐料（适配小方案），当你把各种小佐料用的炉火纯青的时候，你离美食大厨就不远了。 github：https://github.com/hongyangAndroid/AndroidAutoLayout 作者：张鸿洋 使用：123dependencies &#123; compile 'com.zhy:autolayout:1.4.5'&#125; EffectiveAndroidUI 一句话介绍：一款讲解高效展示UI的教学型App 上榜理由：编程新手很难对MVC MVP,MVVM等模式有深刻的理解，如果有一个示例型app，那对初学者会有很大裨益，笔者在遇到它时也是相见恨晚。4.8K个star，证明了它经受了广大开发者的考验与审视，其中Effective UI的编程思想更是与Android官方课程里的Effective UI课程不谋而合，并且，此项目还包含了fragment、dagger、主题样式、Butterknife等众多小知识点，作为编程初学者的学习用例再适合不过了 github：https://github.com/pedrovgs/EffectiveAndroidUI 作者：Pedro Vicente 使用：1clone项目到本地 Luban 一句话介绍：最接近微信的图片压缩框架 上榜理由：好的思路总是可以让你大放异彩，Luban仅以图片压缩单一功能，俘获了4.8K个star，证明了它在图片压缩上的造诣，它可能不是最优秀的，但它是让你我最接近伟大的项目 github：https://github.com/Curzibn/Luban 作者：Curzibn 使用：1compile 'top.zibin:Luban:1.1.1' DroidPlugin 一句话介绍：一款热门的插件化开发框架 上榜理由：4.8K个star，插件化框架榜单第一名，，360团队出品，框架质量有保证，有成功案例——360手机助手，并且持续维护着github：https://github.com/DroidPluginTeam/DroidPlugin/blob/master/readme_cn.md 作者：Andy Zhang 使用:1clone项目到本地 otto 一句话介绍:一款老旧且强大的事件总线框架 上榜理由：4.8K个star，是square团队早先推出的事件响应型框架，淘宝app的事件驱动也是基于此框架封装的，如今square已经建议开发者采用RxJava RxAndroid来代替otto了。但otto仍有与EventBus横向对比的价值，纵向来说，otto与square自家开发的Rx系列框架的差异同样值得开发者们去探究。 github：https://github.com/square/otto 作者：square 使用：123456repositories &#123; mavenCentral() maven &#123; url \"https://oss.sonatype.org/content/repositories/snapshots/\" &#125;&#125;compile 'com.michaelpardo:activeandroid:3.1.0-SNAPSHOT' u2020 一句话介绍：一款提供Dagger的高级教学示例的app（额，名字是有点绕） 上榜理由：4.7K个star，JakeWharton牵头开发的教学类app，教你使用Dagger在其他高级框架的用法，它展示了Dagger与ButterKnife、Retrofit、Moshi、Picasso、Okhttp、RxJava、Timber、Madge、LeakCanar等众多优秀框架结合起来的高级用法，你也可以借鉴到自己的项目当中 github：https://github.com/JakeWharton/u2020 作者：JakeWharton buck 一句话介绍：buck是一个快速构建系统 上榜理由：facebook+google出身的作者，对构建代码的出色理解，加上大型团队的维护，以及增量更新时的快速高效，让buck成为了微信Android团队构建项目的首选，构建大型项目时，它比gradle更快，然而中小公司并不适合此框架，但作为立志在框架设计领域有一番作为的人们，欢迎来一探究竟 官网地址：https://buckbuild.com/ github：https://github.com/facebook/buck 作者：facebook 使用：1linux or mac system +docs PermissionsDispatcher 一句话介绍：一款基于注解的提供解决运行时危险权限方案的框架 上榜理由：自Android6.0 Google提出危险权限一词起，用户安全性被提到一定的高度，一些运行时对用户较为危险的权限将不再自动被开发者获取，需要经过用户批准，开发者才可以继续使用该权限，如果你曾经被权限问题搞的抓耳挠腮，建议你试试这个框架，它足够解决你的问题 官网地址：https://hotchemi.github.io/PermissionsDispatcher/ github：https://github.com/hotchemi/PermissionsDispatcher 作者：Shintaro Katafuchi 使用：123456789101112dependencies &#123; compile('com.github.hotchemi:permissionsdispatcher:$&#123;latest.version&#125;') &#123; exclude module: \"support-v13\" &#125; annotationProcessor 'com.github.hotchemi:permissionsdispatcher-processor:$&#123;latest.version&#125;'&#125;repositories &#123; jcenter() maven &#123; url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' &#125;&#125; android-gif-drawable 一句话介绍:一款提供展示GIF动画能力的视图框架 上榜理由：据我所查国内著名App——知乎使用了android-gif-drawable，因此证明了它的存在价值，尽管在榜单第十一位介绍了lottie-android直接应用AE动画的示例，但AE设计师不是每个公司都配备的，GIF的存在，就必然存在了展示GIF的需要，它值得你拥有！ github：https://github.com/koral--/android-gif-drawable 作者：Karol Wrótniak 使用：1234567repositories &#123; mavenCentral() maven &#123; url \"https://oss.sonatype.org/content/repositories/snapshots\" &#125;&#125;dependencies &#123; compile 'pl.droidsonroids.gif:android-gif-drawable:1.2.+'&#125; Apktool 一句话介绍：一款反编译apk的工具 上榜理由：开源的反编译工具，对于志在了解apk逆向破解的诸位，值得拥有，4.5k个star，逆向破解apk神器！ github：https://github.com/iBotPeaches/Apktool 官网地址：https://ibotpeaches.github.io/Apktool/ 作者：Connor Tumbleson dynamic-load-apk 一句话介绍：插件化开发框架 上榜理由：4.5k个star，位于插件化开发框架第二名（第一名来自360团队），全面的文档介绍让你很快就能上手插件化开发，如果你喜欢大段文字讲解，那么这个项目一定适合你 github：https://github.com/singwhatiwanna/dynamic-load-apk 作者：singwhatiwanna 使用：1github上的文档配合作者博客更配哟 atlas 一句话介绍：淘宝推出的组件化开发框架 上榜理由：淘宝团队所出的精品，atlas框架提供了解耦、组件、动态的开发能力，4.5k个star让他位列组件化开发框架第一名 github：https://github.com/alibaba/atlas 作者：alibaba volley 一句话介绍：google推荐使用的Android端网络请求框架 上榜理由：4.4k个star，并不是他不够优秀，而是使用volley已经渐渐成为广大开发者的习惯 github：https://github.com/google/volley（新版volley地址） 作者：google 使用：1clone源码到本地 androidmvp 一句话介绍：一款展示Android端Mvp设计的demo 上榜理由：榜单里为数不多、仅凭展示某种设计模式就获得4.2K个star的项目，如果你有尝试mvp的打算，androidmvp可以作为你的前哨站github：https://github.com/antoniolg/androidmvp 作者：Antonio Leiva 使用：1clone到本地 SwipeBackLayout 一句话介绍:一款可以让你通过滑动手势关闭页面的的框架 上榜理由：仿微信滑动退出当前聊天界面的效果，提供了activity的滑动关闭能力，通过这种思路，实现fragment的滑动关闭轻而易举;笔者坚持建议诸位clone源码到本地探索一番；4.2k个star证明很多人都喜爱它 github：https://github.com/ikew0ng/SwipeBackLayout 作者：ike_w0ng 使用:1compile 'me.imid.swipebacklayout.lib:library:1.0.0' FlycoTabLayout 一句话介绍：一款可以让作出多种多样指示器效果的框架 上榜理由：尽管我们没有理由为了给app加入页面指示器功能就集成2.5M的依赖库，但是作为了解viewpager或swip views的指示器设计原理的优秀框架，你值得打开它试试，笔者建议单独拆分所需源码，加入到自己的项目中去。4.1K个star，二次开发的作品，仍然推荐！ github：https://github.com/H07000223/FlycoTabLayout 作者：Flyco android-testing 一句话介绍：一款展示四大自动化测试框架用例的demo（Espresso，UiAutomator，AndroidJunitRunner，JUnit4） 上榜理由：学习者经常会陷入似懂非懂的境地，如果你有幸学习过Android Testing Support Library site的课程，那么你一定对android的四大测试框架迫不及待，这款demo非常适合你，快来学习这个4.1k个star的明星项目吧 github：https://github.com/googlesamples/android-testing 作者：googlesampes团队 FileDownloader 一句话介绍：一款高效、稳定、灵活、易用的文件下载引擎 上榜理由：4.1k证明了它有多受人喜爱，文件下载看似简单的背后暗藏了多少的坑坑点点，我知道你有能力自己实现文件下载功能，但优秀的框架可以提升你的设计编码能力，这款框架可以提升你的实力！ github：https://github.com/lingochamp/FileDownloader 作者:LingoChamp团队 使用：123dependencies &#123; compile 'com.liulishuo.filedownloader:library:1.5.5'&#125; JieCaoVideoPlayer 一句话介绍：基于MediaPlayer api——VideoView 的多媒体播放框架 上榜理由：榜单里第三款多媒体播放框架，它以灵巧的身姿挤入本榜单，精巧是它最大的优点，不到100k，拥有它，你就可以快速开发类似今日头条那样的视频播放效果，4k个star，证明它值得一试 github：https://github.com/lipangit/JieCaoVideoPlayer 作者：Nathen 使用：1compile 'fm.jiecao:jiecaovideoplayer:5.5.4' glide-transformations 一句话介绍：为众多著名图片加载框架提供图片形状变幻能力的框架 上榜理由：在榜单靠前的部分已经介绍过glide，Picasso，Fresco等图片加载框架，glide-transformations就是一款为他们提供图片变形能力的框架，使用起来非常简单，因此受到了大家的喜爱，github上有3.8K个star github：https://github.com/wasabeef/glide-transformations 作者：Daichi Furiya 使用：123456789repositories &#123; jcenter()&#125;dependencies &#123; compile 'jp.wasabeef:glide-transformations:2.0.2' // If you want to use the GPU Filters compile 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1'&#125; 在Glide里设置变幻效果123Glide.with(this).load(R.drawable.demo) .bitmapTransform(new BlurTransformation(context)) .into((ImageView) findViewById(R.id.image)); android-gpuimage 一句话介绍：一款基于OpenGL的图片渲染引擎 上榜理由：放下GpuImage在IOS平台的荣誉不谈，Android版的android-gpuimage就提供多达70多种图片渲染效果，你还在好奇美图秀秀是如何实现图片变幻的？有了它，一切都不是问题。如果你是美图工具类的工程师，此框架的建设思路也会对你大有裨益。笔者也是通过android-gpuimage仿造了美图App并俘获女友芳心的，再次为它的实力点赞。ios版+android版一共19k个star，已经证明了它的实力，还在等什么呢？ github：https://github.com/CyberAgent/android-gpuimage 作者：CyberAgent 团队 使用：1234567repositories &#123; jcenter()&#125;dependencies &#123; compile 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1'&#125; 更多的改造方法，还需要阅读Ios的编程文档，对于有毅力的小伙伴强力推荐！ RxPermissions 一句话介绍：一款基于RxJava完成权限申请的框架 上榜理由：榜单里第二款提供权服务的框架，基于RxJava的设计，让你可以专心写业务，3.7K个star已经证明了它的实用价值 github：https://github.com/tbruyelle/RxPermissions 作者：Thomas Bruyelle 使用：1234567repositories &#123; jcenter() // If not already there&#125;dependencies &#123; compile 'com.tbruyelle.rxpermissions:rxpermissions:0.9.4@aar'&#125; 优雅的使用：12345678910RxPermissions rxPermissions = new RxPermissions(this); rxPermissions .request(Manifest.permission.CAMERA) .subscribe(granted -&gt; &#123; if (granted) &#123; // I can control the camera now &#125; else &#123; // Oups permission denied &#125; &#125;); freeline 一句话介绍：一款动态替换的编译构建框架 上榜理由：继Facebook的Buck，Androdi官方的InstRun之后，蚂蚁金服推出了Freeline编译框架，官网宣称Freeline与业内主流构建方式相比仍然有数倍的速度领先;排行有先后，编译速度并不在本榜单排序的考据因素中，因此freeline以3.7个star，暂列编译框架第二名 官网地址：https://www.freelinebuild.com/ github：https://github.com/alibaba/freeline 作者：alibaba 使用：123456789101112131415buildscript &#123; repositories &#123; jcenter() &#125; dependencies &#123; classpath 'com.antfortune.freeline:gradle:0.8.7' &#125;&#125;apply plugin: 'com.antfortune.freeline'android &#123; ...&#125;File → Settings... → Plugins → Browse repositories →freeline. RxLifecycle 一句话介绍：一款提供在使用RxJava过程中管理Activity和Fragment生命周期能力的框架 上榜理由：在榜单靠前的部分，你已经了解RxJava和RxAndroid的强大之处，但部分粗心的开发者因为没有及时取消订阅而产生严重的内存泄漏，不要担心，RxLifecycle可以为你解决难题，在gtihub上拥有3.7K个star，国内知名软件——知乎和淘宝也都在使用它 github：https://github.com/trello/RxLifecycle 作者：trello团队 使用：1clone源码到本地 classyshark 一句话介绍：一款可执行文件浏览器 上榜理由：榜单里继Apktool之后第二款apk逆向工具，如果你喜欢优雅的图形数据展示，那么你一定不能错过他，classyshark可以将破解的结果以图形化展示用户，方便分析，3.7K个star，让它暂列apk逆向工具第二位！ github：https://github.com/google/android-classyshark 作者：google 使用：下载地址 https://github.com/google/android-classyshark/releases acra 一句话介绍：一款提供记录APP崩溃日志能力的框架 上榜理由：如果你面临着收集APP崩溃日志的需求，那么acra是个不错的选择。3.7K个star，让acra位列崩溃日志框架排行榜第一名，acra有足够的能力记录线上APP，并且发回服务端，acra也提供了相当棒的崩溃日志统计服务端框架Acralyzer，cralyzer工作在Apache CouchDB之上，所以除了CouchDB之外，没有必要安装任何额外的软件，移动端开发者也可以借此学习服务端的建设，一举两得！ github：https://github.com/ACRA/acra 服务端github：https://github.com/ACRA/acralyzer 作者：acra团队 使用：1没有什么方法比clone源码到本地更方便了 DiskLruCache 一句话介绍：一款提供磁盘文件缓存管理能力的框架 上榜理由：3.7k个star并不足以说明DiskLruCache的优秀，仅仅以管理磁盘文件能力单独拎出来成为一个框架，作者需要很大的勇气，很幸运，作者做到了，并且也成为Google官网提倡的缓存 ；如还记得上次做“一键清除缓存”、“查看缓存文件大小”功能是什么时候吗？DiskLruCache一句话就可以搞定！ github：https://github.com/JakeWharton/DiskLruCache 作者：JakeWharton 使用：1compile 'com.jakewharton:disklrucache:2.0.2' 或者下载 latest.jar dexposed 一句话介绍：一款支撑阿里大部分App客户端热修复、线上调试能力的框架 上榜理由：榜单上再次出现热修复框架的身影，证明App热修复技术的火热，dexposed提供图形化的性能监控、在线热修复bug漏洞、支持AOP编程思想等，不论你是企业热修复技术的设计者还是打算在热修复领域一探究竟的新人，这款框架很适合你。3.5k个star，证明它作为一门技术框架的存在，是多么令人喜爱！ github：https://github.com/alibaba/dexposed 作者：alibaba 使用：123dependencies &#123; compile 'com.taobao.android:dexposed:0.1.1@aar'&#125; Litho 一句话介绍：一款提供高效构建UI能力的框架 上榜理由：作为一款专门构建UI的框架，Litho高效的地方在于：单独开辟了用于渲染和布局的线程，然后将创建好的组件传递给UI线程去完成最终的渲染，使用更少的视图层级，来提升界面的滚动速度，值得注意的是，它仅支持开发者作出不可改变的UI组件 ,3.5K个star，证明了它在构建UI领域的价值，更多的妙处，期待你亲自去发掘！ github：https://github.com/facebook/litho 作者：facebook 使用：12345678910111213141516171819202122ependencies &#123; // ... // Litho compile 'com.facebook.litho:litho-core:0.3.1' compile 'com.facebook.litho:litho-widget:0.3.1' provided 'com.facebook.litho:litho-annotations:0.3.1' annotationProcessor 'com.facebook.litho:litho-processor:0.3.1' // SoLoader compile 'com.facebook.soloader:soloader:0.2.0' // Optional // For debugging debugCompile 'com.facebook.litho:litho-stetho:0.3.1' // For integration with Fresco compile 'com.facebook.litho:litho-fresco:0.3.1' // For testing testCompile 'com.facebook.litho:litho-testing:0.3.1'&#125; mosby 一句话介绍：一款提供构建MVP项目能力的框架 上榜理由：榜单靠前的部分已经介绍了MVC,MVVM,MVP的框架项目，想必此时你在构建企业项目架构上，选择或者开发一款合适的MVP框架迫在眉睫，mosby可以作为你的第一步参考，你可以封装它，也可以照抄它，无论如何，3.4K个star，证明了它在框架设计上有多受开发者的喜爱 github：https://github.com/sockeqwe/mosby 作者：Hannes Dorfmann 使用：1234567891011121314dependencies &#123; compile 'com.hannesdorfmann.mosby3:mvi:3.0.4' // Model-View-Intent // or compile 'com.hannesdorfmann.mosby3:mvp:3.0.4' // Plain MVP // or compile 'com.hannesdorfmann.mosby3:viewstate:3.0.4' // MVP + ViewState support&#125;allprojects &#123; repositories &#123; ... maven &#123; url \"https://oss.sonatype.org/content/repositories/snapshots/\" &#125;&#125; AndResGuard 一句话介绍：一款提供资源文件路径混淆 的工具 上榜理由：如果你是个对APK大小很敏感的人，那么AndResGuard一定适合你，它的原理类似Java Proguard，但是只针对资源。他会将原本冗长的资源路径变短，例如将res/drawable/wechat变为r/d/a，3.4K个star，证明了在优化APK道路上，你不是一个人在战斗！ github：https://github.com/shwenzhang/AndResGuard 作者：wechat team 使用：1clone项目到本地，其实也就是个三两句话的文档 StatusBarUtil 一句话介绍：一款提供设置沉浸式状态栏样式能力的框架 上榜理由：设计师MM总是抱怨系统状态栏不优雅？那就给她一个完美的沉浸式状态栏。StatusBarUtil可以随心所欲的设置状态栏样式，3.3K个star，足以说明它有多受设计MM的喜爱 github：https://github.com/laobie/StatusBarUtil 作者：Jaeger 使用：1compile 'com.jaeger.statusbarutil:library:1.4.0' robolectric 一句话介绍：一款不依赖于Android设备的单元测试框架， 上榜理由：sample中列举了如何对Android四大组件和常见功能测试的用例，3.2K个star，值得充满好奇心的人尝试 官网地址：http://robolectric.org/ github：https://github.com/robolectric/robolectric 作者：robolectric 使用：1testCompile \"org.robolectric:robolectric:3.3.2\" Fragmentation 一句话介绍:一款提供管理Fragmen嵌套t能力的框架 上榜理由：对于Activity和Fragment使用，你一定得心应手，但如果要做一套通用的Activity&amp;Fragment嵌套设计，想必你有点手足无措了，Fragmentation可以作为你设计Fragment管理上的第一步，3.2K个star，笔者认为有点名副其实了，项目介绍里说的是Fragment的管理能力，但并未提供Fragment&amp;Activity生命周期、任务栈的管理能力，因此很难直接应用到企业项目当中，但源码当中的设计思路，值得笔者与诸位借鉴，拾人牙慧留有余香！ github：https://github.com/YoKeyword/Fragmentation 作者：YoKey 使用：1234// appcompat v7包是必须的compile 'me.yokeyword:fragmentation:0.10.7'// 如果想使用SwipeBack 滑动边缘退出Fragment/Activity功能，请再添加下面的库// compile 'me.yokeyword:fragmentation-swipeback:0.10.4' Small 一句话介绍：轻巧的插件化框架 上榜理由：作为插件框架榜单的新成员，Small的优点是轻巧，适合作为小团队的插件开发方案，3.1K个star，让它获得了酷狗音乐等著名开发团队的青睐，如果你们的团队想逐步实施插件化开发，Small是个不错的选择！ 官网地址：http://code.wequick.net/Small/cn/cases github：https://github.com/wequick/Small 作者：wequick 团队 使用：1234567891011buildscript &#123; dependencies &#123; classpath 'net.wequick.tools.build:gradle-small:1.2.0-alpha6' &#125;&#125;apply plugin: 'net.wequick.small'small &#123; aarVersion = '1.2.0-alpha6'&#125; JsBridge 一句话介绍：一款提供WebView和Javascript通信能力的框架 上榜理由：该框架提供给了允许H5页面调用通过JS调用App方法的能力；3.1K个star，简洁的通讯方式，值得每一个Web\\Hybrid App开发者尝试 gtihub https://github.com/lzyzsd/JsBridge 作者：hi大头鬼hi 使用：12345678repositories &#123; // ... maven &#123; url \"https://jitpack.io\" &#125;&#125;dependencies &#123; compile 'com.github.lzyzsd:jsbridge:1.0.4'&#125; richeditor-android 一句话介绍：一款强大的富文本编辑框架 上榜理由：2.8k个star，榜单里第一个为TextView提供扩展能力的框架，你暂时不需要它，但不能不知道它 github：https://github.com/wasabeef/richeditor-android 作者：Daichi Furiya 使用：1234567repositories &#123; jcenter()&#125;dependencies &#123; compile 'jp.wasabeef:richeditor-android:1.2.2'&#125; Transitions-Everywhere 一句话介绍：一款教你正确使用Transitions API（Android 转场动画API）的教学型项目 上榜理由：你可能还未尝试过Android API的Transitions 框架，可能听过，但却无法做出优雅奇妙的动效——别担心，Transitions-Everywhere正如它的名字一样，它将带你全面体验Transitions 的强大之处 github：https://github.com/andkulikov/Transitions-Everywhere 作者：Andrey Kulikov 使用：123dependencies &#123; compile \"com.andkulikov:transitionseverywhere:1.7.4\"&#125; android-viewbadger 一句话介绍：能够快速的为Android 视图加入“勋章”能力的框架 上榜理由：如果说勋章一词听起来陌生，那么显示已读未读个数、小红点标记信息这一类词语你一定不太陌生，笔者相信在诸位实际开发中经常遇到为某些item加入小红点标记的需求，聪明的各位一定有着各种实现方案，为什么不能快速优雅的完成呢？android-viewbadger可以帮你实现，当然，在某些情况下，你需要具备修改源码的能力，以符合设计MM的需求！值得注意的是，这宽项目已经五年没有更新了！ github：https://github.com/jgilfelt/android-viewbadger 作者：Jeff Gilfelt 使用：1234View target = findViewById(R.id.target_view);BadgeView badge = new BadgeView(this, target);badge.setText(\"1\");badge.show(); AndroidWiFiADB 一句话介绍：一款不用数据线也可以让你调试手机设备APP的插件项目 上榜理由：你是否还在担心测试过程中高强度的拔插数据线对手机电池和USB端口造成终生难以弥补的损害？别担心，有wifi有AndroidWiFiADB，无须数据线也可以调试应用了，更有趣的是，在测试工程师一边拿着手机一边找你聊bug的时候，你已经偷偷在它的手机上修复了bug，深藏功与名！ github：https://github.com/pedrovgs/AndroidWiFiADB 作者：Pedro Vicente Gómez Sánchez 使用：1Preferences/Settings-&gt;Plugins-&gt;Browse Repositories-&gt;serch AndroidWiFiADB emojicon 一句话介绍：一款提供在TextView、EdiText展示表情包能力的框架 上榜理由：2.7k个star，,榜单第二款增强TextView显示能力的框架，这款专为表情包设计，如果你曾经好奇微信、QQ的表情显示是如何做到的？这款框架一定能满足你的求知欲。 packer-ng-plugin 一句话介绍：一款打爆工具插件 上榜理由：笔者尽力维护榜单涉及范围的全面性，因此引入此插件项目——项目号称完成100个渠道包只需要10秒钟，在市面上各种各样多渠道打包方案的今天，选择一款适合自己团队的，才是上上选择 github：https://github.com/mcxiaoke/packer-ng-plugin 作者：Xiaoke Zhang 使用：1234567891011121314151617181920212223242526buildscript &#123; ...... dependencies&#123; // add packer-ng classpath 'com.mcxiaoke.gradle:packer-ng:1.0.9' &#125;&#125; apply plugin: 'packer' dependencies &#123; compile 'com.mcxiaoke.gradle:packer-helper:1.0.9'&#125; android &#123; //... signingConfigs &#123; release &#123; // 满足下面两个条件时需要此配置 // 1. Gradle版本 &gt;= 2.14.1 // 2. Android Gradle Plugin 版本 &gt;= 2.2.0 // 作用是只使用旧版签名，禁用V2版签名模式 v2SigningEnabled false &#125; &#125;&#125; android-priority-jobqueue 一句话介绍：一款提供后台任务管理能力的框架 上榜理由：如果你是个志在深入研究多线程操作的开发者，这个项目一定不要错过，不论是Activity重新加载、Service使用线程池时的任务优先级和并发问题，都不要担心，Job Manage会照顾优先级，持久性，负载平衡，延迟，网络控制，分组，2.4K个star，优秀的多线程管理能力，况且它依赖的第三方框架很少，值得你一试 github：https://github.com/yigit/android-priority-jobqueue 作者：Yigit Boyar Android-Debug-Database 一句话介绍：一款提供测试App内部数据库能力的框架 上榜理由：榜单里第二款针对调试数据库的框架，一行代码集成，直接在浏览器增删改查App的数据库，2.3k个star，心动不如行动！ github：https://github.com/amitshekhariitbhu/Android-Debug-Database 作者：AMIT SHEKHAR 使用：12345debugCompile 'com.amitshekhar.android:debug-db:1.0.0'浏览器键入http://XXX.XXX.X.XXX:8080 conceal 一句话介绍：一款facebook提供的加密本地大文件的框架 上榜理由：如果还在担心App内的图片的隐私问题，这款facebook提供的文件加密框架足以解决你的问题，facebook客户端的图片和数据都是使用conceal加密的 官网地址：http://facebook.github.io/conceal/ github：https://github.com/facebook/conceal 作者：facebook 使用：1clone项目到本地/官网下载jar ARouter 一句话介绍：一款提供服务、页面跳转路由的框架 上榜理由：正如作者宣称的那样，该框架提供：从外部URL映射到内部页面、跨模块的页面跳转（页面解耦）、拦截跳转过程等能力，还有更多功能等你去发掘，2.1K个star，值得为企业级的框架喝彩 github：https://github.com/alibaba/ARouter 作者：alibaba 使用：1234567891011121314151617181920android &#123; defaultConfig &#123; ... javaCompileOptions &#123; annotationProcessorOptions &#123; arguments = [ moduleName : project.getName() ] &#125; &#125; &#125;&#125;dependencies &#123; // 替换成最新版本, 需要注意的是api // 要与compiler匹配使用，均使用最新版可以保证兼容 compile 'com.alibaba:arouter-api:x.x.x' annotationProcessor 'com.alibaba:arouter-compiler:x.x.x' ...&#125;// 旧版本gradle插件(&lt; 2.2)，可以使用apt插件，配置方法见文末'其他#4'// Kotlin配置参考文末'其他#5' MagicaSakura 一句话介绍：一款提供多主题切换能力的框架 上榜理由：框架所提供的能力，一直是本榜单所看重的，这款由bilibili提供的多主题框架，作为榜单所涉及范围能补充，1.9个star，感谢bilibili团队所作出的贡献！ github：https://github.com/Bilibili/MagicaSakura 作者:Bilibili 使用：1compile 'com.bilibili:magicasakura:0.1.6@aar' CustomActivityOnCrash 一句话介绍：一款当APP crash的时候自动载入某个Activity的框架（而不是显示Unfortunately, X has stopped） 上榜理由：新奇的创意是榜单所需要的，所以它赢得了1.8K个star；作为开发者应该拥有考虑到各种潜伏的bug的能力，但我们不能总是面面俱到，其他系统端的同事也可能造成程序的意外crash，因此，如何让程序优雅的crash-&gt;重启值得我们思考，这款框架就提供了这种能力 github：https://github.com/Ereza/CustomActivityOnCrash 作者：Eduard Ereza Martínez 使用：123dependencies &#123; compile 'cat.ereza:customactivityoncrash:2.1.0'&#125; 添加到 Application class:1234567891011121314151617@Overridepublic void onCreate() &#123; super.onCreate(); CaocConfig.Builder.create() .backgroundMode(CaocConfig.BACKGROUND_MODE_SILENT) .enabled(false) //default: true .showErrorDetails(false) //default: true .showRestartButton(false) //default: true .trackActivities(true) //default: false .minTimeBetweenCrashesMs(2000) //default: 3000 .errorDrawable(R.drawable.ic_custom_drawable) //default: bug image .restartActivity(YourCustomActivity.class) //default: null (your app's launch activity) .errorActivity(YourCustomErrorActivity.class) //default: null (default error activity) .eventListener(new YourCustomEventListener()) //default: null .apply();&#125; XhsEmoticonsKeyboard 一句话介绍：最开心的开源表情解决方案 上榜理由：如果你还在发愁如何为你的APP自制键盘，那么此框架非常适合你，而且还提供表情包展示能力，1.7个star证明了它的独特。此外作者还附赠了高仿微信键盘，QQ键盘的demo，分享给诸位 github：https://github.com/w446108264/XhsEmoticonsKeyboard 作者：zhongdaxia 使用：12345678910allprojects &#123; repositories &#123; jcenter() maven &#123; url \"https://jitpack.io\" &#125; &#125;&#125;dependencies &#123; compile 'com.github.w446108264:XhsEmoticonsKeyboard:2.0.4'&#125; 完整项目iosche 一句话介绍：谷歌2016开发者大会的展示项目 上榜理由：github上有13.4k个star，位居企业级项目排行榜第一位，牛逼的开发者，权威的设计模式，标准的项目写法，值得一试；笔者建议初学者down下源码，找到app入口，每个页面走一通，配合设计模式的概念加深理解。 github：https://github.com/google/iosched 作者： Google Plaid 一句话介绍：提供设计新闻和灵感的开源app 上榜理由：标准的material design设计，新闻类app，github上9k的star量值得你摒弃市面上参差不齐的新闻app，快点下手研究它吧！ github：https://github.com/nickbutcher/plaid 作者： Nick Butcher ###PocketHub 一句话介绍：Github的Android版 上榜理由：8.7K的star数量，Github的亲生儿子，开放的源码值得各位一探究竟 github：https://github.com/pockethub/PocketHub 作者：Fadil Sutomo Signal Android 一句话介绍：Signal是一款安全通讯的短信类app， 上榜理由：7.9K的star数量，工具类app的标签属性，让它在排行榜中独一无二，如果你对短信app有兴趣，可以深入探究一番 github：https://github.com/WhisperSystems/Signal-Android 作者：WhisperSystems android-UniversalMusicPlayer 一句话介绍：一款跨设备运行的多媒体app 上榜理由：googlesamples良心推荐，github拥有7.9k个star，可以在Android手机，汽车，平板，穿戴设备上使用，对于仅仅体验过Android手机开发的程序员，会不会很新奇呢？你值得一试！ github：https://github.com/googlesamples/android-UniversalMusicPlayer 作者：Google HomeMirror 一句话介绍：如果你是个爱美的家伙那么你一定需要这面镜子！ 上榜理由：工具类App很难再github上有一席之地，除非它提供特别新奇的功能，比如HomeMirror，github上有用7599个star，仅仅因为它提供了镜子的功能。从现在起，Android 手机、pad，都将成为你旅游居家神器，值得拥有！ github：https://github.com/HannahMitt/HomeMirror 作者：Hannah Mittens HomeMirror初体验： ExoPlayer 一句话介绍：一款 替代Android原生MediaPlayer的媒体播放器 上榜理由：也许是Google对自家MediaPlayer API不甚满意，所以诞生了ExoPlayer，ExoPlayer提供了强大的扩展API，使用它来制作多媒体播放器更快捷，更容易扩展，对多媒体播放器感兴趣的同仁们可以用它来大展身手了！6.9K个star，证明它有多受开发者们喜爱，更难能可贵的是，google还在更新维护着！ 官网地址：https://google.github.io/ExoPlayer/ github：https://github.com/google/ExoPlayer 作者：google 使用：12345678repositories &#123; jcenter()&#125;compile 'com.google.android.exoplayer:exoplayer:r2.X.X'compile 'com.google.android.exoplayer:exoplayer-core:r2.X.X'compile 'com.google.android.exoplayer:exoplayer-dash:r2.X.X'compile 'com.google.android.exoplayer:exoplayer-ui:r2.X.X' cheesesquare 一句话介绍：Android 材料设计的展示性项目 上榜理由:作者被称为是Android Support Lib背后的男人，他写出的展示性项目，怎能不推荐上榜？材料设计已经炒了好几年了，但作为最权威的展示项目，你一定需要它，6.7个star证明了它是多么的受欢迎。 github：https://github.com/chrisbanes/cheesesquare 作者：Chris Banes DanmakuFlameMaster 一句话介绍：android端开源弹幕引擎 上榜理由：bilibili出品，保证了它的纯种品质，并且ndk源码也一并开源，可谓业界良心，该弹幕引擎的开源节省了很多视频直播小伙伴的开发成本，笔者强力推荐！ github：https://github.com/Bilibili/DanmakuFlameMaster 作者：bilibili 使用：123456789101112repositories &#123; jcenter()&#125;dependencies &#123; compile 'com.github.ctiao:DanmakuFlameMaster:0.8.3' compile 'com.github.ctiao:ndkbitmap-armv7a:0.8.3' # Other ABIs: optional compile 'com.github.ctiao:ndkbitmap-armv5:0.8.3' compile 'com.github.ctiao:ndkbitmap-x86:0.8.3'&#125; facebook-android-sdk 一句话介绍：一款提供接入facebook平台能力的框架 上榜理由：无论是你有接入facebook的需求，还是有学习自制sdk的需求，这都是很棒的途径；如何开发一套企业级sdk，是进阶优秀开发工程师的必须之路，4.1k个star，facebook持久更新质量保证，你值得拥有！ github：https://github.com/facebook/facebook-android-sdk 作者：facebook 使用：1https://developers.facebook.com/docs/android android-oss 一句话介绍：国外创意社区Kickstarter 开源的Android版客户端 上榜理由：精致的企业级APP，每个页面处理得都很棒，如果你志在成为一个优雅工程师，这款开源项目一定适合你，3.8k个star证明了它不俗的生命力 github：https://github.com/kickstarter/android-oss 作者：kickstarter k-9 一句话介绍：Android端客户端邮件App 上榜理由：还记得张小龙的成名作——FoxMail吗？如果你想做一款移动端Email App，k-9具有很好的借鉴价值，此外对于应用层协议你也会有更深的认识 官网地址： https://k9mail.github.io/ github：https://github.com/k9mail/k-9 Timber 一句话介绍：一款音乐播放器类App 上榜理由：3K个star，完全按照材料设计规范，提供十几种播放特性，而且还提供App的通用设置能力，这一点做的同样优秀，对于志在提升开发技术的同学值得一试 github：https://github.com/naman14/Timber 作者：Naman Dwivedi remusic 一句话介绍：仿网易云音乐Android版App 上榜理由：学习完Timer，是否还不太满足你的胃口？remusic可以满足你的胃口——它甚至可以拿去直接当上线项目了！2.9K个star，基于Timber的设计（入手的前提是先搞懂Timber）值得入手；有一个问题：如果由你重构，你会如何做呢？ github：https://github.com/aa112901/remusic 作者：MW Douya 一句话介绍：开源豆瓣客户端 上榜理由：一款功能全面、架构设计不俗的开源APP；仅仅是对豆瓣APP设计思路不满而进行的重构项目，可见作者对产品的痴迷和热爱，2.9K个star，证明该项目并不是头脑发热一时兴起的作品，如果每一个idea都能实现，那我们的世界将会多么美妙！ github：https://github.com/DreaminginCodeZH/Douya 作者：Zhang Hai BookReader 一句话介绍：开源小说阅读器 上榜理由：2.7K个star，榜单里第一款阅读器APP，具有很高的学习价值（针对有兴趣往阅读工具类方向发展的同学） github：https://github.com/JustWayward/BookReader 作者：JustWayward 团队 bilibili-android-client 一句话介绍:高仿bilibili的Android客户端 上榜理由：2.5K个star，榜单里第一款视频直播开源App；适合对视频直播、社区互动感兴趣的同学；bilibili-android-client里使用了很多大型框架，此项目并不适合基础薄弱的同学，不要灰心，学习页面的布局设计也是值得的！ github：https://github.com/HotBitmapGG/bilibili-android-client 作者：Hcc AndroidChromium 一句话介绍：Android版chrome浏览器 上榜理由：正如作者宣称的那样: 谷歌浏览器安卓版源码项目 世界级的安卓架构 理清本项目业务逻辑完全可以胜任国内一线公司工程师 github：https://github.com/JackyAndroid/AndroidChromium 作者：JackYAndroid 开发框架：（排名无先后、只按类型划分）libgdx 一句话介绍：一款跨平台的android端游戏开发框架 上榜理由：android端开发框架类第一名，11.7K的star量，游戏框架是它的专属标签，更重要的是它是跨平台的 官网地址：http://libgdx.badlogicgames.com/ github：https://github.com/libgdx/libgdx xUtils 一句话介绍：老牌企业级开发框架 上榜理由：4.9K个star，xUtils作为上古时期程序员备受推崇的开发框架，最大的原因——省事。xUtls包含四大模块，与之而来的是提供四大操作能力：数据操作、UI操作、Http协议操作、图片操作。xUtils作为笔者初学Android框架设计的导师型项目，在笔者多年经验中，看到xUtils作为众多中小银行Android端框架方案首选，足以证明它的受欢迎程度。该框架现在已经更新到了xUtils3，如果你对Android框架涉及有一定的想法，可以从xUtils入手，进阶为框架大师行列。虽然框架中很多引擎已经过时，各个模块的做法都可以用其他框架替代，但xUtils作为国内开发者的骄傲，上古时期的框架宠儿，值得你拥有！ github：https://github.com/wyouflf/xUtils 作者：wyouflf 使用：1compile 'org.xutils:xutils:3.5.0' android-common 一句话介绍： 一款android快速开发框架 上榜理由：滴滴资深级Android工程师出品，历经多年开发者的检验，以4.3K屹立于快速开发框架榜第三名，该框架提供了图片缓存、Http缓存、DropDownListView、下载模块、开发常用工具类等，作为上古时期程序员最早的总结性开发框架，它是一代人智慧的结晶，值得我们为作者Trinea鼓掌喝彩 github：https://github.com/Trinea/android-common 作者：Trinea Vitamio 一句话介绍：一款支持跨平台的Android多媒体开发框架 上榜理由：如果之前提到的exoplayer不能满足你开发多媒体的需求，那我保证vitamio值得你一试 官网地址：https://www.vitamio.org/ github：https://github.com/yixia/VitamioBundle 作者：yixia团队 Weex 一句话介绍：移动端跨平台开发的解决方案 上榜理由：14.4K个star，有成熟应用案例的企业级混合开发框架，阿里巴巴出品，为什么不试试呢？ 官网地址：https://weex.apache.org/cn/ github：https://github.com/alibaba/weex 作者：alibaba cordova-android（Hybrid 开发框架、WebApp开发框架） 一句话介绍：跨平台的开发框架 上榜理由：cordova有足够的能力完成混合开发、WebApp开发的需求：不论你是Web开发者，或者是Native开发者，使用cordova都可以作出跨平台的App 官网地址：http://cordova.axuer.com/docs/zh-cn/latest/guide/overview/index.html github：https://github.com/apache/cordova-android react-native 一句话介绍：一款以Javascript的语言来操作多个系统语言（Ios、Android）的框架 上榜理由：很难讲react-native属于什么类别，它适合前端工程师开发移动端App，也适合Native开发者进行跨平台的开发，但对于Navitve开发者来说陡峭的学习曲线会吓走一大批“框架爱好者”；前端界有一句名言：Web代表着未来，Native代表着现在，而我们处在现在与未来的道路上；49K个star，似乎让我们离未来更进一步 官网地址： http://facebook.github.io/react-native/docs/getting-started.html github：https://github.com/facebook/react-native 作者：facebook 其他：AndroidUtilCode 一句话介绍：提供了数量庞大的工具类 上榜理由：10.8K的star个数，足以证明它是多么受欢迎，欢迎你提供常用的工具类壮大它！ github：https://github.com/Blankj/AndroidUtilCode/blob/master/README-CN.md 使用：1File → Settings... → Plugins → Browse repositories... and search for freeline. kotiln 一句话介绍：Google推出的Android编程语言 上榜理由：就像AndroidStudio取代Eclipse那样，Goolg将kotiln作为Android的官网语言，也许是为了避免同Oracle的专利诉讼，但kotlin 100%兼容java，大幅精简java代码量，以及函数式编程的思想这些优异的特性同意值得我们注意，还记得在榜单之前说过的吗？未来是kotlin的，当下是java的，但我们处在当下通往未来的道路上——学习未来的编程语言，提升自己的工作效率，早点下班打豆豆，何乐而不为？ 官网地址：http://kotlinlang.org/ github：https://github.com/JetBrains/kotlin 使用：1http://kotlinlang.org/docs/reference/ 提供了 api-android用例-书籍等资源 书籍类项目（排序无先后）Android developer中国官网培训课程 一句话介绍：符合中国国情的Google开发者官网的子产品——Android开发者官网 上榜理由：这里有培训课程、API用例课程、Sample用例、依赖库介绍、AndroidStudio官网…等等一系列公开免费的课程，尽管大部分内容还是英文讲解，可是你肯靠着英语词典一篇一篇啃完，相信我，你的Android知识水平将秒杀国内市面上大部分的Android书籍 官网地址：https://developer.android.google.cn/training/index.html 作者：google android-architecture 一句话介绍：google提供的Android当下各种基本框架 上榜理由：看完它，mvp，mvvm都将入切瓜砍菜，秋风扫落叶一般… github：https://github.com/googlesamples/android-architecture 作者：google andorid-open-project 一句话介绍：囊括Android几乎所有的开源项目的导航类目录 上榜理由：23k个star的导航类目录，与其盛名不符的是，该项目的导航、浏览阅读体验做的非常差，建议消遣之余阅读；推荐理由——中国人做的最全的Android 开源项目导航目录 github：https://github.com/Trinea/android-open-project 作者：Trinea awesome-android-ui 一句话介绍：Android的开源项目目录 上榜理由：国外的一款导航目录，23k个star github：https://github.com/wasabeef/awesome-android-ui","categories":[{"name":"Android庶系","slug":"Android庶系","permalink":"http://dinson.win/categories/Android庶系/"}],"tags":[{"name":"排行榜","slug":"排行榜","permalink":"http://dinson.win/tags/排行榜/"}]},{"title":"模仿手机QQ底部导航栏Icon拖拽效果","date":"2017-06-20T01:54:00.000Z","path":"2017/06/20/17-06-20/","text":"概述 实现的方式有很多，我说一下我的思路：我的思路比较简单，无非就是上下两层图片可拖动的范围和速度不一样呗（大图标拖动范围和速度小于小图标拖动范围和速度）。 PS（以第一个消息图标为例）：大图标指的是外面的气泡图标，小图标指的是气泡里面的眼睛和嘴巴图标。切图时将一张整体图片切成了这两个图标。具体可下载Demo参考里面的图片资源。自定义属性 自定义属性123456789&lt;resources&gt; &lt;declare-styleable name=\"QQNaviView\"&gt; &lt;attr name=\"bigIconSrc\" format=\"reference\"/&gt; &lt;attr name=\"smallIconSrc\" format=\"reference\"/&gt; &lt;attr name=\"iconWidth\" format=\"dimension\"/&gt; &lt;attr name=\"iconHeight\" format=\"dimension\"/&gt; &lt;attr name=\"range\" format=\"float\"/&gt; &lt;/declare-styleable&gt; &lt;/resources&gt; 其中range为可拖动的范围（其实是倍数），默认值是1，不宜设置过大。 主要的拖动代码123456789101112131415161718192021222324252627@Override public boolean onTouchEvent(MotionEvent event) &#123; float x = event.getX(); float y = event.getY(); switch (event.getAction())&#123; case MotionEvent.ACTION_DOWN: lastX = x; lastY = y; break; case MotionEvent.ACTION_MOVE: float deltaX = x - lastX; float deltaY = y - lastY; moveEvent(mBigIcon, deltaX, deltaY, mSmallRadius); //因为可拖动大半径是小半径的1.5倍， 因此这里x,y也相应乘1.5 moveEvent(mSmallIcon, 1.5f * deltaX, 1.5f * deltaY, mBigRadius); break; case MotionEvent.ACTION_UP: //抬起时复位 mBigIcon.setX(0); mBigIcon.setY(0); mSmallIcon.setX(0); mSmallIcon.setY(0); break; &#125; return super.onTouchEvent(event); &#125; 这里先得到X轴拖动的距离deltaX和Y轴拖动的距离deltaY，大图标对应小半径，小图标对应大半径。然后看moveEvent方法： 123456789101112131415161718private void moveEvent(View view, float deltaX, float deltaY, float radius)&#123; //先计算拖动距离 float distance = getDistance(deltaX, deltaY); //拖动的方位角，atan2出来的角度是带正负号的 double degree = Math.atan2(deltaY, deltaX); //如果大于临界半径就不能再往外拖了 if (distance &gt; radius)&#123; view.setX(view.getLeft() + (float) (radius * Math.cos(degree))); view.setY(view.getTop() + (float) (radius * Math.sin(degree))); &#125;else &#123; view.setX(view.getLeft() + deltaX); view.setY(view.getTop() + deltaY); &#125; &#125; 方法很简单，注释结合这张图就一目了然了，主要是注意在抬起时图标复位就好了。 简单看一下初始化 由于图标下面一般会带文字，因此直接继承了LinearLayout，并且默认设置成了垂直排列。 123456789101112131415161718public QQNaviView(@NonNull Context context, @Nullable AttributeSet attrs, @AttrRes int defStyleAttr) &#123; super(context, attrs, defStyleAttr); mContext = context; TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.QQNaviView, defStyleAttr, 0); mBigIconSrc = ta.getResourceId(R.styleable.QQNaviView_bigIconSrc, R.drawable.big); mSmallIconSrc = ta.getResourceId(R.styleable.QQNaviView_smallIconSrc, R.drawable.small); mIconWidth = ta.getDimension(R.styleable.QQNaviView_iconWidth, dp2px(context, 60)); mIconHeight = ta.getDimension(R.styleable.QQNaviView_iconHeight, dp2px(context, 60)); mRange = ta.getFloat(R.styleable.QQNaviView_range, 1); ta.recycle(); //默认垂直排列 setOrientation(LinearLayout.VERTICAL); init(context); &#125; 在init方法中进行了布局文件的绑定，并且让该view水平居中。 12345678910111213141516private void init(Context context) &#123; mView = inflate(context, R.layout.view_icon, null); mBigIcon = (ImageView) mView.findViewById(R.id.iv_big); mSmallIcon = (ImageView) mView.findViewById(R.id.iv_small); mBigIcon.setImageResource(mBigIconSrc); mSmallIcon.setImageResource(mSmallIconSrc); setWidthAndHeight(mBigIcon); setWidthAndHeight(mSmallIcon); LayoutParams lp = new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT); lp.gravity = Gravity.CENTER_HORIZONTAL; mView.setLayoutParams(lp); addView(mView); &#125; 这里值得注意的是onMeasure方法。由于图标可以往外拖动，所以要给ImageView一个默认的padding，不然拖动时最外面部分会消失。 1234567891011121314151617181920@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; setupView(); measureDimension(widthMeasureSpec, heightMeasureSpec); &#125; /** * 确定view以及拖动相关参数 */ private void setupView() &#123; //根据view的宽高确定可拖动半径的大小 mSmallRadius = 0.1f * Math.min(mView.getWidth(), mView.getHeight()) * mRange; mBigRadius = 1.5f * mSmallRadius; //设置imageview的padding，不然拖动时图片边缘部分会消失 int padding = (int) mBigRadius; mBigIcon.setPadding(padding, padding, padding, padding); mSmallIcon.setPadding(padding, padding, padding, padding); &#125; 然后就没啥好说了，直接看源码吧。 源码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241public class QQNaviView extends LinearLayout &#123; private static final String TAG = \"QQNaviView\"; private Context mContext; /* 主view */ private View mView; /* 外层icon/拖动幅度较小icon */ private ImageView mBigIcon; /* 里层icon/拖动幅度较大icon */ private ImageView mSmallIcon; /* 外层icon资源 */ private int mBigIconSrc; /* 里面icon资源 */ private int mSmallIconSrc; /* icon宽度 */ private float mIconWidth; /* icon高度 */ private float mIconHeight; /* 拖动幅度较大半径 */ private float mBigRadius; /* 拖动幅度小半径 */ private float mSmallRadius; /* 拖动范围 可调 */ private float mRange; private float lastX; private float lastY; public QQNaviView(@NonNull Context context) &#123; this(context, null); &#125; public QQNaviView(@NonNull Context context, @Nullable AttributeSet attrs) &#123; this(context, attrs, 0); &#125; public QQNaviView(@NonNull Context context, @Nullable AttributeSet attrs, @AttrRes int defStyleAttr) &#123; super(context, attrs, defStyleAttr); mContext = context; TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.QQNaviView, defStyleAttr, 0); mBigIconSrc = ta.getResourceId(R.styleable.QQNaviView_bigIconSrc, R.drawable.big); mSmallIconSrc = ta.getResourceId(R.styleable.QQNaviView_smallIconSrc, R.drawable.small); mIconWidth = ta.getDimension(R.styleable.QQNaviView_iconWidth, dp2px(context, 60)); mIconHeight = ta.getDimension(R.styleable.QQNaviView_iconHeight, dp2px(context, 60)); mRange = ta.getFloat(R.styleable.QQNaviView_range, 1); ta.recycle(); //默认垂直排列 setOrientation(LinearLayout.VERTICAL); init(context); &#125; private void init(Context context) &#123; mView = inflate(context, R.layout.view_icon, null); mBigIcon = (ImageView) mView.findViewById(R.id.iv_big); mSmallIcon = (ImageView) mView.findViewById(R.id.iv_small); mBigIcon.setImageResource(mBigIconSrc); mSmallIcon.setImageResource(mSmallIconSrc); setWidthAndHeight(mBigIcon); setWidthAndHeight(mSmallIcon); LayoutParams lp = new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT); lp.gravity = Gravity.CENTER_HORIZONTAL; mView.setLayoutParams(lp); addView(mView); &#125; /** * 设置icon宽高 * @param view */ private void setWidthAndHeight(View view)&#123; FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) view.getLayoutParams(); lp.width = (int) mIconWidth; lp.height = (int) mIconHeight; view.setLayoutParams(lp); &#125; @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; setupView(); measureDimension(widthMeasureSpec, heightMeasureSpec); &#125; /** * 确定view以及拖动相关参数 */ private void setupView() &#123; //根据view的宽高确定可拖动半径的大小 mSmallRadius = 0.1f * Math.min(mView.getWidth(), mView.getHeight()) * mRange; mBigRadius = 1.5f * mSmallRadius; //设置imageview的padding，不然拖动时图片边缘部分会消失 int padding = (int) mBigRadius; mBigIcon.setPadding(padding, padding, padding, padding); mSmallIcon.setPadding(padding, padding, padding, padding); &#125; private void measureDimension(int widthMeasureSpec, int heightMeasureSpec) &#123; final int sizeWidth = MeasureSpec.getSize(widthMeasureSpec); final int sizeHeight = MeasureSpec.getSize(heightMeasureSpec); final int modeWidth = MeasureSpec.getMode(widthMeasureSpec); final int modeHeight = MeasureSpec.getMode(heightMeasureSpec); int width = 0; int height = 0; for (int i = 0; i &lt; getChildCount(); i++)&#123; final View child = getChildAt(i); if (child.getVisibility() != GONE)&#123; measureChild(child, widthMeasureSpec, heightMeasureSpec); LayoutParams lp = (LayoutParams) child.getLayoutParams(); final int childWidth = child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin; final int childHeight = child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin; width += childWidth; height += childHeight; &#125; &#125; setMeasuredDimension((modeWidth == MeasureSpec.EXACTLY) ? sizeWidth : width, (modeHeight == MeasureSpec.EXACTLY) ? sizeHeight : height); &#125; @Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123; int childLeft; int childTop = 0; for (int i = 0; i &lt; getChildCount(); i ++)&#123; final View child = getChildAt(i); LayoutParams lp = (LayoutParams) child.getLayoutParams(); if (child.getVisibility() != GONE)&#123; final int childWidth = child.getMeasuredWidth(); final int childHeight = child.getMeasuredHeight(); //水平居中显示 childLeft = (getWidth() - childWidth) / 2; //当前子view的top childTop += lp.topMargin; child.layout(childLeft, childTop, childLeft + childWidth, childTop + childHeight); //下一个view的top是当前子view的top + height + bottomMargin childTop += childHeight + lp.bottomMargin; &#125; &#125; &#125; @Override public boolean onTouchEvent(MotionEvent event) &#123; float x = event.getX(); float y = event.getY(); switch (event.getAction())&#123; case MotionEvent.ACTION_DOWN: lastX = x; lastY = y; break; case MotionEvent.ACTION_MOVE: float deltaX = x - lastX; float deltaY = y - lastY; moveEvent(mBigIcon, deltaX, deltaY, mSmallRadius); //因为可拖动大半径是小半径的1.5倍， 因此这里x,y也相应乘1.5 moveEvent(mSmallIcon, 1.5f * deltaX, 1.5f * deltaY, mBigRadius); break; case MotionEvent.ACTION_UP: //抬起时复位 mBigIcon.setX(0); mBigIcon.setY(0); mSmallIcon.setX(0); mSmallIcon.setY(0); break; &#125; return super.onTouchEvent(event); &#125; /** * 拖动事件 * @param view * @param deltaX * @param deltaY * @param radius */ private void moveEvent(View view, float deltaX, float deltaY, float radius)&#123; //先计算拖动距离 float distance = getDistance(deltaX, deltaY); //拖动的方位角，atan2出来的角度是带正负号的 double degree = Math.atan2(deltaY, deltaX); //如果大于临界半径就不能再往外拖了 if (distance &gt; radius)&#123; view.setX(view.getLeft() + (float) (radius * Math.cos(degree))); view.setY(view.getTop() + (float) (radius * Math.sin(degree))); &#125;else &#123; view.setX(view.getLeft() + deltaX); view.setY(view.getTop() + deltaY); &#125; &#125; private int dp2px(Context context, float dpVal) &#123; return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dpVal, context.getResources().getDisplayMetrics()); &#125; private float getDistance(float x, float y)&#123; return (float) Math.sqrt(x * x + y * y); &#125; public void setBigIcon(int res)&#123; mBigIcon.setImageResource(res); &#125; public void setSmallIcon(int res)&#123; mSmallIcon.setImageResource(res); &#125; public void setIconWidthAndHeight(float width, float height)&#123; mIconWidth = dp2px(mContext, width); mIconHeight = dp2px(mContext, height); setWidthAndHeight(mBigIcon); setWidthAndHeight(mSmallIcon); &#125; public void setRange(float range)&#123; mRange = range; &#125; &#125; 属性 说明 bigIconSrc 大图标资源 smallIconSrc 小图标资源 iconWidth 图标宽度 iconHeight 图标高度 range 可拖动范围","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"自定义VIEW","slug":"自定义VIEW","permalink":"http://dinson.win/tags/自定义VIEW/"}]},{"title":"Splash 页面三秒跳转和动态下载最新背景图","date":"2017-06-18T01:16:45.000Z","path":"2017/06/18/17-06-18/","text":"概述 最近公司产品大大说我们需要一个动态替换的闪屏页面，like 某猫，某东一样，可以动态替换。产品大大就是厉害，说一句话我们就需要实现好几个功能： 创建一个冷启动后的闪屏页面（Splash 页面） 这个页面默认 3s 倒计时，点击倒计时按钮可以跳转并结束倒计时 点击图片如果有外链，则跳转应用的 web 页面用来作为活动页面（没错这点和某猫很像） 动态替换厉害了，我们需要在进入这个页面后去后台请求一下是否有新的图片，如果是新的图片则下载到本地，替换掉原来的图片，下次用户在进入 Splash 就会看到一个崭新的图片。 布局实现123456789101112131415161718192021222324&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;ImageView android:id=\"@+id/sp_bg\" android:src=\"@mipmap/icon_splash\" android:scaleType=\"centerCrop\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"/&gt; &lt;Button android:visibility=\"invisible\" android:gravity=\"center\" android:textSize=\"10sp\" android:textColor=\"@color/white\" android:id=\"@+id/sp_jump_btn\" android:background=\"@drawable/btn_splash_shape\" android:layout_width=\"60dp\" android:layout_height=\"30dp\" android:layout_alignParentRight=\"true\" android:layout_alignParentTop=\"true\" android:layout_marginRight=\"20dp\" android:layout_marginTop=\"20dp\"/&gt;&lt;/RelativeLayout&gt; 布局文件文件相对来说还是比较简单，就需要一个 ImageView 和 Button 即可，Button 的背景是一个自定义的 shape，透明度颜色啥的,根据UI妹砸说的算就好了。12345678&lt;shape xmlns:android=\"http://schemas.android.com/apk/res/android\" android:shape=\"rectangle\"&gt; &lt;solid android:color=\"#99c4c4c4\"/&gt; &lt;corners android:radius=\"20dp\"/&gt; &lt;stroke android:width=\"0.7dp\" android:color=\"#7fffffff\"/&gt;&lt;/shape&gt; 倒计时功能实现实现倒计时的功能方法有很多，最基本的你可以使用 Handler 来实现吧，还可以是用 Timer 吧。 但是由于之前写验证码倒计时的时候发现 android.os 中有一个神奇的类叫 CountDownTimer 的类，此类神奇之处就在于你完全不需要理会那些线程交互他都给你处理好了，你只管在回调中处理时间设置跳转逻辑就好了。 但是有一个不足的地方就它的第一秒的倒计时有时候会不可见，所以我们将倒计时总时间设置为 3200ms 。123456789101112private CountDownTimer countDownTimer = new CountDownTimer(3200, 1000) &#123; @Override public void onTick(long millisUntilFinished) &#123; mSpJumpBtn.setText(\"跳过(\" + millisUntilFinished / 1000 + \"s)\"); &#125; @Override public void onFinish() &#123; mSpJumpBtn.setText(\"跳过(\" + 0 + \"s)\"); gotoLoginOrMainActivity(); &#125;&#125;; 最后需要在有闪屏页面的情况下，进入开启倒计时：1234private void startClock() &#123; mSpJumpBtn.setVisibility(View.VISIBLE); countDownTimer.start();&#125; 下载功能实现点击跳转功能实现上边说了我们 APP 点击图片需要可以跳转，下面代码给出了背景点击跳转的逻辑：1234567891011121314151617181920@Overrideprotected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_splash); ButterKnife.bind(this); checkSDCardPermission();&#125;@OnClick(&#123;R.id.sp_bg, R.id.sp_jump_btn&#125;)public void onViewClicked(View view) &#123; switch (view.getId()) &#123; case R.id.sp_bg: gotoWebActivity(); break; case R.id.sp_jump_btn: gotoLoginOrMainActivity(); break; &#125;&#125; 跳转逻辑可以根据实际的项目需求来规定，下面的代码中 Splash 为本地序列化的 model 用来存储网络下载的闪屏页面信息，稍后会有详细的序列化过程，此刻我们只需要关注跳转逻辑：123456789101112private Splash mSplash;private void gotoWebActivity() &#123; if (mSplash != null &amp;&amp; mSplash.click_url != null) &#123; Intent intent = new Intent(this, BannerActivity.class); intent.putExtra(\"url\", mSplash.click_url); intent.putExtra(\"title\", mSplash.title); intent.putExtra(\"fromSplash\", true); intent.putExtra(\"needShare\", false); startActivity(intent); finish(); &#125;&#125; 机智的你可能看出来我们并没有在离开页面的时候结束掉 timer，其实我们是复写了 onDestroy 方法。123456@Overrideprotected void onDestroy() &#123; super.onDestroy(); if (countDownTimer != null) countDownTimer.cancel();&#125; 其实跳转以后还有一个坑就是，从 web 页面返回的时候，因为闪屏页面是你应用的第一个页面，而跳转到 web 页面的是你 finish 掉了该页面，那么从 web 页返回的时候不做处理，用户就直接退出了 app 这样当然是不允许的。 所以请在 web 页面中添加以下逻辑：12345678910111213141516171819202122232425262728293031//此方法是toolbar 的返回事件调用的方法 mFromSplash 为启动页面传递过来的参数@Overrideprotected void onLeftClick(View view) &#123; if (mFromSplash) &#123; gotoLoginOrMainActivity(); &#125; else &#123; super.onLeftClick(view); &#125;&#125;// 此方法为系统返回键的监听@Overridepublic void onBackPressed() &#123; if (mWebView.canGoBack()) &#123; mWebView.goBack(); &#125; else if (mFromSplash) &#123; gotoLoginOrMainActivity(); &#125; else &#123; super.onBackPressed(); &#125;&#125; // 下面是跳转逻辑 private void gotoLoginOrMainActivity() &#123; if (UserCenter.getInstance().getToken() == null) &#123; gotoLoginActivity(); &#125; else &#123; gotoMainActivity(); &#125;&#125;.... gotoLoginActivity，gotoMainActivity 太长了，不给了自己写 (*^__^*) 嘻嘻…… 下载网络图片以及序列化本地上边说了我们有这样一个需求，就是如果后台的接口返回的图片与本地序列化的图片不同，我们需要将新的图片下载到本地，然后下次进入 Splash 的时候就展示的新的图片了。 这里你需要知道知识有下边几个： java bean 序列化与反序列化的知识 IntentService 服务的知识 AsycTask 的使用 6.0 以上权限申请 EasyPermissions 的使用。以上不熟悉的同学，看到下边的代码可能会引起适量身体不适 其实这里更好的操作，我们可以将图片下载到内存中，这样并不需要申请sdk权限。这里当时实现的时候有点欠考虑了。如果您们保存图片的地址在内存中，就可以跳过这一步。 权限管理首先我们注意到已进入 Splash 页面我们就进行权限检查，因为我们需要下载最新的闪屏到本地，并取出序列化的对象，来展示对应的内容。 其中 checkSDCardPermission 涉及到 6.0 以上下载最新图片的逻辑，这里采用的是 官方的 EasyPermissions 来处理，关于 EasyPermissions 的使用这里就不多说了，需要了解的请移步 EasyPermissions；123456789101112public static final int RC_PERMISSION = 123;@TargetApi(Build.VERSION_CODES.JELLY_BEAN)@AfterPermissionGranted(RC_PERMISSION)private void checkSDCardPermission() &#123; if (EasyPermissions.hasPermissions(this, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE)) &#123; initSplashImage(); startImageDownLoad(); &#125; else &#123; EasyPermissions.requestPermissions(this, \"需要您提供【**】App 读写内存卡权限来确保应用更好的运行\", RC_PERMISSION, Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE); &#125;&#125; 简单来说在 EasyPermissions.hasPermissions 的回调中我们就可以正确的做我们下载图片的工作了。123456789101112131415161718192021222324252627282930private void initSplashImage() &#123; mSplash = getLocalSplash(); //如果取出本地序列化的对象成功 则进行图片加载和倒计时 if (mSplash != null &amp;&amp; !TextUtils.isEmpty(mSplash.savePath)) &#123; Logcat.d(\"SplashActivity 获取本地序列化成功\" + mSplash); Glide.with(this).load(mSplash.savePath).dontAnimate().into(mSpBgImage); startClock();//加载成功 开启倒计时 &#125; else &#123; // 如果本地没有 直接跳转 mSpJumpBtn.setVisibility(View.INVISIBLE); mSpJumpBtn.postDelayed(new Runnable() &#123; @Override public void run() &#123; gotoLoginOrMainActivity(); &#125; &#125;, 400); &#125;&#125;// 取出本地序列化的 Splash private Splash getLocalSplash() &#123; Splash splash = null; try &#123; File serializableFile = SerializableUtils.getSerializableFile(Constants.SPLASH_PATH, Constants.SPLASH_FILE_NAME); splash = (Splash) SerializableUtils.readObject(serializableFile); &#125; catch (IOException e) &#123; Logcat.e(\"SplashActivity 获取本地序列化闪屏失败\" + e.getMessage()); &#125; return splash;&#125; 创建本地序列化对象 Splash EntitySplash 内容如下：123456789101112131415161718192021222324252627282930public class Splash implements Serializable &#123; private static final long serialVersionUID = 7382351359868556980L;//这里需要写死 序列化Id public int id; public String burl;//大图 url public String surl;//小图url public int type;//图片类型 Android 1 IOS 2 public String click_url; // 点击跳转 URl public String savePath;//图片的存储地址 public String title;//图片的存储地址 public Splash(String burl, String surl, String click_url, String savePath) &#123; this.burl = burl; this.surl = surl; this.click_url = click_url; this.savePath = savePath; &#125; @Override public String toString() &#123; return \"Splash&#123;\" + \"id=\" + id + \", burl='\" + burl + '\\'' + \", surl='\" + surl + '\\'' + \", type=\" + type + \", click_url='\" + click_url + '\\'' + \", savePath='\" + savePath + '\\'' + '&#125;'; &#125;&#125; 序列化反序列话的工具类 SerializableUtils由于项目用到序列化地方还有挺多的，所以这里封装了一个序列化工具类SerializableUtils：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152public class SerializableUtils &#123; public static &lt;T extends Serializable&gt; Object readObject(File file) &#123; ObjectInputStream in = null; T t = null; try &#123; in = new ObjectInputStream(new FileInputStream(file)); t = (T) in.readObject(); &#125; catch (EOFException e) &#123; // ... this is fine &#125; catch (IOException e) &#123; Logcat.e(\"e \" + e.getMessage()); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; finally &#123; try &#123; if (in != null) in.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; return t; &#125; public static &lt;T extends Serializable&gt; boolean writeObject(T t, String fileName) &#123; ObjectOutputStream out = null; try &#123; out = new ObjectOutputStream(new FileOutputStream(fileName)); out.writeObject(t); Logcat.d(\"序列化成功 \" + t.toString()); return true; &#125; catch (IOException e) &#123; e.printStackTrace(); Logcat.d(\"序列化失败 \" + e.getMessage()); return false; &#125; finally &#123; try &#123; if (out != null) out.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; public static File getSerializableFile(String rootPath, String fileName) throws IOException &#123; File file = new File(rootPath); if (!file.exists()) file.mkdirs(); File serializable = new File(file, fileName); if (!serializable.exists()) serializable.createNewFile(); return serializable; &#125;&#125; 经过上边的努力我们已经完成了从本地反序列化内容，然后加载图片的工作了，剩下的需要做的就是下载最新图片的工作。 请求接口下载最新的闪屏信息和图片 这里经过考虑，我决定采用服务去下载，因为这样可以少很多麻烦，也不影响程序的正常运行。但是绝不是你们要采用这样的方法，你们也可以单独写个工具类内部去开线程做这件事。 项目中使用开启 IntentServie 来下载图片，关于这中服务的最大的好处就是，我们不需要关注服务是否执行完任务，当他执行完onHandleIntent 方法后他就自己挑用 stop 方法了。我们只需要关注下载逻辑和序列化逻辑就好。 checkSDCardPermission 中调用的 startImageDownLoad（） 方法：123private void startImageDownLoad() &#123;SplashDownLoadService.startDownLoadSplashImage(this, Constants.DOWNLOAD_SPLASH);&#125; SplashDownLoadService 内容，IntentService 在调用了 startService 后会执行 onHandleIntent 方法，在这方法中我们去请求服务器最新的数据即 loadSplashNetDate：12345678910111213141516171819public SplashDownLoadService() &#123; super(\"SplashDownLoad\");&#125;public static void startDownLoadSplashImage(Context context, String action) &#123; Intent intent = new Intent(context, SplashDownLoadService.class); intent.putExtra(Constants.EXTRA_DOWNLOAD, action); context.startService(intent);&#125;@Overrideprotected void onHandleIntent(@Nullable Intent intent) &#123; if (intent != null) &#123; String action = intent.getStringExtra(Constants.EXTRA_DOWNLOAD); if (action.equals(Constants.DOWNLOAD_SPLASH)) &#123; loadSplashNetDate(); &#125; &#125;&#125; 由于是公司项目，请求方法就不给出了，但是需要讲下请求数据后如何判断是否需要执行下载任务：12345678910111213141516171819mScreen = common.attachment.flashScreen;Splash splashLocal = getSplashLocal();if (mScreen != null) &#123; if (splashLocal == null) &#123; Logcat.d(\"splashLocal 为空导致下载\"); startDownLoadSplash(Constants.SPLASH_PATH, mScreen.burl); &#125; else if (isNeedDownLoad(splashLocal.savePath, mScreen.burl)) &#123; Logcat.d(\"isNeedDownLoad 导致下载\"); startDownLoadSplash(Constants.SPLASH_PATH, mScreen.burl); &#125;&#125; else &#123;//由于活动是一段时间，等活动结束后我们并不需要在进入闪屏页面，这个时候我们就需要将本地文件删除，下次在进来，本地文件为空，就会直接 finish 掉 Splash 页面，进入主页面。 if (splashLocal != null) &#123; File splashFile = SerializableUtils.getSerializableFile(Constants.SPLASH_PATH, SPLASH_FILE_NAME); if (splashFile.exists()) &#123; splashFile.delete(); Logcat.d(\"mScreen为空删除本地文件\"); &#125; &#125;&#125; 由于活动是一段时间，等活动结束后我们并不需要在进入闪屏页面，这个时候我们就需要将本地文件删除，下次在进来，本地文件为空，就会直接 finish 掉 Splash 页面，进入主页面。 getSplashLocal 方法即反序列话本地存储的 Splash Entity 的过程，上边已经给出这里就不细说，主要讲一下判断逻辑 isNeedDownLoad：123456789101112131415161718192021/** * @param path 本地存储的图片绝对路径 * @param url 网络获取url * @return 比较储存的 图片名称的哈希值与 网络获取的哈希值是否相同 */private boolean isNeedDownLoad(String path, String url) &#123; // 如果本地存储的内容为空则进行下载 if (TextUtils.isEmpty(path)) &#123; return true; &#125; // 如果本地文件不存在则进行下载，这里主要防止用户误删操作 File file = new File(path); if (!file.exists()) &#123; return true; &#125; // 如果两者都存在则判断图片名称的 hashCode 是否相同，不相同则下载 if (getImageName(path).hashCode() != getImageName(url).hashCode()) &#123; return true; &#125; return false;&#125; 分隔 uri 取图片名称的方法：123456789private String getImageName(String url) &#123; if (TextUtils.isEmpty(url)) &#123; return \"\"; &#125; String[] split = url.split(\"/\"); String nameWith_ = split[split.length - 1]; String[] split1 = nameWith_.split(\"\\\\.\"); return split1[0]; &#125; 满足下载条件后则调用 DownLoadTask 下载。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889public class DownLoadUtils &#123; public interface DownLoadInterFace &#123; void afterDownLoad(ArrayList&lt;String&gt; savePaths); &#125; public static void downLoad(String savePath, DownLoadInterFace downLoadInterFace, String... download) &#123; new DownLoadTask(savePath, downLoadInterFace).execute(download); &#125; private static class DownLoadTask extends AsyncTask&lt;String, Integer, ArrayList&lt;String&gt;&gt; &#123; private String mSavePath; private DownLoadInterFace mDownLoadInterFace; private DownLoadTask(String savePath, DownLoadInterFace downLoadTask) &#123; this.mSavePath = savePath; this.mDownLoadInterFace = downLoadTask; &#125; @Override protected ArrayList&lt;String&gt; doInBackground(String... params) &#123; ArrayList&lt;String&gt; names = new ArrayList&lt;&gt;(); for (String url : params) &#123; if (!TextUtils.isEmpty(url)) &#123; if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) &#123; // 获得存储卡的路径 FileOutputStream fos = null; InputStream is = null; try &#123; URL downUrl = new URL(url); // 创建连接 HttpURLConnection conn = (HttpURLConnection) downUrl.openConnection(); conn.connect(); // 创建输入流 is = conn.getInputStream(); File file = new File(mSavePath); // 判断文件目录是否存在 if (!file.exists()) &#123; file.mkdirs(); &#125; String[] split = url.split(\"/\"); String fileName = split[split.length - 1]; File mApkFile = new File(mSavePath, fileName); names.add(mApkFile.getAbsolutePath()); fos = new FileOutputStream(mApkFile, false); int count = 0; // 缓存 byte buf[] = new byte[1024]; while (true) &#123; int read = is.read(buf); if (read == -1) &#123; break; &#125; fos.write(buf, 0, read); count += read; publishProgress(count); &#125; fos.flush(); &#125; catch (Exception e) &#123; Logcat.e(e.getMessage()); &#125; finally &#123; try &#123; if (is != null) &#123; is.close(); &#125; if (fos != null) &#123; fos.close(); &#125; &#125; catch (IOException e1) &#123; e1.printStackTrace(); &#125; &#125; &#125; &#125; &#125; return names; &#125; @Override protected void onPostExecute(ArrayList&lt;String&gt; strings) &#123; super.onPostExecute(strings); if (mDownLoadInterFace != null) &#123; mDownLoadInterFace.afterDownLoad(strings); &#125; &#125; &#125;&#125; 由于下载完成后需要拿到文件存储地址这里写了一个 mDownLoadInterFace.afterDownLoad 的回调在 service 拿到回调后：123456789101112public void afterDownLoad(ArrayList&lt;String&gt; savePaths) &#123; if (savePaths.size() == 1) &#123; Logcat.d(\"闪屏页面下载完成\" + savePaths); if (mScreen != null) &#123; mScreen.savePath = savePaths.get(0); &#125; // 序列化 Splash 到本地 SerializableUtils.writeObject(mScreen, Constants.SPLASH_PATH + \"/\" + SPLASH_FILE_NAME); &#125; else &#123; Logcat.d(\"闪屏页面下载失败\" + savePaths); &#125; &#125; 最后上边 bb 这么多，我们可以看出产品一句话，我们程序员可能就需要工作一天了，所以我们需要将这个常见的功能记录下，下个公司产品再说实现一个闪屏功能，然后我们就可以说 这功能可能需要 1天时间，然后等他答应了，copy 一下，其他的时间你就可以学习下 Rxjava2 ，kotlin， js 之类的了。哈哈哈哈 我真tm机智。","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"Splash","slug":"Splash","permalink":"http://dinson.win/tags/Splash/"}]},{"title":"Android中高德地图与百度地图坐标转换","date":"2017-06-14T06:36:03.000Z","path":"2017/06/14/17-06-14/","text":"概述 项目中实验数据点取自高德地图，它是火星坐标系统（下面会有解释），而现在希望用百度地图的SDK进行开发，两套不同的规范自然需要进行转换。如何解决这个问题呢？参考了网上很多人的博客和资料。最终解决此问题用到的仍然是百度的官方文档有关于坐标转换的部分： 坐标转换 百度地图SDK采用的是百度自有的地理坐标系（bdll09），因此开发者在做位置标注的时候，需要将其他类型的坐标转换为百度坐标。相应的接口和转换方式如下： 12345678910111213// 将google地图、soso地图、aliyun地图、mapabc地图和amap地图// 所用坐标转换成百度坐标 CoordinateConverter converter = new CoordinateConverter(); converter.from(CoordType.COMMON); // sourceLatLng待转换坐标 converter.coord(sourceLatLng); LatLng desLatLng = converter.convert(); // 将GPS设备采集的原始GPS坐标转换成百度坐标 CoordinateConverter converter = new CoordinateConverter(); converter.from(CoordType.GPS); // sourceLatLng待转换坐标 converter.coord(sourceLatLng); LatLng desLatLng = converter.convert(); 使用上面的代码就能很好地进行坐标的转化。 下面列举其他牛人的一些内容： 大家都知道，美国GPS使用的是WGS84的坐标系统，以经纬度的形式来表示地球平面上的某一个位置，这应该是国际共识。但在我国，出于国家安全考虑，国内所有导航电子地图必须使用国家测绘局制定的加密坐标系统，即将一个真实的经纬度坐标加密成一个不正确的经纬度坐标，我们在业内将前者称之为地球坐标，后者称之为火星坐标，具体的说明可以参看百度百科中关于火星坐标系统的解释。 国内各地图API坐标系统比较 API 坐标系 百度地图API 百度坐标 腾讯搜搜地图API 火星坐标 搜狐搜狗地图API 搜狗坐标 阿里云地图API 火星坐标 图吧MapBar地图API 图吧坐标 高德MapABC地图API 火星坐标 灵图51ditu地图API 火星坐标 下面是百度官方对百度坐标为何有偏移的解释 国际经纬度坐标标准为WGS-84,国内必须至少使用国测局制定的GCJ-02,对地理位置进行首次加密。百度坐标在此基础上，进行了BD-09二次加密措施,更加保护了个人隐私。百度对外接口的坐标系并不是GPS采集的真实经纬度，需要通过坐标转换接口进行转换。 火星坐标系 (GCJ-02) 与百度坐标系 (BD-09) 的转换算法GCJ-02(火星坐标)和BD-09（百度坐标）算法代码如下，其中bd_encrypt将 GCJ-02坐标转换成 BD-09坐标， bd_decrypt反之。123456789101112131415void bd_encrypt(double gg_lat, double gg_lon, double &amp;bd_lat, double &amp;bd_lon) &#123; double x = gg_lon, y = gg_lat; double z = sqrt(x * x + y * y) + 0.00002 * sin(y * x_pi); double theta = atan2(y, x) + 0.000003 * cos(x * x_pi); bd_lon = z * cos(theta) + 0.0065; bd_lat = z * sin(theta) + 0.006; &#125; void bd_decrypt(double bd_lat, double bd_lon, double &amp;gg_lat, double &amp;gg_lon) &#123; double x = bd_lon - 0.0065, y = bd_lat - 0.006; double z = sqrt(x * x + y * y) - 0.00002 * sin(y * x_pi); double theta = atan2(y, x) - 0.000003 * cos(x * x_pi); gg_lon = z * cos(theta); gg_lat = z * sin(theta); &#125; 地球坐标系 (WGS-84) 到火星坐标系 (GCJ-02) 的转换算法 WGS-84到GCJ-02的转换（即GPS加偏算法是一个普通青年轻易无法接触到的“公开”的秘密。这个算法的代码在互联网上是公开的，详情请使用Google搜索”wgtochina_lb“ 。 整理后的算法代码请参考 https://on4wp7.codeplex.com/SourceControl/changeset/view/21483#353936 。知道了这个算法之后，就可以离线进行Google地图偏移校正，不必像之前那么麻烦。至于GCJ-02到WGS-84的转换（即GPS纠偏），可以使用二分法。","categories":[],"tags":[]},{"title":"FontMetrics以及自定义ImageSpan实现TextView图文混排时文图的居中对齐","date":"2017-06-10T01:52:56.000Z","path":"2017/06/10/17-06-10/","text":"概述 在上图中整体实现的时候使用的是popUpWindow。该popupWindow整体使用相对布局，里面再用一个相对布局布局嵌套了三个TextView：”啊哦。。。。pass” 用一个TextView，中间灰色的上传头像的提示用了一个TextView，底部“我知道了” 也是一个TextView。上面的左划示意图使用above 放在 包含TextView的相对布局上方，并通过负的margin值将它下移并覆盖在包含TextView相对布局上。 这个界面并没有什么难度，这里重点说的是第一个TextView中的图文混排，并让图片的横向中间线与该行文字的横向中间线对齐，也就是说，让文字与那个💔 图片的中间在水平方向对齐。 图文混排的方式有哪些？通常我们向TextView中插入图片实现图文混排有如下方式： 使用drawableLeft等属性设置，这种方式对应的java方法是 setCompoundDrawablesWithIntrinsicBounds(leftDrawble,topDrawable,rightDrawable,bottomDrawable); 使用 SpannableString ,先将图片转成ImageSpan对象，然后通过setSpan插入到SpannableString 中，最后再将SpannableString通过setText设置给TextView。（SpannableString 继承自CharSquence） 此外，还有一种利用Html.ImageGetter格式化图片的方式。（截止目前为止，我没用过这种方式，如果想了解的话，可以参考http://wangleyiang.iteye.com/blog/1771439中的第二点） 使用SpannableString+ImageSpan怎么实现图文混排？(1). 基本实现方式效果图如下：实现方式很简单，我们只需要在xml布局文件中定义一个TextView，然后在代码中获取该TextView并创建一个含有图片的SpannableString,并将该SpannableString通过setText( )设置给TextView即可。代码如下：123456789101112131415161718192021public class SpannableStringAndImageSpanActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_spannbalestring_imagespan); init(); &#125; private void init() &#123; TextView tv_test = (TextView) findViewById(R.id.tv_test); SpannableString spannableString = new SpannableString(\"点击 按钮有惊喜\"); ImageSpan imageSpan = new ImageSpan(this, R.mipmap.ic_launcher); //setSpan插入内容的时候，起始位置不替换，会替换起始位置到终止位置间的内容，含终止位置。 //Spanned.SPAN_EXCLUSIVE_EXCLUSIVE模式用来控制是否同步设置新插入的内容与start/end 位置的字体样式，此处没设置具体字体，所以可以随意设置 spannableString.setSpan(imageSpan, 2, 3, Spanned.SPAN_INCLUSIVE_EXCLUSIVE); tv_test.setText(spannableString); &#125;&#125; xml布局文件中只给了一个普通的TextView，代码省略。 在上面的代码中，我们通过ImageSpan的构造方法得到了一个ImageSpan对象。该构造方法中传入的两个参数分别是上下文和图片的id。（imageSpan的构造方法还有很多） SpannbaleString的setSpan方法中，传入的四个参数分别是 ImageSpan对象、将ImageSpan插入到的起始位置(start)、将ImageSpan插入到的终点位置(end)、是否应用字体样式。具体将ImageSpan对象插入到哪个位置，由第二个和第三个参数确定，插入的时候会覆盖从 start 位置开始（不包含该位置）到终止位置间的内容（包含该位置）。第四个参数是在你插入文本的时候使用的，用来控制新插入的文本与已有文本内容的字体样式是否一致的如果你插入的是图片，这里就可以随便选择一种模式。 经过上面虽然实现了图文混排，但是，细心的你可能发现了，这时候的文字和图片是基于底部对齐的（由于图片的原因，图片底部与边框有一点点的间距）。那么如果我想更改对齐方式怎么办呢？ (2). 更改图片与文本的对齐方式–ALIGN_BASELINE对齐 设置对齐方式的方法很简单，在构造ImageSpan对象的时候，传入第三个参数ALIGN_BASELINE 即可，代码如下：1ImageSpan imageSpan = new ImageSpan(this, R.mipmap.ic_launcher, DynamicDrawableSpan.ALIGN_BASELINE); 设置对齐方式为ALIGN_BASELINE后的效果图：咦，看着跟上面的图没啥区别啊？那么我再把上面没设置对齐方式的图拉下来看下：仔细对比下，我们发现，设置对齐方式之后，图往上跑了一点点。 其实，在ImageSpan 中，官方只给出了两中对齐方式： 一种是 ALIGN_BOTTOM , 表示与文字内容的底部对齐，如果在构造ImageSpan时没有传入对齐方式，那么默认就是这种底部对齐。 另一中就是 ALIGN_BASELINE, 表示与文字内容的基线对齐。那么，你可能会问我基线是啥？请继续往下看： Paint.FontMetrics 是啥？(1). Paint.FontMetrics基本介绍要说基线呢，我们先了解这个Paint.FontMetircs, 官方对该类的解释是：Class that describes the various metrics for a font at a given text size., 意思是说，这玩意儿是绘制文本内容时存储该文本内容位置信息的一个类。这个类中有如下五个字段： (2). BaseLine 基线到底是啥？上图中这5个字段除了leading 外，其他四个都是相对于 基线BaseLine来确定的，那么，到底啥是基线？？先来看一张图：如上图，标准的英文书写是基于四线三格，其中，我们书写英文的时候，都是以第三条线为基准，也就是说，基线就是这个四线三格中的第三条线！！ (3). Paint.FontMetrics中字段的含义及示意图官方文档中对这几个字段的解释很简单，但理解起来挺费劲，直接上图，图中的标注都是跑代码之后确定的，如果有不准确的地方，欢迎指正：根据上图可知： ascent文字内容的顶部到基线的距离。即 ascent=文字内容顶部Y坐标 - 基线Y坐标。由于android中坐标系是 右下为正，所以得到的ascent实际是一个负数。 descent文字内容的底部到基线的距离。即 descent=文字内容底部Y坐标 - 基线Y坐标。 基线在图中，基线的坐标用Y表示，在ImageSpan父类的 draw( ) 中，会传入一个 float Y ,就是这个基线的坐标。实际上，基线的Y坐标=文字内容中间线Y坐标+1/2 （文字内容高度） top对应图中 文字所在行的top 坐标 bottom对应图中 文字所在行的bottom 坐标需要注意：如果设置了行间距，且文本内容产生了换行，那么这个bottom 也会将行间距包裹。所以， 图中蓝色的文字内容中间线的Y轴坐标并不一定等于 (bottom+top)/2 自定义ImageSpan实现文字与图片居中对齐好了，前面说了那么多，终于进入正题了。。。在上面的2 SpannableString+ImageSpan实现图文混排中，我们已经知道官方并没有给出文字与图片居中对齐的模式,所以需要我们自定义。 关于自定义ImageSpan的分析，此处不再赘述，请参考http://dinson.win/2017/06/08/17-06-08/。但是，按照该文章中的代码实现的时候，有个问题就是：如果给TextView设置了行间距，且文本产生了换行，那么就无法对齐了！！ 那么，设置了行间距之后，该如何实现文本和图片的居中对齐呢？请看：http://dinson.win/2017/06/09/17-06-09/, 但是，这篇文章中的实现方式没有重写 getSize( ) 方法，所以也有一个问题：文本和图片并不是在TextView的居中位置，而且如果图片高于文本的话，图片会显示不全！！如下图： 终极方案其实我们自定义的时候，需要做的事情是 获取文本内容的中间线以及图片的中间线，然后获取两者差值，然后在draw方法中绘制图片时将差值作为canvas.translate(x, transY) 中的transY；同时要重写 getSize( )。这样最终实现的效果是，不论是否设置行间距，不论图片大于文本还是文本大于图片，都能实现文本和图片的居中对齐！ 看最终效果图：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889public class SpannableStringAndImageSpanActivity extends AppCompatActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_spannbalestring_imagespan); init(); &#125; private void init() &#123; TextView tv_test = (TextView) findViewById(R.id.tv_test); SpannableString spannableString = new SpannableString(\"点击 按钮有惊喜\"); //调用自定义的imageSpan,实现文字与图片的横向居中对齐 CustomImageSpan imageSpan = new CustomImageSpan(this, R.mipmap.ic_launcher, 2); //setSpan插入内容的时候，起始位置不替换，会替换起始位置到终止位置间的内容，含终止位置。 //Spanned.SPAN_EXCLUSIVE_EXCLUSIVE模式用来控制是否同步设置新插入的内容与start/end 位置的字体样式，此处没设置具体字体，所以可以随意设置 spannableString.setSpan(imageSpan, 2, 3, Spanned.SPAN_INCLUSIVE_EXCLUSIVE); tv_test.setText(spannableString); &#125; /** * 自定义imageSpan实现图片与文字的居中对齐 */ class CustomImageSpan extends ImageSpan &#123; //自定义对齐方式--与文字中间线对齐 private int ALIGN_FONTCENTER = 2; public CustomImageSpan(Context context, int resourceId) &#123; super(context, resourceId); &#125; public CustomImageSpan(Context context, int resourceId, int verticalAlignment) &#123; super(context, resourceId, verticalAlignment); &#125; @Override public void draw(Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, Paint paint) &#123; //draw 方法是重写的ImageSpan父类 DynamicDrawableSpan中的方法，在DynamicDrawableSpan类中，虽有getCachedDrawable()， // 但是私有的，不能被调用，所以调用ImageSpan中的getrawable()方法，该方法中 会根据传入的drawable ID ，获取该id对应的 // drawable的流对象，并最终获取drawable对象 Drawable drawable = getDrawable(); //调用imageSpan中的方法获取drawable对象 canvas.save(); //获取画笔的文字绘制时的具体测量数据 Paint.FontMetricsInt fm = paint.getFontMetricsInt(); //系统原有方法，默认是Bottom模式) int transY = bottom - drawable.getBounds().bottom; if (mVerticalAlignment == ALIGN_BASELINE) &#123; transY -= fm.descent; &#125; else if (mVerticalAlignment == ALIGN_FONTCENTER) &#123; //此处加入判断， 如果是自定义的居中对齐 //与文字的中间线对齐（这种方式不论是否设置行间距都能保障文字的中间线和图片的中间线是对齐的） // y+ascent得到文字内容的顶部坐标，y+descent得到文字的底部坐标，（顶部坐标+底部坐标）/2=文字内容中间线坐标 transY = ((y + fm.descent) + (y + fm.ascent)) / 2 - drawable.getBounds().bottom / 2; &#125; canvas.translate(x, transY); drawable.draw(canvas); canvas.restore(); &#125; /** * 重写getSize方法，只有重写该方法后，才能保证不论是图片大于文字还是文字大于图片，都能实现中间对齐 */ public int getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) &#123; Drawable d = getDrawable(); Rect rect = d.getBounds(); if (fm != null) &#123; Paint.FontMetricsInt fmPaint = paint.getFontMetricsInt(); int fontHeight = fmPaint.bottom - fmPaint.top; int drHeight = rect.bottom - rect.top; int top = drHeight / 2 - fontHeight / 4; int bottom = drHeight / 2 + fontHeight / 4; fm.ascent = -bottom; fm.top = -bottom; fm.bottom = top; fm.descent = top; &#125; return rect.right; &#125; &#125;&#125; xml布局文件：123456789101112131415&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\"&gt; &lt;TextView android:id=\"@+id/tv_test\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:background=\"#fffaa3\" android:lineSpacingExtra=\"@dimen/dp100\" android:textSize=\"16sp\"/&gt;&lt;/LinearLayout&gt;","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"ImageSpan","slug":"ImageSpan","permalink":"http://dinson.win/tags/ImageSpan/"}]},{"title":"Android ImageSpan与TextView中的text居中对齐问题解决","date":"2017-06-09T06:23:22.000Z","path":"2017/06/09/17-06-09/","text":"概述 先解释一个类：Paint.FontMetrics，它表示绘制字体时的度量标准。google的官方api文档对它的字段说明如下： ascent: 字体最上端到基线的距离，为负值。descent：字体最下端到基线的距离，为正值。中间那条线就是基线，基线到上面那条线的距离就是ascent，基线到下面那条线的距离就是descent。 回到主题，我们要让imagespan与text对齐，只需把imagespan放到descent线和ascent线之间的中间位置就可以了。实现方式为重写ImageSpan类的draw方法。最终实现方法如下：12345678910111213141516@Overridepublic void draw(@NonNull Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, @NonNull Paint paint) &#123; // image to draw Drawable b = getDrawable(); // font metrics of text to be replaced Paint.FontMetricsInt fm = paint.getFontMetricsInt(); int transY = (y + fm.descent + y + fm.ascent) / 2 - b.getBounds().bottom / 2; canvas.save(); canvas.translate(x, transY); b.draw(canvas); canvas.restore();&#125; 解释下形参： x，要绘制的image的左边框到textview左边框的距离。 y，要替换的文字的基线坐标，即基线到textview上边框的距离。 top，替换行的最顶部位置。 bottom，替换行的最底部位置。注意，textview中两行之间的行间距是属于上一行的，所以这里bottom是指行间隔的底部位置。 paint，画笔，包含了要绘制字体的度量信息。 这几个参数含义在代码中找不到说明，写了个demo测出来的。top和bottom参数只是解释下，函数里面用不上。然后解释下代码逻辑： getDrawable获取要绘制的image，getBounds是获取包裹image的矩形框尺寸； y + fm.descent得到字体的descent线坐标； y + fm.ascent得到字体的ascent线坐标； 两者相加除以2就是两条线中线的坐标； b.getBounds().bottom是image的高度（试想把image放到原点），除以2即高度一半； 前面得到的中线坐标减image高度的一半就是image顶部要绘制的目标位置； 最后把目标坐标传递给canvas.translate函数就可以了，至于这个函数的理解先不管了。 原理上大致就这样了，最后提供本文提出问题的最终解决方案，使用自定义的ImageSpan类，只需重写它的draw函数，代码如下：1234567891011121314151617181920212223public class CenteredImageSpan extends ImageSpan &#123; public CenteredImageSpan(Context context, final int drawableRes) &#123; super(context, drawableRes); &#125; @Override public void draw(@NonNull Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, @NonNull Paint paint) &#123; // image to draw Drawable b = getDrawable(); // font metrics of text to be replaced Paint.FontMetricsInt fm = paint.getFontMetricsInt(); int transY = (y + fm.descent + y + fm.ascent) / 2 - b.getBounds().bottom / 2; canvas.save(); canvas.translate(x, transY); b.draw(canvas); canvas.restore(); &#125;&#125; 最后看一下效果图：","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"ImageSpan","slug":"ImageSpan","permalink":"http://dinson.win/tags/ImageSpan/"}]},{"title":"Android ImageSpan的图文居中对齐","date":"2017-06-08T04:52:56.000Z","path":"2017/06/08/17-06-08/","text":"概述 ImageSpan类为TextView提供了图文混排的形式，在ImageSpan的构造函数中提供了一个参数 int verticalAlignment，表示垂直对齐方式，有两个参数 ALIGN_BASELINE、ALIGN_BOTTOM 分别为顶部、底部对齐，但是没有居中对齐的参数（其实会找到这篇文章的人应该知道这点了。。）下面说说我的实现思路及方法 根据构造函数verticalAlignment参数找到影响对齐方式的代码12345public ImageSpan(Context context, int resourceId, int verticalAlignment) &#123; super(verticalAlignment); mContext = context; mResourceId = resourceId; &#125; 查看源码可知对齐参数是在ImageSpan的父类DynamicDrawableSpan中设置的 查看DynamicDrawableSpan类源码找出对齐方式的代码，在源码中能看到两个方法getSize与draw getSize方法，返回一个Int含义为图片的宽度，但是我们看源码发现里面干的事情不仅是返回宽度还设置了文字的ascent、descent的位置 1234567891011121314public int getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) &#123; Drawable d = getCachedDrawable(); Rect rect = d.getBounds(); if (fm != null) &#123; fm.ascent = -rect.bottom; fm.descent = 0; fm.top = fm.ascent; fm.bottom = 0; &#125; return rect.right; &#125; draw方法，根据对齐参数绘制图片。所以第一步就是修改draw方法来实现居中 12345678910111213public void draw(Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, Paint paint) &#123; Drawable b = getCachedDrawable(); canvas.save(); int transY = bottom - b.getBounds().bottom; if (mVerticalAlignment == ALIGN_BASELINE) &#123; transY -= paint.getFontMetricsInt().descent; &#125; canvas.translate(x, transY); b.draw(canvas); canvas.restore(); &#125; 修改draw方法 123456789101112public void draw(Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, Paint paint) &#123; Drawable b = getDrawable(); canvas.save(); int transY = 0; //获得将要显示的文本高度-图片高度除2等居中位置+top(换行情况) transY = ((bottom-top) - b.getBounds().bottom)/2+top; //偏移画布后开始绘制 canvas.translate(x, transY); b.draw(canvas); canvas.restore(); &#125; 这时候如果运行调试的话会发现完全没效果。。为啥呢，别急还有一个重要方法没修改，那就是getSize方法，我们还需要修过getSize方法中对文字ascent、descent等参数的设置才行 1234567891011121314151617181920public int getSize(Paint paint, CharSequence text, int start, int end, FontMetricsInt fm) &#123; Drawable d = getDrawable(); Rect rect = d.getBounds(); if (fm != null) &#123; FontMetricsInt fmPaint=paint.getFontMetricsInt(); //获得文字、图片高度 int fontHeight = fmPaint.bottom - fmPaint.top; int drHeight=rect.bottom-rect.top; //对于这段算法LZ表示也不解，正常逻辑应该同draw中的计算一样但是显示的结果不居中，经过几次调试之后才发现这么算才会居中 int top= drHeight/2 - fontHeight/4; int bottom=drHeight/2 + fontHeight/4; fm.ascent=-bottom; fm.top=-bottom; fm.bottom=top; fm.descent=top; &#125; return rect.right; &#125; 到这就完成了图文居中的功能，效果图 完整源码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import android.content.Context; import android.graphics.Canvas; import android.graphics.Paint; import android.graphics.Paint.FontMetricsInt; import android.graphics.Rect; import android.graphics.drawable.Drawable; import android.os.Bundle; import android.support.v7.app.ActionBarActivity; import android.text.SpannableString; import android.text.Spanned; import android.text.style.ImageSpan; import android.widget.TextView; public class MainActivity extends ActionBarActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); TextView textView=new TextView(this); setContentView(textView); SpannableString showString = new SpannableString(\"1234533333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333336\"); MyIm imageSpan=new MyIm(this, R.drawable.ic_launcher); MyIm imageSpan2=new MyIm(this, R.drawable.ic_launcher); MyIm imageSpan21=new MyIm(this, R.drawable.ic_launcher); showString.setSpan(imageSpan, 2, 3, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); showString.setSpan(imageSpan2, 27, 30, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); showString.setSpan(imageSpan21, 77, 78, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); textView.setText(showString); &#125; public class MyIm extends ImageSpan &#123; public MyIm(Context arg0,int arg1) &#123; super(arg0, arg1); &#125; public int getSize(Paint paint, CharSequence text, int start, int end, FontMetricsInt fm) &#123; Drawable d = getDrawable(); Rect rect = d.getBounds(); if (fm != null) &#123; FontMetricsInt fmPaint=paint.getFontMetricsInt(); int fontHeight = fmPaint.bottom - fmPaint.top; int drHeight=rect.bottom-rect.top; int top= drHeight/2 - fontHeight/4; int bottom=drHeight/2 + fontHeight/4; fm.ascent=-bottom; fm.top=-bottom; fm.bottom=top; fm.descent=top; &#125; return rect.right; &#125; @Override public void draw(Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, Paint paint) &#123; Drawable b = getDrawable(); canvas.save(); int transY = 0; transY = ((bottom-top) - b.getBounds().bottom)/2+top; canvas.translate(x, transY); b.draw(canvas); canvas.restore(); &#125; &#125; &#125;","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"ImageSpan","slug":"ImageSpan","permalink":"http://dinson.win/tags/ImageSpan/"}]},{"title":"ViewPager系列--仿掌上英雄联盟皮肤浏览效果","date":"2017-06-05T02:52:22.000Z","path":"2017/06/05/17-06-05/","text":"概述 这几天英雄联盟搞活动，抽到一个安妮限定皮肤，可把我乐坏了，于是马上就登陆掌盟客户端查看皮肤。进入皮肤浏览界面之后，觉得这个皮肤浏览的效果还真不错，如下图： 思路与分析在开始写代码之前，我们还是来分析一下界面元素，和该用什么技术来实现各个部分。 首先是整个界面的滑动，我们肯定一眼就能看出来，用ViewPager 实现。 ViewPager 滑动时有放大缩小的动画，用ViewPager.Transfoemer 轻松搞定。 ViewPager 显示多页（展示前后页面的部分）。 界面图片的形状，旋转90度的等腰梯形。这个只能用自定义View来实现了。 整个界面的背景为当前显示图片的高斯模糊图。 代码实现上面分析了界面的构成元素，那么现在我们就来看一下具体的实现。 1. ViewPager 展示多页这个问题在我们前一篇文章已经讲过，这里不再重复，就是用ViewGroup 的 clipChildren 属性，值为false。也就是在整个布局的跟节点添加下面一行代码：1android:clipChildren=\"false\" 然后，ViewPager需要设置左右Margin,也就是前后页显示的位置12345678&lt;android.support.v4.view.ViewPager android:id=\"@+id/my_viewpager\" android:layout_width=\"wrap_content\" android:layout_height=\"300dp\" android:clipChildren=\"false\" android:layout_marginLeft=\"50dp\" android:layout_marginRight=\"50dp\" android:layout_centerInParent=\"true\"/&gt; 从上面的效果图可以看到，当前页和前后页的部分是有间距的，我们只需要在Item布局中左右添加margin属性：12android:layout_marginLeft=\"30dp\"android:layout_marginRight=\"30dp\" 好了，这样ViewPager就能显示多页，并且当前页和前后页之间还有一定的间距。 2. ViewPager 切换时的动画ViewPager 切换时的自定义动画用ViewPager.PageTransformer, 这个在上一篇文章也讲过，没看过的倒回去看一下。这里不细讲了，直接上代码：123456789101112131415161718192021222324252627282930313233343536373839public class CustomViewPagerTransformer implements ViewPager.PageTransformer &#123; private int maxTranslateOffsetX; private ViewPager viewPager; private static final float MIN_SCALE = 0.75f; public CustomViewPagerTransformer(Context context) &#123; this.maxTranslateOffsetX = dp2px(context, 160); &#125; public void transformPage(View view, float position) &#123; // position的可能性的值有，其实从官方示例的注释就能看出： //[-Infinity,-1) 已经看不到了 // (1,+Infinity] 已经看不到了 // [-1,1] // 而我们从写PageTransformer，操作View动画的重点区间就在[-1,1] if (viewPager == null) &#123; viewPager = (ViewPager) view.getParent(); &#125; int leftInScreen = view.getLeft() - viewPager.getScrollX(); int centerXInViewPager = leftInScreen + view.getMeasuredWidth() / 2; int offsetX = centerXInViewPager - viewPager.getMeasuredWidth() / 2; float offsetRate = (float) offsetX * 0.38f / viewPager.getMeasuredWidth(); float scaleFactor = 1 - Math.abs(offsetRate); if (scaleFactor &gt; 0) &#123; view.setScaleX(scaleFactor); view.setScaleY(scaleFactor); view.setTranslationX(-maxTranslateOffsetX * offsetRate); &#125; &#125; /** * dp和像素转换 */ private int dp2px(Context context, float dipValue) &#123; float m = context.getResources().getDisplayMetrics().density; return (int) (dipValue * m + 0.5f); &#125;&#125; 3. 自定义多边形ImageView多边形ImageView，我们通过自定义的方式实现，继承ImageView, 然后重写onDraw()方法。这里实现这种不规则的多边形View有两种方法。 使用PorterDuffXfermode，这种方法需要你给一个蒙板图片，在onDraw 方法中，先绘制蒙板图片，然后设置Paint的setXfermode 为PorterDuff.Mode.SRC_IN,再绘制要显示的图片，这样就能把显示的图片裁剪成蒙板的形状。 使用canvas的clipPath() 方法，我们用Path 来绘制多边形，然后clipPath() 将画布裁剪成绘制的形状，然后在绘制要显示的图片。 关于PorterDuffXfermode 的更多用法，有兴趣的可以去google 一下，网上有很多相关的文章。这里我用的是两种方法的结合，先用clipPath得到一个需要形状的bitmap，然后使用PorterDuffXfermode。自定义View代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141public class PolygonView extends AppCompatImageView &#123; private int mWidth = 0; private int mHeight = 0; private Paint mPaint; private Paint mBorderPaint; private PorterDuffXfermode mXfermode; private Bitmap mBitmap; private int mBorderWidth; private Bitmap mMaskBitmap; public PolygonView(Context context) &#123; super(context); init(); &#125; public PolygonView(Context context, @Nullable AttributeSet attrs) &#123; super(context, attrs); init(); &#125; public PolygonView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); init(); &#125; private void init()&#123; mBorderWidth = DisplayUtils.dpToPx(4); setLayerType(View.LAYER_TYPE_SOFTWARE, null);// 关闭硬件加速加速 mPaint = new Paint(); mPaint.setAntiAlias(true); mPaint.setColor(Color.RED); mPaint.setDither(true); mBorderPaint = new Paint(); mBorderPaint.setColor(Color.WHITE); mBorderPaint.setStyle(Paint.Style.FILL_AND_STROKE); mBorderPaint.setAntiAlias(true);//抗锯齿 mBorderPaint.setDither(true);//防抖动 mXfermode = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN); &#125; @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; super.onMeasure(widthMeasureSpec, heightMeasureSpec); mWidth = getMeasuredWidth(); mHeight = getMeasuredHeight(); mMaskBitmap = getMaskBitmap(); &#125; @Override public void setImageResource(@DrawableRes int resId) &#123; super.setImageResource(resId); mBitmap = BitmapFactory.decodeResource(getResources(),resId); invalidate(); &#125; @Override protected void onDraw(Canvas canvas) &#123; canvas.save(); canvas.drawBitmap(mMaskBitmap,0,0,mBorderPaint); mPaint.setXfermode(mXfermode); Bitmap bitmap = getCenterCropBitmap(mBitmap,mWidth,mHeight); canvas.drawBitmap(bitmap,0,0,mPaint); mPaint.setXfermode(null); canvas.restore(); &#125; private Bitmap getMaskBitmap()&#123; Bitmap bm = Bitmap.createBitmap(mWidth, mHeight, Bitmap.Config.ARGB_8888); Canvas c = new Canvas(bm); Point point1 = new Point(0,30); Point point2 = new Point(mWidth,0); Point point3 = new Point(mWidth,mHeight); Point point4 = new Point(0,mHeight - 30); Path path = new Path(); path.moveTo(point1.x,point1.y); path.lineTo(point2.x,point2.y); path.lineTo(point3.x,point3.y); path.lineTo(point4.x,point4.y); path.close(); c.drawPath(path,mBorderPaint); return bm; &#125; /** * 对原图进行等比裁剪 */ private Bitmap scaleImage(Bitmap bitmap)&#123; if(bitmap!=null)&#123; int widht=bitmap.getWidth(); int height=bitmap.getHeight(); int new_width=0; int new_height=0; if(widht!=height)&#123; if(widht&gt;height)&#123; new_height=mHeight; new_width=widht*new_height/height; &#125;else&#123; new_width=mWidth; new_height=height*new_width/widht; &#125; &#125;else&#123; new_width=mWidth; new_height=mHeight; &#125; return Bitmap.createScaledBitmap(bitmap, new_width, new_height, true); &#125; return null; &#125; private Bitmap getCenterCropBitmap(Bitmap src, float rectWidth, float rectHeight) &#123; float srcRatio = ((float) src.getWidth()) / src.getHeight(); float rectRadio = rectWidth / rectHeight; if (srcRatio &lt; rectRadio) &#123; return Bitmap.createScaledBitmap(src, (int)rectWidth, (int)((rectWidth / src.getWidth()) * src.getHeight()), false); &#125; else &#123; return Bitmap.createScaledBitmap(src, (int)((rectHeight / src.getHeight()) * src.getWidth()), (int)rectHeight, false); &#125; &#125;&#125; 建议：这里使用clipPath方法的时候，会出现很多锯齿，即使Paint 设置了抗锯齿也没啥用，所以建议使用PorterDuffXfermode 方法。要实现类似的效果，最好是找设计师要一张蒙板形状图。在用PorterDuffXfermode实现，简单效果好。 通过上面的3步，其实整个 界面的效果差不多已经出来了，最后我们需要做的就是高斯模糊背景图。 4. 背景图高斯模背景的高斯模糊就很简单了，前面我也有写过关于几种高斯模糊方法的对比（Android 图片高斯模糊解决方案），最后封装了一个方便的库(https://github.com/pinguo-zhouwei/EasyBlur)，只需要简单几行代码就行。我们在ViewPager的onPageSelect方法中，获取显示的图片，进行高斯模糊处理。1234567891011@Overridepublic void onPageSelected(int position) &#123; Bitmap source = BitmapFactory.decodeResource(getResources(),VPAdapter.RES[position]); Bitmap bitmap = EasyBlur.with(getApplicationContext()) .bitmap(source) .radius(20) .blur(); mImageBg.setImageBitmap(bitmap); mDesc.setText(mVPAdapter.getPageTitle(position));&#125; 完整的布局文件和Activity代码activity布局文件：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:orientation=\"vertical\" android:clipChildren=\"false\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;!-- 高斯模糊背景--&gt; &lt;ImageView android:id=\"@+id/activity_bg\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:scaleType=\"centerCrop\"/&gt; &lt;!-- Toolbar--&gt; &lt;RelativeLayout android:id=\"@+id/toolbar\" android:layout_width=\"match_parent\" android:layout_height=\"50dp\"&gt; &lt;ImageView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:src=\"@drawable/navigation_back_white\" android:layout_centerVertical=\"true\" android:layout_marginLeft=\"15dp\"/&gt; &lt;TextView android:id=\"@+id/title_name\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_centerInParent=\"true\" android:textSize=\"18sp\" android:textColor=\"@android:color/white\"/&gt; &lt;/RelativeLayout&gt; &lt;android.support.v4.view.ViewPager android:id=\"@+id/my_viewpager\" android:layout_width=\"wrap_content\" android:layout_height=\"300dp\" android:clipChildren=\"false\" android:layout_marginLeft=\"50dp\" android:layout_marginRight=\"50dp\" android:layout_centerInParent=\"true\"/&gt; &lt;com.zhouwei.indicatorview.CircleIndicatorView android:id=\"@+id/indicatorView\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_alignParentBottom=\"true\" android:layout_marginBottom=\"60dp\" android:layout_centerHorizontal=\"true\" app:indicatorSelectColor=\"#C79EFE\" app:indicatorSpace=\"5dp\" app:indicatorRadius=\"8dp\" app:enableIndicatorSwitch=\"false\" app:indicatorTextColor=\"@android:color/white\" app:fill_mode=\"number\" app:indicatorColor=\"#C79EFE\"/&gt; &lt;TextView android:id=\"@+id/skin_desc\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_centerHorizontal=\"true\" android:layout_below=\"@+id/my_viewpager\" android:layout_marginTop=\"20dp\" android:textColor=\"@android:color/white\" android:textSize=\"18sp\"/&gt;&lt;/RelativeLayout&gt; Activity代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566public class ViewPagerActivity extends AppCompatActivity &#123; private ViewPager mViewPager; private VPAdapter mVPAdapter; private ImageView mImageBg; private CircleIndicatorView mCircleIndicatorView; private TextView mTitle,mDesc; @Override protected void onCreate(@Nullable Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.viewpager_transform_layout); View view = findViewById(R.id.toolbar); StatusBarUtils.setTranslucentImageHeader(this, 0,view); initView(); &#125; private void initView() &#123; mViewPager = (ViewPager) findViewById(R.id.my_viewpager); mImageBg = (ImageView) findViewById(R.id.activity_bg); mCircleIndicatorView = (CircleIndicatorView) findViewById(R.id.indicatorView); mTitle = (TextView) findViewById(R.id.title_name); mDesc = (TextView) findViewById(R.id.skin_desc); mTitle.setText(\"黑暗之女\"); mViewPager.setPageTransformer(false,new CustomViewPagerTransformer(this)); // 添加监听器 mViewPager.addOnPageChangeListener(onPageChangeListener); mVPAdapter = new VPAdapter(getSupportFragmentManager()); mViewPager.setAdapter(mVPAdapter); mViewPager.setOffscreenPageLimit(3); // Indicator 和ViewPager 建立关联 mCircleIndicatorView.setUpWithViewPager(mViewPager); // 首次进入展示第二页 mViewPager.setCurrentItem(1); &#125; @Override public boolean onTouchEvent(MotionEvent event) &#123; return mViewPager.onTouchEvent(event); &#125; private ViewPager.OnPageChangeListener onPageChangeListener = new ViewPager.OnPageChangeListener() &#123; @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123; &#125; @Override public void onPageSelected(int position) &#123; Bitmap source = BitmapFactory.decodeResource(getResources(),VPAdapter.RES[position]); Bitmap bitmap = EasyBlur.with(getApplicationContext()) .bitmap(source) .radius(20) .blur(); mImageBg.setImageBitmap(bitmap); mDesc.setText(mVPAdapter.getPageTitle(position)); &#125; @Override public void onPageScrollStateChanged(int state) &#123; &#125; &#125;;&#125; ViewPager的每一个页面用Fragment 来展示的，Fragment代码如下：12345678910111213141516171819202122232425262728public class ItemFragment extends Fragment &#123; private PolygonView mPolygonView; public static ItemFragment newInstance(int resId)&#123; ItemFragment itemFragment = new ItemFragment(); Bundle bundle = new Bundle(); bundle.putInt(\"resId\",resId); itemFragment.setArguments(bundle); return itemFragment; &#125; @Nullable @Override public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123; View view = inflater.inflate(R.layout.view_pager_muti_layout,null); mPolygonView = (PolygonView) view.findViewById(R.id.item_image); // 做一个属性动画 ObjectAnimator animator = ObjectAnimator.ofFloat(mPolygonView,\"rotation\",0f,10f); animator.setDuration(10); animator.start(); return view; &#125; @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) &#123; super.onViewCreated(view, savedInstanceState); int resId = getArguments().getInt(\"resId\"); mPolygonView.setImageResource(resId);// 设置图片 &#125;&#125; 说明：在Fragment中对PolygonView做了一个旋转的动画，是因为PolygonView 是一个竖着的等腰梯形，但是看效果图，其实不是，还有一个小幅度的旋转，如果将这个旋转放在PolygonView 里面做的话，发现每次ViewPager 切换的时候，都有一个旋转动画，效果不好，因此将动画放在这里。应该还有其他更优雅一点的方法，有兴趣的可以去试一下。 最后 本篇文章是ViewPager 系列的第三篇文章，也是这个系列的最后一些文章，这三篇文章总结了ViewPager 的一些常用方法，如Banner 、切换动画等等。还讲了如何封装一个扩展性强，比较通用的ViewPager。这也是对自己以前用过的这些知识点的一个总结和沉淀。","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"ViewPager系列","slug":"ViewPager系列","permalink":"http://dinson.win/tags/ViewPager系列/"}]},{"title":"ViewPager系列--仿魅族应用的广告BannerView","date":"2017-06-04T01:52:22.000Z","path":"2017/06/04/17-06-04/","text":"概述 Banner广告位是APP 中的一个非常重要的位置，为什么呢？因为它能带来money。是一个公司很重要的一个营收点。像那种用户数基数特别大的产品，如facebook、twitter、QQ、微信等等。Banner广告位日营收估计得上千万美刀（猜的,不知道具体数据）。一个漂亮的Banner往往能够吸引用户的眼球，引导用户点击，从而提高转化率。遗憾的是现在的大多数产品的Banner都是千篇一律的，没有什么亮点可言。但是前几天在魅族手机上发现了一个效果不错的Banner，魅族所有自家的APP所用的Banner 引起了我的注意。效果是这样子的： 看到这个Banner 第一眼就吸引了我，随后就反复的体验了几次了，感觉这种Banner的效果还不错。最后想着高仿一个和这种效果差不多的BannerView 。那么本文就讲一下如何实现这样一个BannerView。最终实现的效果如下： 仿魅族Banner 效果在开始实现魅族Banner效果之前，我们先来整理一下实现一个BannerView的思路，首先需要用ViewPager，其次让ViewPager无限轮播。其实BannerView就是一个无限轮播的ViewPager，然后做一些封装处理，让使用更加简单就ok。 现在我们在来看一下魅族的这个Banner。他与普通的banner的区别是当前页显示了前一页和后一页的部分内容。 抛开切换时的动画先不说，要实现这个效果的第一步就是要让ViewPager在一个页面显示多页的内容（当前页＋前后页部分）。 ViewPager展示多页要让ViewPager页面展示多页的内容，就要用到ViewGroup的一个强大的属性。这个属性虽然强大，但是也不常用，可能有些小伙伴不知道(之前我也没用过…)，那就是clipChildren属性。这个属性有什么作用呢，我们看一下它的文档介绍：12345678/** * By default, children are clipped to their bounds before drawing. This * allows view groups to override this behavior for animations, etc. * * @param clipChildren true to clip children to their bounds, * false otherwise * @attr ref android.R.styleable#ViewGroup_clipChildren */ clipChildren: 默认值为true, 子View 的大小只能在父View规定的范围之内，比如父View的高为50，子View的高为60 ,那么多处的部分就会被裁剪。如果我们设置这个值为false的话，那么多处的部分就不会被裁剪了。 这里我们就可以利用这个属性来实现了这个效果了，我们设置ViewPager的父布局的clipChildren为false。然后设置ViewPager 左右一定的边距，那么左右就空出了一定的区域，利用clipChildren属性，就能让前后页面的部分显示在当前页了。布局如下： 12345678910111213141516171819&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:clipChildren=\"false\" android:orientation=\"vertical\" &gt; &lt;android.support.v4.view.ViewPager android:id=\"@+id/view_pager\" android:layout_width=\"match_parent\" android:layout_height=\"200dp\" android:layout_marginLeft=\"30dp\" android:layout_marginRight=\"30dp\" /&gt;&lt;/LinearLayout&gt; 这样就能实现ViewPager 展示前后页面的部分内容。 自定义ViewPager.PageTransformer动画上面实现了ViewPager当前页面显示前后页的部分内容，但是从最开始魅族的Banner效果我们可以看出，滑动的时候是有 一个放大缩小的动画的。左右显示的部分有一定比例的缩小。这就要用到ViewPager.PageTransformer了。 ViewPager.PageTransformer 干什么的呢？ViewPager.PageTransformer 是用来做ViewPager切换动画的，它是一个接口，里面只有一个方法transformPage。1234567891011public interface PageTransformer &#123; /** * Apply a property transformation to the given page. * * @param page Apply the transformation to this page * @param position Position of page relative to the current front-and-center * position of the pager. 0 is front and center. 1 is one full * page position to the right, and -1 is one page position to the left. */ void transformPage(View page, float position);&#125; 虽然只有一个方法，但是它很强大，它能反映出在ViewPager滑动过程中，各个View的位置变化。我们拿到了这些位置变化，就能在这个过程中对View做各种各样的动画了。 要自定义动画，我们就来需要知道positon这个值的变化区间。从官方给的ViewPager的两个示例我们知道，position的变换有三个区间［－Infinity，－1），［－1，1］，（1.Infinity）。 ［－Infinity，－1）：已经在屏幕之外，看不到了 （1.Infinity）： 已经在屏幕之外，看不到了。 ［－1，1］： 这个区间是我门操作View动画的重点区间。 我们来看一下官方对于position的解释： 官方的解释：The position parameter indicates where a given page is located relative to the center of the screen. It is a dynamic property that changes as the user scrolls through the pages. When a page fills the screen, its position value is 0. When a page is drawn just off the right side of the screen, its position value is 1. If the user scrolls halfway between pages one and two, page one has a position of -0.5 and page two has a position of 0.5. 根据解释，也就是说当前停留的页面的位置为 0，右边屏幕之外绘制的这个页面位置为 1。那么，A 页面滑到 B 页面有 2 种情况：第一种：左边划出屏幕，那么 A：0 －&gt; －1,B :1 -&gt; 0。第二种：右边划出屏幕，A：0-&gt;1, B :-1-&gt; 0 了解了这个方法的变化后，我们就来自定义我们的切换动画,这里很简单，我们只需要一个scale动画。代码如下：12345678910111213141516171819202122232425public class CustomTransformer implements ViewPager.PageTransformer &#123; private static final float MIN_SCALE = 0.9F; @Override public void transformPage(View page, float position) &#123; if(position &lt; -1)&#123; page.setScaleY(MIN_SCALE); &#125;else if(position&lt;= 1)&#123; // float scale = Math.max(MIN_SCALE,1 - Math.abs(position)); page.setScaleY(scale); /*page.setScaleX(scale); if(position&lt;0)&#123; page.setTranslationX(width * (1 - scale) /2); &#125;else&#123; page.setTranslationX(-width * (1 - scale) /2); &#125;*/ &#125;else&#123; page.setScaleY(MIN_SCALE); &#125; &#125;&#125; 到此，我们仿魅族Banner的静态效果就实现了。接下来我们就要让Banner动起来，实现无限轮播效果。 图片轮播上面我们已经实现了Bannerd的静态展示和切换动画，那么我们现在就需要让Banner动起来，实现无限轮播。 ViewPager实现Banner无效轮播效果有2种方案,第一种是：在列表的最前面插入最后一条数据，在列表末尾插入第一个数据，造成循环的假象。第二种方案是：采用getCount 返回 Integer.MAX_VALUE。结下来分别看一下这两种方案。 在列表的最前面插入最后一条数据，在列表末尾插入第一个数据，造成循环的假象。这种方法是怎么做的呢？，是这样的：假如我们的列表有3条数据，用三个页面展示，分别编号为1，2，3。我们再创建一个新的列表，长度为真实列表的长度＋2，也就是5。在最前面插入最后一条数据，然后在末尾插入第一条数据。新列表就变成了这样了，3－1－2－3－1。如果当前滑到的是0位置（页面3）,那就通过ViewPager的setCurrentItem(int item, boolean smoothScroll)方法神不知鬼不觉的切换到3位置（页面3），当滑到4的位置时(页面1),也用这个方法滑到1位置（页面1）。这样给我们的感觉就是无限轮播了。来一张图辅助理解一下。 采用getCount 返回 Integer.MAX_VALUE让ViewPager 的Adapter getCount 方法返回一个很大的数（这里用Integer.MAX_VALUE），理论上可以无限滑动。当显示完一个真实列表的周期后，又从真实列表的0位置显示数据，造成无限循环轮播的假象。开始时调用 mViewPager.setCurrentItem(Integer.MAX_VALUE /2)设置选中中间位置，这样最开始就可以向左滑动。关键代码：123456789101112131415161718int currentItem = getStartSelectItem();//设置当前选中的Item mViewPager.setCurrentItem(currentItem); private int getStartSelectItem()&#123; // 我们设置当前选中的位置为Integer.MAX_VALUE / 2,这样开始就能往左滑动 // 但是要保证这个值与getRealPosition 的 余数为0，因为要从第一页开始显示 int currentItem = Integer.MAX_VALUE / 2; if(currentItem % getRealCount() ==0 )&#123; return currentItem; &#125; // 直到找到从0开始的位置 while (currentItem % getRealCount() != 0)&#123; currentItem++; &#125; return currentItem; &#125; 3 . 两种方案选哪一种？两种方案我都试了一下，都可以实现轮播，但是第一种 方案在有切换动画的时候是有问题的，因为上面我们说了滑动到最后一页切换到第一页时，用的是ViewPager的setCurrentItem(int item, boolean smoothScroll)方法，smoothScroll 的值为false,这样界面就感觉不到我们偷偷的切换。但是这样切换就没有了动画。这样每次切换就会很生硬，因此就抛弃这种方法。选择第二种方案。轮播我们采用Hanlder的postDelayed方法，关键代码如下：12345678910111213141516171819private final Runnable mLoopRunnable = new Runnable() &#123; @Override public void run() &#123; if(mIsAutoPlay)&#123; mCurrentItem = mViewPager.getCurrentItem(); mCurrentItem++; if(mCurrentItem == mAdapter.getCount() - 1)&#123; mCurrentItem = 0; mViewPager.setCurrentItem(mCurrentItem,false); mHandler.postDelayed(this,mDelayedTime); &#125;else&#123; mViewPager.setCurrentItem(mCurrentItem); mHandler.postDelayed(this,mDelayedTime); &#125; &#125;else&#123; mHandler.postDelayed(this,mDelayedTime); &#125; &#125;&#125;; 在Adapter instantiateItem(ViewGroup container, final int position) 中，现在的这个position是一个很大的数字，我们需要将它转换成一个真实的position，否则会越界报错。1final int realPosition = position % getRealCount(); 1234567/** * 获取真实的Count * @return */private int getRealCount()&#123; return mDatas==null ? 0:mDatas.size();&#125; 通过以上就实现了仿魅族的BannerView，但是这还没完，虽然功能实现了，要想在任何地方拿来就可以使用，简单方便，我们还需要进一步的封装。 封装轮子：MZBannerView通过上面几步就可以实现仿魅族的BannerView,但是为了使用方便，我们将它封装成一个库，前面一篇文章讲了，如何封装一个通用的ViewPager（文章地址：ViewPager系列之 打造一个通用的ViewPager）。既然要想Banner使用方便，我们也需要封装得通用，可扩展。因为我们的Banner也是用ViewPager 实现的，因此，我们可用上一篇文章的方法，封装一个通用的BannerView。 MZBannerView 有以下功能： 仿魅族BannerView 效果。 当普通Banner 使用 当普通ViewPager 使用。 当普通ViewPager使用(有魅族Banner效果) 自定义属性 属性名 属性意义 取值 open_mz_mode 是否开启魅族模式 true 为魅族Banner效果，false 则普通Banner效果 canLoop 是否轮播 true 轮播，false 则为普通ViewPager indicatorPaddingLeft 设置指示器距离左侧的距离 单位为 dp 的值 indicatorPaddingRight 设置指示器距离右侧的距离 单位为 dp 的值 indicatorAlign 设置指示器的位置 有三个取值：left 左边，center 剧中显示，right 右侧显示 使用方法xml 布局文件12345678910&lt;com.example.dinson.MZBannerView android:id=\"@+id/banner\" android:layout_width=\"match_parent\" android:layout_height=\"200dp\" android:layout_marginTop=\"10dp\" app:open_mz_mode=\"true\" app:canLoop=\"true\" app:indicatorAlign=\"center\" app:indicatorPaddingLeft=\"10dp\" /&gt; activity中代码：12345678910111213141516171819202122232425262728293031323334353637 mMZBanner = (MZBannerView) view.findViewById(R.id.banner); // 设置页面点击事件 mMZBanner.setBannerPageClickListener(new MZBannerView.BannerPageClickListener() &#123; @Override public void onPageClick(View view, int position) &#123; Toast.makeText(getContext(),\"click page:\"+position,Toast.LENGTH_LONG).show(); &#125; &#125;); List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); for(int i=0;i&lt;RES.length;i++)&#123; list.add(RES[i]); &#125;// 设置数据 mMZBanner.setPages(list, new MZHolderCreator&lt;BannerViewHolder&gt;() &#123; @Override public BannerViewHolder createViewHolder() &#123; return new BannerViewHolder(); &#125; &#125;); public static class BannerViewHolder implements MZViewHolder&lt;Integer&gt; &#123; private ImageView mImageView; @Override public View createView(Context context) &#123; // 返回页面布局文件 View view = LayoutInflater.from(context).inflate(R.layout.banner_item,null); mImageView = (ImageView) view.findViewById(R.id.banner_image); return view; &#125; @Override public void onBind(Context context, int position, Integer data) &#123; // 数据绑定 mImageView.setImageResource(data); &#125; &#125; 如果是当Banner使用，注意在onResume 中调用start()方法，在onPause中调用 pause() 方法。如果当普通ViewPager使用，则不需要。1234567891011@Overridepublic void onPause() &#123; super.onPause(); mMZBanner.pause();//暂停轮播&#125;@Overridepublic void onResume() &#123; super.onResume(); mMZBanner.start();//开始轮播&#125; 其他对外API123456789101112131415161718192021222324252627/******************************************************************************************************//** 对外API **//******************************************************************************************************///开始轮播 start()//停止轮播 pause()//设置BannerView 的切换时间间隔 setDelayedTime(int delayedTime)// 设置页面改变监听器addPageChangeLisnter(ViewPager.OnPageChangeListener onPageChangeListener)//添加Page点击事件 setBannerPageClickListener(BannerPageClickListener bannerPageClickListener)//设置是否显示IndicatorsetIndicatorVisible(boolean visible)// 获取ViewPagerViewPager getViewPager()// 设置 Indicator资源setIndicatorRes(int unSelectRes,int selectRes)//设置页面数据setPages(List&lt;T&gt; datas,MZHolderCreator mzHolderCreator)//设置指示器显示位置setIndicatorAlign(IndicatorAlign indicatorAlign)//设置ViewPager（Banner）切换速度setDuration(int duration) 因为是对ViewPager的包装，所有要设置某些ViewPager的属性，可以通过getViewPager 获取到ViewPager再设置对应属性 总结本文讲了如何实现一个仿魅族Banner效果。其中讲了一些关键的点和关键代码。其实普通的BannerView 是一样的，只是少了动画而已。最后，将这些功能封装成了一个通用的BannerView 控件。这个控件既有仿魅族Banner的效果，又可以当普通Banner使用。而且还可以当作一个普通的ViewPager使用。","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"ViewPager系列","slug":"ViewPager系列","permalink":"http://dinson.win/tags/ViewPager系列/"}]},{"title":"ViewPager系列--打造一个通用的ViewPager","date":"2017-06-03T01:21:22.000Z","path":"2017/06/03/17-06-03/","text":"概述 ViewPager是Android开发者比较常用的一个控件了，由于它允许数据页从左到右或者从右到左翻页，因此这种交互也备受设计师的青睐。在APP中的很多场景都用得到，比如第一次安装APP时的用户引导页、图片浏览时左右翻页、广告Banner页等等都会用到ViewPager。ViewPager 的使用和RecyclerView的使用方式很相似，熟悉RecyclerView的朋友都知道，我们要使用RecyclerView，就得给RecyclerView提供一个Adapter来提供布局和装载数据。但是有一个比较麻烦的事情是，我们每次使用RecyclerView都要给他提供一个Adapter,并且这些Adapter中的一些方法和代码都是相同的，这使得我们写了很多重复的代码，降低了我们的开发效率，因此github有各种个样的对RecyclerView 的再度封装，目的就是减少这些重复的代码，尽量代码复用，使开发更简单。那么ViewPager的使用和RecyclerView 是非常相似的，我们同样也是给ViewPager提供一个Adapter来提供布局和装载数据。写Adapter的时候同样会写很多重复代码，那么我们是否能像RecyclerView一样，也对Viewpager来做一个再次封装，达到复用和简单的效果呢？答案是肯定的，因此这篇文章就一起来封装一个通用的ViewPager。 现状看过一些技术博客，对于普通的ViewPager使用封装的比较少，大多数的封装只是在用作Banner 的时候，也就是ViewPager 每页只显示一张图片。对外提供一个接口，传递一个imageUrl 数组就直接展示，不用再写其他的Adapter之类的。但是这样封装其实还是有一些局限性的。 每个项目用的图片加载框架是不一样的，Picasso、Glide、ImageLoader等等各不相同，那么我们还需要在显示图片的时候换成自己用的图片加载框架才行。 并不是所有的Banner 都只是显示一张图片,还有各种个样的文案展示等等，因此不能个性化定制，这是比较致命的。 看看上面的局限性，是什么造成了这些局限性呢？答案是我们没有主动权，主动权在Adapter手中，他控制了布局，控制了数据绑定，所以它说怎样展示就怎样展示，它说展示什么就展示什么。那么现在问题的关键来了，我们又不想写Adapter,又想按照我们的指示展示布局和数据，怎么办呢？那就要从Adapter中夺回主动权，我们想ViewPager展示成什么样子我们自己说了算。Adapter只需要把我们提供给他的东西按照我们的指示展示就行了。具体的布局和数据绑定都我们自己控制。因此，有了主动权，展示什么布局我们能控制，用什么框架加载图片我们同样能控制。用什么方式来告诉Adapter 做页面展示呢？就用万能的接口啦。 封装通用的ViewPager通过上面现状的分析，我们知道了，要封装一个比较通用的ViewPager,首先就是要从Adapter那里夺回主动权，因为它控制了布局和数据绑定。有了主动权之后，我们提供布局给Adapter，然后我们自己控制数据绑定。其中有2个关键的点：1，提供布局 。 2，数据绑定。 看到这两个点是不是觉得很熟悉？当然很熟悉，这不就是RecyclerView的ViewHolder干的事情嘛。既然是这样我们就借鉴一下 RecyclerView的ViewHolder呗。 第一步：定义一个ViewHolder接口来提供布局和绑定数据：ViewPagerHolder代码如下：12345678910111213141516public interface ViewPagerHolder&lt;T&gt; &#123; /** * 创建View * @param context * @return */ View createView(Context context); /** * 绑定数据 * @param context * @param position * @param data */ void onBind(Context context,int position,T data);&#125; ViewPagerHolder接收一个泛型T,这是绑定数据要用的实体类。其中有2个方法，一个提供给Adapter布局，另一个则用于绑定数据。 第二步： 创建一个ViewHolder生成器，用来生成各种ViewHolder:ViewPagerHolderCreator 代码如下：1234567public interface ViewPagerHolderCreator&lt;VH extends ViewPagerHolder&gt; &#123; /** * 创建ViewHolder * @return */ public VH createViewHolder();&#125; 该类接受一个 泛型，但是必须得是ViewPagerHolder 的子类，一个方法createViewHolder，返回ViewHolder实例。 第三步： 重写 ViewPager 的Adapter：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859public class CommonViewPagerAdapter&lt;T&gt; extends PagerAdapter &#123; private List&lt;T&gt; mDatas; private ViewPagerHolderCreator mCreator;//ViewHolder生成器 public CommonViewPagerAdapter(List&lt;T&gt; datas, ViewPagerHolderCreator creator) &#123; mDatas = datas; mCreator = creator; &#125; @Override public int getCount() &#123; return mDatas == null ? 0:mDatas.size(); &#125; @Override public boolean isViewFromObject(View view, Object object) &#123; return view == object; &#125; @Override public Object instantiateItem(ViewGroup container, int position) &#123; //重点就在这儿了，不再是把布局写死，而是用接口提供的布局 // 也不在这里绑定数据，数据绑定交给Api调用者。 View view = getView(position,null,container); container.addView(view); return view; &#125; @Override public void destroyItem(ViewGroup container, int position, Object object) &#123; container.removeView((View) object); &#125; /** * 获取viewPager 页面展示View * @param position * @param view * @param container * @return */ private View getView(int position,View view ,ViewGroup container)&#123; ViewPagerHolder holder =null; if(view == null)&#123; //创建Holder holder = mCreator.createViewHolder(); view = holder.createView(container.getContext()); view.setTag(R.id.common_view_pager_item_tag,holder); &#125;else&#123; holder = (ViewPagerHolder) view.getTag(R.id.common_view_pager_item_tag); &#125; if(holder!=null &amp;&amp; mDatas!=null &amp;&amp; mDatas.size()&gt;0)&#123; // 数据绑定 holder.onBind(container.getContext(),position,mDatas.get(position)); &#125; return view; &#125;&#125; 这个类比较重要，因为以前我们的布局提供和数据绑定都是在Adapter中的，因此现在我们就将这两项工作交给我们的ViewHolder。CommonViewPagerAdapter 的构造方法需要展示的数据集合和ViewPagerHolderCreator 生成器。其他代码都有注释一看便明白。 第四部：包装ViewPagerAdapter和ViewHolder都有了，现在我们只需要一个ViewPager 就大功告成了。我们采用自定义View 组合的方式来写这个ViewPager.1 . 提供ViewPager 布局：1234567891011121314151617181920212223242526&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;!-- ViewPager--&gt; &lt;android.support.v4.view.ViewPager android:id=\"@+id/common_view_pager\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"/&gt; &lt;!-- 指示器 indicatorView--&gt; &lt;com.zhouwei.indicatorview.CircleIndicatorView android:id=\"@+id/common_view_pager_indicator_view\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_alignParentBottom=\"true\" android:layout_marginBottom=\"10dp\" app:indicatorSelectColor=\"@android:color/white\" app:indicatorColor=\"@android:color/darker_gray\" app:fill_mode=\"none\" app:indicatorSpace=\"5dp\" android:layout_centerHorizontal=\"true\"/&gt;&lt;/RelativeLayout&gt; 布局中一个ViewPager 和一个指示器View, IndicatorView 用的是前面分享的CircleIndicatorView 。博客地址：ViewPager系列–实现一个多功能的IndicatorView。 2 . CommonViewPager ，代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100public class CommonViewPager&lt;T&gt; extends RelativeLayout &#123; private ViewPager mViewPager; private CommonViewPagerAdapter mAdapter; private CircleIndicatorView mCircleIndicatorView; public CommonViewPager(@NonNull Context context) &#123; super(context); init(); &#125; public CommonViewPager(@NonNull Context context, @Nullable AttributeSet attrs) &#123; super(context, attrs); init(); &#125; public CommonViewPager(@NonNull Context context, @Nullable AttributeSet attrs, @AttrRes int defStyleAttr) &#123; super(context, attrs, defStyleAttr); init(); &#125; @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP) public CommonViewPager(@NonNull Context context, @Nullable AttributeSet attrs, @AttrRes int defStyleAttr, @StyleRes int defStyleRes) &#123; super(context, attrs, defStyleAttr, defStyleRes); init(); &#125; private void init()&#123; View view = LayoutInflater.from(getContext()).inflate(R.layout.common_view_pager_layout,this,true); mViewPager = (ViewPager) view.findViewById(R.id.common_view_pager); mCircleIndicatorView = (CircleIndicatorView) view.findViewById(R.id.common_view_pager_indicator_view); &#125; /** * 设置数据 * @param data * @param creator */ public void setPages(List&lt;T&gt; data, ViewPagerHolderCreator creator)&#123; mAdapter = new CommonViewPagerAdapter(data,creator); mViewPager.setAdapter(mAdapter); mAdapter.notifyDataSetChanged(); mCircleIndicatorView.setUpWithViewPager(mViewPager); &#125; public void setCurrentItem(int currentItem)&#123; mViewPager.setCurrentItem(currentItem); &#125; public int getCurrentItem()&#123; return mViewPager.getCurrentItem(); &#125; public void setOffscreenPageLimit(int limit)&#123; mViewPager.setOffscreenPageLimit(limit); &#125; /** * 设置切换动画，see &#123;@link ViewPager#setPageTransformer(boolean, ViewPager.PageTransformer)&#125; * @param reverseDrawingOrder * @param transformer */ public void setPageTransformer(boolean reverseDrawingOrder, ViewPager.PageTransformer transformer)&#123; mViewPager.setPageTransformer(reverseDrawingOrder,transformer); &#125; /** * see &#123;@link ViewPager#setPageTransformer(boolean, ViewPager.PageTransformer)&#125; * @param reverseDrawingOrder * @param transformer * @param pageLayerType */ public void setPageTransformer(boolean reverseDrawingOrder, ViewPager.PageTransformer transformer, int pageLayerType) &#123; mViewPager.setPageTransformer(reverseDrawingOrder,transformer,pageLayerType); &#125; /** * see &#123;@link ViewPager#addOnPageChangeListener(ViewPager.OnPageChangeListener)&#125; * @param listener */ public void addOnPageChangeListener(ViewPager.OnPageChangeListener listener)&#123; mViewPager.addOnPageChangeListener(listener); &#125; /** * 设置是否显示Indicator * @param visible */ private void setIndicatorVisible(boolean visible)&#123; if(visible)&#123; mCircleIndicatorView.setVisibility(VISIBLE); &#125;else&#123; mCircleIndicatorView.setVisibility(GONE); &#125; &#125; public ViewPager getViewPager() &#123; return mViewPager; &#125;&#125; CommonViewPager 是对ViewPager的包装，提供了一些ViewPager的常用方法。 其中有一个非常重要的方法public void setPages(List data, ViewPagerHolderCreator creator),提供数据和ViewHolder。其他的基本上都是ViewPager的方法。也可以通过getViewPager 获取到ViewPager 再调用ViewPager的方法。 到此封装也就全部完成了。 CommonViewPager 简便使用啰嗦了这么久的封装，那么用起来方便不呢？看一下就知道。1.activity 布局文件：1234567891011121314&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" tools:context=\"com.zhouwei.commonviewpager.MainActivity\"&gt; &lt;com.zhouwei.viewpagerlib.CommonViewPager android:id=\"@+id/activity_common_view_pager\" android:layout_width=\"match_parent\" android:layout_height=\"200dp\"/&gt;&lt;/RelativeLayout&gt; ViewPager Item 的布局文件：1234567891011121314151617181920&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:orientation=\"vertical\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;ImageView android:id=\"@+id/viewPager_item_image\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:scaleType=\"centerCrop\"/&gt; &lt;TextView android:id=\"@+id/item_desc\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:textSize=\"15sp\" android:gravity=\"center\" android:layout_centerInParent=\"true\" android:textColor=\"@android:color/white\"/&gt;&lt;/RelativeLayout&gt; Activity 代码:123456789101112131415161718192021222324252627282930313233343536private void initView() &#123; mCommonViewPager = (CommonViewPager) findViewById(R.id.activity_common_view_pager); // 设置数据 mCommonViewPager.setPages(mockData(), new ViewPagerHolderCreator&lt;ViewImageHolder&gt;() &#123; @Override public ViewImageHolder createViewHolder() &#123; // 返回ViewPagerHolder return new ViewImageHolder(); &#125; &#125;);&#125;/** * 提供ViewPager展示的ViewHolder * &lt;P&gt;用于提供布局和绑定数据&lt;/P&gt; */public static class ViewImageHolder implements ViewPagerHolder&lt;DataEntry&gt;&#123; private ImageView mImageView; private TextView mTextView; @Override public View createView(Context context) &#123; // 返回ViewPager 页面展示的布局 View view = LayoutInflater.from(context).inflate(R.layout.view_pager_item,null); mImageView = (ImageView) view.findViewById(R.id.viewPager_item_image); mTextView = (TextView) view.findViewById(R.id.item_desc); return view; &#125; @Override public void onBind(Context context, int position, DataEntry data) &#123; // 数据绑定 // 自己绑定数据，灵活度很大 mImageView.setImageResource(data.imageResId); mTextView.setText(data.desc); &#125;&#125; 代码逻辑很清晰，也很简单，只需要提供一个ViewHolder,ViewHolder 自己实现，然后调用setPages方法绑定数据就好了。最后上一张效果图： 总结本篇文章的这种封装思想不仅仅对于ViewPager,对于其他的展示集合数据的控件同样实用。其实整个封装还是蛮简单的，但是我觉得这种方法值得推广，以后像我们自己写一个扩展性比较强的控件时，就可以用这种方式。如果把这些一个个控件做成独立的通用的组件，那么我们开发的效率要提高很多。","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"ViewPager系列","slug":"ViewPager系列","permalink":"http://dinson.win/tags/ViewPager系列/"}]},{"title":"ViewPager系列--实现一个多功能的IndicatorView","date":"2017-06-02T01:04:12.000Z","path":"2017/06/02/17-06-02/","text":"概述 Indicator (指示器) 可能大家都见的比较多了，在一个APP中，有很多场景都会用到Indicator，比如第一次安装APP 时的引导页，首页上面的广告Banner ，又或者是Tab下面的Indicator。Indicator 一般配合ViewPager 使用，它能很直观的反应出ViewPager 中一共有多少页，当前选中的是哪一页，用户能够很容易的看出是否还可以滑动，用户体验较好。那么本篇文章就讲一下如何通过自定义View来实现一个漂亮简洁的IndicatorView。 Indicator的展示形式 我们使用Indicator时,常见的有三种形式，第一种是根据ViewPager 的总页数展示一排小圆点，选中和未选中分别标为不同的颜色。这也是普遍的使用Indicator的效果，效果如下： 第二种形式是根据ViewPager 的总页数展示一排圆点，并且用数字标出其顺序（1，2，3，4 …），大概效果如下： image.png第三种形式和第二种形式差不多，同样根据ViewPager总页数展示一片圆点，但是用字母标出顺序(A,B,C,D ….), 比如 ：魅族手机屏幕的切换的Indicator。效果如下：本篇文章就通过自定义View来实现这三种IndicatorView。 通过自定义View 实现多功能的CircleIndicatorView首先整理一下思路，CircleIndicatorView ,它是由一组圆 组成的，只不过圆有多种状态，选中、未选中、显示字母、显示数字等等。看着有这么多中状态，感觉挺复杂，但是其实不复杂，只是用不同的变量来控制不同的状态即可。其他的先不考虑，我们只要先把这一排圆画出来，剩下的就比较容易了。要确定一个圆的，需要知道圆的半径和圆心，半径是我们可以配置的,那么，其实核心就是计算这一排的圆点的圆心位置。圆心 y 的位置是固定的（View 高的一般），因此我们只需要计算每个圆的圆心x的位置，看下图，其实很容易就能找到规律，规律如下： 第一个圆的x 就等于圆的半径，从第二个圆开始，当前圆的圆心x 坐标为 上一个圆的x 坐标 + (radius * 2 + mSpace)。 其中mSpace 是圆之间的间距。 有了上面的规律，我们只需要一个循环就能找出所有圆的圆心位置。代码如下：1234567891011121314151617181920/** * 测量每个圆点的位置 */private void measureIndicator()&#123; mIndicators.clear(); float cx = 0; for(int i=0;i&lt;mCount;i++)&#123; Indicator indicator = new Indicator(); if( i== 0)&#123; cx = mRadius + mStrokeWidth; &#125;else&#123; cx += (mRadius + mStrokeWidth) * 2 +mSpace; &#125; indicator.cx = cx; indicator.cy = getMeasuredHeight() / 2; mIndicators.add(indicator); &#125;&#125; 我们用Indicator类记录了每个圆的圆心位置，并且保存在一个列表里面，现在有了所有圆的数据，我们就可以绘制了。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647@Overrideprotected void onDraw(Canvas canvas) &#123; for(int i=0;i&lt;mIndicators.size();i++)&#123; Indicator indicator = mIndicators.get(i); float x = indicator.cx; float y = indicator.cy; if(mSelectPosition == i)&#123; mCirclePaint.setStyle(Paint.Style.FILL); mCirclePaint.setColor(mSelectColor); &#125;else&#123; mCirclePaint.setColor(mDotNormalColor); if(mFillMode != FillMode.NONE)&#123; mCirclePaint.setStyle(Paint.Style.STROKE); &#125;else&#123; mCirclePaint.setStyle(Paint.Style.FILL); &#125; &#125; canvas.drawCircle(x,y, mRadius, mCirclePaint); // 绘制小圆点中的内容 if(mFillMode != FillMode.NONE)&#123; String text = \"\"; if(mFillMode == FillMode.LETTER)&#123; if(i &gt;= 0 &amp;&amp; i&lt;LETTER.length)&#123; text = LETTER[i]; &#125; &#125;else&#123; text = String.valueOf(i+1); &#125; Rect bound = new Rect(); mTextPaint.getTextBounds(text,0,text.length(),bound); int textWidth = bound.width(); int textHeight = bound.height(); float textStartX = x - textWidth / 2; float textStartY = y + textHeight / 2; canvas.drawText(text,textStartX,textStartY, mTextPaint); &#125; &#125;&#125; 绘制的代码很简单，无非就是循环我们保存的列表，拿出每一个Indicator，然后绘制圆就行了，除此之外就是一些状态的判断，比如，是否绘制数字、字母和选中状态等等 。 到此，我们的CircleIndicatorView 的绘制工作算是完成了，并且也能够显示在界面上了，但是它现在还是一个单独的View。我们前面说过，IndicatorView 一般是配合ViewPager使用的，它是随着Viewpager的切换而改变的，因此我们需要将IndicatorView 与ViewPager 进行关联。 要让CircleIndicatorView 与ViewPager 关联，首先需要 CircleIndicatorView 实现ViewPager.OnPageChangeListener接口。然后在onPageSelected方法中记录当前页的位置。代码如下：123456789101112131415@Overridepublic void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123;&#125;@Overridepublic void onPageSelected(int position) &#123; mSelectPosition = position; invalidate();&#125;@Overridepublic void onPageScrollStateChanged(int state) &#123;&#125; 第二步，向外提供一个API ,设置CircleIndicatorView 与 ViewPager 关联。1234567891011121314/** * 与ViewPager 关联 * @param viewPager */public void setUpWithViewPager(ViewPager viewPager)&#123; releaseViewPager(); if(viewPager == null)&#123; return; &#125; mViewPager = viewPager; mViewPager.addOnPageChangeListener(this); int count = mViewPager.getAdapter().getCount(); setCount(count);&#125; 通过如上两步，就建立了CircleIndicatorView 与ViewPager的关联，只需要调用方法setUpWithViewPager就OK。 到此就完了吗？当然还没有完，其实还有一个小细节，那就是IndicatorView 因该是可以点击的，点击Indicator小圆点就能切换ViewPager 到对应的页面（如 Iphone 和 魅族手机的 屏幕切换，点击indicator小圆点就可以切换 ,以前没有注意的现在可以去试一下 ），那么我们也来实现这样一个功能，其实很简单,重写onTouchEvent方法 ，监听ACTION_DOWN 事件，然后获取点击屏幕的坐标，与所绘制的圆位置比较,如果点击区域在圆的范围内，就点击了该Indicator。点击之后，切换Viewpager到对应页面。代码如下：12345678910111213141516171819202122232425262728293031323334@Overridepublic boolean onTouchEvent(MotionEvent event) &#123; float xPoint = 0; float yPoint = 0; switch (event.getAction())&#123; case MotionEvent.ACTION_DOWN: xPoint = event.getX(); yPoint = event.getY(); handleActionDown(xPoint,yPoint); break; &#125; return super.onTouchEvent(event);&#125;private void handleActionDown(float xDis,float yDis)&#123; for(int i=0;i&lt;mIndicators.size();i++)&#123; Indicator indicator = mIndicators.get(i); if(xDis &lt; (indicator.cx + mRadius+mStrokeWidth) &amp;&amp; xDis &gt;=(indicator.cx - (mRadius + mStrokeWidth)) &amp;&amp; yDis &gt;= (yDis - (indicator.cy+mStrokeWidth)) &amp;&amp; yDis &lt;(indicator.cy+mRadius+mStrokeWidth))&#123; // 找到了点击的Indicator // 切换ViewPager mViewPager.setCurrentItem(i,false); // 回调 if(mOnIndicatorClickListener!=null)&#123; mOnIndicatorClickListener.onSelected(i); &#125; break; &#125; &#125;&#125; 到此，我们自定义IndicatorView 的工作就差不多完成了，但是现在的IndicatorView 还不是很灵活，我们要让它的可配置性更强，就应该提供更多的API 来让IndicatorView 使用更加灵活方便，因此，最后一步，加上一些自定义属性来提高它的灵活性。自定义了如下一些属性： 属性名 属性意义 取值 indicatorRadius 设置指示器圆点的半径 单位为 dp 的值 indicatorBorderWidth 设置指示器的border 单位为 dp 的值 indicatorSpace 设置指示器之间的距离 单位为 dp 的值 indicatorTextColor 设置指示器中间的文字颜色 颜色值，如：＃FFFFFF indicatorColor 设置指示器圆点的颜色 颜色值 indicatorSelectColor 设置指示器选中的颜色 颜色值 fill_mode 设置指示器的模式 枚举值：有三种，分别是letter,number和none 自定义属性文件如下：12345678910111213&lt;declare-styleable name=\"CircleIndicatorView\"&gt; &lt;attr name=\"indicatorRadius\" format=\"dimension\"/&gt; &lt;attr name=\"indicatorBorderWidth\" format=\"dimension\"/&gt; &lt;attr name=\"indicatorSpace\" format=\"dimension\"/&gt; &lt;attr name=\"indicatorTextColor\" format=\"color\"/&gt; &lt;attr name=\"indicatorColor\" format=\"color\"/&gt; &lt;attr name=\"indicatorSelectColor\" format=\"color\"/&gt; &lt;attr name=\"fill_mode\"&gt; &lt;enum name=\"letter\" value=\"0\"/&gt; &lt;enum name=\"number\" value=\"1\"/&gt; &lt;enum name=\"none\" value=\"2\"/&gt; &lt;/attr&gt;&lt;/declare-styleable&gt; 通过上面这些属性，我们就可以很好的定制IndicaotorView 了，比如，自定义圆的大小，颜色，border，文字的颜色，选中的颜色和展示的模式等等。","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"ViewPager系列","slug":"ViewPager系列","permalink":"http://dinson.win/tags/ViewPager系列/"}]},{"title":"关于python中如何导入pygame模块","date":"2017-05-31T07:58:33.000Z","path":"2017/05/31/17-05-31/","text":"概述 在这里用python3.6和pygame (1.9.3)为例，请找自己相应匹配的版本。 软件准备 下载python3.6.1https://www.Python.org/downloads/ 下载pip的wheel包https://pypi.python.org/pypi/pip 下载windows的easy installerhttps://pypi.python.org/pypi/setuptools 下载Pygame所需的wheel安装包https://pypi.python.org/pypi/Pygame 注意版本的选择 下载安装 安装python3.6.1 安装ez_setup.py 双击即可 安装pip的wheel安装包 安装pip的wheel安装包需要进入DOS （1）按win+R,输入cmd，进入DOS （2）输入pip install wheel （3）输入pip list，验证是否安装成功 4.安装pygame的wheel安装包切换路径：切换到安装包所在的盘区，比如我的pygame的wheel是放到E盘去的 输入cd\\输入E：现在我们进入我们要进的盘区了。再输pip install pygame-1.9.2a0-cp35-none-win32.whl 至此我们已经安装成功。 最后就是import pygame","categories":[{"name":"Python从入门到放弃","slug":"Python从入门到放弃","permalink":"http://dinson.win/categories/Python从入门到放弃/"}],"tags":[]},{"title":"CoordinatorLayout 自定义Behavior并不难，由简到难手把手带你飞 (未完...)","date":"2017-05-29T07:58:33.000Z","path":"2017/05/29/17-05-29/","text":"概述 其实Behavior就是一个应用于View的观察者模式，一个View跟随者另一个View的变化而变化，或者说一个View监听另一个View。在Behavior中，被观察View 也就是事件源被称为denpendcy，而观察View，则被称为child。 难度1 Button与TextView首先在布局文件中跟布局设置为CoordinatorLayout，里面放一个Button和一个TextView。123456789101112131415161718192021&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;android.support.design.widget.CoordinatorLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\"&gt; &lt;TextView app:layout_behavior=\".EasyBehavior\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"观察者View child\"/&gt; &lt;Button android:id=\"@+id/btn\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_gravity=\"center\" android:text=\"被观察View dependency\"/&gt; &lt;/android.support.design.widget.CoordinatorLayout&gt; 这里我们在Activity中做一些手脚，让Button动起来(不要在意坐标这些细节)123456789101112findViewById(R.id.btn).setOnTouchListener(new View.OnTouchListener() &#123; @Override public boolean onTouch(View v, MotionEvent event) &#123; switch (event.getAction()) &#123; case MotionEvent.ACTION_MOVE: v.setX(event.getRawX() - v.getWidth() / 2); v.setY(event.getRawY() - v.getHeight() / 2); break; &#125; return false; &#125; &#125;); 此时，Button已经可以跟随手指移动了。 现在去自定义一个Behavior让TextView跟随Button一起动！ 创建一个EasyBehavior类，继承于Behavior12345678910111213141516171819202122public class EasyBehavior extends CoordinatorLayout.Behavior&lt;TextView&gt; &#123;//这里的泛型是child的类型，也就是观察者View public EasyBehavior(Context context, AttributeSet attrs) &#123; super(context, attrs); &#125; @Override public boolean layoutDependsOn(CoordinatorLayout parent, TextView child, View dependency) &#123; //告知监听的dependency是Button return dependency instanceof Button; &#125; @Override //当 dependency(Button)变化的时候，可以对child(TextView)进行操作 public boolean onDependentViewChanged(CoordinatorLayout parent, TextView child, View dependency) &#123; child.setX(dependency.getX() + 200); child.setY(dependency.getY() + 200); child.setText(dependency.getX() + \",\" + dependency.getY()); return true; &#125;&#125; 注意两个方法layoutDependsOn() 代表寻找被观察ViewonDependentViewChanged() 被观察View变化的时候回调用的方法 在onDependentViewChanged中，我们让TextView跟随Button的移动而移动。代码比较简单，一看就懂。 必须重写带双参的构造器，因为从xml反射需要调用。 接下来，在xml中，给TextView设置我们的Behavior。12345&lt;TextView app:layout_behavior=\".EasyBehavior\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"观察者View child\"/&gt; 运行效果如下：这样一个最简单的behavior就做好了。 难度2 仿UC折叠Behavior这个效果布局嵌套比上一个例子些许复杂，如果看起来吃力，务必去补习CoordinatorLayout！！！！ 先定义xml如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" tools:ignore=\"RtlHardcoded\"&gt; &lt;android.support.design.widget.AppBarLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" app:elevation=\"0dp\"&gt; &lt;android.support.design.widget.CollapsingToolbarLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" app:layout_scrollFlags=\"scroll|exitUntilCollapsed|snap\"&gt; &lt;ImageView android:layout_width=\"match_parent\" android:layout_height=\"300dp\" android:scaleType=\"centerCrop\" android:src=\"@drawable/bg_1920_1080\" app:layout_collapseMode=\"parallax\" app:layout_collapseParallaxMultiplier=\"0.9\"/&gt; &lt;FrameLayout android:id=\"@+id/frameLayout\" android:layout_width=\"match_parent\" android:layout_height=\"100dp\" android:layout_gravity=\"bottom|center_horizontal\" android:background=\"@color/colorPrimary\" android:orientation=\"vertical\" app:layout_collapseMode=\"parallax\" app:layout_collapseParallaxMultiplier=\"0.3\"&gt; &lt;/FrameLayout&gt; &lt;/android.support.design.widget.CollapsingToolbarLayout&gt; &lt;/android.support.design.widget.AppBarLayout&gt; &lt;android.support.v4.widget.NestedScrollView android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:scrollbars=\"none\" app:behavior_overlapTop=\"30dp\" app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"&gt; &lt;include layout=\"@layout/layout_uc_content\"/&gt; &lt;/android.support.v4.widget.NestedScrollView&gt; &lt;android.support.v7.widget.Toolbar android:id=\"@+id/main.toolbar\" android:layout_width=\"match_parent\" android:layout_height=\"?attr/actionBarSize\" android:background=\"@color/colorPrimaryDark\" app:layout_anchor=\"@id/frameLayout\" app:theme=\"@style/ThemeOverlay.AppCompat.Dark\"&gt; &lt;/android.support.v7.widget.Toolbar&gt; &lt;TextView android:id=\"@+id/tv_title\" android:layout_width=\"match_parent\" android:layout_height=\"50dp\" android:background=\"@color/colorPrimaryDark\" android:gravity=\"center\" android:text=\"头条\" android:textColor=\"#fff\" android:textSize=\"18sp\" app:layout_behavior=\".DrawerBehavior\"/&gt;&lt;/android.support.design.widget.CoordinatorLayout&gt; 有一点值得注意的是，app:layout_anchor=”@id/frameLayout”这个属性，是附着的意思，这里我用作给了toolbar，代表toolbar附着在了frameLayout之上。会跟随frameLayout的scroll而变化Y的值。 思路分析如何实现折叠呢，下半部分不用管了，AppBarLayout已经帮我们做好了，我们只要标注相应的scrollflags即可，所以，如上的布局，不做任何处理的话，作为标题的TextView是一直显示的，于是只要让TextView跟随Toolbar变化而变化就可以了。 接下来就创建一个Behavior类！12345678910111213141516171819202122232425262728public class DrawerBehavior extends CoordinatorLayout.Behavior&lt;TextView&gt; &#123; private int mFrameMaxHeight = 100; private int mStartY; @Override public boolean layoutDependsOn(CoordinatorLayout parent, TextView child, View dependency) &#123; return dependency instanceof Toolbar; &#125; public DrawerBehavior(Context context, AttributeSet attrs) &#123; super(context, attrs); &#125; @Override public boolean onDependentViewChanged(CoordinatorLayout parent, TextView child, View dependency) &#123; //记录开始的Y坐标 也就是toolbar起始Y坐标 if(mStartY == 0) &#123; mStartY = (int) dependency.getY(); &#125; //计算toolbar从开始移动到最后的百分比 float percent = dependency.getY()/mStartY; //改变child的坐标(从消失，到可见) child.setY(child.getHeight()*(1-percent) - child.getHeight()); return true; &#125;&#125; 里面监听了Toolbar的Y坐标变化，然后让TextView的Y坐标也跟着变化。达到如预览图效果。 22418581 http://music.163.com/#/m/song?id=&amp;userid=472025302","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"MaterialDesign","slug":"MaterialDesign","permalink":"http://dinson.win/tags/MaterialDesign/"}]},{"title":"Python从入门到放弃（8）-- Socket","date":"2017-05-28T06:29:37.000Z","path":"2017/05/28/17-05-28/","text":"概述 socket通常也称作”套接字”，用于描述IP地址和端口，是一个通信链的句柄，应用程序通常通过”套接字”向网络发出请求或者应答网络请求。 socket起源于Unix，而Unix/Linux基本哲学之一就是“一切皆文件”，对于文件用【打开】【读写】【关闭】模式来操作。socket就是该模式的一个实现，socket即是一种特殊的文件，一些socket函数就是对其进行的操作（读/写IO、打开、关闭） socket和file的区别： file模块是针对某个指定文件进行【打开】【读写】【关闭】 socket模块是针对 服务器端 和 客户端Socket 进行【打开】【读写】【关闭】 socket server:1234567891011121314151617import socketip_port = ('127.0.0.1',9999)sk = socket.socket()sk.bind(ip_port)sk.listen(5)while True: print 'server waiting...' conn,addr = sk.accept() client_data = conn.recv(1024) print client_data conn.sendall('不要回答,不要回答,不要回答') conn.close() socket client:123456789101112import socketip_port = ('127.0.0.1',9999)sk = socket.socket()sk.connect(ip_port)sk.sendall('请求占领地球')server_reply = sk.recv(1024)print server_replysk.close() WEB服务应用：12345678910111213141516171819import socket def handle_request(client): buf = client.recv(1024) client.send(\"HTTP/1.1 200 OK\\r\\n\\r\\n\") client.send(\"Hello, World\") def main(): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('localhost',8080)) sock.listen(5) while True: connection, address = sock.accept() handle_request(connection) connection.close() if __name__ == '__main__': main() Socket 参数介绍sk = socket.socket(socket.AF_INET,socket.SOCK_STREAM,0) 参数一：地址簇 socket.AF_INET IPv4（默认） socket.AF_INET6 IPv6 socket.AF_UNIX 只能够用于单一的Unix系统进程间通信 参数二：类型 socket.SOCK_STREAM 流式socket , for TCP （默认） socket.SOCK_DGRAM 数据报式socket , for UDP socket.SOCK_RAW 原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以；其次，SOCK_RAW也可以处理特殊的IPv4报文；此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头。 socket.SOCK_RDM 是一种可靠的UDP形式，即保证交付数据报但不保证顺序。SOCK_RAM用来提供对原始协议的低级访问，在需要执行某些特殊操作时使用，如发送ICMP报文。SOCK_RAM通常仅限于高级用户或管理员运行的程序使用。 socket.SOCK_SEQPACKET 可靠的连续数据包服务 参数三：协议 0 （默认）与特定的地址家族相关的协议,如果是 0 ，则系统就会根据地址格式和套接类别,自动选择一个合适的协议 sk.bind(address) s.bind(address) 将套接字绑定到地址。address地址的格式取决于地址族。在AF_INET下，以元组（host,port）的形式表示地址。 sk.listen(backlog) 开始监听传入连接。backlog指定在拒绝连接之前，可以挂起的最大连接数量。 backlog等于5，表示内核已经接到了连接请求，但服务器还没有调用accept进行处理的连接个数最大为5这个值不能无限大，因为要在内核中维护连接队列 sk.setblocking(bool) 是否阻塞（默认True），如果设置False，那么accept和recv时一旦无数据，则报错。 sk.accept() 接受连接并返回（conn,address）,其中conn是新的套接字对象，可以用来接收和发送数据。address是连接客户端的地址。 接收TCP 客户的连接（阻塞式）等待连接的到来 sk.connect(address) 连接到address处的套接字。一般，address的格式为元组（hostname,port）,如果连接出错，返回socket.error错误。 sk.connect_ex(address) 同上，只不过会有返回值，连接成功时返回 0 ，连接失败时候返回编码，例如：10061 sk.close() 关闭套接字 sk.recv(bufsize[,flag]) 接受套接字的数据。数据以字符串形式返回，bufsize指定最多可以接收的数量。flag提供有关消息的其他信息，通常可以忽略。 sk.recvfrom(bufsize[.flag]) 与recv()类似，但返回值是（data,address）。其中data是包含接收数据的字符串，address是发送数据的套接字地址。 sk.send(string[,flag]) 将string中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于string的字节大小。即：可能未将指定内容全部发送。 sk.sendall(string[,flag]) 将string中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回None，失败则抛出异常。 内部通过递归调用send，将所有内容发送出去。 sk.sendto(string[,flag],address) 将数据发送到套接字，address是形式为（ipaddr，port）的元组，指定远程地址。返回值是发送的字节数。该函数主要用于UDP协议。 sk.settimeout(timeout) 设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如 client 连接最多等待5s ） sk.getpeername() 返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）。 sk.getsockname() 返回套接字自己的地址。通常是一个元组(ipaddr,port) sk.fileno() 套接字的文件描述符 实例：智能机器人服务端:1234567891011121314151617181920import socketip_port = ('127.0.0.1',8888)sk = socket.socket()sk.bind(ip_port)sk.listen(5)while True: conn,address = sk.accept() conn.sendall('欢迎致电 10086，请输入1xxx,0转人工服务.') Flag = True while Flag: data = conn.recv(1024) if data == 'exit': Flag = False elif data == '0': conn.sendall('通过可能会被录音.balabala一大推') else: conn.sendall('请重新输入.') conn.close() 客户端:12345678910111213141516import socketip_port = ('127.0.0.1',8005)sk = socket.socket()sk.connect(ip_port)sk.settimeout(5)while True: data = sk.recv(1024) print 'receive:',data inp = raw_input('please input:') sk.sendall(inp) if inp == 'exit': breaksk.close() SocketServer模块 SocketServer内部使用 IO多路复用 以及 “多线程” 和 “多进程” ，从而实现并发处理多个客户端请求的Socket服务端。即：每个客户端请求连接到服务器时，Socket服务端都会在服务器是创建一个“线程”或者“进程” 专门负责处理当前客户端的所有请求。 让你的socketserver并发起来， 必须选择使用以下一个多并发的类class socketserver.ForkingTCPServerclass socketserver.ForkingUDPServerclass socketserver.ThreadingTCPServerclass socketserver.ThreadingUDPServer ThreadingTCPServer ThreadingTCPServer实现的Soket服务器内部会为每个client创建一个 “线程”，该线程用来和客户端进行交互。 ThreadingTCPServer基础使用ThreadingTCPServer: 创建一个继承自 SocketServer.BaseRequestHandler 的类 类中必须定义一个名称为 handle 的方法 启动ThreadingTCPServer ThreadingTCPServer源码剖析ThreadingTCPServer的类图关系如下： 内部调用流程为： 启动服务端程序 执行 TCPServer.init 方法，创建服务端Socket对象并绑定 IP 和 端口 执行 BaseServer.init 方法，将自定义的继承自SocketServer.BaseRequestHandler 的类 MyRequestHandle赋值给self.RequestHandlerClass 执行 BaseServer.server_forever 方法，While 循环一直监听是否有客户端请求到达 …当客户端连接到达服务器 执行 ThreadingMixIn.process_request 方法，创建一个 “线程” 用来处理请求 执行 ThreadingMixIn.process_request_thread 方法 执行 BaseServer.finish_request 方法，执行 self.RequestHandlerClass() 即：执行 自定义 MyRequestHandler 的构造方法（自动调用基类BaseRequestHandler的构造方法，在该构造方法中又会调用 MyRequestHandler的handle方法） 精简代码12345678910111213141516171819202122232425262728293031323334import socketimport threadingimport selectdef process(request, client_address): print request,client_address conn = request conn.sendall('欢迎致电 10086，请输入1xxx,0转人工服务.') flag = True while flag: data = conn.recv(1024) if data == 'exit': flag = False elif data == '0': conn.sendall('通过可能会被录音.balabala一大推') else: conn.sendall('请重新输入.')sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)sk.bind(('127.0.0.1',8002))sk.listen(5)while True: r, w, e = select.select([sk,],[],[],1) print 'looping' if sk in r: print 'get request' request, client_address = sk.accept() t = threading.Thread(target=process, args=(request, client_address)) t.daemon = False t.start()sk.close() 如精简代码可以看出，SocketServer的ThreadingTCPServer之所以可以同时处理请求得益于 select 和 Threading 两个东西，其实本质上就是在服务器端为每一个客户端创建一个线程，当前线程用来处理对应客户端的请求，所以，可以支持同时n个客户端链接（长连接）。 ForkingTCPServer ForkingTCPServer和ThreadingTCPServer的使用和执行流程基本一致，只不过在内部分别为请求者建立 “线程” 和 “进程”。 服务端:12345678910111213141516171819202122import SocketServerclass MyServer(SocketServer.BaseRequestHandler): def handle(self): # print self.request,self.client_address,self.server conn = self.request conn.sendall('欢迎致电 10086，请输入1xxx,0转人工服务.') Flag = True while Flag: data = conn.recv(1024) if data == 'exit': Flag = False elif data == '0': conn.sendall('通过可能会被录音.balabala一大推') else: conn.sendall('请重新输入.')if __name__ == '__main__': server = SocketServer.ForkingTCPServer(('127.0.0.1',8009),MyServer) server.serve_forever() 客户端1234567891011121314151617181920#!/usr/bin/env python# -*- coding:utf-8 -*-import socketip_port = ('127.0.0.1',8009)sk = socket.socket()sk.connect(ip_port)sk.settimeout(5)while True: data = sk.recv(1024) print 'receive:',data inp = raw_input('please input:') sk.sendall(inp) if inp == 'exit': breaksk.close() 以上ForkingTCPServer只是将 ThreadingTCPServer 实例中的代码：1server = SocketServer.ThreadingTCPServer(('127.0.0.1',8009),MyRequestHandler) 变更为：1server = SocketServer.ForkingTCPServer(('127.0.0.1',8009),MyRequestHandler) SocketServer的ThreadingTCPServer之所以可以同时处理请求得益于 select 和 os.fork 两个东西，其实本质上就是在服务器端为每一个客户端创建一个进程，当前新创建的进程用来处理对应客户端的请求，所以，可以支持同时n个客户端链接（长连接）。 Twisted Twisted是一个事件驱动的网络框架，其中包含了诸多功能，例如：网络协议、线程、数据库管理、网络操作、电子邮件等。 事件驱动简而言之，事件驱动分为二个部分：第一，注册事件；第二，触发事件。 自定义事件驱动框架，命名为：“弑君者”：1234567891011121314151617# event_drive.pyevent_list = []def run(): for event in event_list: obj = event() obj.execute()class BaseHandler(object): &quot;&quot;&quot; 用户必须继承该类，从而规范所有类的方法（类似于接口的功能） &quot;&quot;&quot; def execute(self): raise Exception(&apos;you must overwrite execute&apos;) 程序员使用“弑君者框架”：123456789from source import event_driveclass MyHandler(event_drive.BaseHandler): def execute(self): print 'event-drive execute MyHandler'event_drive.event_list.append(MyHandler)event_drive.run() 如上述代码，事件驱动只不过是框架规定了执行顺序，程序员在使用框架时，可以向原执行顺序中注册“事件”，从而在框架执行时可以出发已注册的“事件”。 基于事件驱动Socket12345678910111213141516from twisted.internet import protocolfrom twisted.internet import reactor class Echo(protocol.Protocol): def dataReceived(self, data): self.transport.write(data) def main(): factory = protocol.ServerFactory() factory.protocol = Echo reactor.listenTCP(8000,factory) reactor.run() if __name__ == '__main__': main() 程序执行流程： 运行服务端程序 创建Protocol的派生类Echo 创建ServerFactory对象，并将Echo类封装到其protocol字段中 执行reactor的 listenTCP 方法，内部使用 tcp.Port 创建socket server对象，并将该对象添加到了 reactor的set类型的字段 _read 中 执行reactor的 run 方法，内部执行 while 循环，并通过 select 来监视 _read 中文件描述符是否有变化，循环中… 客户端请求到达 执行reactor的 _doReadOrWrite 方法，其内部通过反射调用 tcp.Port 类的 doRead 方法，内部 accept 客户端连接并创建Server对象实例（用于封装客户端socket信息）和 创建 Echo 对象实例（用于处理请求） ，然后调用 Echo 对象实例的 makeConnection 方法，创建连接。 执行 tcp.Server 类的 doRead 方法，读取数据， 执行 tcp.Server 类的 _dataReceived 方法，如果读取数据内容为空（关闭链接），否则，出发 Echo 的 dataReceived 方法 执行 Echo 的 dataReceived 方法","categories":[{"name":"Python从入门到放弃","slug":"Python从入门到放弃","permalink":"http://dinson.win/categories/Python从入门到放弃/"}],"tags":[]},{"title":"Python从入门到放弃（7）-- 面向对象编程进阶","date":"2017-05-27T03:38:12.000Z","path":"2017/05/27/17-05-27/","text":"概述 面向对象高级语法部分 - 经典类vs新式类 - 静态方法、类方法、属性方法 - 类的特殊方法 - 反射 异常处理 经典类vs新式类把下面代码用python2 和python3都执行一下123456789101112131415161718192021class A: def __init__(self): self.n = 'A' class B(A): def __init__(self): self.n = 'B' pass class C(A): def __init__(self): self.n = 'C' class D(B,C): def __init__(self): self.n = 'D' pass obj = D() print(obj.n) 小结:经典类：深度优先新式类：广度优先super()用法 静态方法通过@staticmethod装饰器即可把其装饰的方法变为一个静态方法，什么是静态方法呢？其实不难理解，普通的方法，可以在实例化后直接调用，并且在方法里可以通过self.调用实例变量或类变量，但静态方法是不可以访问实例变量或类变量的，一个不能访问实例变量和类变量的方法，其实相当于跟类本身已经没什么关系了，它与类唯一的关联就是需要通过类名来调用这个方法1234567891011class Dog(object): def __init__(self,name): self.name = name @staticmethod #把eat方法变为静态方法 def eat(self): print(\"%s is eating\" % self.name) d = Dog(\"ChenRonghua\")d.eat() 上面的调用会出以下错误，说是eat需要一个self参数，但调用时却没有传递，没错，当eat变成静态方法后，再通过实例调用时就不会自动把实例本身当作一个参数传给self了。1TypeError: eat() missing 1 required positional argument: 'self' 想让上面的代码可以正常工作有两种办法 调用时主动传递实例本身给eat方法，即d.eat(d) 在eat方法中去掉self参数，但这也意味着，在eat中不能通过self.调用实例中的其它变量了1234567891011class Dog(object): def __init__(self,name): self.name = name @staticmethod def eat(): print(\" is eating\")d = Dog(\"ChenRonghua\")d.eat() 类方法 类方法通过@classmethod装饰器实现，类方法和普通方法的区别是， 类方法只能访问类变量，不能访问实例变量12345678910class Dog(object): def __init__(self,name): self.name = name @classmethod def eat(self): print(\"%s is eating\" % self.name) d = Dog(\"ChenRonghua\")d.eat() 执行报错如下，说Dog没有name属性，因为name是个实例变量，类方法是不能访问实例变量的1AttributeError: type object 'Dog' has no attribute 'name' 此时可以定义一个类变量，也叫name,看下执行效果123456789101112131415class Dog(object): name = \"我是类变量\" def __init__(self,name): self.name = name @classmethod def eat(self): print(\"%s is eating\" % self.name) d = Dog(\"ChenRonghua\")d.eat() #执行结果 我是类变量 is eating 属性方法 属性方法的作用就是通过@property把一个方法变成一个静态属性1234567891011class Dog(object): def __init__(self,name): self.name = name @property def eat(self): print(\" %s is eating\" %self.name) d = Dog(\"ChenRonghua\")d.eat() 调用会出以下错误， 说NoneType is not callable, 因为eat此时已经变成一个静态属性了， 不是方法了， 想调用已经不需要加()号了，直接d.eat就可以了1TypeError: 'NoneType' object is not callable 正常调用如下12345d = Dog(\"nick\")d.eat 输出nick is eating 好吧，把一个方法变成静态属性有什么卵用呢？既然想要静态变量，那直接定义成一个静态变量不就得了么？well, 以后你会需到很多场景是不能简单通过 定义 静态属性来实现的， 比如 ，你想知道一个航班当前的状态，是到达了、延迟了、取消了、还是已经飞走了， 想知道这种状态你必须经历以下几步: 连接航空公司API查询 对查询结果进行解析 返回结果给你的用户 因此这个status属性的值是一系列动作后才得到的结果，所以你每次调用时，其实它都要经过一系列的动作才返回你结果，但这些动作过程不需要用户关心， 用户只需要调用这个属性就可以，明白了么？1234567891011121314151617181920212223class Flight(object): def __init__(self,name): self.flight_name = name def checking_status(self): print(\"checking flight %s status \" % self.flight_name) return 1 @property def flight_status(self): status = self.checking_status() if status == 0 : print(\"flight got canceled...\") elif status == 1 : print(\"flight is arrived...\") elif status == 2: print(\"flight has departured already...\") else: print(\"cannot confirm the flight status...,please check later\")f = Flight(\"CA980\")f.flight_status cool , 那现在我只能查询航班状态， 既然这个flight_status已经是个属性了， 那我能否给它赋值呢？试试吧123f = Flight(\"CA980\")f.flight_statusf.flight_status = 2 输出， 说不能更改这个属性，我擦。。。。，怎么办怎么办。。。 当然可以改， 不过需要通过@proerty.setter装饰器再装饰一下，此时 你需要写一个新方法， 对这个flight_status进行更改。1234567891011121314151617181920212223242526272829303132333435363738class Flight(object): def __init__(self,name): self.flight_name = name def checking_status(self): print(\"checking flight %s status \" % self.flight_name) return 1 @property def flight_status(self): status = self.checking_status() if status == 0 : print(\"flight got canceled...\") elif status == 1 : print(\"flight is arrived...\") elif status == 2: print(\"flight has departured already...\") else: print(\"cannot confirm the flight status...,please check later\") @flight_status.setter #修改 def flight_status(self,status): status_dic = &#123; 0 : \"canceled\", 1 :\"arrived\", 2 : \"departured\" &#125; print(\"\\033[31;1mHas changed the flight status to \\033[0m\",status_dic.get(status) ) @flight_status.deleter #删除 def flight_status(self): print(\"status got removed...\")f = Flight(\"CA980\")f.flight_statusf.flight_status = 2 #触发@flight_status.setter del f.flight_status #触发@flight_status.deleter 注意以上代码里还写了一个@flight_status.deleter, 是允许可以将这个属性删除 类的特殊成员方法 doc 表示类的描述信息 12345678class Foo: \"\"\" 描述类信息，这是用于看片的神奇 \"\"\" def func(self): pass print Foo.__doc__#输出：描述类信息，这是用于看片的神奇 __module__ 表示当前操作的对象在那个模块 __class__ 表示当前操作的对象的类是什么 __init__ 构造方法，通过类创建对象时，自动触发执行。 __del__ 析构方法，当对象在内存中被释放时，自动触发执行。注：此方法一般无须定义，因为Python是一门高级语言，程序员在使用时无需关心内存的分配和释放，因为此工作都是交给Python解释器来执行，所以，析构函数的调用是由解释器在进行垃圾回收时自动触发执行的 __call__ 对象后面加括号，触发执行。注：构造方法的执行是由创建对象触发的，即：对象 = 类名() ；而对于 call 方法的执行是由对象后加括号触发的，即：对象() 或者 类()() __dict__ 查看类或对象中的所有成员 __str__ 如果一个类中定义了str方法，那么在打印 对象 时，默认输出该方法的返回值。 __getitem__、__setitem__、__delitem__ 用于索引操作，如字典。以上分别表示获取、设置、删除数据 __new__ \\ __metaclass__123456789class Foo(object): def __init__(self,name): self.name = name f = Foo(\"alex\")print type(f) # 输出：&lt;class '__main__.Foo'&gt; 表示，obj 对象由Foo类创建print type(Foo) # 输出：&lt;type 'type'&gt; 表示，Foo类对象由 type 类创建 上述代码中，obj 是通过 Foo 类实例化的对象，其实，不仅 obj 是一个对象，Foo类本身也是一个对象，因为在Python中一切事物都是对象。 如果按照一切事物都是对象的理论：obj对象是通过执行Foo类的构造方法创建，那么Foo类对象应该也是通过执行某个类的 构造方法 创建。 所以，f对象是Foo类的一个实例，Foo类对象是 type 类的一个实例，即：Foo类对象 是通过type类的构造方法创建。 那么，创建类就可以有两种方式： 普通方式 1234class Foo(object): def func(self): print 'hello dinson' 特殊方式 1234567def func(self): print 'hello dinson' Foo = type('Foo',(object,), &#123;'func': func &#125;)#type第一个参数：类名#type第二个参数：当前类的基类#type第三个参数：类的成员 加上构造方法 12345678910def func(self): print(\"hello %s\"%self.name)def __init__(self,name,age): self.name = name self.age = ageFoo = type('Foo',(object,),&#123;'func':func,'__init__':__init__&#125;)f = Foo(\"jack\",22)f.func() So记住，类是由 type 类实例化产生 那么问题来了，类默认是由 type 类实例化产生，type类中如何实现的创建类？类又是如何创建对象？ 答：类中有一个属性 metaclass，其用来表示该类由 谁 来实例化创建，所以，我们可以为 metaclass 设置一个type类的派生类，从而查看 类 创建的过程。 类的生成 调用 顺序依次是 new –&gt; init –&gt; call metaclass 详解文章：http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python 得票最高那个答案写的非常好 反射通过字符串映射或修改程序运行时的状态、属性、方法, 有以下4个方法 getattr(object, name, default=None) hasattr(object,name) setattr(x, y, v) delattr(x, y) 反射代码示例12345678910111213141516171819202122232425class Foo(object): def __init__(self): self.name = 'wupeiqi' def func(self): return 'func' obj = Foo() # #### 检查是否含有成员 ####hasattr(obj, 'name')hasattr(obj, 'func') # #### 获取成员 ####getattr(obj, 'name')getattr(obj, 'func') # #### 设置成员 ####setattr(obj, 'age', 18)setattr(obj, 'show', lambda num: num + 1) # #### 删除成员 ####delattr(obj, 'name')delattr(obj, 'func') 动态导入模块1234import importlib __import__('import_lib.metaclass') #这是解释器自己内部用的#importlib.import_module('import_lib.metaclass') #与上面这句效果一样，官方建议用这个 异常处理常用异常12345678910111213AttributeError 试图访问一个对象没有的树形，比如foo.x，但是foo没有属性xIOError 输入/输出异常；基本上是无法打开文件ImportError 无法引入模块或包；基本上是路径问题或名称错误IndentationError 语法错误（的子类） ；代码没有正确对齐IndexError 下标索引超出序列边界，比如当x只有三个元素，却试图访问x[5]KeyError 试图访问字典里不存在的键KeyboardInterrupt Ctrl+C被按下NameError 使用一个还未被赋予对象的变量SyntaxError Python代码非法，代码不能编译(个人认为这是语法错误，写错了）TypeError 传入对象类型与要求的不符合UnboundLocalError 试图访问一个还未被设置的局部变量，基本上是由于另有一个同名的全局变量，导致你以为正在访问它ValueError 传入一个调用者不期望的值，即使值的类型是正确的 更多异常123456789101112131415161718192021222324252627282930313233343536373839404142434445464748ArithmeticErrorAssertionErrorAttributeErrorBaseExceptionBufferErrorBytesWarningDeprecationWarningEnvironmentErrorEOFErrorExceptionFloatingPointErrorFutureWarningGeneratorExitImportErrorImportWarningIndentationErrorIndexErrorIOErrorKeyboardInterruptKeyErrorLookupErrorMemoryErrorNameErrorNotImplementedErrorOSErrorOverflowErrorPendingDeprecationWarningReferenceErrorRuntimeErrorRuntimeWarningStandardErrorStopIterationSyntaxErrorSyntaxWarningSystemErrorSystemExitTabErrorTypeErrorUnboundLocalErrorUnicodeDecodeErrorUnicodeEncodeErrorUnicodeErrorUnicodeTranslateErrorUnicodeWarningUserWarningValueErrorWarningZeroDivisionError 异常其他结构123456789101112try: # 主代码块 passexcept KeyError,e: # 异常时，执行该块 passelse: # 主代码块执行完，执行该块 passfinally: # 无论异常与否，最终执行该块 pass 主动触发异常1234try: raise Exception('错误了。。。')except Exception,e: print e 自定义异常123456789101112class WupeiqiException(Exception): def __init__(self, msg): self.message = msg def __str__(self): return self.message try: raise WupeiqiException('我的异常')except WupeiqiException,e: print e 断言12# assert 条件assert 1 == 1","categories":[{"name":"Python从入门到放弃","slug":"Python从入门到放弃","permalink":"http://dinson.win/categories/Python从入门到放弃/"}],"tags":[]},{"title":"Python从入门到放弃（6）-- 常用模块学习","date":"2017-05-26T06:09:51.000Z","path":"2017/05/26/17-05-26/","text":"概述 模块介绍 time &amp;datetime模块 random模块 os模块 sys模块 shutil模块 json &amp; picle模块 shelve模块 xml处理模块 yaml处理模块 configparser模块 hashlib模块 subprocess模块 logging模块 re正则表达式模块 模块介绍模块，用一砣代码实现了某个功能的代码集合。 类似于函数式编程和面向过程编程，函数式编程则完成一个功能，其他代码用来调用即可，提供了代码的重用性和代码间的耦合。而对于一个复杂的功能来，可能需要多个函数才能完成（函数又可以在不同的.py文件中），n个 .py 文件组成的代码集合就称为模块。 如：os 是系统相关的模块；file是文件操作相关的模块 模块分为三种： 自定义模块 开源模块 内置标准模块（又称标准库） 自定义模块 定义模块 情景一： 情景二： 情景三： 导入模块Python之所以应用越来越广泛，在一定程度上也依赖于其为程序员提供了大量的模块以供使用，如果想要使用模块，则需要导入。导入模块有一下几种方法：1234import modulefrom module.xx.xx import xxfrom module.xx.xx import xx as rename from module.xx.xx import * 导入模块其实就是告诉Python解释器去解释那个py文件 导入一个py文件，解释器解释该py文件 导入一个包，解释器解释该包下的 init.py 文件那么问题来了，导入模块时是根据那个路径作为基准来进行的呢？即：sys.path 12import sysprint(sys.path) 如果sys.path路径列表没有你想要的路径，可以通过 sys.path.append(‘路径’) 添加。通过os模块可以获取各种目录，例如：12345import sysimport ospre_path = os.path.abspath('../')sys.path.append(pre_path) 开源模块下载安装有两种方式：1234yum pipapt-get... 12345下载源码解压源码进入目录编译源码 python setup.py build安装源码 python setup.py install 注：在使用源码安装时，需要使用到gcc编译和python开发环境，所以，需要先执行：1234yum install gccyum install python-devel或apt-get python-dev 安装成功后，模块会自动安装到 sys.path 中的某个目录中，如：1/usr/lib/python2.7/site-packages/ 导入模块 同自定义模块中导入的方式 模块 paramikoparamiko是一个用于做远程控制的模块，使用该模块可以对远程服务器进行命令或文件操作，值得一说的是，fabric和ansible内部的远程管理就是使用的paramiko来现实 下载安装 1pip3 install paramiko 或12345678910111213141516171819# pycrypto，由于 paramiko 模块内部依赖pycrypto，所以先下载安装pycrypto # 下载安装 pycryptowget http://files.cnblogs.com/files/wupeiqi/pycrypto-2.6.1.tar.gztar -xvf pycrypto-2.6.1.tar.gzcd pycrypto-2.6.1python setup.py buildpython setup.py install # 进入python环境，导入Crypto检查是否安装成功 # 下载安装 paramikowget http://files.cnblogs.com/files/wupeiqi/paramiko-1.10.1.tar.gztar -xvf paramiko-1.10.1.tar.gzcd paramiko-1.10.1python setup.py buildpython setup.py install # 进入python环境，导入paramiko检查是否安装成功 time &amp; datetime模块1234567891011121314151617181920212223242526272829303132333435import time# print(time.clock()) #返回处理器时间,3.3开始已废弃 , 改成了time.process_time()测量处理器运算时间,不包括sleep时间,不稳定,mac上测不出来# print(time.altzone) #返回与utc时间的时间差,以秒计算\\# print(time.asctime()) #返回时间格式\"Tue May 26 15:09:27 2017\",# print(time.localtime()) #返回本地时间 的struct time对象格式# print(time.gmtime(time.time()-800000)) #返回utc时间的struc时间对象格式# print(time.asctime(time.localtime())) #返回时间格式\"Tue May 26 15:10:33 2017\",#print(time.ctime()) #返回Tue May 26 15:10:33 2017格式, 同上# 日期字符串 转成 时间戳# string_2_struct = time.strptime(\"2017/05/26\",\"%Y/%m/%d\") #将 日期字符串 转成 struct时间对象格式# print(string_2_struct)# struct_2_stamp = time.mktime(string_2_struct) #将struct时间对象转成时间戳# print(struct_2_stamp)#将时间戳转为字符串格式# print(time.gmtime(time.time()-86640)) #将utc时间戳转换成struct_time格式# print(time.strftime(\"%Y-%m-%d %H:%M:%S\",time.gmtime()) ) #将utc struct_time格式转成指定的字符串格式#时间加减import datetime# print(datetime.datetime.now()) #返回 2017-05-26 15:11:59.775367#print(datetime.date.fromtimestamp(time.time()) ) # 时间戳直接转成日期格式 2017-05-26# print(datetime.datetime.now() )# print(datetime.datetime.now() + datetime.timedelta(3)) #当前时间+3天# print(datetime.datetime.now() + datetime.timedelta(-3)) #当前时间-3天# print(datetime.datetime.now() + datetime.timedelta(hours=3)) #当前时间+3小时# print(datetime.datetime.now() + datetime.timedelta(minutes=30)) #当前时间+30分# c_time = datetime.datetime.now()# print(c_time.replace(minute=3,hour=2)) #时间替换 Directive Meaning %A Locale’s full weekday name. %b Locale’s abbreviated month name. %a Locale’s abbreviated weekday name. %B Locale’s full month name. %c Locale’s appropriate date and time representation. %d Day of the month as a decimal number [01,31]. %H Hour (24-hour clock) as a decimal number [00,23]. %I Hour (12-hour clock) as a decimal number [01,12]. %j Day of the year as a decimal number [001,366]. %m Month as a decimal number [01,12]. %M Minute as a decimal number [00,59]. %p Locale’s equivalent of either AM or PM. %S Second as a decimal number [00,61]. %U Week number of the year (Sunday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Sunday are considered to be in week 0. %w Weekday as a decimal number [0(Sunday),6]. %W Week number of the year (Monday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Monday are considered to be in week 0. %x Locale’s appropriate date representation. %X Locale’s appropriate time representation. %y Year without century as a decimal number [00,99]. %Y Year with century as a decimal number. %z Time zone offset indicating a positive or negative time difference from UTC/GMT of the form +HHMM or -HHMM, where H represents decimal hour digits and M represents decimal minute digits [-23:59, +23:59]. %Z Time zone name (no characters if no time zone exists). %% A literal ‘%’ character. random模块随机数1234mport randomprint random.random()print random.randint(1,2)print random.randrange(1,10) 生成随机验证码12345678910import randomcheckcode = ''for i in range(4): current = random.randrange(0,4) if current != i: temp = chr(random.randint(65,90)) else: temp = random.randint(0,9) checkcode += str(temp)print checkcode OS模块 提供对操作系统进行调用的接口1234567891011121314151617181920212223242526272829os.getcwd() 获取当前工作目录，即当前python脚本工作的目录路径os.chdir(\"dirname\") 改变当前脚本工作目录；相当于shell下cdos.curdir 返回当前目录: ('.')os.pardir 获取当前目录的父目录字符串名：('..')os.makedirs('dirname1/dirname2') 可生成多层递归目录os.removedirs('dirname1') 若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推os.mkdir('dirname') 生成单级目录；相当于shell中mkdir dirnameos.rmdir('dirname') 删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirnameos.listdir('dirname') 列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印os.remove() 删除一个文件os.rename(\"oldname\",\"newname\") 重命名文件/目录os.stat('path/filename') 获取文件/目录信息os.sep 输出操作系统特定的路径分隔符，win下为\"\\\\\",Linux下为\"/\"os.linesep 输出当前平台使用的行终止符，win下为\"\\t\\n\",Linux下为\"\\n\"os.pathsep 输出用于分割文件路径的字符串os.name 输出字符串指示当前使用平台。win-&gt;'nt'; Linux-&gt;'posix'os.system(\"bash command\") 运行shell命令，直接显示os.environ 获取系统环境变量os.path.abspath(path) 返回path规范化的绝对路径os.path.split(path) 将path分割成目录和文件名二元组返回os.path.dirname(path) 返回path的目录。其实就是os.path.split(path)的第一个元素os.path.basename(path) 返回path最后的文件名。如何path以／或\\结尾，那么就会返回空值。即os.path.split(path)的第二个元素os.path.exists(path) 如果path存在，返回True；如果path不存在，返回Falseos.path.isabs(path) 如果path是绝对路径，返回Trueos.path.isfile(path) 如果path是一个存在的文件，返回True。否则返回Falseos.path.isdir(path) 如果path是一个存在的目录，则返回True。否则返回Falseos.path.join(path1[, path2[, ...]]) 将多个路径组合后返回，第一个绝对路径之前的参数将被忽略os.path.getatime(path) 返回path所指向的文件或者目录的最后存取时间os.path.getmtime(path) 返回path所指向的文件或者目录的最后修改时间 shutil模块高级的 文件、文件夹、压缩包 处理模块 shutil.copyfileobj(fsrc, fdst, length)将文件内容拷贝到另一个文件中，可以shutil.copyfile(src, dst)拷贝文件shutil.copymode(src, dst)仅拷贝权限。内容、组、用户均不变shutil.copystat(src, dst)拷贝状态的信息，包括：mode bits, atime, mtime, flagsshutil.copy(src, dst)拷贝文件和权限shutil.copy2(src, dst)拷贝文件和状态信息shutil.ignore_patterns(*patterns)shutil.copytree(src, dst, symlinks=False, ignore=None)递归的去拷贝文件 例如：copytree(source, destination, ignore=ignore_patterns(‘.pyc’, ‘tmp‘))shutil.rmtree(path, ignore_errors, onerror)递归的去删除文件shutil.move(src, dst)递归的去移动文件 shutil.make_archive(base_name, format,...)创建压缩包并返回文件路径，例如：zip、tar base_name： 压缩包的文件名，也可以是压缩包的路径。只是文件名时，则保存至当前目录，否则保存至指定路径， 如：www =&gt;保存至当前路径 如：/Users/dinson/www =&gt;保存至/Users/dinson/ format： 压缩包种类，“zip”, “tar”, “bztar”，“gztar” root_dir： 要压缩的文件夹路径（默认当前目录） owner： 用户，默认当前用户 group： 组，默认当前组 logger： 用于记录日志，通常是logging.Logger对象1234567#将 /Users/dinson/Downloads/test 下的文件打包放置当前程序目录import shutilret = shutil.make_archive(\"wwwwwwwwww\", 'gztar', root_dir='/Users/dinson/Downloads/test') #将 /Users/dinson/Downloads/test 下的文件打包放置 /Users/dinson/目录import shutilret = shutil.make_archive(\"/Users/dinson/wwwwwwwwww\", 'gztar', root_dir='/Users/dinson/Downloads/test') shutil 对压缩包的处理是调用 ZipFile 和 TarFile 两个模块来进行的，详细：ZipFile:123456789101112import zipfile# 压缩z = zipfile.ZipFile('laxi.zip', 'w')z.write('a.log')z.write('data.data')z.close()# 解压z = zipfile.ZipFile('laxi.zip', 'r')z.extractall()z.close() TarFile:123456789101112import tarfile# 压缩tar = tarfile.open('your.tar','w')tar.add('/Users/wupeiqi/PycharmProjects/bbs2.zip', arcname='bbs2.zip')tar.add('/Users/wupeiqi/PycharmProjects/cmdb.zip', arcname='cmdb.zip')tar.close()# 解压tar = tarfile.open('your.tar','r')tar.extractall() # 可设置解压地址tar.close() json &amp; pickle 模块用于序列化的两个模块 json，用于字符串 和 python数据类型间进行转换 pickle，用于python特有的类型 和 python的数据类型间进行转换 Json模块提供了四个功能：dumps、dump、loads、loadpickle模块提供了四个功能：dumps、dump、loads、load shelve 模块shelve模块是一个简单的k,v将内存数据通过文件持久化的模块，可以持久化任何pickle可支持的python数据格式1234567891011121314151617import shelve d = shelve.open('shelve_test') #打开一个文件 class Test(object): def __init__(self,n): self.n = n t = Test(123) t2 = Test(123334) name = [\"alex\",\"rain\",\"test\"]d[\"test\"] = name #持久化列表d[\"t1\"] = t #持久化类d[\"t2\"] = t2 d.close() xml处理模块 xml是实现不同语言或程序之间进行数据交换的协议，跟json差不多，但json使用起来更简单，不过，古时候，在json还没诞生的黑暗年代，大家只能选择用xml呀，至今很多传统公司如金融行业的很多系统的接口还主要是xml。 xml的格式如下，就是通过&lt;&gt;节点来区别数据结构的:1234567891011121314151617181920212223&lt;?xml version=\"1.0\"?&gt;&lt;data&gt; &lt;country name=\"Liechtenstein\"&gt; &lt;rank updated=\"yes\"&gt;2&lt;/rank&gt; &lt;year&gt;2008&lt;/year&gt; &lt;gdppc&gt;141100&lt;/gdppc&gt; &lt;neighbor name=\"Austria\" direction=\"E\"/&gt; &lt;neighbor name=\"Switzerland\" direction=\"W\"/&gt; &lt;/country&gt; &lt;country name=\"Singapore\"&gt; &lt;rank updated=\"yes\"&gt;5&lt;/rank&gt; &lt;year&gt;2011&lt;/year&gt; &lt;gdppc&gt;59900&lt;/gdppc&gt; &lt;neighbor name=\"Malaysia\" direction=\"N\"/&gt; &lt;/country&gt; &lt;country name=\"Panama\"&gt; &lt;rank updated=\"yes\"&gt;69&lt;/rank&gt; &lt;year&gt;2011&lt;/year&gt; &lt;gdppc&gt;13600&lt;/gdppc&gt; &lt;neighbor name=\"Costa Rica\" direction=\"W\"/&gt; &lt;neighbor name=\"Colombia\" direction=\"E\"/&gt; &lt;/country&gt;&lt;/data&gt; xml协议在各个语言里的都 是支持的，在python中可以用以下模块操作xml 123456789101112131415import xml.etree.ElementTree as ET tree = ET.parse(\"xmltest.xml\")root = tree.getroot()print(root.tag) #遍历xml文档for child in root: print(child.tag, child.attrib) for i in child: print(i.tag,i.text) #只遍历year 节点for node in root.iter('year'): print(node.tag,node.text) 修改和删除xml文档内容1234567891011121314151617181920import xml.etree.ElementTree as ET tree = ET.parse(\"xmltest.xml\")root = tree.getroot() #修改for node in root.iter('year'): new_year = int(node.text) + 1 node.text = str(new_year) node.set(\"updated\",\"yes\") tree.write(\"xmltest.xml\") #删除nodefor country in root.findall('country'): rank = int(country.find('rank').text) if rank &gt; 50: root.remove(country) tree.write('output.xml') 自己创建xml文档12345678910111213141516import xml.etree.ElementTree as ET new_xml = ET.Element(\"namelist\")name = ET.SubElement(new_xml,\"name\",attrib=&#123;\"enrolled\":\"yes\"&#125;)age = ET.SubElement(name,\"age\",attrib=&#123;\"checked\":\"no\"&#125;)sex = ET.SubElement(name,\"sex\")sex.text = '33'name2 = ET.SubElement(new_xml,\"name\",attrib=&#123;\"enrolled\":\"no\"&#125;)age = ET.SubElement(name2,\"age\")age.text = '19' et = ET.ElementTree(new_xml) #生成文档对象et.write(\"test.xml\", encoding=\"utf-8\",xml_declaration=True) ET.dump(new_xml) #打印生成的格式 PyYAML模块Python也可以很容易的处理ymal文档格式，只不过需要安装一个模块，参考文档：http://pyyaml.org/wiki/PyYAMLDocumentation ConfigParser模块用于生成和修改常见配置文档，当前模块的名称在 python 3.x 版本中变更为 configparser。 来看一个好多软件的常见文档格式如下123456789101112[DEFAULT]ServerAliveInterval = 45Compression = yesCompressionLevel = 9ForwardX11 = yes [bitbucket.org]User = hg [topsecret.server.com]Port = 50022ForwardX11 = no 生成配置文档12345678910111213141516import configparser config = configparser.ConfigParser()config[\"DEFAULT\"] = &#123;'ServerAliveInterval': '45', 'Compression': 'yes', 'CompressionLevel': '9'&#125; config['bitbucket.org'] = &#123;&#125;config['bitbucket.org']['User'] = 'hg'config['topsecret.server.com'] = &#123;&#125;topsecret = config['topsecret.server.com']topsecret['Host Port'] = '50022' # mutates the parsertopsecret['ForwardX11'] = 'no' # same hereconfig['DEFAULT']['ForwardX11'] = 'yes'with open('example.ini', 'w') as configfile: config.write(configfile) 读取配置文档123456789101112131415161718192021222324252627282930&gt;&gt;&gt; import configparser&gt;&gt;&gt; config = configparser.ConfigParser()&gt;&gt;&gt; config.sections()[]&gt;&gt;&gt; config.read('example.ini')['example.ini']&gt;&gt;&gt; config.sections()['bitbucket.org', 'topsecret.server.com']&gt;&gt;&gt; 'bitbucket.org' in configTrue&gt;&gt;&gt; 'bytebong.com' in configFalse&gt;&gt;&gt; config['bitbucket.org']['User']'hg'&gt;&gt;&gt; config['DEFAULT']['Compression']'yes'&gt;&gt;&gt; topsecret = config['topsecret.server.com']&gt;&gt;&gt; topsecret['ForwardX11']'no'&gt;&gt;&gt; topsecret['Port']'50022'&gt;&gt;&gt; for key in config['bitbucket.org']: print(key)...usercompressionlevelserveraliveintervalcompressionforwardx11&gt;&gt;&gt; config['bitbucket.org']['ForwardX11']'yes' configparser增删改查语法1234567891011121314151617181920212223242526272829303132333435363738[section1]k1 = v1k2:v2 [section2]k1 = v1 import ConfigParser config = ConfigParser.ConfigParser()config.read('i.cfg') # ########## 读 ###########secs = config.sections()#print secs#options = config.options('group2')#print options #item_list = config.items('group2')#print item_list #val = config.get('group1','key')#val = config.getint('group1','key') # ########## 改写 ###########sec = config.remove_section('group1')#config.write(open('i.cfg', \"w\")) #sec = config.has_section('wupeiqi')#sec = config.add_section('wupeiqi')#config.write(open('i.cfg', \"w\")) #config.set('group2','k1',11111)#config.write(open('i.cfg', \"w\")) #config.remove_option('group2','age')#config.write(open('i.cfg', \"w\")) hashlib模块 用于加密相关的操作，3.x里代替了md5模块和sha模块，主要提供 SHA1, SHA224, SHA256, SHA384, SHA512 ，MD5 算法 1234567891011121314151617181920212223242526272829303132333435363738394041import hashlib m = hashlib.md5()m.update(b\"Hello\")m.update(b\"It's me\")print(m.digest())m.update(b\"It's been a long time since last time we ...\") print(m.digest()) #2进制格式hashprint(len(m.hexdigest())) #16进制格式hash# ######## md5 ######## hash = hashlib.md5()hash.update('admin')print(hash.hexdigest()) # ######## sha1 ######## hash = hashlib.sha1()hash.update('admin')print(hash.hexdigest()) # ######## sha256 ######## hash = hashlib.sha256()hash.update('admin')print(hash.hexdigest()) # ######## sha384 ######## hash = hashlib.sha384()hash.update('admin')print(hash.hexdigest()) # ######## sha512 ######## hash = hashlib.sha512()hash.update('admin')print(hash.hexdigest()) 还不够吊？python 还有一个 hmac 模块，它内部对我们创建 key 和 内容 再进行处理然后再加密 散列消息鉴别码，简称HMAC，是一种基于消息鉴别码MAC（Message Authentication Code）的鉴别机制。使用HMAC时,消息通讯的双方，通过验证消息中加入的鉴别密钥K来鉴别消息的真伪； 一般用于网络通信中消息加密，前提是双方先要约定好key,就像接头暗号一样，然后消息发送把用key把消息加密，接收方用key ＋ 消息明文再加密，拿加密后的值 跟 发送者的相对比是否相等，这样就能验证消息的真实性，及发送者的合法性了。123import hmach = hmac.new(b'天王盖地虎', b'宝塔镇河妖')print h.hexdigest() 更多关于md5,sha1,sha256等介绍的文章看这里https://www.tbs-certificates.co.uk/FAQ/en/sha256.html Subprocess模块常用subprocess方法示例12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#执行命令，返回命令执行状态 ， 0 or 非0&gt;&gt;&gt; retcode = subprocess.call([\"ls\", \"-l\"])#执行命令，如果命令结果为0，就正常返回，否则抛异常&gt;&gt;&gt; subprocess.check_call([\"ls\", \"-l\"])0#接收字符串格式命令，返回元组形式，第1个元素是执行状态，第2个是命令结果 &gt;&gt;&gt; subprocess.getstatusoutput('ls /bin/ls')(0, '/bin/ls')#接收字符串格式命令，并返回结果&gt;&gt;&gt; subprocess.getoutput('ls /bin/ls')'/bin/ls'#执行命令，并返回结果，注意是返回结果，不是打印，下例结果返回给res&gt;&gt;&gt; res=subprocess.check_output(['ls','-l'])&gt;&gt;&gt; resb'total 0\\ndrwxr-xr-x 12 alex staff 408 Nov 2 11:05 OldBoyCRM\\n'#上面那些方法，底层都是封装的subprocess.Popenpoll()Check if child process has terminated. Returns returncodewait()Wait for child process to terminate. Returns returncode attribute.terminate() 杀掉所启动进程communicate() 等待任务结束stdin 标准输入stdout 标准输出stderr 标准错误pidThe process ID of the child process.#例子&gt;&gt;&gt; p = subprocess.Popen(\"df -h|grep disk\",stdin=subprocess.PIPE,stdout=subprocess.PIPE,shell=True)&gt;&gt;&gt; p.stdout.read()b'/dev/disk1 465Gi 64Gi 400Gi 14% 16901472 104938142 14% /\\n&gt;&gt;&gt; subprocess.run([\"ls\", \"-l\"]) # doesn't capture outputCompletedProcess(args=['ls', '-l'], returncode=0) &gt;&gt;&gt; subprocess.run(\"exit 1\", shell=True, check=True)Traceback (most recent call last): ...subprocess.CalledProcessError: Command 'exit 1' returned non-zero exit status 1 &gt;&gt;&gt; subprocess.run([\"ls\", \"-l\", \"/dev/null\"], stdout=subprocess.PIPE)CompletedProcess(args=['ls', '-l', '/dev/null'], returncode=0,stdout=b'crw-rw-rw- 1 root root 1, 3 Jan 23 16:23 /dev/null\\n')' 调用subprocess.run(…)是推荐的常用方法，在大多数情况下能满足需求，但如果你可能需要进行一些复杂的与系统的交互的话，你还可以用subprocess.Popen(),语法如下：12p = subprocess.Popen(\"find / -size +1000000 -exec ls -shl &#123;&#125; \\;\",shell=True,stdout=subprocess.PIPE)print(p.stdout.read()) 可用参数： args：shell命令，可以是字符串或者序列类型（如：list，元组） bufsize：指定缓冲。0 无缓冲,1 行缓冲,其他 缓冲区大小,负值 系统缓冲 stdin, stdout, stderr：分别表示程序的标准输入、输出、错误句柄 preexec_fn：只在Unix平台下有效，用于指定一个可执行对象（callable object），它将在子进程运行之前被调用 close_sfs：在windows平台下，如果close_fds被设置为True，则新创建的子进程将不会继承父进程的输入、输出、错误管道。所以不能将close_fds设置为True同时重定向子进程的标准输入、输出与错误(stdin, stdout, stderr)。 shell：同上 cwd：用于设置子进程的当前目录 env：用于指定子进程的环境变量。如果env = None，子进程的环境变量将从父进程中继承。 universal_newlines：不同系统的换行符不同，True -&gt; 同意使用 \\n startupinfo与createionflags只在windows下有效将被传递给底层的CreateProcess()函数，用于设置子进程的一些属性，如：主窗口的外观，进程的优先级等等 终端输入的命令分为两种： 输入即可得到输出，如：ifconfig 输入进行某环境，依赖再输入，如：python 需要交互的命令示例 12345678910import subprocess obj = subprocess.Popen([\"python\"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)obj.stdin.write('print 1 \\n ')obj.stdin.write('print 2 \\n ')obj.stdin.write('print 3 \\n ')obj.stdin.write('print 4 \\n ') out_error_list = obj.communicate(timeout=10)print out_error_list subprocess实现sudo 自动输入密码123456789101112131415161718import subprocess def mypass(): mypass = '123' #or get the password from anywhere return mypass echo = subprocess.Popen(['echo',mypass()], stdout=subprocess.PIPE, ) sudo = subprocess.Popen(['sudo','-S','iptables','-L'], stdin=echo.stdout, stdout=subprocess.PIPE, ) end_of_pipe = sudo.stdout print \"Password ok \\n Iptables Chains %s\" % end_of_pipe.read() logging模块 很多程序都有记录日志的需求，并且日志中包含的信息即有正常的程序访问日志，还可能有错误、警告等信息输出，python的logging模块提供了标准的日志接口，你可以通过它存储各种格式的日志，logging的日志可以分为 debug(), info(), warning(), error() and critical() 5个级别，下面我们看一下怎么用。 最简单用法12345678import logging logging.warning(\"user [alex] attempted wrong password more than 3 times\")logging.critical(\"server is down\") #输出WARNING:root:user [alex] attempted wrong password more than 3 timesCRITICAL:root:server is down 看一下这几个日志级别分别代表什么意思 Level When it’s used DEBUG Detailed information, typically of interest only when diagnosing problems. INFO Confirmation that things are working as expected. WARNING An indication that something unexpected happened, or indicative of some problem in the near future (e.g. ‘disk space low’). The software is still working as expected. ERROR Due to a more serious problem, the software has not been able to perform some function. CRITICAL A serious error, indicating that the program itself may be unable to continue running. 如果想把日志写到文件里，也很简单123456import logging logging.basicConfig(filename='example.log',level=logging.INFO)logging.debug('This message should go to the log file')logging.info('So should this')logging.warning('And this, too') 其中下面这句中的level=loggin.INFO意思是，把日志纪录级别设置为INFO，也就是说，只有比日志是INFO或比INFO级别更高的日志才会被纪录到文件里，在这个例子， 第一条日志是不会被纪录的，如果希望纪录debug的日志，那把日志级别改成DEBUG就行了。1logging.basicConfig(filename='example.log',level=logging.INFO) 感觉上面的日志格式忘记加上时间啦，日志不知道时间怎么行呢，下面就来加上!123456import logginglogging.basicConfig(format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')logging.warning('is when this event was logged.') #输出12/12/2010 11:46:36 AM is when this event was logged. 日志格式 %(name)s Logger的名字 %(levelno)s 数字形式的日志级别 %(levelname)s 文本形式的日志级别 %(pathname)s 调用日志输出函数的模块的完整路径名，可能没有 %(filename)s 调用日志输出函数的模块的文件名 %(module)s 调用日志输出函数的模块名 %(funcName)s 调用日志输出函数的函数名 %(lineno)d 调用日志输出函数的语句所在的代码行 %(created)f 当前时间，用UNIX标准的表示时间的浮 点数表示 %(relativeCreated)d 输出日志信息时的，自Logger创建以 来的毫秒数 %(asctime)s 字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒 %(thread)d 线程ID。可能没有 %(threadName)s 线程名。可能没有 %(process)d 进程ID。可能没有 %(message)s 用户输出的消息 如果想同时把log打印在屏幕和文件日志里，就需要了解一点复杂的知识 了 Python 使用logging模块记录日志涉及四个主要类，使用官方文档中的概括最为合适：logger提供了应用程序可以直接使用的接口；handler将(logger创建的)日志记录发送到合适的目的输出；filter提供了细度设备来决定输出哪条日志记录；formatter决定日志记录的最终输出格式。logger每个程序在输出信息之前都要获得一个Logger。Logger通常对应了程序的模块名，比如聊天工具的图形界面模块可以这样获得它的Logger：LOG=logging.getLogger(”chat.gui”)而核心模块可以这样：LOG=logging.getLogger(”chat.kernel”) Logger.setLevel(lel):指定最低的日志级别，低于lel的级别将被忽略。debug是最低的内置级别，critical为最高Logger.addFilter(filt)、Logger.removeFilter(filt):添加或删除指定的filterLogger.addHandler(hdlr)、Logger.removeHandler(hdlr)：增加或删除指定的handlerLogger.debug()、Logger.info()、Logger.warning()、Logger.error()、Logger.critical()：可以设置的日志级别 handlerhandler对象负责发送相关的信息到指定目的地。Python的日志系统有多种Handler可以使用。有些Handler可以把信息输出到控制台，有些Logger可以把信息输出到文件，还有些 Handler可以把信息发送到网络上。如果觉得不够用，还可以编写自己的Handler。可以通过addHandler()方法添加多个多handlerHandler.setLevel(lel):指定被处理的信息级别，低于lel级别的信息将被忽略Handler.setFormatter()：给这个handler选择一个格式Handler.addFilter(filt)、Handler.removeFilter(filt)：新增或删除一个filter对象 每个Logger可以附加多个Handler。接下来我们就来介绍一些常用的Handler：1) logging.StreamHandler使用这个Handler可以向类似与sys.stdout或者sys.stderr的任何文件对象(file object)输出信息。它的构造函数是：StreamHandler([strm])其中strm参数是一个文件对象。默认是sys.stderr 2) logging.FileHandler和StreamHandler类似，用于向一个文件输出日志信息。不过FileHandler会帮你打开这个文件。它的构造函数是：FileHandler(filename[,mode])filename是文件名，必须指定一个文件名。mode是文件的打开方式。参见Python内置函数open()的用法。默认是’a’，即添加到文件末尾。 3) logging.handlers.RotatingFileHandler这个Handler类似于上面的FileHandler，但是它可以管理文件大小。当文件达到一定大小之后，它会自动将当前日志文件改名，然后创建 一个新的同名日志文件继续输出。比如日志文件是chat.log。当chat.log达到指定的大小之后，RotatingFileHandler自动把 文件改名为chat.log.1。不过，如果chat.log.1已经存在，会先把chat.log.1重命名为chat.log.2。。。最后重新创建 chat.log，继续输出日志信息。它的构造函数是：RotatingFileHandler( filename[, mode[, maxBytes[, backupCount]]])其中filename和mode两个参数和FileHandler一样。maxBytes用于指定日志文件的最大文件大小。如果maxBytes为0，意味着日志文件可以无限大，这时上面描述的重命名过程就不会发生。backupCount用于指定保留的备份文件的个数。比如，如果指定为2，当上面描述的重命名过程发生时，原有的chat.log.2并不会被更名，而是被删除。 4) logging.handlers.TimedRotatingFileHandler这个Handler和RotatingFileHandler类似，不过，它没有通过判断文件大小来决定何时重新创建日志文件，而是间隔一定时间就 自动创建新的日志文件。重命名的过程与RotatingFileHandler类似，不过新的文件不是附加数字，而是当前时间。它的构造函数是：TimedRotatingFileHandler( filename [,when [,interval [,backupCount]]])其中filename参数和backupCount参数和RotatingFileHandler具有相同的意义。interval是时间间隔。when参数是一个字符串。表示时间间隔的单位，不区分大小写。它有以下取值：S 秒M 分H 小时D 天W 每星期（interval==0时代表星期一）midnight 每天凌晨 示例123456789101112131415161718192021222324252627282930import logging #create loggerlogger = logging.getLogger('TEST-LOG')logger.setLevel(logging.DEBUG) # create console handler and set level to debugch = logging.StreamHandler()ch.setLevel(logging.DEBUG) # create file handler and set level to warningfh = logging.FileHandler(\"access.log\")fh.setLevel(logging.WARNING)# create formatterformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s') # add formatter to ch and fhch.setFormatter(formatter)fh.setFormatter(formatter) # add ch and fh to loggerlogger.addHandler(ch)logger.addHandler(fh) # 'application' codelogger.debug('debug message')logger.info('info message')logger.warn('warn message')logger.error('error message')logger.critical('critical message') 文件自动截断例子1234567891011121314151617181920import loggingfrom logging import handlerslogger = logging.getLogger(__name__)log_file = \"timelog.log\"#fh = handlers.RotatingFileHandler(filename=log_file,maxBytes=10,backupCount=3)fh = handlers.TimedRotatingFileHandler(filename=log_file,when=\"S\",interval=5,backupCount=3)formatter = logging.Formatter('%(asctime)s %(module)s:%(lineno)d %(message)s')fh.setFormatter(formatter)logger.addHandler(fh)logger.warning(\"test1\")logger.warning(\"test12\")logger.warning(\"test13\")logger.warning(\"test14\") re模块1234567891011121314151617181920'.' 默认匹配除\\n之外的任意一个字符，若指定flag DOTALL,则匹配任意字符，包括换行'^' 匹配字符开头，若指定flags MULTILINE,这种也可以匹配上(r\"^a\",\"\\nabc\\neee\",flags=re.MULTILINE)'$' 匹配字符结尾，或e.search(\"foo$\",\"bfoo\\nsdfsf\",flags=re.MULTILINE).group()也可以'*' 匹配*号前的字符0次或多次，re.findall(\"ab*\",\"cabb3abcbbac\") 结果为['abb', 'ab', 'a']'+' 匹配前一个字符1次或多次，re.findall(\"ab+\",\"ab+cd+abb+bba\") 结果['ab', 'abb']'?' 匹配前一个字符1次或0次'&#123;m&#125;' 匹配前一个字符m次'&#123;n,m&#125;' 匹配前一个字符n到m次，re.findall(\"ab&#123;1,3&#125;\",\"abb abc abbcbbb\") 结果'abb', 'ab', 'abb']'|' 匹配|左或|右的字符，re.search(\"abc|ABC\",\"ABCBabcCD\").group() 结果'ABC''(...)' 分组匹配，re.search(\"(abc)&#123;2&#125;a(123|456)c\", \"abcabca456c\").group() 结果 abcabca456c '\\A' 只从字符开头匹配，re.search(\"\\Aabc\",\"alexabc\") 是匹配不到的'\\Z' 匹配字符结尾，同$'\\d' 匹配数字0-9'\\D' 匹配非数字'\\w' 匹配[A-Za-z0-9]'\\W' 匹配非[A-Za-z0-9]'s' 匹配空白字符、\\t、\\n、\\r , re.search(\"\\s+\",\"ab\\tc1\\n3\").group() 结果 '\\t''(?P&lt;name&gt;...)' 分组匹配 re.search(“(?P[0-9]{4})(?P[0-9]{2})(?P[0-9]{4})”,”371481199306143242”).groupdict(“city”) 结果{‘province’: ‘3714’, ‘city’: ‘81’, ‘birthday’: ‘1993’} 最常用的匹配语法12345re.match 从头开始匹配re.search 匹配包含re.findall 把所有匹配到的字符放到以列表中的元素返回re.splitall 以匹配到的字符当做列表分隔符re.sub 匹配字符并替换 反斜杠的困扰与大多数编程语言相同，正则表达式里使用”\\”作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符”\\”，那么使用编程语言表示的正则表达式里将需要4个反斜杠”\\\\“：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。Python里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用r”\\“表示。同样，匹配一个数字的”\\d”可以写成r”\\d”。有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。 仅需轻轻知道的几个匹配模式123re.I(re.IGNORECASE): 忽略大小写（括号内是完整写法，下同）re.M(MULTILINE): 多行模式，改变'^'和'$'的行为（参见上图）re.S(DOTALL): 点任意匹配模式，改变'.'的行为","categories":[{"name":"Python从入门到放弃","slug":"Python从入门到放弃","permalink":"http://dinson.win/categories/Python从入门到放弃/"}],"tags":[]},{"title":"Python从入门到放弃（5）-- Python基础5","date":"2017-05-25T07:30:08.000Z","path":"2017/05/25/17-05-25/","text":"概述 生成器 迭代器 装饰器 软件目录结构规范 生成器列表生成式现在有个需求，看列表[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],我要求你把列表里的每个值加1，你怎么实现？你可能会想到3种方式123456a = [1,3,4,6,7,7,8,9,11]for index,i in enumerate(a): a[index] +=1原值修改 123&gt;&gt;&gt; a[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&gt;&gt;&gt; a = map(lambda x:x+1, a) 123&gt;&gt;&gt; a = [i+1 for i in range(10)]&gt;&gt;&gt; a[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 这就叫做列表生成 生成器通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。 所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。 要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator： 123456&gt;&gt;&gt; L = [x * x for x in range(10)]&gt;&gt;&gt; L[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]&gt;&gt;&gt; g = (x * x for x in range(10))&gt;&gt;&gt; g&lt;generator object &lt;genexpr&gt; at 0x1022ef630&gt; 创建L和g的区别仅在于最外层的[]和()，L是一个list，而g是一个generator。我们可以直接打印出list的每一个元素，但我们怎么打印出generator的每一个元素呢？如果要一个一个打印出来，可以通过next()函数获得generator的下一个返回值： 123456789101112131415161718192021222324&gt;&gt;&gt; next(g)0&gt;&gt;&gt; next(g)1&gt;&gt;&gt; next(g)4&gt;&gt;&gt; next(g)9&gt;&gt;&gt; next(g)16&gt;&gt;&gt; next(g)25&gt;&gt;&gt; next(g)36&gt;&gt;&gt; next(g)49&gt;&gt;&gt; next(g)64&gt;&gt;&gt; next(g)81&gt;&gt;&gt; next(g)Traceback (most recent call last): File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;StopIteration 我们讲过，generator保存的是算法，每次调用next(g)，就计算出g的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出StopIteration的错误。 当然，上面这种不断调用next(g)实在是太变态了，正确的方法是使用for循环，因为generator也是可迭代对象： 1234567891011121314&gt;&gt;&gt; g = (x * x for x in range(10))&gt;&gt;&gt; for n in g:... print(n)...0149162536496481 所以，我们创建了一个generator后，基本上永远不会调用next()，而是通过for循环来迭代它，并且不需要关心StopIteration的错误。 generator非常强大。如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的时候，还可以用函数来实现。 比如，著名的斐波拉契数列（Fibonacci），除第一个和第二个数外，任意一个数都可由前两个数相加得到： 1, 1, 2, 3, 5, 8, 13, 21, 34, … 斐波拉契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易：1234567def fib(max): n, a, b = 0, 0, 1 while n &lt; max: print(b) a, b = b, a + b n = n + 1 return 'done' 注意，赋值语句：1a, b = b, a + b 相当于：123t = (b, a + b) # t是一个tuplea = t[0]b = t[1] 但不必显式写出临时变量t就可以赋值。 上面的函数可以输出斐波那契数列的前N个数：123456789101112&gt;&gt;&gt; fib(10)11235813213455done 仔细观察，可以看出，fib函数实际上是定义了斐波拉契数列的推算规则，可以从第一个元素开始，推算出后续任意的元素，这种逻辑其实非常类似generator。 也就是说，上面的函数和generator仅一步之遥。要把fib函数变成generator，只需要把print(b)改为yield b就可以了： 1234567891011def fib(max): n,a,b = 0,0,1 while n &lt; max: #print(b) yield b a,b = b,a+b n += 1 return 'done' 这就是定义generator的另一种方法。如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator： 123&gt;&gt;&gt; f = fib(6)&gt;&gt;&gt; f&lt;generator object fib at 0x104feaaa0&gt; 这里，最难理解的就是generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。12345678910111213141516171819202122data = fib(10)print(data)print(data.__next__())print(data.__next__())print(\"干点别的事\")print(data.__next__())print(data.__next__())print(data.__next__())print(data.__next__())print(data.__next__())#输出&lt;generator object fib at 0x101be02b0&gt;11干点别的事235813 在上面fib的例子，我们在循环过程中不断调用yield，就会不断中断。当然要给循环设置一个条件来退出循环，不然就会产生一个无限数列出来。 同样的，把函数改成generator后，我们基本上从来不会用next()来获取下一个返回值，而是直接使用for循环来迭代：123456789&gt;&gt;&gt; for n in fib(6):... print(n)...112358 但是用for循环调用generator时，发现拿不到generator的return语句的返回值。如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中：12345678910111213141516&gt;&gt;&gt; g = fib(6)&gt;&gt;&gt; while True:... try:... x = next(g)... print('g:', x)... except StopIteration as e:... print('Generator return value:', e.value)... break...g: 1g: 1g: 2g: 3g: 5g: 8Generator return value: done 关于如何捕获错误，后面的错误处理还会详细讲解。 还可通过yield实现在单线程的情况下实现并发运算的效果1234567891011121314151617181920212223import timedef consumer(name): print(\"%s 准备吃包子啦!\" %name) while True: baozi = yield print(\"包子[%s]来了,被[%s]吃了!\" %(baozi,name))def producer(name): c = consumer('A') c2 = consumer('B') c.__next__() c2.__next__() print(\"老子开始准备做包子啦!\") for i in range(10): time.sleep(1) print(\"做了2个包子!\") c.send(i) c2.send(i)producer(\"alex\")通过生成器实现协程并行运算 迭代器我们已经知道，可以直接作用于for循环的数据类型有以下几种： 一类是集合数据类型，如list、tuple、dict、set、str等； 一类是generator，包括生成器和带yield的generator function。 这些可以直接作用于for循环的对象统称为可迭代对象：Iterable。可以使用isinstance()判断一个对象是否是Iterable对象：1234567891011&gt;&gt;&gt; from collections import Iterable&gt;&gt;&gt; isinstance([], Iterable)True&gt;&gt;&gt; isinstance(&#123;&#125;, Iterable)True&gt;&gt;&gt; isinstance('abc', Iterable)True&gt;&gt;&gt; isinstance((x for x in range(10)), Iterable)True&gt;&gt;&gt; isinstance(100, Iterable)False 而生成器不但可以作用于for循环，还可以被next()函数不断调用并返回下一个值，直到最后抛出StopIteration错误表示无法继续返回下一个值了。 可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。 可以使用isinstance()判断一个对象是否是Iterator对象：123456789&gt;&gt;&gt; from collections import Iterator&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)True&gt;&gt;&gt; isinstance([], Iterator)False&gt;&gt;&gt; isinstance(&#123;&#125;, Iterator)False&gt;&gt;&gt; isinstance('abc', Iterator)False 生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。 把list、dict、str等Iterable变成Iterator可以使用iter()函数：1234&gt;&gt;&gt; isinstance(iter([]), Iterator)True&gt;&gt;&gt; isinstance(iter('abc'), Iterator)True 你可能会问，为什么list、dict、str等数据类型不是Iterator？ 这是因为Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。 Iterator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。 小结 凡是可作用于for循环的对象都是Iterable类型； 凡是可作用于next()函数的对象都是Iterator类型，它们表示一个惰性计算的序列； 集合数据类型如list、dict、str等是Iterable但不是Iterator，不过可以通过iter()函数获得一个Iterator对象。 Python的for循环本质上就是通过不断调用next()函数实现的，例如：12for x in [1, 2, 3, 4, 5]: pass 实际上完全等价于：12345678910# 首先获得Iterator对象:it = iter([1, 2, 3, 4, 5])# 循环:while True: try: # 获得下一个值: x = next(it) except StopIteration: # 遇到StopIteration就退出循环 break 装饰器定义：本质是函数，（装饰其他函数）几十为了其他函数添加附加功能原则： 不能修改被装饰的函数的源代码 不能修改被装饰的函数的调用方式 场景你是一家视频网站的后端开发工程师，你们网站有以下几个版块1234567891011def home(): print(\"---首页----\") def america(): print(\"----欧美专区----\") def japan(): print(\"----日韩专区----\") def asia(): print(\"----亚洲专区----\") 视频刚上线初期，为了吸引用户，你们采取了免费政策，所有视频免费观看，迅速吸引了一大批用户，免费一段时间后，每天巨大的带宽费用公司承受不了了，所以准备对比较受欢迎的几个版块收费，其中包括“欧美” 和 “亚洲”专区，你拿到这个需求后，想了想，想收费得先让其进行用户认证，认证通过后，再判定这个用户是否是VIP付费会员就可以了，是VIP就让看，不是VIP就不让看就行了呗。 你觉得这个需求很是简单，因为要对多个版块进行认证，那应该把认证功能提取出来单独写个模块，然后每个版块里调用 就可以了，与是你轻轻的就实现了下面的功能 。1234567891011121314151617181920212223242526272829303132333435363738user_status = False #用户登录了就把这个改成True def login(): _username = \"dinson\" #假装这是DB里存的用户信息 _password = \"abc!23\" #假装这是DB里存的用户信息 global user_status if user_status == False: username = input(\"user:\") password = input(\"pasword:\") if username == _username and password == _password: print(\"welcome login....\") user_status = True else: print(\"wrong username or password!\") else: print(\"用户已登录，验证通过...\") def home(): print(\"---首页----\") def america(): login() #执行前加上验证 print(\"----欧美专区----\") def japan(): print(\"----日韩专区----\") def asia(): login() #执行前加上验证 print(\"----亚洲专区----\") home()america()asia() 此时你信心满满的把这个代码提交给你的TEAM LEADER审核，没成想，没过5分钟，代码就被打回来了， TEAM LEADER给你反馈是，我现在有很多模块需要加认证模块，你的代码虽然实现了功能，但是需要更改需要加认证的各个模块的代码，这直接违反了软件开发中的一个原则“开放-封闭”原则，简单来说，它规定已经实现的功能代码不允许被修改，但可以被扩展，即： 封闭：已实现的功能代码块 开放：对扩展开发 这个原则你还是第一次听说，我擦，再次感受了自己这个野生程序员与正规军的差距，BUT ANYWAY,老大要求的这个怎么实现呢？如何在不改原有功能代码的情况下加上认证功能呢？你一时想不出思路，只好带着这个问题回家继续憋，媳妇不在家，去隔壁老王家串门了，你正好落的清静，一不小心就想到了解决方案，不改源代码可以呀，高阶函数，就是把一个函数当做一个参数传给另外一个函数，我只需要写个认证方法，每次调用 需要验证的功能 时，直接 把这个功能 的函数名当做一个参数 传给 我的验证模块不就行了么，123456789101112131415161718192021222324252627282930313233343536373839user_status = False #用户登录了就把这个改成True def login(func): #把要执行的模块从这里传进来 _username = \"dinson\" #假装这是DB里存的用户信息 _password = \"abc!23\" #假装这是DB里存的用户信息 global user_status if user_status == False: username = input(\"user:\") password = input(\"pasword:\") if username == _username and password == _password: print(\"welcome login....\") user_status = True else: print(\"wrong username or password!\") if user_status == True: func() # 看这里看这里，只要验证通过了，就调用相应功能 def home(): print(\"---首页----\") def america(): #login() #执行前加上验证 print(\"----欧美专区----\") def japan(): print(\"----日韩专区----\") def asia(): #login() #执行前加上验证 print(\"----亚洲专区----\") home()login(america) #需要验证就调用 login，把需要验证的功能 当做一个参数传给login# home()# america()login(asia) 你很开心，终于实现了老板的要求，不改变原功能代码的前提下，给功能加上了验证，此时，媳妇回来了，后面还跟着老王，你两家关系 非常 好，老王经常来串门，老王也是码农，你跟他分享了你写的代码，兴奋的等他看完 夸奖你NB,没成想，老王看后，并没有夸你，抱起你的儿子，笑笑说，你这个代码还是改改吧， 要不然会被开除的，WHAT? 会开除，明明实现了功能 呀， 老王讲，没错，你功能 是实现了，但是你又犯了一个大忌，什么大忌？ 你改变了调用方式呀， 想一想，现在没每个需要认证的模块，都必须调用你的login()方法，并把自己的函数名传给你，人家之前可不是这么调用 的， 试想，如果 有100个模块需要认证，那这100个模块都得更改调用方式，这么多模块肯定不止是一个人写的，让每个人再去修改调用方式 才能加上认证，你会被骂死的。。。。 你觉得老王说的对，但问题是，如何即不改变原功能代码，又不改变原有调用方式，还能加上认证呢？ 你苦思了一会，还是想不出，老王在逗你的儿子玩，你说，老王呀，快给我点思路 ，实在想不出来，老王背对着你问， 老王：学过匿名函数没有？你：学过学过，就是lambda嘛老王：那lambda与正常函数的区别是什么？你：最直接的区别是，正常函数定义时需要写名字，但lambda不需要老王：没错，那lambda定好后，为了多次调用 ，可否也给它命个名？你：可以呀，可以写成plus = lambda x:x+1类似这样，以后再调用plus就可以了，但这样不就失去了lambda的意义了，明明人家叫匿名函数呀，你起了名字有什么用呢？老王：我不是要跟你讨论它的意义 ，我想通过这个让你明白一个事实说着，老王拿起你儿子的画板，在上面写了以下代码：123def plus(n): return n+1plus2 = lambda x:x+1 老王： 上面这两种写法是不是代表 同样的意思？你：是的老王：我给lambda x:x+1 起了个名字叫plus2，是不是相当于def plus2(x) ?你：我擦，你别说，还真是，但老王呀，你想说明什么呢？老王： 没啥，只想告诉你，给函数赋值变量名就像def func_name 是一样的效果，如下面的plus(n)函数，你调用时可以用plus名，还可以再起个其它名字，如123calc = plus calc(n) 你明白我想传达什么意思了么？你：。。。。。。。。。。。这。。。。。。嗯 。。。。。不太。。。。明白 。。老王：。。。。这。。。。。呵呵。。。。。。好吧。。。。，那我在给你点一下，你之前写的下面这段调用 认证的代码12345home()login(america) #需要验证就调用 login，把需要验证的功能 当做一个参数传给login# home()# america()login(asia) 你之所改变了调用方式，是因为用户每次调用时需要执行login(asia)，类似的。其实稍一改就可以了呀123home()america = login(america)asia = login(asia) 这样你，其它人调用asia时，其实相当于调用了login(asia), 通过login里的验证后，就会自动调用asia功能。 你：我擦，还真是唉。。。，老王，还是你nb。。。不过，等等， 我这样写了好，那用户调用时，应该是下面这个样子123456home()america = login(america) #你在这里相当于把america这个函数替换了asia = login(asia) #那用户调用时依然写america() 但问题在于，还不等用户调用 ，你的america = login(america)就会先自己把america执行了呀。。。。，你应该等我用户调用 的时候 再执行才对呀，不信我试给你看。。。 老王：哈哈，你说的没错，这样搞会出现这个问题？ 但你想想有没有解决办法 呢？你：我擦，你指的思路呀，大哥。。。我哪知道 下一步怎么走。。。老王：算了，估计你也想不出来。。。 学过嵌套函数没有？你：yes,然后呢？老王：想实现一开始你写的america = login(america)不触发你函数的执行，只需要在这个login里面再定义一层函数，第一次调用america = login(america)只调用到外层login，这个login虽然会执行，但不会触发认证了，因为认证的所有代码被封装在login里层的新定义 的函数里了，login只返回 里层函数的函数名，这样下次再执行america()时， 就会调用里层函数啦。。。你：。。。。。。什么？ 什么个意思，我蒙逼了。。。c老王：还是给你看代码吧。。 123456789101112131415161718192021def login(func): #把要执行的模块从这里传进来 def inner():#再定义一层函数 _username = \"alex\" #假装这是DB里存的用户信息 _password = \"abc!23\" #假装这是DB里存的用户信息 global user_status if user_status == False: username = input(\"user:\") password = input(\"pasword:\") if username == _username and password == _password: print(\"welcome login....\") user_status = True else: print(\"wrong username or password!\") if user_status == True: func() # 看这里看这里，只要验证通过了，就调用相应功能 return inner #用户调用login时，只会返回inner的内存地址，下次再调用时加上()才会执行inner函数 此时你仔细着了老王写的代码 ，感觉老王真不是一般人呀，连这种奇淫巧技都能想出来。。。，心中默默感谢上天赐你一个大牛邻居。你: 老王呀，你这个姿势很nb呀，你独创的？此时你媳妇噗嗤的笑出声来，你也不知道 她笑个球。。。老王：呵呵， 这不是我独创的呀当然 ，这是开发中一个常用的玩法，叫语法糖，官方名称“装饰器”，其实上面的写法，还可以更简单可以把下面代码去掉1america = login(america) #你在这里相当于把america这个函数替换了 只在你要装饰的函数上面加上下面代码123456789101112@logindef america(): #login() #执行前加上验证 print(\"----欧美专区----\") def japan(): print(\"----日韩专区----\") @logindef asia(): #login() #执行前加上验证 print(\"----亚洲专区----\") 效果是一样的。 你开心的玩着老王教你的新姿势 ，玩着玩着就手贱给你的“亚洲专区”版块 加了个参数，然后，结果 出错了。。。1TpyeError: inner() takes 0 positional arguments but 1 was given 你：老王，老王，怎么传个参数就不行了呢？老王：那必然呀，你调用asia时，其实是相当于调用的login，你的asia第一次调用时asia = login(asia)， login就返回了inner的内存地址，第2次用户自己调用asia(“3p”),实际上相当于调用的时inner,但你的inner定义时并没有设置参数，但你给他传了个参数，所以自然就报错了呀你：但是我的 版块需要传参数呀，你不让我传不行呀。。。老王：没说不让你传，稍做改动便可。。 1234567891011121314151617181920212223242526user_status = False # 用户登录了就把这个改成Truedef login(func): # 把要执行的模块从这里传进来 def inner(arg1): _username = \"dinson\" # 假装这是DB里存的用户信息 _password = \"abc!23\" # 假装这是DB里存的用户信息 global user_status if user_status == False: username = input(\"user:\") password = input(\"pasword:\") if username == _username and password == _password: print(\"welcome login....\") user_status = True else: print(\"wrong username or password!\") if user_status == True: func(arg1) # 看这里看这里，只要验证通过了，就调用相应功能 return innerdef home():... 老王：你再试试就好了 。你： 果然好使，大神就是大神呀。 。。 不过，如果有多个参数呢？老王：。。。。老弟，你不要什么都让我教你吧，非固定参数你没学过么？ args,*kwargs…你：噢 。。。还能这么搞?,nb,我再试试。 你身陷这种新玩法中无法自拔，竟没注意到老王已经离开，你媳妇告诉你说为了不打扰你加班，今晚带孩子去跟她姐妹住 ，你觉得媳妇真体贴，最终，你终于搞定了所有需求，完全遵循开放-封闭原则，最终代码如下 。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253user_status = False #用户登录了就把这个改成True def login(func): #把要执行的模块从这里传进来 def inner(*args,**kwargs):#再定义一层函数 _username = \"dinson\" #假装这是DB里存的用户信息 _password = \"abc!23\" #假装这是DB里存的用户信息 global user_status if user_status == False: username = input(\"user:\") password = input(\"pasword:\") if username == _username and password == _password: print(\"welcome login....\") user_status = True else: print(\"wrong username or password!\") if user_status == True: func(*args,**kwargs) # 看这里看这里，只要验证通过了，就调用相应功能 return inner #用户调用login时，只会返回inner的内存地址，下次再调用时加上()才会执行inner函数 def home(): print(\"---首页----\") @logindef america(): #login() #执行前加上验证 print(\"----欧美专区----\") def japan(): print(\"----日韩专区----\") # @logindef asia(style): ''' :param style: 喜欢看什么类型的，就传进来 :return: ''' #login() #执行前加上验证 print(\"----亚洲专区----\") home()# america = login(america) #你在这里相当于把america这个函数替换了asia = login(asia) # #那用户调用时依然写america() asia(\"3p\") 此时，你已累的不行了，洗洗就抓紧睡了，半夜，上厕所，隐隐听到隔壁老王家有微弱的女人的声音传来，你会心一笑，老王这家伙，不声不响找了女朋友也不带给我看看，改天一定要见下真人。。。。 第二天早上，产品经理又提了新的需求，要允许用户选择用qq\\weibo\\weixin认证，此时的你，已深谙装饰器各种装逼技巧，轻松的就实现了新的需求。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556user_status = False #用户登录了就把这个改成Truedef login(auth_type): #把要执行的模块从这里传进来 def auth(func): def inner(*args,**kwargs):#再定义一层函数 if auth_type == \"qq\": _username = \"dinson\" #假装这是DB里存的用户信息 _password = \"abc!23\" #假装这是DB里存的用户信息 global user_status if user_status == False: username = input(\"user:\") password = input(\"pasword:\") if username == _username and password == _password: print(\"welcome login....\") user_status = True else: print(\"wrong username or password!\") if user_status == True: return func(*args,**kwargs) # 看这里看这里，只要验证通过了，就调用相应功能 else: print(\"only support qq \") return inner #用户调用login时，只会返回inner的内存地址，下次再调用时加上()才会执行inner函数 return authdef home(): print(\"---首页----\")@login('qq')def america(): #login() #执行前加上验证 print(\"----欧美专区----\")def japan(): print(\"----日韩专区----\")@login('weibo')def asia(style): ''' :param style: 喜欢看什么类型的，就传进来 :return: ''' #login() #执行前加上验证 print(\"----亚洲专区----\")home()# america = login(america) #你在这里相当于把america这个函数替换了#asia = login(asia)# #那用户调用时依然写america()# asia(\"3p\") 软件目录结构规范为什么要设计好目录结构? “设计项目目录结构”，就和”代码编码风格”一样，属于个人风格问题。对于这种风格上的规范，一直都存在两种态度: 一类同学认为，这种个人风格问题”无关紧要”。理由是能让程序work就好，风格问题根本不是问题。 另一类同学认为，规范化能更好的控制程序结构，让程序具有更高的可读性。 我是比较偏向于后者的，因为我是前一类同学思想行为下的直接受害者。我曾经维护过一个非常不好读的项目，其实现的逻辑并不复杂，但是却耗费了我非常长的时间去理解它想表达的意思。从此我个人对于提高项目可读性、可维护性的要求就很高了。”项目目录结构”其实也是属于”可读性和可维护性”的范畴，我们设计一个层次清晰的目录结构，就是为了达到以下两点: 可读性高: 不熟悉这个项目的代码的人，一眼就能看懂目录结构，知道程序启动脚本是哪个，测试目录在哪儿，配置文件在哪儿等等。从而非常快速的了解这个项目。 可维护性高: 定义好组织规则后，维护者就能很明确地知道，新增的哪个文件和代码应该放在什么目录之下。这个好处是，随着时间的推移，代码/配置的规模增加，项目结构不会混乱，仍然能够组织良好。 所以，我认为，保持一个层次清晰的目录结构是有必要的。更何况组织一个良好的工程目录，其实是一件很简单的事儿。 目录组织方式关于如何组织一个较好的Python工程目录结构，已经有一些得到了共识的目录结构。在Stackoverflow的这个问题上，能看到大家对Python目录结构的讨论。 这里面说的已经很好了，我也不打算重新造轮子列举各种不同的方式，这里面我说一下我的理解和体会。 假设你的项目名为foo, 我比较建议的最方便快捷目录结构这样就足够了:12345678910111213141516171819Foo/|-- bin/| |-- foo||-- foo/| |-- tests/| | |-- __init__.py| | |-- test_main.py| || |-- __init__.py| |-- main.py||-- docs/| |-- conf.py| |-- abc.rst||-- setup.py|-- requirements.txt|-- README 简要解释一下: bin/: 存放项目的一些可执行文件，当然你可以起名script/之类的也行。 foo/: 存放项目的所有源代码。(1) 源代码中的所有模块、包都应该放在此目录。不要置于顶层目录。(2) 其子目录tests/存放单元测试代码； (3) 程序的入口最好命名main.py。 docs/: 存放一些文档。 setup.py: 安装、部署、打包的脚本。 requirements.txt: 存放软件依赖的外部Python包列表。 README: 项目说明文件。 除此之外，有一些方案给出了更加多的内容。比如LICENSE.txt,ChangeLog.txt文件等，我没有列在这里，因为这些东西主要是项目开源的时候需要用到。如果你想写一个开源软件，目录该如何组织，可以参考这篇文章。 下面，再简单讲一下我对这些目录的理解和个人要求吧。 关于README的内容这个我觉得是每个项目都应该有的一个文件，目的是能简要描述该项目的信息，让读者快速了解这个项目。 它需要说明以下几个事项: 软件定位，软件的基本功能。 运行代码的方法: 安装环境、启动命令等。 简要的使用说明。 代码目录结构说明，更详细点可以说明软件的基本原理。 常见问题说明。我觉得有以上几点是比较好的一个README。在软件开发初期，由于开发过程中以上内容可能不明确或者发生变化，并不是一定要在一开始就将所有信息都补全。但是在项目完结的时候，是需要撰写这样的一个文档的。 可以参考Redis源码中Readme的写法，这里面简洁但是清晰的描述了Redis功能和源码结构。 关于requirements.txt和setup.py setup.py 一般来说，用setup.py来管理代码的打包、安装、部署问题。业界标准的写法是用Python流行的打包工具setuptools来管理这些事情。这种方式普遍应用于开源项目中。不过这里的核心思想不是用标准化的工具来解决这些问题，而是说，一个项目一定要有一个安装部署工具，能快速便捷的在一台新机器上将环境装好、代码部署好和将程序运行起来。 这个我是踩过坑的。 我刚开始接触Python写项目的时候，安装环境、部署代码、运行程序这个过程全是手动完成，遇到过以下问题: 安装环境时经常忘了最近又添加了一个新的Python包，结果一到线上运行，程序就出错了。 Python包的版本依赖问题，有时候我们程序中使用的是一个版本的Python包，但是官方的已经是最新的包了，通过手动安装就可能装错了。 如果依赖的包很多的话，一个一个安装这些依赖是很费时的事情。 新同学开始写项目的时候，将程序跑起来非常麻烦，因为可能经常忘了要怎么安装各种依赖。 setup.py可以将这些事情自动化起来，提高效率、减少出错的概率。”复杂的东西自动化，能自动化的东西一定要自动化。”是一个非常好的习惯。 setuptools的文档比较庞大，刚接触的话，可能不太好找到切入点。学习技术的方式就是看他人是怎么用的，可以参考一下Python的一个Web框架，flask是如何写的: setup.py 当然，简单点自己写个安装脚本（deploy.sh）替代setup.py也未尝不可。 requirements.txt 这个文件存在的目的是: 方便开发者维护软件的包依赖。将开发过程中新增的包添加进这个列表中，避免在setup.py安装依赖时漏掉软件包。 方便读者明确项目使用了哪些Python包。这个文件的格式是每一行包含一个包依赖的说明，通常是flask&gt;=0.10这种格式，要求是这个格式能被pip识别，这样就可以简单的通过 pip install -r requirements.txt来把所有Python包依赖都装好了。具体格式说明： 点这里。 关于配置文件的使用方法 注意，在上面的目录结构中，没有将conf.py放在源码目录下，而是放在docs/目录下。 很多项目对配置文件的使用做法是: 配置文件写在一个或多个python文件中，比如此处的conf.py。 项目中哪个模块用到这个配置文件就直接通过import conf这种形式来在代码中使用配置。 这种做法我不太赞同: 这让单元测试变得困难（因为模块内部依赖了外部配置） 另一方面配置文件作为用户控制程序的接口，应当可以由用户自由指定该文件的路径。 程序组件可复用性太差，因为这种贯穿所有模块的代码硬编码方式，使得大部分模块都依赖conf.py这个文件。 所以，我认为配置的使用，更好的方式是， 模块的配置都是可以灵活配置的，不受外部配置文件的影响。 程序的配置也是可以灵活控制的。 能够佐证这个思想的是，用过nginx和mysql的同学都知道，nginx、mysql这些程序都可以自由的指定用户配置。 所以，不应当在代码中直接import conf来使用配置文件。上面目录结构中的conf.py，是给出的一个配置样例，不是在写死在程序中直接引用的配置文件。可以通过给main.py启动参数指定配置路径的方式来让程序读取配置内容。当然，这里的conf.py你可以换个类似的名字，比如settings.py。或者你也可以使用其他格式的内容来编写配置文件，比如settings.yaml之类的。","categories":[{"name":"Python从入门到放弃","slug":"Python从入门到放弃","permalink":"http://dinson.win/categories/Python从入门到放弃/"}],"tags":[]},{"title":"Python从入门到放弃（4）-- Python基础4","date":"2017-05-24T01:51:53.000Z","path":"2017/05/24/17-05-24/","text":"概述 函数基本语法及特性 参数与局部变量 返回值 嵌套函数 递归 匿名函数 函数式编程介绍 高阶函数 内置函数 函数基本语法及特性背景提要现在老板让你写一个监控程序，监控服务器的系统状况，当cpu＼memory＼disk等指标的使用量超过阀值时即发邮件报警，你掏空了所有的知识量，写出了以下代码123456789101112131415161718while True： if cpu利用率 &gt; 90%: #发送邮件提醒 连接邮箱服务器 发送邮件 关闭连接 if 硬盘使用空间 &gt; 90%: #发送邮件提醒 连接邮箱服务器 发送邮件 关闭连接 if 内存占用 &gt; 80%: #发送邮件提醒 连接邮箱服务器 发送邮件 关闭连接 上面的代码实现了功能，但即使是邻居老王也看出了端倪，老王亲切的摸了下你家儿子的脸蛋，说，你这个重复代码太多了，每次报警都要重写一段发邮件的代码，太low了，这样干存在2个问题： 代码重复过多，一个劲的copy and paste不符合高端程序员的气质 如果日后需要修改发邮件的这段代码，比如加入群发功能，那你就需要在所有用到这段代码的地方都修改一遍 你觉得老王说的对，你也不想写重复代码，但又不知道怎么搞，老王好像看出了你的心思，此时他抱起你儿子，笑着说，其实很简单，只需要把重复的代码提取出来，放在一个公共的地方，起个名字，以后谁想用这段代码，就通过这个名字调用就行了，如下12345678910111213141516def 发送邮件(内容) #发送邮件提醒 连接邮箱服务器 发送邮件 关闭连接 while True： if cpu利用率 &gt; 90%: 发送邮件('CPU报警') if 硬盘使用空间 &gt; 90%: 发送邮件('硬盘报警') if 内存占用 &gt; 80%: 发送邮件('内存报警') 函数是什么? 函数一词来源于数学，但编程中的「函数」概念，与数学中的函数是有很大不同的，具体区别，我们后面会讲，编程中的函数在英文中也有很多不同的叫法。在BASIC中叫做subroutine(子过程或子程序)，在Pascal中叫做procedure(过程)和function，在C中只有function，在Java里面叫做method。 定义: 函数是指将一组语句的集合通过一个名字(函数名)封装起来，要想执行这个函数，只需调用其函数名即可特性: 减少重复代码 使程序变的可扩展 使程序变得易维护 语法定义 1234def sayhi():#函数名 print(\"Hello, I'm nobody!\") sayhi() #调用函数 可以带参数12345678910111213#下面这段代码a,b = 5,8c = a**bprint(c) #改成用函数写def calc(x,y): res = x**y return res #返回函数执行结果 c = calc(a,b) ＃结果赋值给c变量print(c) 函数参数与局部变量形参变量只有在被调用时才分配内存单元，在调用结束时，即刻释放所分配的内存单元。因此，形参只在函数内部有效。函数调用结束返回主调用函数后则不能再使用该形参变量 实参可以是常量、变量、表达式、函数等，无论实参是何种类型的量，在进行函数调用时，它们都必须有确定的值，以便把这些值传送给形参。因此应预先用赋值，输入等办法使参数获得确定值 默认参数看下面代码12345678910def stu_register(name,age,country,course): print(\"----注册学生信息------\") print(\"姓名:\",name) print(\"age:\",age) print(\"国籍:\",country) print(\"课程:\",course) stu_register(\"王山炮\",22,\"CN\",\"python_devops\")stu_register(\"张叫春\",21,\"CN\",\"linux\")stu_register(\"刘老根\",25,\"CN\",\"linux\") 发现 country 这个参数 基本都 是”CN”, 就像我们在网站上注册用户，像国籍这种信息，你不填写，默认就会是 中国， 这就是通过默认参数实现的，把country变成默认参数非常简单1def stu_register(name,age,course,country=\"CN\"): 这样，这个参数在调用时不指定，那默认就是CN，指定了的话，就用你指定的值。 另外，你可能注意到了，在把country变成默认参数后，我同时把它的位置移到了最后面，为什么呢？ 关键参数正常情况下，给函数传参数要按顺序，不想按顺序就可以用关键参数，只需指定参数名即可，但记住一个要求就是，关键参数必须放在位置参数之后。1stu_register(age=22,name='alex',course=\"python\",) 非固定参数若你的函数在定义时不确定用户想传入多少个参数，就可以使用非固定参数12345678910def stu_register(name,age,*args): # *args 会把多传入的参数变成一个元组形式 print(name,age,args) stu_register(\"Alex\",22)#输出#Alex 22 () #后面这个()就是args,只是因为没传值,所以为空 stu_register(\"Jack\",32,\"CN\",\"Python\")#输出# Jack 32 ('CN', 'Python') 还可以有一个**kwargs12345678910def stu_register(name,age,*args,**kwargs): # *kwargs 会把多传入的参数变成一个dict形式 print(name,age,args,kwargs) stu_register(\"Alex\",22)#输出#Alex 22 () &#123;&#125;#后面这个&#123;&#125;就是kwargs,只是因为没传值,所以为空 stu_register(\"Jack\",32,\"CN\",\"Python\",sex=\"Male\",province=\"ShanDong\")#输出# Jack 32 ('CN', 'Python') &#123;'province': 'ShanDong', 'sex': 'Male'&#125; 局部变量1234567891011name = \"Disnon\" def change_name(name): print(\"before change:\",name) name = \"Mike\" print(\"after change\", name) change_name(name) print(\"在外面看看name改了么?\",name) 输出123before change: Disnonafter change Mike在外面看看name改了么? Disnon 全局与局部变量在子程序中定义的变量称为局部变量，在程序的一开始定义的变量称为全局变量。全局变量作用域是整个程序，局部变量作用域是定义该变量的子程序。当全局变量与局部变量同名时：在定义局部变量的子程序内，局部变量起作用；在其它地方全局变量起作用。 返回值要想获取函数的执行结果，就可以用return语句把结果返回注意: 函数在执行过程中只要遇到return语句，就会停止执行并返回结果，so 也可以理解为 return 语句代表着函数的结束 如果未在函数中指定return,那这个函数的返回值为None 嵌套函数(函数套函数) 1234567891011121314name = \"Dinson\"def change_name(): name = \"Dinson2\" def change_name2(): name = \"Dinson3\" print(\"第3层打印\", name) change_name2() # 调用内层函数 print(\"第2层打印\", name)change_name()print(\"最外层打印\", name) 输出123第3层打印 Dinson3第2层打印 Dinson2最外层打印 Dinson 递归在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。1234567def calc(n): print(n) if int(n / 2) == 0: return n return calc(int(n / 2))calc(10) 输出：123410521 递归特性: 必须有一个明确的结束条件 每次进入更深一层递归时，问题规模相比上次递归都应有所减少 递归效率不高，递归层次过多会导致栈溢出（在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出） 递归函数实际应用案例，二分查找(要二分查找必须先排序)123456789101112131415161718192021222324data = [1, 3, 6, 7, 9, 12, 14, 16, 17, 18, 20, 21, 22, 23, 30, 32, 33, 35]def binary_search(dataset, find_num): print(dataset) if len(dataset) &gt; 1: mid = int(len(dataset) / 2) if dataset[mid] == find_num: # find it print(\"找到数字\", dataset[mid]) elif dataset[mid] &gt; find_num: # 找的数在mid左面 print(\"\\033[31;1m找的数在mid[%s]左面\\033[0m\" % dataset[mid]) return binary_search(dataset[0:mid], find_num) else: # 找的数在mid右面 print(\"\\033[32;1m找的数在mid[%s]右面\\033[0m\" % dataset[mid]) return binary_search(dataset[mid + 1:], find_num) else: if dataset[0] == find_num: # find it print(\"找到数字啦\", dataset[0]) else: print(\"没的分了,要找的数字[%s]不在列表里\" % find_num)binary_search(data, 66) 匿名函数匿名函数就是不需要显式的指定函数12345678#这段代码def calc(n): return n**nprint(calc(10)) #换成匿名函数calc = lambda n:n**nprint(calc(10)) 你也许会说，用上这个东西没感觉有毛方便呀， 。。。。呵呵，如果是这么用，确实没毛线改进，不过匿名函数主要是和其它函数搭配使用的呢，如下 123res = map(lambda x:x**2,[1,5,7,4,8])for i in res: print(i) 输出12345125491664 函数式编程介绍 函数是Python内建支持的一种封装，我们通过把大段代码拆成函数，通过一层一层的函数调用，就可以把复杂任务分解成简单的任务，这种分解可以称之为面向过程的程序设计。函数就是面向过程的程序设计的基本单元。 函数式编程中的函数这个术语不是指计算机中的函数（实际上是Subroutine），而是指数学中的函数，即自变量的映射。也就是说一个函数的值仅决定于函数参数的值，不依赖其他状态。比如sqrt(x)函数计算x的平方根，只要x不变，不论什么时候调用，调用几次，值都是不变的。 Python对函数式编程提供部分支持。由于Python允许使用变量，因此，Python不是纯函数式编程语言。 定义简单说，”函数式编程”是一种”编程范式“（programming paradigm），也就是如何编写程序的方法论。 主要思想是把运算过程尽量写成一系列嵌套的函数调用。举例来说，现在有这样一个数学表达式：1(1 + 2) * 3 - 4 传统的过程式编程，可能这样写：123var a = 1 + 2;var b = a * 3;var c = b - 4; 函数式编程要求使用函数，我们可以把运算过程定义为不同的函数，然后写成下面这样：1var result = subtract(multiply(add(1,2), 3), 4); 这段代码再演进以下，可以变成这样1add(1,2).multiply(3).subtract(4) 这基本就是自然语言的表达了。再看下面的代码，大家应该一眼就能明白它的意思吧：1merge([1,2],[3,4]).sort().search(\"2\") 因此，函数式编程的代码更容易理解。要想学好函数式编程，不要玩py,玩Erlang,Haskell, 好了，我只会这么多了。。。 高阶函数变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。123456def add(x,y,f): return f(x) + f(y) res = add(3,-6,abs)print(res) 内置参数内置参数详解：https://docs.python.org/3/library/functions.html?highlight=built#ascii 1234567891011121314151617181920212223242526272829303132333435363738394041424344#compilef = open(\"函数递归.py\")data =compile(f.read(),'','exec')exec(data)#printmsg = \"又回到最初的起点\"f = open(\"tofile\",\"w\")print(msg,\"记忆中你青涩的脸\",sep=\"|\",end=\"\",file=f)# #slice# a = range(20)# pattern = slice(3,8,2)# for i in a[pattern]: #等于a[3:8:2]# print(i)###memoryview#usage:#&gt;&gt;&gt; memoryview(b'abcd')#&lt;memory at 0x104069648&gt;#在进行切片并赋值数据时，不需要重新copy原列表数据，可以直接映射原数据内存，import timefor n in (100000, 200000, 300000, 400000): data = b'x'*n start = time.time() b = data while b: b = b[1:] print('bytes', n, time.time()-start)for n in (100000, 200000, 300000, 400000): data = b'x'*n start = time.time() b = memoryview(data) while b: b = b[1:] print('memoryview', n, time.time()-start)几个内置方法用法提醒","categories":[{"name":"Python从入门到放弃","slug":"Python从入门到放弃","permalink":"http://dinson.win/categories/Python从入门到放弃/"}],"tags":[]},{"title":"2017 年最流行的 15 个数据科学 Python 库","date":"2017-05-23T00:34:58.000Z","path":"2017/05/23/17-05-23/","text":"概述 Python 近几年在数据科学行业获得了人们的极大青睐，各种资源也层出不穷。数据科学解决方案公司 ActiveWizards 近日根据他们自己的应用开发经验，总结了数据科学家和工程师将在 2017 年最常使用的 Python 库。 核心库NumPy地址：http://www.numpy.org 当使用 Python 开始处理科学任务时，不可避免地需要求助 Python 的 SciPy Stack，它是专门为 Python 中的科学计算而设计的软件的集合（不要与 SciPy 混淆，它只是这个 stack 的一部分，以及围绕这个 stack 的社区）。这个 stack 相当庞大，其中有十几个库，所以我们想聚焦在核心包上（特别是最重要的）。 NumPy（代表 Numerical Python）是构建科学计算 stack 的最基础的包。它为 Python 中的 n 维数组和矩阵的操作提供了大量有用的功能。该库还提供了 NumPy 数组类型的数学运算向量化，可以提升性能，从而加快执行速度。 SciPy地址：https://www.scipy.org SciPy 是一个工程和科学软件库。除此以外，你还要了解 SciPy Stack 和 SciPy 库之间的区别。SciPy 包含线性代数、优化、集成和统计的模块。SciPy 库的主要功能建立在 NumPy 的基础之上，因此它的数组大量使用了 NumPy。它通过其特定的子模块提供高效的数值例程操作，比如数值积分、优化和许多其他例程。SciPy 的所有子模块中的函数都有详细的文档，这也是一个优势。 Pandas地址：http://pandas.pydata.org Pandas 是一个 Python 包，旨在通过「标记（labeled）」和「关系（relational）」数据进行工作，简单直观。Pandas 是 data wrangling 的完美工具。它设计用于快速简单的数据操作、聚合和可视化。库中有两个主要的数据结构： Series：一维 Data Frames：二维 例如，当你要从这两种类型的结构中接收到一个新的「Dataframe」类型的数据时，你将通过传递一个「Series」来将一行添加到「Dataframe」中来接收这样的 Dataframe：这里只是一小撮你可以用 Pandas 做的事情： 轻松删除并添加「Dataframe」中的列 将数据结构转换为「Dataframe」对象 处理丢失数据，表示为 NaN（Not a Number） 功能强大的分组 可视化Matplotlib地址：https://matplotlib.org Matplotlib 是另一个 SciPy Stack 核心软件包和另一个 Python 库，专为轻松生成简单而强大的可视化而量身定制。它是一个顶尖的软件，使得 Python（在 NumPy、SciPy 和 Pandas 的帮助下）成为 MatLab 或 Mathematica 等科学工具的显著竞争对手。然而，这个库比较底层，这意味着你需要编写更多的代码才能达到高级的可视化效果，通常会比使用更高级工具付出更多努力，但总的来说值得一试。花一点力气，你就可以做到任何可视化： 线图 散点图 条形图和直方图 饼状图 茎图 轮廓图 场图 频谱图还有使用 Matplotlib 创建标签、网格、图例和许多其他格式化实体的功能。基本上，一切都是可定制的。 该库支持不同的平台，并可使用不同的 GUI 工具套件来描述所得到的可视化。许多不同的 IDE（如 IPython）都支持 Matplotlib 的功能。 还有一些额外的库可以使可视化变得更加容易。 Seaborn地址：https://seaborn.pydata.org Seaborn 主要关注统计模型的可视化；这种可视化包括热度图（heat map），可以总结数据但也描绘总体分布。Seaborn 基于 Matplotlib，并高度依赖于它。 Bokeh地址：http://bokeh.pydata.org Bokeh 也是一个很好的可视化库，其目的是交互式可视化。与之前的库相反，这个库独立于 Matplotlib。正如我们已经提到的那样，Bokeh 的重点是交互性，它通过现代浏览器以数据驱动文档（D3.js）的风格呈现。 Plotly地址：https://plot.ly 最后谈谈 Plotly。它是一个基于 Web 的工具箱，用于构建可视化，将 API 呈现给某些编程语言（其中包括 Python）。在 plot.ly 网站上有一些强大的、开箱即用的图形。为了使用 Plotly，你需要设置你的 API 密钥。图形处理会放在服务器端，并在互联网上发布，但也有一种方法可以避免这么做。 机器学习SciKit-Learn地址：http://scikit-learn.orgScikits 是 SciPy Stack 的附加软件包，专为特定功能（如图像处理和辅助机器学习）而设计。在后者方面，其中最突出的一个是 scikit-learn。该软件包构建于 SciPy 之上，并大量使用其数学操作。 scikit-learn 有一个简洁和一致的接口，可利用常见的机器学习算法，让我们可以简单地在生产中应用机器学习。该库结合了质量很好的代码和良好的文档，易于使用且有着非常高的性能，是使用 Python 进行机器学习的实际上的行业标准。 深度学习：Keras / TensorFlow / Theano 在深度学习方面，Python 中最突出和最方便的库之一是 Keras，它可以在 TensorFlow 或者 Theano 之上运行。让我们来看一下它们的一些细节。 Theano地址：https://github.com/Theano 首先，让我们谈谈 Theano。Theano 是一个 Python 包，它定义了与 NumPy 类似的多维数组，以及数学运算和表达式。该库是经过编译的，使其在所有架构上能够高效运行。这个库最初由蒙特利尔大学机器学习组开发，主要是为了满足机器学习的需求。 要注意的是，Theano 与 NumPy 在底层的操作上紧密集成。该库还优化了 GPU 和 CPU 的使用，使数据密集型计算的性能更快。 效率和稳定性调整允许更精确的结果，即使是非常小的值也可以，例如，即使 x 很小，log(1+x) 也能得到很好的结果。 TensorFlow地址：https://www.tensorflow.orgTensorFlow 来自 Google 的开发人员，它是用于数据流图计算的开源库，专门为机器学习设计。它是为满足 Google 对训练神经网络的高要求而设计的，是基于神经网络的机器学习系统 DistBelief 的继任者。然而，TensorFlow 并不是谷歌的科学专用的——它也足以支持许多真实世界的应用。 TensorFlow 的关键特征是其多层节点系统，可以在大型数据集上快速训练人工神经网络。这为 Google 的语音识别和图像识别提供了支持。 Keras地址：https://keras.io 最后，我们来看看 Keras。它是一个使用高层接口构建神经网络的开源库，它是用 Python 编写的。它简单易懂，具有高级可扩展性。它使用 Theano 或 TensorFlow 作为后端，但 Microsoft 现在已将 CNTK（Microsoft 的认知工具包）集成为新的后端。 其简约的设计旨在通过建立紧凑型系统进行快速和容易的实验。 Keras 极其容易上手，而且可以进行快速的原型设计。它完全使用 Python 编写的，所以本质上很高层。它是高度模块化和可扩展的。尽管它简单易用且面向高层，但 Keras 也非常深度和强大，足以用于严肃的建模。 Keras 的一般思想是基于神经网络的层，然后围绕层构建一切。数据以张量的形式进行准备，第一层负责输入张量，最后一层用于输出。模型构建于两者之间。 自然语言处理NLTK地址：http://www.nltk.org 这套库的名称是 Natural Language Toolkit（自然语言工具包），顾名思义，它可用于符号和统计自然语言处理的常见任务。NLTK 旨在促进 NLP 及相关领域（语言学、认知科学和人工智能等）的教学和研究，目前正被重点关注。 NLTK 允许许多操作，例如文本标记、分类和 tokenizing、命名实体识别、建立语语料库树（揭示句子间和句子内的依存性）、词干提取、语义推理。所有的构建块都可以为不同的任务构建复杂的研究系统，例如情绪分析、自动摘要。 Gensim地址：http://radimrehurek.com/gensim 这是一个用于 Python 的开源库，实现了用于向量空间建模和主题建模的工具。这个库为大文本进行了有效的设计，而不仅仅可以处理内存中内容。其通过广泛使用 NumPy 数据结构和 SciPy 操作而实现了效率。它既高效又易于使用。 Gensim 的目标是可以应用原始的和非结构化的数字文本。Gensim 实现了诸如分层 Dirichlet 进程（HDP）、潜在语义分析（LSA）和潜在 Dirichlet 分配（LDA）等算法，还有 tf-idf、随机投影、word2vec 和 document2vec，以便于检查一组文档（通常称为语料库）中文本的重复模式。所有这些算法是无监督的——不需要任何参数，唯一的输入是语料库。 数据挖掘与统计Scrapy地址：https://scrapy.org Scrapy 是用于从网络检索结构化数据（如联系人信息或 URL）的爬虫程序（也称为 spider bots）的库。它是开源的，用 Python 编写。它最初是为 scraping 设计的，正如其名字所示的那样，但它现在已经发展成了一个完整的框架，可以从 API 收集数据，也可以用作通用的爬虫。 该库在接口设计上遵循著名的 Don』t Repeat Yourself 原则——提醒用户编写通用的可复用的代码，因此可以用来开发和扩展大型爬虫。 Scrapy 的架构围绕 Spider 类构建，该类包含了一套爬虫所遵循的指令。 Statsmodels地址：http://www.statsmodels.org statsmodels 是一个用于 Python 的库，正如你可能从名称中猜出的那样，其让用户能够通过使用各种统计模型估计方法以及执行统计断言和分析来进行数据探索。 许多有用的特征是描述性的，并可通过使用线性回归模型、广义线性模型、离散选择模型、稳健的线性模型、时序分析模型、各种估计器进行统计。 该库还提供了广泛的绘图函数，专门用于统计分析和调整使用大数据统计数据的良好性能。 结论这个列表中的库被很多数据科学家和工程师认为是最顶级的，了解和熟悉它们是很有价值的。这里有这些库在 GitHub 上活动的详细统计：当然，这并不是一份完全详尽的列表，还有其它很多值得关注的库、工具包和框架。比如说用于特定任务的 SciKit 包，其中包括用于图像的 SciKit-Image。","categories":[],"tags":[]},{"title":"Python从入门到放弃（3）-- Python基础3","date":"2017-05-22T01:04:43.000Z","path":"2017/05/22/17-05-22/","text":"概述 集合操作 文件操作 字符编码与转码 集合操作集合是一个无序的，不重复的数据组合，它的主要作用如下： 去重，把一个列表变成集合，就自动去重了,天生去重 关系测试，测试两组数据之前的交集、差集、并集等关系 创建123456789101112131415161718192021222324252627282930313233343536373839404142434445s = set([5, 2, 1, 4, 3])# 增# s.add(\"Dinson\") # &#123;1, 2, 3, 4, 5, 'Dinson'&#125;# s.update([\"Disnon\", 4, 6]) # &#123;1, 2, 3, 4, 5, 'Disnon', 6&#125;# 删# s.remove(1) # &#123;2, 3, 4, 5&#125; 删除一项# s.discard(8) # &#123;1, 2, 3, 4, 5&#125; 有则删，不会崩溃# s.pop(); # &#123;2, 3, 4, 5&#125; 随机删除一项# 查# print(4 in s) # True# print(4 not in s) # False# 其他# print(len(s)) # 5 集合长度# print(s.clear()) # None# print(s.copy()) # 浅copys1 = set([1, 2])s2 = set([2, 3])# 交集# print(s1 &amp; s2) # &#123;2&#125;# print(s1.intersection(s2)) # &#123;2&#125;# 并集# print(s1 | s2) # &#123;1, 2, 3&#125;# print(s1.union(s2)) # &#123;1, 2, 3&#125;# 差集# print(s1 - s2) # &#123;1&#125;# print(s1.difference(s2)) # &#123;1&#125;# 对称差集# print(s1 ^ s2) # &#123;1, 3&#125;# print(s1.symmetric_difference(s2)) # &#123;1, 3&#125;# 两个集合是否不相交# print(s1.isdisjoint(s2)) # False# 判断子父集# print(s1.issubset(s2)) # False# print(s1.issuperset(s2)) # False 文件操作对文件操作流程 打开文件，得到文件句柄并赋值给一个变量 通过句柄对文件进行操作 关闭文件 基本操作 12345678f = open('source_name') #打开文件first_line = f.readline()print('first line:',first_line) #读一行print('我是分隔线'.center(50,'-'))data = f.read()# 读取剩下的所有内容,文件大时不要用print(data) #打印文件 f.close() #关闭文件 打开文件的模式有： r，只读模式（默认）。 w，只写模式。【不可读；不存在则创建；存在则删除内容；】 a，追加模式。【可读； 不存在则创建；存在则只追加内容；】 “+” 表示可以同时读写某个文件 r+，可读写文件。【可读；可写；可追加】 w+，写读 a+，同a “U”表示在读取时，可以将 \\r \\n \\r\\n自动转换成 \\n （与 r 或 r+ 模式同使用） rU r+U “b”表示处理二进制文件（如：FTP发送上传ISO镜像文件，linux可忽略，windows处理二进制文件时需标注） rb wb ab 1234567891011121314151617181920212223242526f = open(\"lyrice\", encoding=\"utf-8\")# print(f.read(50)) # 读取，带参表示读取字符数# print(f.readline(50)) # 读取一行，带参表示读取字符数# print(f.readable()) # Ture or False 判断文件是否可读# f.write() # 写数据# print(f.writelines()) # 写一行数据# print(f.writable()) # Ture or False 判断文件是否可写# print(f.name) # lyrice 文件名# print(f.encoding) # utf-8 文件格式# print(f.errors)# print(f.closed) # Ture or False 查询文件是否关闭# print(f.buffer) # &lt;_io.BufferedReader name='lyrice'&gt;# print(f.newlines)# print(f.line_buffering)# print(f.flush()) # 强制刷新# print(f.close()) # 关闭文件# print(f.fileno()) # 3 操作系统IO在内存的编号# print(f.isatty()) # 是否是终端设备(打印机之类)# print(f.tell()) # 查询当前光标在第几个字符位置# print(f.seek(10)) # 光标移动到指定字符# print(f.seekable()) # 光标是否可移动(tty file,device file等返回False)# print(f.truncate(10)) # 截断，无视光标位置# print(f.detach()) # 有问题，会造成文件格式异常 with语句为了避免打开文件后忘记关闭，可以通过管理上下文，即：123with open('log','r') as f: ... 如此方式，当with代码块执行完毕时，内部会自动关闭并释放文件资源。在Python 2.7 后，with又支持同时对多个文件的上下文进行管理，即：12with open('log1') as obj1, open('log2') as obj2: pass 字符编码与转码详细文章:http://www.cnblogs.com/yuanchenqi/articles/5956943.htmlhttp://www.diveintopython3.net/strings.html 需知 1.在python2默认编码是ASCII, python3里默认是unicode 2.unicode 分为 utf-32(占4个字节),utf-16(占两个字节)，utf-8(占1-4个字节)， so utf-16就是现在最常用的unicode版本， 不过在文件里存的还是utf-8，因为utf8省空间 3.在py3中encode,在转码的同时还会把string 变成bytes类型，decode在解码的同时还会把bytes变回string","categories":[{"name":"Python从入门到放弃","slug":"Python从入门到放弃","permalink":"http://dinson.win/categories/Python从入门到放弃/"}],"tags":[]},{"title":"Python从入门到放弃（2）-- Python基础2","date":"2017-05-21T12:19:17.000Z","path":"2017/05/21/17-05-21/","text":"概述 列表、元组操作 字符串操作 字典操作 列表、元组操作列表是我们最以后最常用的数据类型之一，通过列表可以对数据实现最方便的存储、修改等操作12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667name = [\"张三\", \"李四\", \"王五\", \"赵六\", \"赵六\"]print(name.clear()) # []print(name.count(\"赵六\")) # 2print(name.index(\"赵六\")) # 3print(name[0], name[2], name[-4]) # 张三 王五 李四print(name[:]) # ['张三', '李四', '王五', '赵六', '赵六']print(name[0:2]) # ['张三', '李四']name.remove(\"李四\")print(name) # ['张三', '王五', '赵六', '赵六']del name[2]print(name) # ['张三', '李四', '赵六', '赵六']name[4] = \"孙七\"print(name) # ['张三', '李四', '王五', '赵六', '孙七']name.insert(2, \"周八\")print(name) # ['张三', '李四', '周八', '王五', '赵六', '赵六']name.append(\"孙七\")print(name) # ['张三', '李四', '王五', '赵六', '孙七']name.pop()print(name) # ['张三', '李四', '王五', '赵六']name.pop(1) # 李四print(name) # ['张三', '王五', '赵六', '赵六']name.remove(\"赵六\")print(name) # ['张三', '李四', '王五', '赵六']name.reverse();print(name) # ['赵六', '赵六', '王五', '李四', '张三']name2 = [\"b\", \"d\", \"a\", \"e\", \"c\"]name2.sort();print(name2) # ['a', 'b', 'c', 'd', 'e']name2 = [\"b\", \"d\", \"a\", \"e\", \"c\"]name.extend(name2)print(name) # ['张三', '李四', '王五', '赵六', '赵六', 'b', 'd', 'a', 'e', 'c']# 浅copyname1 = [\"a\", \"b\", [\"张三\", \"李四\"], \"d\", \"e\"]name2 = name.copy();name1[1] = \"f\"name1[2][0] = \"王五\"print(name1) # ['a', 'f', ['王五', '李四'], 'd', 'e']print(name2) # ['a', 'b', ['王五', '李四'], 'd', 'e']# 深copyimport copyname1 = [\"a\", \"b\", [\"张三\", \"李四\"], \"d\", \"e\"]name2 = copy.deepcopy(name1)name1[1] = \"f\"name1[2][0] = \"王五\"print(name1) # ['a', 'f', ['王五', '李四'], 'd', 'e']print(name2) # ['a', 'b', ['张三', '李四'], 'd', 'e']# 遍历print(name[0:-1:2]) # ['张三', '王五', '赵六']print(name[::2]) # ['张三', '王五', '赵六']print(name[:]) # ['张三', '李四', '王五', '赵六', '赵六']for i in name: print(i) # 张三李四王五赵六赵六 元组元组其实跟列表差不多，也是存一组数，只不是它一旦创建，便不能再修改，所以又叫只读列表12names = (\"alex\",\"jack\",\"eric\")它只有2个方法，一个是count,一个是index，完毕。 字符串操作1234567891011121314151617181920212223242526272829303132333435363738394041424344454647str = \"My Name is Dinson\"# print(str.index(\"n\")) # 13 索引字符 无该字符则报错# print(str.rindex(\"n\")) # 16 从右边开始索引字符 无该字符则报错# print(str.find(\"y\")) # 1 索引字符 无该字符则返回-1# print(str.rfind(\"n\")) # 16 从右边开始索引字符 无该字符则返回-1# print(str.count(\"n\")) # 2 字符出现的个数# print(\"dinson\".capitalize()) # Dinson 首字母大写# print(str.center(24, \"-\")) # ---My Name is Dinson----# print(str.ljust(24, \"-\")) # My Name is Dinson-------# print(str.rjust(24, \"-\")) # -------My Name is Dinson# print(str.zfill(24)) # 0000000My Name is Dinson# print(str.endswith(\"on\")) # True 判断是否以该字符结束# print(str.startswith(\"my\")) # False 判断是否以该字符开始# print(\"a\\ta\".expandtabs(10)) # a a# print(\"_\".join([\"a\", \"b\", \"c\", \"d\"])) # a_b_c_d# print(str.swapcase()) # mY nAME IS dINSON 大小写互换# print(str.lower()) # my name is dinson# print(str.upper()) # MY NAME IS DINSON# print(str.replace(\"Dinson\", \"Mike\")) # My Name is Mike# print(\"\\n Dinson \\n\".strip()) # Dinson 去除左右空格和换行# print(\"\\n Dinson \\n\".lstrip()) # Dinson \\n 去除左边空格和换行# print(\"\\n Dinson \\n\".rstrip()) # \\n Dinson 去除右边空格和换行# print(\"aaaaa\".split(\"a\", 2)) # ['', '', 'aaa'] 从左切割# print(\"aaaaa\".rsplit(\"a\", 2)) # ['aaa', '', ''] 从右切割# print(\"Dinson\".partition(\"n\")) # ('Di', 'n', 'son') 切割成固定三个元组# print(\"Dinson\".rpartition(\"n\")) # ('Dinso', 'n', '')从右边切割成固定三个元组# print(\"a\\nb\".splitlines()) # ['a', 'b'] 根据不用系统换行符分割# print(\"my name is dinson\".title()) # My Name Is Dinson# p1 = str.maketrans(\"abcdefghijklmnopqrstuvwxyz MND\", \"9352401867peiwqcmzoshlmabv$*&amp;^\")# p2 = str.maketrans(\"9352401867peiwqcmzoshlmabv$*&amp;^\", \"abcdefghijklmnopqrstuvwxyz MND\")# print(str.translate(p1)) # *b$&amp;9i4$6o$^6woqw# print(str.translate(p1).translate(p2)) # My Name is Dinson# print(\"name:&#123;name&#125;,age:&#123;age&#125;\".format(name=\"Dinson\", age=18)) # name:Dinson,age:18# print(\"name:&#123;name&#125;,age:&#123;age&#125;\".format_map(&#123;\"name\": \"Dinson\", \"age\": 18&#125;)) # name:Dinson,age:18# print(\"123\".isdecimal()) # True 是否为阿拉伯数字(非负整数)# print(\"123\".isalnum()) # True 是否为阿拉伯数字(非负整数)# print(\"123\".isnumeric()) # True 是否为阿拉伯数字(非负整数)# print(\"123\".isdigit()) # True 是否为阿拉伯数字(非负整数)# print(\"abcdABCD\".isalpha()) # True 是否为字母# print(\"_1a中国\".isidentifier()) # True 是否为合法标识符# print(\"abcd\".islower()) # True 是否全部为小写# print(\"ABCD\".isupper()) # True 是否全部为大写# print(\"My Name Is Dinson\".istitle()) # True 是否为标题格式# print(\"\\t\".isspace()) # True 是否全部为空格# print(str.isprintable()) # True tty file,drive file不可打印 字典操作字典一种key - value 的数据类型，使用就像我们上学用的字典，通过笔划、字母来查对应页的详细内容。12345cinfo = &#123; 'stu1101': \"TengLan Wu\", 'stu1102': \"LongZe Luola\", 'stu1103': \"XiaoZe Maliya\",&#125; 字典的特性 dict是无序的 key必须是唯一的,so 天生去重 增加1info[\"stu1104\"] = \"苍井空\" 修改1info['stu1101'] = \"武藤兰\" 删除12345info.pop(\"stu1101\") #标准删除姿势或者del info['stu1103'] #换个姿势删除或者info.popitem() #随机删除 查找123456\"stu1102\" in info #标准用法，返回Ture，False或者info.get(\"stu1102\") #获取，返回value或者info[\"stu1102\"] #同上，但是看下面info[\"stu1105\"] #如果一个key不存在，就报错，get不会，不存在只返回None 其它姿势123456789101112131415161718192021222324252627282930313233#values&gt;&gt;&gt; info.values()dict_values(['LongZe Luola', 'XiaoZe Maliya'])#keys&gt;&gt;&gt; info.keys()dict_keys(['stu1102', 'stu1103'])#setdefault&gt;&gt;&gt; info.setdefault(\"stu1106\",\"Alex\")'Alex'&gt;&gt;&gt; info&#123;'stu1102': 'LongZe Luola', 'stu1103': 'XiaoZe Maliya', 'stu1106': 'Alex'&#125;&gt;&gt;&gt; info.setdefault(\"stu1102\",\"龙泽萝拉\")'LongZe Luola'&gt;&gt;&gt; info&#123;'stu1102': 'LongZe Luola', 'stu1103': 'XiaoZe Maliya', 'stu1106': 'Alex'&#125;#update &gt;&gt;&gt; info&#123;'stu1102': 'LongZe Luola', 'stu1103': 'XiaoZe Maliya', 'stu1106': 'Alex'&#125;&gt;&gt;&gt; b = &#123;1:2,3:4, \"stu1102\":\"龙泽萝拉\"&#125;&gt;&gt;&gt; info.update(b)&gt;&gt;&gt; info&#123;'stu1102': '龙泽萝拉', 1: 2, 3: 4, 'stu1103': 'XiaoZe Maliya', 'stu1106': 'Alex'&#125;#itemsinfo.items()dict_items([('stu1102', '龙泽萝拉'), (1, 2), (3, 4), ('stu1103', 'XiaoZe Maliya'), ('stu1106', 'Alex')])#通过一个列表生成默认dict,有个没办法解释的坑，少用吧这个&gt;&gt;&gt; dict.fromkeys([1,2,3],'testd')&#123;1: 'testd', 2: 'testd', 3: 'testd'&#125; 循环dict1234567#方法1for key in info: print(key,info[key])#方法2for k,v in info.items(): #会先把dict转成list,数据里大时莫用 print(k,v)","categories":[{"name":"Python从入门到放弃","slug":"Python从入门到放弃","permalink":"http://dinson.win/categories/Python从入门到放弃/"}],"tags":[]},{"title":"Python从入门到放弃（1）-- Python基础1","date":"2017-05-20T09:40:27.000Z","path":"2017/05/20/17-05-20/","text":"概述 Python介绍 发展史 Python 2 or 3? 安装 Hello World程序 变量 用户输入 模块初识 .pyc是个什么鬼？ 数据类型初识 数据运算 表达式if …else语句 表达式for 循环 break and continue 表达式while 循环 一切皆对象 Python介绍python的创始人为吉多·范罗苏姆（Guido van Rossum）。1989年的圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间，决心开发一个新的脚本解释程序，作为ABC语言的一种继承。 最新的TIOBE排行榜，Python赶超PHP占据第四， Python崇尚优美、清晰、简单，是一个优秀并广泛使用的语言。 由上图可见，Python整体呈上升趋势，反映出Python应用越来越广泛并且也逐渐得到业内的认可！！！ Python可以应用于众多领域，如：数据分析、组件集成、网络服务、图像处理、数值计算和科学计算等众多领域。目前业内几乎所有大中型互联网企业都在使用Python，如：Youtube、Dropbox、BT、Quora（中国知乎）、豆瓣、知乎、Google、Yahoo!、Facebook、NASA、百度、腾讯、汽车之家、美团等。 目前Python主要应用领域： 云计算: 云计算最火的语言， 典型应用OpenStack WEB开发: 众多优秀的WEB框架，众多大型网站均为Python开发，Youtube, Dropbox, 豆瓣。。。， 典型WEB框架有Django 科学运算、人工智能: 典型库NumPy, SciPy, Matplotlib, Enthought librarys,pandas 系统运维: 运维人员必备语言 金融：量化交易，金融分析，在金融工程领域，Python不但在用，且用的最多，而且重要性逐年提高。原因：作为动态语言的Python，语言结构清晰简单，库丰富，成熟稳定，科学计算和统计分析都很牛逼，生产效率远远高于c,c++,java,尤其擅长策略回测 图形GUI: PyQT, WxPython,TkInter Python在一些公司的应用： 谷歌：Google App Engine 、code.google.com 、Google earth 、谷歌爬虫、- - - Google广告等项目都在大量使用Python开发 CIA: 美国中情局网站就是用Python开发的 NASA: 美国航天局(NASA)大量使用Python进行数据分析和运算 YouTube:世界上最大的视频网站YouTube就是用Python开发的 Dropbox:美国最大的在线云存储网站，全部用Python实现，每天网站处理10亿个文件的上传和下载 Instagram:美国最大的图片分享社交网站，每天超过3千万张照片被分享，全部用python开发 Facebook:大量的基础库均通过Python实现的 Redhat: 世界上最流行的Linux发行版本中的yum包管理工具就是用python开发的 豆瓣: 公司几乎所有的业务均是通过Python开发的 知乎: 国内最大的问答社区，通过Python开发(国外Quora) 春雨医生：国内知名的在线医疗网站是用Python开发的 除上面之外，还有搜狐、金山、腾讯、盛大、网易、百度、阿里、淘宝 、土豆、新浪、果壳等公司都在使用Python完成各种各样的任务。 Python 是一门什么样的语言？ 编程语言主要从以下几个角度为进行分类，编译型和解释型、静态语言和动态语言、强类型定义语言和弱类型定义语言，每个分类代表什么意思呢，我们一起来看一下。 编译和解释的区别是什么？ 编译器是把源程序的每一条语句都编译成机器语言,并保存成二进制文件,这样运行时计算机可以直接以机器语言来运行此程序,速度很快;而解释器则是只在执行程序时,才一条一条的解释成机器语言给计算机来执行,所以运行速度是不如编译后的程序运行的快的. 这是因为计算机不能直接认识并执行我们写的语句,它只能认识机器语言(是二进制的形式) 编译型vs解释型编译型优点：编译器一般会有预编译的过程对代码进行优化。因为编译只做一次，运行时不需要编译，所以编译型语言的程序执行效率高。可以脱离语言环境独立运行。缺点：编译之后如果需要修改就需要整个模块重新编译。编译的时候根据对应的运行环境生成机器码，不同的操作系统之间移植就会有问题，需要根据运行的操作系统环境编译不同的可执行文件。 解释型优点：有良好的平台兼容性，在任何环境中都可以运行，前提是安装了解释器（虚拟机）。灵活，修改代码的时候直接修改就可以，可以快速部署，不用停机维护。缺点：每次运行的时候都要解释一遍，性能上不如编译型语言。 一、低级语言与高级语言 最初的计算机程序都是用0和1的序列表示的，程序员直接使用的是机器指令，无需翻译，从纸带打孔输入即可执行得到结果。后来为了方便记忆，就将用0、1序列表示的机器指令都用符号助记，这些与机器指令一一对应的助记符就成了汇编指令，从而诞生了汇编语言。无论是机器指令还是汇编指令都是面向机器的，统称为低级语言。因为是针对特定机器的机器指令的助记符，所以汇编语言是无法独立于机器(特定的CPU体系结构)的。但汇编语言也是要经过翻译成机器指令才能执行的，所以也有将运行在一种机器上的汇编语言翻译成运行在另一种机器上的机器指令的方法，那就是交叉汇编技术。 高级语言是从人类的逻辑思维角度出发的计算机语言，抽象程度大大提高，需要经过编译成特定机器上的目标代码才能执行，一条高级语言的语句往往需要若干条机器指令来完成。高级语言独立于机器的特性是靠编译器为不同机器生成不同的目标代码(或机器指令)来实现的。那具体的说，要将高级语言编译到什么程度呢，这又跟编译的技术有关了，既可以编译成直接可执行的目标代码，也可以编译成一种中间表示，然后拿到不同的机器和系统上去执行，这种情况通常又需要支撑环境，比如解释器或虚拟机的支持，Java程序编译成bytecode，再由不同平台上的虚拟机执行就是很好的例子。所以，说高级语言不依赖于机器，是指在不同的机器或平台上高级语言的程序本身不变，而通过编译器编译得到的目标代码去适应不同的机器。从这个意义上来说，通过交叉汇编，一些汇编程序也可以获得不同机器之间的可移植性，但这种途径获得的移植性远远不如高级语言来的方便和实用性大。 二、编译与解释 编译是将源程序翻译成可执行的目标代码，翻译与执行是分开的；而解释是对源程序的翻译与执行一次性完成，不生成可存储的目标代码。这只是表象，二者背后的最大区别是：对解释执行而言，程序运行时的控制权在解释器而不在用户程序；对编译执行而言，运行时的控制权在用户程序。 解释具有良好的动态特性和可移植性，比如在解释执行时可以动态改变变量的类型、对程序进行修改以及在程序中插入良好的调试诊断信息等，而将解释器移植到不同的系统上，则程序不用改动就可以在移植了解释器的系统上运行。同时解释器也有很大的缺点，比如执行效率低，占用空间大，因为不仅要给用户程序分配空间，解释器本身也占用了宝贵的系统资源。 编译器是把源程序的每一条语句都编译成机器语言,并保存成二进制文件,这样运行时计算机可以直接以机器语言来运行此程序,速度很快;而解释器则是只在执行程序时,才一条一条的解释成机器语言给计算机来执行,所以运行速度是不如编译后的程序运行的快的. 三、编译型和解释型 我们先看看编译型，其实它和汇编语言是一样的：也是有一个负责翻译的程序来对我们的源代码进行转换，生成相对应的可执行代码。这个过程说得专业一点，就称为编译（Compile），而负责编译的程序自然就称为编译器（Compiler）。如果我们写的程序代码都包含在一个源文件中，那么通常编译之后就会直接生成一个可执行文件，我们就可以直接运行了。但对于一个比较复杂的项目，为了方便管理，我们通常把代码分散在各个源文件中，作为不同的模块来组织。这时编译各个文件时就会生成目标文件（Object file）而不是前面说的可执行文件。一般一个源文件的编译都会对应一个目标文件。这些目标文件里的内容基本上已经是可执行代码了，但由于只是整个项目的一部分，所以我们还不能直接运行。待所有的源文件的编译都大功告成，我们就可以最后把这些半成品的目标文件“打包”成一个可执行文件了，这个工作由另一个程序负责完成，由于此过程好像是把包含可执行代码的目标文件连接装配起来，所以又称为链接（Link），而负责链接的程序就叫……就叫链接程序（Linker）。链接程序除了链接目标文件外，可能还有各种资源，像图标文件啊、声音文件啊什么的，还要负责去除目标文件之间的冗余重复代码，等等，所以……也是挺累的。链接完成之后，一般就可以得到我们想要的可执行文件了。 上面我们大概地介绍了编译型语言的特点，现在再看看解释型。噢，从字面上看，“编译”和“解释”的确都有“翻译”的意思，它们的区别则在于翻译的时机安排不大一样。打个比方：假如你打算阅读一本外文书，而你不知道这门外语，那么你可以找一名翻译，给他足够的时间让他从头到尾把整本书翻译好，然后把书的母语版交给你阅读；或者，你也立刻让这名翻译辅助你阅读，让他一句一句给你翻译，如果你想往回看某个章节，他也得重新给你翻译。 两种方式，前者就相当于我们刚才所说的编译型：一次把所有的代码转换成机器语言，然后写成可执行文件；而后者就相当于我们要说的解释型：在程序运行的前一刻，还只有源程序而没有可执行程序；而程序每执行到源程序的某一条指令，则会有一个称之为解释程序的外壳程序将源代码转换成二进制代码以供执行，总言之，就是不断地解释、执行、解释、执行……所以，解释型程序是离不开解释程序的。像早期的BASIC就是一门经典的解释型语言，要执行BASIC程序，就得进入BASIC环境，然后才能加载程序源文件、运行。解释型程序中，由于程序总是以源代码的形式出现，因此只要有相应的解释器，移植几乎不成问题。编译型程序虽然源代码也可以移植，但前提是必须针对不同的系统分别进行编译，对于复杂的工程来说，的确是一件不小的时间消耗，况且很可能一些细节的地方还是要修改源代码。而且，解释型程序省却了编译的步骤，修改调试也非常方便，编辑完毕之后即可立即运行，不必像编译型程序一样每次进行小小改动都要耐心等待漫长的Compiling…Linking…这样的编译链接过程。不过凡事有利有弊，由于解释型程序是将编译的过程放到执行过程中，这就决定了解释型程序注定要比编译型慢上一大截，像几百倍的速度差距也是不足为奇的。 编译型与解释型，两者各有利弊。前者由于程序执行速度快，同等条件下对系统要求较低，因此像开发操作系统、大型应用程序、数据库系统等时都采用它，像C/C++、Pascal/Object Pascal（Delphi）、VB等基本都可视为编译语言，而一些网页脚本、服务器脚本及辅助开发接口这样的对速度要求不高、对不同系统平台间的兼容性有一定要求的程序则通常使用解释性语言，如Java、JavaScript、VBScript、Perl、Python等等。 但既然编译型与解释型各有优缺点又相互对立，所以一批新兴的语言都有把两者折衷起来的趋势，例如Java语言虽然比较接近解释型语言的特征，但在执行之前已经预先进行一次预编译，生成的代码是介于机器码和Java源代码之间的中介代码，运行的时候则由JVM（Java的虚拟机平台，可视为解释器）解释执行。它既保留了源代码的高抽象、可移植的特点，又已经完成了对源代码的大部分预编译工作，所以执行起来比“纯解释型”程序要快许多。而像VB6（或者以前版本）、C#这样的语言，虽然表面上看生成的是.exe可执行程序文件，但VB6编译之后实际生成的也是一种中介码，只不过编译器在前面安插了一段自动调用某个外部解释器的代码（该解释程序独立于用户编写的程序，存放于系统的某个DLL文件中，所有以VB6编译生成的可执行程序都要用到它），以解释执行实际的程序体。C#（以及其它.net的语言编译器）则是生成.net目标代码，实际执行时则由.net解释系统（就像JVM一样，也是一个虚拟机平台）进行执行。当然.net目标代码已经相当“低级”，比较接近机器语言了，所以仍将其视为编译语言，而且其可移植程度也没有Java号称的这么强大，Java号称是“一次编译，到处执行”，而.net则是“一次编码，到处编译”。呵呵，当然这些都是题外话了。总之，随着设计技术与硬件的不断发展，编译型与解释型两种方式的界限正在不断变得模糊。 四、动态语言和静态语言 通常我们所说的动态语言、静态语言是指动态类型语言和静态类型语言。 （1）动态类型语言：动态类型语言是指在运行期间才去做数据类型检查的语言，也就是说，在用动态类型的语言编程时，永远也不用给任何变量指定数据类型，该语言会在你第一次赋值给变量时，在内部将数据类型记录下来。Python和Ruby就是一种典型的动态类型语言，其他的各种脚本语言如VBScript也多少属于动态类型语言。 （2）静态类型语言：静态类型语言与动态类型语言刚好相反，它的数据类型是在编译其间检查的，也就是说在写程序时要声明所有变量的数据类型，C/C++是静态类型语言的典型代表，其他的静态类型语言还有C#、JAVA等。 五、强类型定义语言和弱类型定义语言 （1）强类型定义语言：强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。举个例子：如果你定义了一个整型变量a,那么程序根本不可能将a当作字符串类型处理。强类型定义语言是类型安全的语言。 （2）弱类型定义语言：数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。 强类型定义语言在速度上可能略逊色于弱类型定义语言，但是强类型定义语言带来的严谨性能够有效的避免许多错误。另外，“这门语言是不是动态语言”与“这门语言是否类型安全”之间是完全没有联系的！例如：Python是动态语言，是强类型定义语言（类型安全的语言）; VBScript是动态语言，是弱类型定义语言（类型不安全的语言）; JAVA是静态语言，是强类型定义语言（类型安全的语言）。 通过上面这些介绍，我们可以得出，python是一门动态解释性的强类型定义语言。那这些基因使成就了Python的哪些优缺点呢？我们继续往下看。 Python的优缺点优点 Python的定位是“优雅”、“明确”、“简单”，所以Python程序看上去总是简单易懂，初学者学Python，不但入门容易，而且将来深入下去，可以编写那些非常非常复杂的程序。 开发效率非常高，Python有非常强大的第三方库，基本上你想通过计算机实现任何功能，Python官方库里都有相应的模块进行支持，直接下载调用后，在基础库的基础上再进行开发，大大降低开发周期，避免重复造轮子。 高级语言————当你用Python语言编写程序的时候，你无需考虑诸如如何管理你的程序使用的内存一类的底层细节 可移植性————由于它的开源本质，Python已经被移植在许多平台上（经过改动使它能够工 作在不同平台上）。如果你小心地避免使用依赖于系统的特性，那么你的所有Python程序无需修改就几乎可以在市场上所有的系统平台上运行 可扩展性————如果你需要你的一段关键代码运行得更快或者希望某些算法不公开，你可以把你的部分程序用C或C++编写，然后在你的Python程序中使用它们。 可嵌入性————你可以把Python嵌入你的C/C++程序，从而向你的程序用户提供脚本功能。 缺点 速度慢，Python 的运行速度相比C语言确实慢很多，跟JAVA相比也要慢一些，因此这也是很多所谓的大牛不屑于使用Python的主要原因，但其实这里所指的运行速度慢在大多数情况下用户是无法直接感知到的，必须借助测试工具才能体现出来，比如你用C运一个程序花了0.01s,用Python是0.1s,这样C语言直接比Python快了10倍,算是非常夸张了，但是你是无法直接通过肉眼感知的，因为一个正常人所能感知的时间最小单位是0.15-0.4s左右，哈哈。其实在大多数情况下Python已经完全可以满足你对程序速度的要求，除非你要写对速度要求极高的搜索引擎等，这种情况下，当然还是建议你用C去实现的。 代码不能加密，因为PYTHON是解释性语言，它的源码都是以名文形式存放的，不过我不认为这算是一个缺点，如果你的项目要求源代码必须是加密的，那你一开始就不应该用Python来去实现。 线程不能利用多CPU问题，这是Python被人诟病最多的一个缺点，GIL即全局解释器锁（Global Interpreter Lock），是计算机程序设计语言解释器用于同步线程的工具，使得任何时刻仅有一个线程在执行，Python的线程是操作系统的原生线程。在Linux上为pthread，在Windows上为Win thread，完全由操作系统调度线程的执行。一个python解释器进程内有一条主线程，以及多条用户程序的执行线程。即使在多核CPU平台上，由于GIL的存在，所以禁止多线程的并行执行。关于这个问题的折衷解决方法，我们在以后线程和进程章节里再进行详细探讨。 当然，Python还有一些其它的小缺点，在这就不一一列举了，我想说的是，任何一门语言都不是完美的，都有擅长和不擅长做的事情，建议各位不要拿一个语言的劣势去跟另一个语言的优势来去比较，语言只是一个工具，是实现程序设计师思想的工具，就像我们之前中学学几何时，有的时候需要要圆规，有的时候需要用三角尺一样，拿相应的工具去做它最擅长的事才是正确的选择。之前很多人问我Shell和Python到底哪个好？我回答说Shell是个脚本语言，但Python不只是个脚本语言，能做的事情更多，然后又有钻牛角尖的人说完全没必要学Python, Python能做的事情Shell都可以做，只要你足够牛B,然后又举了用Shell可以写俄罗斯方块这样的游戏，对此我能说表达只能是，不要跟SB理论，SB会把你拉到跟他一样的高度，然后用充分的经验把你打倒。 Python解释器当我们编写Python代码时，我们得到的是一个包含Python代码的以.py为扩展名的文本文件。要运行代码，就需要Python解释器去执行.py文件。 由于整个Python语言从规范到解释器都是开源的，所以理论上，只要水平够高，任何人都可以编写Python解释器来执行Python代码（当然难度很大）。事实上，确实存在多种Python解释器。 CPython当我们从Python官方网站下载并安装好Python 2.7后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行python就是启动CPython解释器。 CPython是使用最广的Python解释器。教程的所有代码也都在CPython下执行。 IPythonIPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。 CPython用&gt;&gt;&gt;作为提示符，而IPython用In [序号]:作为提示符。 PyPyPyPy是另一个Python解释器，它的目标是执行速度。PyPy采用JIT技术，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。 绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。如果你的代码要放到PyPy下执行，就需要了解PyPy和CPython的不同点。 JythonJython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。 IronPythonIronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。 小结Python的解释器很多，但使用最广泛的还是CPython。如果要和Java或.Net平台交互，最好的办法不是用Jython或IronPython，而是通过网络调用来交互，确保各程序之间的独立性。 Python发展史 1989年，为了打发圣诞节假期，Guido开始写Python语言的编译器。Python这个名字，来自Guido所挚爱的电视剧Monty Python’s Flying Circus。他希望这个新的叫做Python的语言，能符合他的理想：创造一种C和shell之间，功能全面，易学易用，可拓展的语言。 1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。 Granddaddy of Python web frameworks, Zope 1 was released in 1999 Python 1.0 - January 1994 增加了 lambda, map), filter) and reduce). Python 2.0 - October 16, 2000，加入了内存回收机制，构成了现在Python语言框架的基础 Python 2.4 - November 30, 2004, 同年目前最流行的WEB框架Django 诞生 Python 2.5 - September 19, 2006 Python 2.6 - October 1, 2008 Python 2.7 - July 3, 2010 In November 2014, it was announced that Python 2.7 would be supported until 2020, and reaffirmed that there would be no 2.8 release as users were expected to move to Python 3.4+ as soon as possible Python 3.0 - December 3, 2008 Python 3.1 - June 27, 2009 Python 3.2 - February 20, 2011 Python 3.3 - September 29, 2012 Python 3.4 - March 16, 2014 Python 3.5 - September 13, 2015 Python 3.6 - December 23, 2016 Python 2 or 3?In summary : Python 2.x is legacy, Python 3.x is the present and future of the language Python 3.0 was released in 2008. The final 2.x version 2.7 release came out in mid-2010, with a statement of extended support for this end-of-life release. The 2.x branch will see no new major releases after that. 3.x is under active development and has already seen over five years of stable releases, including version 3.3 in 2012, 3.4 in 2014, and 3.5 in 2015. This means that all recent standard library improvements, for example, are only available by default in Python 3.x. Guido van Rossum (the original creator of the Python language) decided to clean up Python 2.x properly, with less regard for backwards compatibility than is the case for new releases in the 2.x range. The most drastic improvement is the better Unicode support (with all text strings being Unicode by default) as well as saner bytes/Unicode separation. Besides, several aspects of the core language (such as print and exec being statements, integers using floor division) have been adjusted to be easier for newcomers to learn and to be more consistent with the rest of the language, and old cruft has been removed (for example, all classes are now new-style, “range()” returns a memory efficient iterable, not a list as in 2.x). py2与3的详细区别PRINT IS A FUNCTIONThe statement has been replaced with a print() function, with keyword arguments to replace most of the special syntax of the old statement (PEP 3105). Examples:1234567Old: print \"The answer is\", 2*2 New: print(\"The answer is\", 2*2)Old: print x, # Trailing comma suppresses newline New: print(x, end=\" \") # Appends a space instead of a newlineOld: print # Prints a newlineNew: print() # You must call the function!Old: print &gt;&gt;sys.stderr, \"fatal error\" New: print(\"fatal error\", file=sys.stderr)Old: print (x, y) # prints repr((x, y))New: print((x, y)) # Not the same as print(x, y)! You can also customize the separator between items, e.g.:1print(\"There are &lt;\", 2**32, \"&gt; possibilities!\", sep=\"\") ALL IS UNICODE NOW从此不再为讨厌的字符编码而烦恼 还可以这样玩： (A,*REST,B)=RANGE(5)1234&lt;strong&gt;&gt;&gt;&gt; a,*rest,b = range(5)&gt;&gt;&gt; a,rest,b(0, [1, 2, 3], 4)&lt;/strong&gt; 某些库改名了 Old Name New Name _winreg winreg ConfigParser configparser copy_reg copyreg Queue queue SocketServer socketserver markupbase _markupbase repr reprlib test.test_support test.support 还有谁不支持PYTHON3?One popular module that don’t yet support Python 3 is Twisted (for networking and other applications). Most actively maintained libraries have people working on 3.x support. For some libraries, it’s more of a priority than others: Twisted, for example, is mostly focused on production servers, where supporting older versions of Python is important, let alone supporting a new version that includes major changes to the language. (Twisted is a prime example of a major package where porting to 3.x is far from trivial ） Python安装windows 下载安装包https://www.python.org/downloads/ 安装 配置环境变量 linux、Mac无需安装，原装Python环境 ps：如果自带2.6，请更新至2.7 Hello World程序创建一个文件叫hello.py,并输入1print(\"Hello World!\") 然后执行命令:python hello.py ,输出1Hello World! 指定解释器那么就需要在 hello.py 文件的头部指定解释器，如下：1#!/usr/bin/env python 指定字符编码那么就需要在 hello.py 文件的头部指定解释器，如下：1# -*- coding: utf-8 -*- 变量声明变量123#_*_coding:utf-8_*_ name = \"Dinson\" 上述代码声明了一个变量，变量名为： name，变量name的值为：”Dinson” 变量定义的规则： 变量名只能是 字母、数字或下划线的任意组合 变量名的第一个字符不能是数字 以下关键字不能声明为变量名[‘and’, ‘as’, ‘assert’, ‘break’, ‘class’, ‘continue’, ‘def’, ‘del’, ‘elif’, ‘else’, ‘except’, ‘exec’, ‘finally’, ‘for’, ‘from’, ‘global’, ‘if’, ‘import’, ‘in’, ‘is’, ‘lambda’, ‘not’, ‘or’, ‘pass’, ‘print’, ‘raise’, ‘return’, ‘try’, ‘while’, ‘with’, ‘yield’] 用户输入 1234567#!/usr/bin/env python#_*_coding:utf-8_*_ #name = raw_input(\"What is your name?\") #only on python 2.xname = input(\"What is your name?\")print(\"Hello \" + name ) 输入密码时，如果想要不可见，需要利用getpass 模块中的 getpass方法，即：12345678910#!/usr/bin/env python# -*- coding: utf-8 -*- import getpass # 将用户输入的内容赋值给 name 变量pwd = getpass.getpass(\"请输入密码：\") # 打印输入的内容print(pwd) 模块初识 Python的强大之处在于他有非常丰富和强大的标准库和第三方库，几乎你想实现的任何功能都有相应的Python库支持，以后的课程中会深入讲解常用到的各种库，现在，我们先来象征性的学2个简单的。 sys1234567891011#!/usr/bin/env python# -*- coding: utf-8 -*- import sys print(sys.argv) #输出$ python test.py helo world['test.py', 'helo', 'world'] #把执行脚本时传递的参数获取到了 os123456#!/usr/bin/env python# -*- coding: utf-8 -*- import os os.system(\"df -h\") #调用系统命令 完全结合一下123import os,sys os.system(''.join(sys.argv[1:])) #把用户的输入的参数当作一条命令交给os.system来执行 .pyc是个什么鬼？1. Python是一门解释型语言？我初学Python时，听到的关于Python的第一句话就是，Python是一门解释性语言，我就这样一直相信下去，直到发现了.pyc文件的存在。如果是解释型语言，那么生成的.pyc文件是什么呢？c应该是compiled的缩写才对啊！为了防止其他学习Python的人也被这句话误解，那么我们就在文中来澄清下这个问题，并且把一些基础概念给理清。 2. 解释型语言和编译型语言 计算机是不能够识别高级语言的，所以当我们运行一个高级语言程序的时候，就需要一个“翻译机”来从事把高级语言转变成计算机能读懂的机器语言的过程。这个过程分成两类，第一种是编译，第二种是解释。编译型语言在程序执行之前，先会通过编译器对程序执行一个编译的过程，把程序转变成机器语言。运行时就不需要翻译，而直接执行就可以了。最典型的例子就是C语言。解释型语言就没有这个编译的过程，而是在程序运行的时候，通过解释器对程序逐行作出解释，然后直接运行，最典型的例子是Ruby。通过以上的例子，我们可以来总结一下解释型语言和编译型语言的优缺点，因为编译型语言在程序运行之前就已经对程序做出了“翻译”，所以在运行时就少掉了“翻译”的过程，所以效率比较高。但是我们也不能一概而论，一些解释型语言也可以通过解释器的优化来在对程序做出翻译时对整个程序做出优化，从而在效率上超过编译型语言。此外，随着Java等基于虚拟机的语言的兴起，我们又不能把语言纯粹地分成解释型和编译型这两种。用Java来举例，Java首先是通过编译器编译成字节码文件，然后在运行时通过解释器给解释成机器文件。所以我们说Java是一种先编译后解释的语言。 3. Python到底是什么 其实Python和Java/C#一样，也是一门基于虚拟机的语言，我们先来从表面上简单地了解一下Python程序的运行过程吧。当我们在命令行中输入python hello.py时，其实是激活了Python的“解释器”，告诉“解释器”：你要开始工作了。可是在“解释”之前，其实执行的第一项工作和Java一样，是编译。熟悉Java的同学可以想一下我们在命令行中如何执行一个Java的程序：12javac hello.javajava hello 只是我们在用Eclipse之类的IDE时，将这两部给融合成了一部而已。其实Python也一样，当我们执行python hello.py时，他也一样执行了这么一个过程，所以我们应该这样来描述Python，Python是一门先编译后解释的语言。 4. 简述Python的运行过程在说这个问题之前，我们先来说两个概念，PyCodeObject和pyc文件。我们在硬盘上看到的pyc自然不必多说，而其实PyCodeObject则是Python编译器真正编译成的结果。我们先简单知道就可以了，继续向下看。当python程序运行时，编译的结果则是保存在位于内存中的PyCodeObject中，当Python程序运行结束时，Python解释器则将PyCodeObject写回到pyc文件中。当python程序第二次运行时，首先程序会在硬盘中寻找pyc文件，如果找到，则直接载入，否则就重复上面的过程。所以我们应该这样来定位PyCodeObject和pyc文件，我们说pyc文件其实是PyCodeObject的一种持久化保存方式。 数据类型初识1. 数字 2 是一个整数的例子。长整数 不过是大一些的整数。3.23和52.3E-4是浮点数的例子。E标记表示10的幂。在这里，52.3E-4表示52.3 * 10-4。(-5+4j)和(2.3-4.6j)是复数的例子，其中-5,4为实数，j为虚数，数学中表示复数是什么？。 bytes(字节) Python 3最重要的新特性大概要算是对文本和二进制数据作了更为清晰的区分。文本总是Unicode，由str类型表示，二进制数据则由bytes类型表示。Python 3不会以任意隐式的方式混用str和bytes，正是这使得两者的区分特别清晰。你不能拼接字符串和字节包，也无法在字节包里搜索字符串（反之亦然），也不能将字符串传入参数为字节包的函数（反之亦然）。int（整型） 在32位机器上，整数的位数为32位，取值范围为-231～231-1，即-2147483648～2147483647 在64位系统上，整数的位数为64位，取值范围为-263～263-1，即-9223372036854775808～9223372036854775807long（长整型） 跟C语言不同，Python的长整数没有指定位宽，即：Python没有限制长整数数值的大小，但实际上由于机器内存有限，我们使用的长整数数值不可能无限大。 注意，自从Python2.2起，如果整数发生溢出，Python会自动将整数数据转换为长整数，所以如今在长整数数据后面不加字母L也不会导致严重后果了。float（浮点型） 浮点数用来处理实数，即带有小数的数字。类似于C语言中的double类型，占8个字节（64位），其中52位表示底，11位表示指数，剩下的一位表示符号。complex（复数） 复数由实数部分和虚数部分组成，一般形式为x＋yj，其中的x是复数的实数部分，y是复数的虚数部分，这里的x和y都是实数。注：Python中存在小数字池：-5 ～ 257 2、布尔值 真或假 1 或 0 3、字符串 “hello world” 万恶的字符串拼接： python中的字符串在C语言中体现为是一个字符数组，每次创建字符串时候需要在内存中开辟一块连续的空，并且一旦需要修改字符串的话，就需要再次开辟空间，万恶的+号每出现一次就会在内从中重新开辟一块空间。 字符串格式化输出1234name = \"Dinson\"print \"i am %s \" % name #输出: i am Dinson PS: 字符串是 %s;整数 %d;浮点数%f 字符串常用功能： 移除空白 分割 长度 索引 切片 4、列表创建列表：123name_list = ['dinson', 'nick', 'decy']或name_list ＝ list(['dinson', 'nick', 'decy']) 基本操作： 索引 切片 追加 删除 长度 切片 循环 包含 5、元组(不可变列表)创建元组：123ages = (11, 22, 33, 44, 55)或ages = tuple((11, 22, 33, 44, 55)) 6、字典（无序）创建字典：123person = &#123;\"name\": \"mr.wu\", 'age': 18&#125;或person = dict(&#123;\"name\": \"mr.wu\", 'age': 18&#125;) 常用操作： 索引 新增 删除 键、值、键值对 循环 长度 数据运算 算数运算：比较运算：赋值运算：逻辑运算：成员运算：身份运算：位运算：运算符优先级：更多内容：猛击这里 表达式if … else场景一、用户登陆验证123456789101112131415161718# 提示输入用户名和密码 # 验证用户名和密码# 如果错误，则输出用户名或密码错误# 如果成功，则输出 欢迎，XXX! #!/usr/bin/env python# -*- coding: encoding -*- import getpass name = raw_input('请输入用户名：')pwd = getpass.getpass('请输入密码：') if name == \"dinson\" and pwd == \"cmd\": print(\"欢迎，dinson！\")else: print(\"用户名和密码错误\") 场景二、猜年龄游戏 在程序里设定好你的年龄，然后启动程序让用户猜测，用户输入后，根据他的输入提示用户输入的是否正确，如果错误，提示是猜大了还是小了123456789101112#!/usr/bin/env python# -*- coding: utf-8 -*- my_age = 28user_input = int(input(\"input your guess num:\")) if user_input == my_age: print(\"Congratulations, you got it !\")elif user_input &lt; my_age: print(\"Oops,think bigger!\")else: print(\"think smaller!\") 外层变量，可以被内层代码使用内层变量，不应被外层代码使用 表达式for loop最简单的循环10次12345#_*_coding:utf-8_*___author__ = 'Alex Li' for i in range(10): print(\"loop:\", i ) 需求一：还是上面的程序，但是遇到小于5的循环次数就不走了，直接跳入下一次循环1234for i in range(10): if i&lt;5: continue #不往下走了,直接进入下一次loop print(\"loop:\", i ) 需求二：还是上面的程序，但是遇到大于5的循环次数就不走了，直接退出1234for i in range(10): if i&gt;5: break #不往下走了,直接跳出整个loop print(\"loop:\", i ) while loop 有一种循环叫死循环，一经触发，就运行个天荒地老、海枯石烂。1234count = 0while True: print(\"你是风儿我是沙,缠缠绵绵到天涯...\",count) count +=1 其实除了时间，没有什么是永恒的，死loop还是少写为好 上面的代码循环100次就退出吧1234567count = 0while True: print(\"你是风儿我是沙,缠缠绵绵到天涯...\",count) count +=1 if count == 100: print(\"去你妈的风和沙,你们这些脱了裤子是人,穿上裤子是鬼的臭男人..\") break 回到上面for 循环的例子，如何实现让用户不断的猜年龄，但只给最多3次机会，再猜不对就退出程序。123456789101112131415161718#!/usr/bin/env python# -*- coding: utf-8 -*- my_age = 28count = 0while count &lt; 3: user_input = int(input(\"input your guess num:\")) if user_input == my_age: print(\"Congratulations, you got it !\") break elif user_input &lt; my_age: print(\"Oops,think bigger!\") else: print(\"think smaller!\") count += 1 #每次loop 计数器+1else: print(\"猜这么多次都不对,fuck off.\") 一切皆对象对于Python，一切事物都是对象，对象基于类创建所以，以下这些值都是对象： “wupeiqi”、38、[‘北京’, ‘上海’, ‘深圳’]，并且是根据不同的类生成的对象。","categories":[{"name":"Python从入门到放弃","slug":"Python从入门到放弃","permalink":"http://dinson.win/categories/Python从入门到放弃/"}],"tags":[]},{"title":"Kotlin学习资料","date":"2017-05-19T09:42:09.000Z","path":"2017/05/19/17-05-19/","text":"概述 Kotlin 成为 Android 官方支持的编程语言 官方资料首发的肯定是kotlin的官方github地址了： https://github.com/JetBrains/kotlin github trending，会有很多的新新优质资源 https://github.com/trending/java Readme中包含官方的tutorials、推荐的图书《Kotlin in Action》、《Kotlin for Android Developers》以及其他资源。 英文不太好的不要担心，有官方中文翻译站点： https://www.kotlincn.net/docs/reference/https://www.gitbook.com/book/hltj/kotlin-reference-chinese/details 《Kotlin for android developers》中文版翻译在线版阅读地址 https://wangjiegulu.gitbooks.io/kotlin-for-android-developers-zh/zhe_ben_shu_shi_he_ni_ma_ff1f.html 离线版PDF下载地址 https://www.gitbook.com/download/pdf/book/wangjiegulu/kotlin-for-android-developers-zh 张涛的开源实验室之前在推送中推荐过张涛的博客，博客质量都很高，在很早的时候就开始编写Kotlin相关博客，此外还有很多比较新的知识~ https://kymjs.com/column/kotlin.html 大精-wing的地方酒馆让你的代码量减少3倍！使用kotlin开发Android系列~ http://androidwing.net/index.php/89 还有个Kotlin项目： https://github.com/githubwing/GankClient-Kotlin Kotlin 视频教程腾讯视频： http://v.qq.com/boke/gplay/903446d6231d8612d198c58fb86eb4dc_t6d000101bd9lx1.html 百度云： http://pan.baidu.com/s/1nvGYAfB 开源项目一个用Kotlin写的简单漫画APP https://github.com/wuapnjie/PoiShuhui-Kotlin 其他文章为什么我要改用Kotlin-by:技术小黑屋 http://droidyue.com/blog/2017/05/18/why-do-i-turn-to-kotlin/ Android开发必备知识：为什么说Kotlin值得一试-by:腾讯Bugly公众号https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=404087761&amp;idx=1&amp;sn=d80625ee52f860a7a2ed4c238d2151b6 使用Kotlin进行Android开发 http://ragnraok.github.io/using-kotlin-to-write-android-app.html 使用Kotlin在Android Studio上开发App-by:Blincheng http://blog.csdn.net/qq_25867141/article/details/52875330","categories":[{"name":"Kotlin从放弃到入门","slug":"Kotlin从放弃到入门","permalink":"http://dinson.win/categories/Kotlin从放弃到入门/"}],"tags":[]},{"title":"Kotlin基本语法","date":"2017-05-18T10:24:15.000Z","path":"2017/05/18/17-05-18/","text":"概述 如果你觉得Java 7是一个过期的语言，并决定找一个更现代的语言代替。恭喜你！就如你知道的，虽然Java 8已经发布了，它包含了很多我们期待的像现代语言中那样的改善，但是我们Android开发者还是被迫在使用Java 7.这是因为法律的问题。但是就算没有这个限制，并且新的Android设备从今天开始使用新的能理解Java8的VM，在当前的设备过期、几乎没有人使用它们之前我们也不能使用Java 8，所以恐怕我们不会很快等到这一天的到来。但是并不是没有补救的方法。多亏使用了JVM，我们可以使用任何语言去编写Android应用，只要它能够编译成JVM能够认识的字节码就可以了。正如你所想，有很多选择，比如Groovy，Scala，Clojure，当然还有Kotlin。通过实践，只有其中一些能够被考虑来作为替代品。上述的每一种语言都有它的利弊，如果你还没有真正确定你该使用那种语言，我建议你可以去尝试一下它们。 类和函数Kotlin中的类遵循一个简单的结构。尽管与Java有一点细微的差别。你可以使用try.kotlinlang.org在不需要一个真正的项目和不需要部署到机器的前提下来测试一些简单的代码范例。 怎么定义一个类如果你想定义一个类，你只需要使用class关键字。123class MainActivity&#123;&#125; 它有一个默认唯一的构造器。我们会在以后的课程中学习在特殊的情况下创建其它额外的构造器，但是请记住大部分情况下你只需要这个默认的构造器。你只需要在类名后面写上它的参数。如果这个类没有任何内容可以省略大括号：1class Person(name: String, surname: String) 那么构造函数的函数体在哪呢？你可以写在init块中：12345class Person(name: String, surname: String) &#123; init&#123; ... &#125;&#125; 类继承默认任何类都是基础继承自Any（与java中的Object类似），但是我们可以继承其它类。所有的类默认都是不可继承的（final），所以我们只能继承那些明确声明open或者abstract的类：12open class Animal(name: String)class Person(name: String, surname: String) : Animal(name) 当我们只有单个构造器时，我们需要在从父类继承下来的构造器中指定需要的参数。这是用来替换Java中的super调用的。 函数(方法)函数（我们Java中的方法）可以使用fun关键字就可以定义:123fun onCreate(savedInstanceState: Bundle?) &#123;&#125; 如果你没有指定它的返回值，它就会返回Unit，与Java中的void类似，但是Unit是一个真正的对象。你当然也可以指定任何其它的返回类型：123fun add(x: Int, y: Int) : Int &#123; return x + y&#125; 就想你在上面的例子中看到的那样，我在每句的最后没有使用分号。当然你也可以使用分号，分号不是必须的，而且不使用分号是一个不错的实践。当你这么做了，你会发现这节约了你很多时间。 然而如果返回的结果可以使用一个表达式计算出来，你可以不使用括号而是使用等号：1fun add(x: Int,y: Int) : Int = x + y 构造方法和函数参数Kotlin中的参数与Java中有些不同。如你所见，我们先写参数的名字再写它的类型：123fun add(x: Int, y: Int) : Int &#123; return x + y&#125; 我们可以给参数指定一个默认值使得它们变得可选，这是非常有帮助的。这里有一个例子，在Activity中创建了一个函数用来toast一段信息：123fun toast(message: String, length: Int = Toast.LENGTH_SHORT) &#123; Toast.makeText(this, message, length).show()&#125; 如你所见，第二个参数（length）指定了一个默认值。这意味着你调用的时候可以传入第二个值或者不传，这样可以避免你需要的重载函数：12toast(\"Hello\")toast(\"Hello\", Toast.LENGTH_LONG) 这个与下面的Java代码是一样的：123456void toast(String message)&#123;&#125;void toast(String message, int length)&#123; Toast.makeText(this, message, length).show();&#125; 这跟你想象的一样复杂。再看看这个例子：12345fun niceToast(message: String, tag: String = javaClass&lt;MainActivity&gt;().getSimpleName(), length: Int = Toast.LENGTH_SHORT) &#123; Toast.makeText(this, \"[$className] $message\", length).show()&#125; 我增加了第三个默认值是类名的tag参数。如果在Java中总数开销会以几何增长。现在可以通过以下方式调用：123toast(\"Hello\")toast(\"Hello\", \"MyTag\")toast(\"Hello\", \"MyTag\", Toast.LENGTH_SHORT) 而且甚至还有其它选择，因为你可以使用参数名字来调用，这表示你可以通过在值前写明参数名来传入你希望的参数：1toast(message = \"Hello\", length = Toast.LENGTH_SHORT) 你可以在String中直接使用模版表达式。它可以帮助你很简单地在静态值和变量的基础上编写复杂的String。在上面的例子中，我使用了”[$className] $message”。如你所见，任何时候你使用一个$符号就可以插入一个表达式。如果这个表达式有一点复杂，你就需要使用一对大括号括起来：”Your name is ${user.name}”。 Layout的编写 以天气预报应用为例 显示天气预报的列表我们使用RecyclerView，所以你需要在build.gradle中增加一个新的依赖：12345dependencies &#123; compile fileTree(dir: 'libs', include: ['*.jar']) compile \"com.android.support:appcompat-v7:$support_version\" compile \"com.android.support:recyclerview-v7:$support_version\" ...&#125; 然后，activity_main.xml如下：12345678&lt;FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;android.support.v7.widget.RecyclerView android:id=\"@+id/forecast_list\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"/&gt;&lt;/FrameLayout&gt; 在Mainactivity.kt中删除掉之前用来测试的能正常运行的所有代码（现在应该会提示错误）。暂且我们使用老的findViewByid()的方式：12val forecastList = findViewById(R.id.forecast_list) as RecyclerViewforecastList.layoutManager = LinearLayoutManager(this) 如你所见，我们定义类一个变量并转型为RecyclerView。这里与Java有点不同，我们会在下一章分析这些不同之处。LayoutManager会通过属性的方式被设置，而不是通过setter，这个layout已经足够显示一个列表了。 对象实例化 对象实例化也是与Java中有些不同。如你所见，我们去掉了new关键字。这时构造函数仍然会被调用，但是我们省略了宝贵的四个字符。LinearLayoutManager(this)创建了一个对象的实例。 我们同样需要一个RecyclerView的Adapter。RecyclerView中所使用到的布局现在只需要一个TextView，我会手动去创建这个简单的文本列表。增加一个名为ForecastListAdapter.kt的Kotlin文件，包括如下代码：1234567891011121314class ForecastListAdapter(val items: List&lt;String&gt;) : RecyclerView.Adapter&lt;ForecastListAdapter.ViewHolder&gt;() &#123; override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder &#123; return ViewHolder(TextView(parent.context)) &#125; override fun onBindViewHolder(holder: ViewHolder, position: Int) &#123; holder.textView.text = items.[position] &#125; override fun getItemCount(): Int = items.size class ViewHolder(val textView: TextView) : RecyclerView.ViewHolder(textView)&#125; 又是如此，我们可以像访问属性一样访问context和text。你可以保持以往那样操作（使用getters和setters）,但是你会得到一个编译器的警告。如果你还是倾向于Java中的使用方式，这个检查可以被关闭。但是一旦你使用上了这种属性调用的方式你就会爱上它，而且它也节省了额外的字符总量。 回到MainActivity，现在简单地创建一系列的String放入List中，然后使用创建分配Adapter实例。12345678910111213141516private val items = listOf( \"Mon 6/23 - Sunny - 31/17\", \"Tue 6/24 - Foggy - 21/8\", \"Wed 6/25 - Cloudy - 22/17\", \"Thurs 6/26 - Rainy - 18/11\", \"Fri 6/27 - Foggy - 21/10\", \"Sat 6/28 - TRAPPED IN WEATHERSTATION - 23/18\", \"Sun 6/29 - Sunny - 20/7\" )override fun onCreate(savedInstanceState: Bundle?) &#123; ... val forecastList = findViewById(R.id.forecast_list) as RecyclerView forecastList.layoutManager = LinearLayoutManager(this) forecastList.adapter = ForecastListAdapter(items)&#125; List的创建 尽管我会在后面来对Collection进行讲解，但是我现在仅仅简单地解释你可以通过使用一个函数listOf创建一个常量的List（很快我们就会讲到的immutable）。它接收一个任何类型的vararg（可变长的参数），它会自动推断出结果的类型。还有很多其它的函数可以选择，比如setOf，arrayListOf或者hashSetOf。","categories":[{"name":"Kotlin从放弃到入门","slug":"Kotlin从放弃到入门","permalink":"http://dinson.win/categories/Kotlin从放弃到入门/"}],"tags":[{"name":"Kotlin","slug":"Kotlin","permalink":"http://dinson.win/tags/Kotlin/"}]},{"title":"Google I/O 2017","date":"2017-05-17T09:38:37.000Z","path":"2017/05/17/17-05-17/","text":"概述 美国时间5月17日-19日，Google I/O 2017大会将于美国加利福尼亚州山景城的海岸线圆形剧场召开，下面一起看看此次I/O大会将会有哪些值得期待的看点 Google AssistantGoogle宣布其AI语音助手Google Assistant将推出iPhone版，并对其加入了文字输入、Google Lens图像输入，支持到更多设备和语言等新功能升级。Google Assistant将推出iPhone版，iPhone用户也能享受Google这个语音AI助手进行语音搜索、查看Gmail、Youtube和网页搜索等操作。为了方便用户在不能使用语音输入情况下，Google Assistant加入了文字输入方式和通过新公布的Google Lens技术进行图像识别。Goolge还推出Assistant SDK给开发者，并联合大量硬件制造商，推出内置Google Assistant的设备，这些设备将标有Google Assistant Built-in。 Google系统Android O本次Google I/O 2017上最重要的发布，自然就是Android O了，迄今Android激活设备已经达到20亿部，包括了智能手机、手表、车载和TV等，早在两个月前Android O开发者阅览版便已经放出，现在Google正式介绍了Android O的新功能，包括流动性体验和关键功能改进两部分。Android O提供流动式体验（Fluid Experience），包括画中画分屏功能、在App图标中显示通知的通知点、更好用的网页自动填写、可自动识别文字中地址和电话的智能选择，Google还为新系统推出TensorFlow Lite智能AI学习系统，用于加强语音、图像学习和识别能力。画中画通知点智能选择 TensorFlow LiteAndroid O另一新部分为关键功能（Vitals），这包括了安全性改进、系统调整和更方便的开发者工具。其中系统调整中，Android O的开机启动时间比N快了2倍，而App的运行也更快更流畅，以Google Sheets作例子，在没有对App作改动情况下，Android O上运行快了两倍，新系统还在后台管理部分更智能，提供App定位和执行的限制。关键性功能改进开机速度快2倍，App运行速度快2倍支持KotlinAndroid O最新支持Kotlin开发语言，这是由JetBrains基于JVM的一种编程语言，Google表示这是开发者社区强烈要求加入的。最后Android O还有一些新功能，其中当然少不了增加更多EMOJI表情！Android O Preview开发者阅览版在今天已经提供下载，但Google未透露正式版的推送时间。 Google I/O 宣布Galaxy S8将支持Daydream，推出独立式移动VR设备Google宣布了三星Galaxy S8手机将可支持移动VR平台Daydream，Google还联合高通、HTC和联想推独立式移动VR设备，在今年晚些时候开卖。这次Google I/O 2017大会上VR和AR部分，为移动VR平台Daydream和AR项目Tango的新介绍，其中宣布了三星Galaxy S8手机将可支持Daydream，Google还联合高通、HTC和联想推独立式移动VR设备，Tango部分则宣布了华硕ZenFone AR手机和VPS定位技术。除了这类需要搭配Daydream View头显使用的智能手机VR外，Google还宣布推出独立式移动VR设备（Standalone VR）。独立式移动VR设备不需要PC、手机和线缆，有更好易用性和身体定位，相比智能手机VR有更好的WorldSense运动追踪技术。Google将于与高通、HTC和联想合作推出相关的产品，后者两款独立式VR设备将在今年晚些时候开卖。AR部分也就是Google的Tango项目，从2015的DK到去年发布首款AR手机，Tango发展顺利，今年华硕将在夏天开卖第二代Tango手机ZenFone AR。技术方面，Tango与Google地图团体合作开发推出VPS（Visual Positioning Service，可视定位服务），提供准确的室内定位能力，可通过摄像头对室内的物体进行识别。Tango还加入到Google的学校和教育项目Google Expeditions中，为学生展示AR技术。 Google Home智能音箱Google的智能家庭助手Google Home也迎来四个功能升级，包括主动通知和免提电话在内，并将在更多国家提供服务。在今天凌晨的I/O 2017大会上，Google的智能家庭助手Google Home也迎来功能升级，包括主动式通知助手、免提电话、更多流媒体服务支持和可视化反馈，Google Home还将在更多国家提供服务。Google Home将扩展在英国、加拿大、澳洲、法国、德国和日本六个国家，这次新加入了Proactive Assistance主动式助手，会自动通过底部的指示灯，提醒用户将下来的行程、事件、重要约会等。Google Home另一个新功能为Hands-Free Calling免提拨打功能，无需设置可免费拨打电话，支持现有的电话号码。Google Home支持更多音乐流媒体服务商，并加入蓝牙连接播放手机上音乐支持，视频流媒体也加入更多电视内容。可视化反馈让Google Home可以通过Chromecast连接用户家中的电视，作为屏幕显示Google Assistant搜索返回的内容。 Google公布可180万亿次浮点运算的Cloud TPU，自动帮你画猫猫Google在这次I/O 2017大会上公布了最新一代Cloud TPU，可提供每秒能进行180万亿次浮点运算，另外Google还利用AI资源建立Google.ai，用于多方面的AI运算。Google CEO Sundar Pichai在这次I/O 2017大会上宣布Goolge要建立Ai First数据中心，用到最新一代Cloud TPU打造，为机器学习提供足够的运算能力，Google还结合现有AI资源推出Google.ai，用在科研项目和自动帮你画猫猫上…在去年Google便公布了他们的TPU（Tensor Processing Unit，张量处理器），相比以往的CPU和GPU快15-30倍、效能高30-80倍，用于Google所有产品背后的计算，包括在AlphaGO上，但机器学习太复杂，经过锻炼和推断两个阶段，这需要超高的亿万级运算能力，所以Google为此推出了Cloud TPU。Google的Cloud TPU在一块运算板上包括了四个处理单元，每秒能进行180万亿次浮点运算，64块板可组成一套超级计算机，Google称为TPU Pods，每个Pods能提供11.5千万亿次浮点运算（PetaFLOPS）。Could TPU除了AI云计算外，还将在今天开始加入到Google Computing Engine，提供给他们客户使用。Google通过结合自身的AI优势建立了Google.ai，包括AtuoML用在AI的Learing to learn上，还有科研和医疗的活体组织检测模型建立预测、DNA序列研究上。另外除了那些复杂庞大的项目，Google.ai还能做简单有趣的事情，可以帮你自动纠正画猫猫。","categories":[],"tags":[{"name":"I/O大会","slug":"I-O大会","permalink":"http://dinson.win/tags/I-O大会/"}]},{"title":"适配器模式在Android开发中的应用","date":"2017-05-14T02:57:58.000Z","path":"2017/05/14/17-05-14/","text":"概述 适配器：Adapter，大家看到这个单词是不是非常眼熟了？没错，这就是我们平时用到 ListView 和 RecyclerView 时必定会配合使用的 Adapter。列表显示数据几乎是任何一个安卓项目都会用到的一个功能，谷歌使用适配器模式来封装等使之异常灵活且非常实用，我们想要了解谷歌为什么这样做，就要先理解Java适配器模式是怎样运作的，这篇文章我们就学习一下java设计模式之一的适配器模式以及它在安卓中的应用。 适配器模式使用场景：适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。 引用网上的一个例子：笔记本电脑电源一般用的都是5V电压，但是我们的家用电是220V，我们要让笔记本充上电，最好的办法应该是通过一个工具把220V的电压转换成5V，这个工具就是适配器 好好理解一下设计模式的使用场景比起去记住代码是怎样写的效果要好很多，说不定你哪天编码的时候灵光一现用上了，那就是你真正掌握了。 适配器模式的种类 类适配器 UML图(强烈建议大家去了解一下UML图，它很简单粗暴的把类与类之间的关系描述的很清楚易懂) 我们可以看到，目标接口 Target 就相当于是上面的5V电压，Adaptee 就是被适配的220V电压，Adapter 就是适配器。看代码： 输出结果：12充5V电啦充220V电啦 结合上面给点UML图稍微分析一下： Adapter类 继承了 Adaptee220V类 然后实现了接口 Target5V 并实现了目标方法 chong5V()，类适配器的一个特点就是 Adapter 会去继承被适配类，这样适配器就直接拥有了被适配类中的方法，所以类适配器的缺点就是不够灵活，让我们看一下另外一种适配器。 2.对象适配器 这里的 Target 依然是 5V电压，Adaptee 依然是 220V电压，比起类适配器，Adapter 和 Adaptee 的关系从继承变成了组合，上代码： 输出结果：12充5V电啦充220V电啦 这里我们把 Adaptee220V 通过 Adapter 的构造方法传入到 Adapter 中，当调用 Adapter 的 chong220V()方法 时，实际是调用传进来 Adaptee220V 对象的 chong220V 方法，这样就会变得很灵活。 项目中的运用之所以写这篇关于适配器设计模式的文章，是因为作者在以前有一次实际开发中，在没有学习过适配器模式的前提下，为了解决项目中的一个开发痛点，自己费劲脑筋想出来的一种模式，到现在才知道原来这个叫适配器模式，在学习了这个设计模式之后更加深入了解了一下。接下来，就来演示一下作者在实际工作中使用到的变异形态的对象适配器模式。 当时开发场景：当时作者开发一个基于POS机的APP，APP要求有打印功能，像订单打印、日期打印等等。我们知道POS机是有多种型号的，每种型号的POS机会有他们单独的SDK，也就是说打印方法是不同的！首先，我们每次调用打印的时候都会先判断 POS机 型号，因为型号不对程序肯定会报错，假如某一天，APP适配的 POS机 类型要增加一款，也就是说我每个判断 POS机 型号的地方都要多家一个if语句，并且还要把 新POS机型 的打印方法加上去，如果我有5个地方用到了打印，就要加5次，这样是很痛苦的，别问我为什么知道。。。经过2次这样的真实情况发生后，我暴走了，痛定思痛要想个办法结局，于是有了以下代码：每种 POS机 都实现 IPrint 中的打印方法：这里我把 POS机 型号判断的代码放到了 PrintManager 的构造方法中，每次 new 出实例时就会去判断。然后我让 PrintManager 也实现了IPrint接口，因为我认为项目中的打印管理类必须要拥有这三种打印方法。发现没，改过之后的代码，在不同的调用的地方再也不用担心新增POS机型需要改代码了，只需要在 PrintManager 的构造方法中增加一个判断就好了。要是改成单例：改完之后我哭了。。。我他吗的是个天才啊。。。后面果然加了多款POS机，但是我再也不痛苦了！看一下我的UML图：其实，光看UML图，作者在项目中的这种写法已经不算是适配器模式了，因为 Adaptee 已经直接实现了Target中的方法，也就是说根本就不存在不满足目标接口这个说法了。。不过作者这样写完全是自己想出来的，没有基于任何设计模式，就现在目前的效果来说还是不错的，通过这篇文章，我对于适配器模式有了一个清晰的理解，同时也反思了一下我这种写法，还是很有收获的。","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://dinson.win/tags/设计模式/"}]},{"title":"Android录屏与截图功能(5.0以上有效)","date":"2017-05-13T06:20:59.000Z","path":"2017/05/13/17-05-12/","text":"概述 这篇文章，会带你学习如何使用 MediaProjection，MediaCodec 以及 MediaMuxer 来实现简单的截屏和录屏功能。 因为 MediaProjection 是 5.0以上 才出现的，所以今天所讲述功能实现，只在 5.0以上 的系统有效。 截屏步骤如下1：获取 MediaProjectionManager 2：通过 MediaProjectionManager.createScreenCaptureIntent() 获取 Intent 3：通过 startActivityForResult 传入 Intent 然后在 onActivityResult 中通过 MediaProjectionManager.getMediaProjection(resultCode,data) 获取 MediaProjection 4：创建 ImageReader,构建 VirtualDisplay 5 : 最后就是通过 ImageReader 截图，就可以从 ImageReader 里获得 Image 对象。 6 : 将 Image 对象转换成 bitmap 实现步骤已经给出了，我们就按照步骤来实现代码吧。 首先 MediaProjectionManager 是系统服务，我们通过getSystemService(MEDIA_PROJECTION_SERVICE)获取它 1projectionManager = (MediaProjectionManager)getSystemService(MEDIA_PROJECTION_SERVICE); 然后调用 startActivityForResult 传入 projectionManager.createScreenCaptureIntent() 创建的 Intent 1startActivityForResult(projectionManager.createScreenCaptureIntent(), SCREEN_SHOT); 紧接着我们就可以在 onActivityResult(int requestCode, int resultCode, Intent data) 中通过 resultCode 和 data 来获取 MediaProjection：然后就是创建 ImageReader 和 VirtualDisplay：这里我们依次讲解一下：首先是 ImageReader.newInstance 方法：1public static ImageReader newInstance(int width, int height, int format, int maxImages) 方法里接收四个参数。前两个 width,height 是用来指定生成图像的宽和高。第三个参数 format 是图像的格式，这个格式必须是 ImageFormat或 PixelFormat 中的一个，这两个 Format 里有很多格式，大家可以点进去看看，我们例子中使用的是 PixelFormat.RGBA_8888 格式(需要注意的是并不是所有的格式都被 ImageReader 支持，比如说 ImageFormat.NV21)。 第四个参数 maxImages，这个参数指的是你想同时在 ImageReader 里获取到的 Image对象 的个数，这个参数我不是很懂，我不理解同时的意思。我的理解是 ImageReader 是一个类似数组的东西，然后我们可以通过 acquireLatestImage() 或 acquireNextImage() 方法来得到里面的 Image对象(可能有误，仅供参考)。这个值应该设置的越小越好，但是得大于0，所以我们上面设置的是1。 然后我们看看 mediaProjection.createVirtualDisplay 方法：首先这个方法返回的是 VirtualDisplay。前四个不用说了，分别是 VirtualDisplay 的名字，宽，高和dpi。 第五个参数，大家可以访问 https://developer.android.google.cn/reference/android/hardware/display/DisplayManager.html 查看 DisplayManager 的所有flags，我没有具体的研究过，在本次要实现的例子里，除了 VIRTUAL_DISPLAY_FLAG_SECURE 这个会报错，其他的 flags 效果都一样。 第六个参数 是一个 Surface。我这里表达一下我的理解，当 VirtualDisplay 被创建出来时，也就是 createVirtualDisplay 调用后，你在真实屏幕上的每一帧都会输入到 Surface参数 里。也就是说，如果你放个 SurfaceView，然后传入 SurfaceView 的 Surface 那么你在屏幕上的操作都会显示在 SurfaceView 里(这里我们后面录屏会讲)。我们这里传入的是 ImageReader 的 Surface。这其中的逻辑我的理解是这样的，真实屏幕的每一帧都都会传给 ImageReader，根据 ImageReader 的 maxImages参数，比如说 maxImages 是 2，那么 ImageReader 始终保持两帧图片，但这两帧图片是一直随着真实屏幕的操作而更新的(不知道大家有没有听懂)。 第七个参数 是一个回调函数，在 VirtualDisplay 状态改变时调用。因为我们这里没有，所以传 null。 第八个参数 这里我给出原文：“The Handler on which the callback should be invoked, or null if the callback should be invoked on the calling thread’s main Looper.” 因为我翻译不好。不过和普通的 Handler 使用场景类似。 现在我们 ImageReader 和 VirtualDisplay，接下来我们就可以通过 ImageReader 的 acquireLatestImage() 或 acquireNextImage() 来得到 Image对象 了。 12SystemClock.sleep(1000);Image image = imageReader.acquireNextImage(); 这里有个坑，就是你在获取 Image 的时候，得先暂停1秒左右，不然就会获取失败(原因未知)。 现在我们有了 Image对象，但是 Image对象 并不能直接作为UI资源被使用，我们可以将它转换成 Bitmap对象。 这里最主要的逻辑就是像素与字节的转换，我们需要将 Image对象 的字节流写进 Bitmap 里，但是 Bitmap 接收的是像素格式的。 我们一行一行来看： 首先获取 image对象 的宽和高，注意 width 和 height 是像素格式的。 然后获取 ByteBuffer，里面存放的就是图片的字节流，是字节格式的。我是这么理解的，ByteBuffer 里面是一长串的字节序列，按照某种格式分成行列就变成了图片。 然后获取 PixelStride，这指的是两个像素的距离(就是一个像素头部到相邻像素的头部)，这是字节格式的。 RowStride 是一行占用的距离(就是一行像素头部到相邻行像素的头部)，这个大小和 width 有关，这里需要注意，因为内存对齐的原因，所以每行会有一些空余。这个值也是字节格式的。 紧接着我们需要创建一个 Bitmap 用来接受 Image 的 buffer 的输入，buffer 是字节流，它会按照我们设置的 format 转换成像素，所以这里最重要的一个地方就是 Bitmap 创建的大小，因为高度就是行数所以就是 height，但是宽度因为上面说的内存对齐问题会有些空余，所以我们要先求出空余部分，然后加上 width。 1int rowPadding = rowStride - pixelStride * width; 这句话用整行的距离减去了一行里像素及空隙占用的距离，剩下的就是空余部分。但是这个是字节格式的。我们将它除以 pixelStride，也就是一个像素及空隙占用的字节大小，就转换成了像素格式。然后： 1width + rowPadding / pixelStride 这个就是一行里像素的占用了，我们将它传给Bitmap： 创建出合适大小的 Bitmap，然后把 Image 的 buffer 传给它，就成功的将 Image对象 转换成了 Bitmap。这里我可能讲的不清楚，我给大家画了张图： 上面的一小格一小格是一块块像素。 好了，现在我们已经获取到了 bitmap 了，我们可以把它放到 ImageView 里显示一下，我写了一个例子，效果如下： 点击按钮，弹出一个对话框请求截屏，点击立即开始的话，截屏就会显示在下面的 ImageView 里。 录屏步骤录屏的前三步和截屏是一样的，出现分歧点的地方在于 VirtualDisplay 创建时传入的 Surface，还记得我们上面说的吗，说在创建 VirtualDisplay 的时候，传入一个 SurfaceView 的 Surface 的话，那么你在真实屏幕上的操作，都会重现在 SurfaceView 上。我们来试一下： 我们在Surface参数中传入一个 SurfaceView 的 Surface，效果如下： 可以看到我们放了一个 Button，放了一个 ImageView，放了一个 SurfaceView。点击 Button，然后点立即开始之后，真实屏幕就映射到了 SurfaceView 里。 所以当创建 VirtualDisplay 时，真实屏幕就映射到了 Surface，也就是我们可以再 Surface 里拿到屏幕的一个输入。那我们要录屏的话，就只要把 Surface 转换成我们需要的格式就行了。 在本篇文章的例子中，我们会将 Surface对象 转换成 mp4格式。这就需要用到MediaCodec类 和 MediaMuxer类。MediaCodec 生成一个 Surface 用来接收屏幕的输出并按照格式编码，然后传给 MediaMuxer 用来封装成 mp4格式 的视频。上面讲了 MediaCodec 的创建，我们也可以从中看到屏幕数据是怎么进入 MediaCodec 的。具体的我已经注释了。 接下来我们创建一个 MediaMuxer对象：然后创建 VirtualDisplay，把 MediaCodec的surface 传进去：最后就是视频的编码与转换MP4还有保存了：好了，录屏到此结束了。我们来看下实例演示：","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"录屏","slug":"录屏","permalink":"http://dinson.win/tags/录屏/"},{"name":"截图","slug":"截图","permalink":"http://dinson.win/tags/截图/"}]},{"title":"Android ConstraintLayout 使用指南","date":"2017-05-11T09:19:18.000Z","path":"2017/05/11/17-05-11/","text":"概述 升级Android Studio 2.3之后，IDE默认生成的Activity布局都是以ConstraintLayout做为根布局，体验了一把这个Google去年就开始力推的ConstraintLayout后，觉得非常不错，本文用于记录ConstraintLayout各个方面的使用知识。 平台支持 ConstraintLayout最低兼容Android 2.3； 目前Android Studio 2.3默认使用ConstraintLayout作为布局文件的根布局； 想要使用ConstraintLayout，需在项目的build.gradle添加com.android.support.constraint:constraint-layout：XXX版本号依赖； 基础使用ConstraintLayout翻译成中文也称为约束布局，在整个使用体验过程中真的是贯穿约束二字，这一节先来介绍一些基础使用，后面你就会慢慢感受到约束布局的魅力。创建完工程后打开布局文件，底部切换Design的Tab上，可以看到整个操作界面 左上角的面板是放置了系统内置各种各样的控件，想要布局直接拖到到布局文件中即可（所见即所得），右边的面板是选中布局文件中的控件时期各种各样的空间属性，ConstraintLayout最大的好处在于让我们通过拖控件的形式进行布局，并且不用担心适配问题。所以，先来拖个控件试试看，将一个Button拖动到屏幕正中央，然后运行显示看看效果。 而实际运行后却发现，这个Button还是位于屏幕左上角，说好的居中效果呢？这里就要开始引入ConstraintLayout的约束概念，我们切换回去看xml的布局代码，发现了两个问题。第一，布局预览时能够看到显示居中的Button，是因为控件属性设置中引用了两个tools命名空间下的属性。我们都知道，这两个属性只在布局编辑器的预览中有效，实际运行效果是不生效的。 第二，Button标签下有红色波浪线警告，我们把鼠标移到对应位置会发现警告内容，告诉我们Button没有任何约束设置，当前效果只支持预览，实际运行后会返回到左上角去，同时提示我们应该给控件添加约束。如何增加约束？回到Design页面，对着控件上下左右四个原点拖动添加对应的约束即可成功添加约束后，即可得到正常的运行效果了。实际操作不一定要在Tab，也可以直接在Text页面拖动控件添加约束成功实现添加约束后，可以看到Button多了下面几个属性设置 app:layout_constraintBottom_toBottomOf=&quot;parent&quot; 意思是Button底部的布局约束是位于parent的底部，parent是指包裹着它的ConstraintLayout，也可以设置指定某个控件的id，其他类似的属性就不再赘述，以上四个约束联合起来便实现了Button的居中，ConstraintLayout总共有下面这些同类的属性12345678910111213141516171819app:layout_constraintLeft_toLeftOfapp:layout_constraintLeft_toRightOfapp:layout_constraintRight_toLeftOfapp:layout_constraintRight_toRightOfapp:layout_constraintTop_toTopOfapp:layout_constraintTop_toBottomOfapp:layout_constraintBottom_toTopOfapp:layout_constraintBottom_toBottomOfapp:layout_constraintStart_toEndOfapp:layout_constraintStart_toStartOfapp:layout_constraintEnd_toStartOfapp:layout_constraintEnd_toEndOfapp:layout_constraintBaseline_toBaselineOf 你会发现ConstraintLayout非常灵活的把RelativeLayout的活给干了，关于left、right、top、bottom、start、end、baseline的基准可以参照下图如果我想加多一个Button2并且将其放置到原先居中Button的右方并且与其底部对齐，只需如下操作即可并且你也可以发现，Button2依赖与Button后会随着Button的移动而跟着发生相对移动，目的是了保证我设置的依赖，时刻保持Button2就在Button的右边，并且底部对齐。你也可以看到布局文件中也为Button2添加了如下两个属性如果你已经理解上面提到的属性含义，这里应该不会有疑惑。 介绍完上下左右的依赖设置后，下面介绍一些Margin属性，除了Android常见的各种android:layout_marginXXX外，ConstraintLayout自行添加了如下属性123456app:layout_goneMarginBottomapp:layout_goneMarginEndapp:layout_goneMarginLeftapp:layout_goneMarginRightapp:layout_goneMarginStartapp:layout_goneMarginTop 这些设置生效于当依赖的约束对象被设置visibility为gone时。12app:layout_constraintVertical_biasapp:layout_constraintHorizontal_bias 当为目标控件设置好横纵向的约束时（app:layout_constraintLeft_toLeftOf=”parent”、app:layout_constraintRight_toRightOf=”parent”或者app:layout_constraintTop_toTopOf=”parent”、app:layout_constraintBottom_toBottomOf=”parent”），这个两个属性才会生效。实际操作过程中，你会发现对着设置好横纵向约束的Button进行拖动，布局中的layout_constraintHorizontal_bias和layout_constraintVertical_bias会一直发生相应的变化，如果你需要Button居中，那么直接将这两个属性的参数值设置为0.5即可。 进阶使用 这里先补充一个关于ConstraintLayout的知识点，与其他Layout不同之处在于，它的layout_width和layout_height不支持设置match_parent，其属性取值只有以下三种情况： wrap_content； 指定具体dp值； 0dp（match_constraint），代表填充约束之意，注意不要以为和match_parent是一样的； 想想如果没有ConstraintLayout，我们要让一个控件的宽高按某个比例进行布局应该怎么做？有了ConstraintLayout后，我们可以使用layout_constraintDimentionRatio属性设置宽高比例，前提是目标控件的layout_width和layout_height至少有一个设置为0dp，如下让一个ImageView宽高按照2:1的比例显示 layout_constraintDimentionRatio默认参数比例是指宽：高，变成高:宽可以设app:layout_constraintDimensionRatio=”H,2:1”。 ConstraintLayout的链条（Chains）特性非常强大，在没有ConstraintLayout之前，线性布局我们主要都依靠LinearLayout来完成，有了ConstraintLayout之后，它把LinearLayout的活也干了，例如要把按钮水平排成一行，可以这样操作这样ButtonA、B、C就在水平方向形成了一条Chain，并且底部对齐。回去看xml文件，会见到ButtonA新增app:layout_constraintHorizontal_chainStyle的属性设置，这个属性在一条Chain中只会出现在第一个控件中，这个控件是整条Chain的Head。除了水平方向的layout_constraintHorizontal_chainStyle外还有垂直方向的layout_constraintVertical_chainStyle，两者均有spread,spread_inside,packed这三种取值，如果将控件的layout_width和layout_height设置成为0dp，还可以配合layout_constraintHorizontal_weight、layout_constraintVertical_weight两个属性实现和LinearLayout中设置layout_weight相同的效果，具体的操作这里就不再展示了，下面一张图告诉你Chain的强大之处。关于Chain的就介绍到此，进阶的最后一部分再介绍一下Guideline功能，如果我们需要对着屏幕的中轴线进行布局，就可以使用到Guideline进行操作，例如下面两个Button分别分布在中轴线的左右两侧从操作上我们可以看到Guideline也分为垂直和水平两种，并且支持设置在屏幕中所处的位置，可以使用layout_constraintGuide_begin和layout_constraintGuide_end设置具体dp值，也可以使用layout_constraintGuide_percent来设置比例。实际上它也只是一个辅助我们布局的View而已，其源码内部实现也非常简单，并且默认设置了visibility为gone，关于ConstraintLayout的进阶使用便介绍到这里。 总结ConstraintLayout的使用优势 高效布局，Android这么多年以来真正意义上的实现了所见即所得的拖曳方式布局，极大的提高开发效率； 轻松灵活的实现复杂的布局； 解决多重布局嵌套问题，通过前面介绍你会发现ConstraintLayout真的是非常灵活，可以很大程度的避免Layout之间的嵌套； 满足屏幕适配的需求，想想没有ConstraintLayout之前的拖曳式布局，你就知道有多恶心；","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"ConstraintLayout","slug":"ConstraintLayout","permalink":"http://dinson.win/tags/ConstraintLayout/"}]},{"title":"Android全屏／沉浸式状态栏下，各种键盘挡住输入框解决办法","date":"2017-05-10T01:24:17.000Z","path":"2017/05/10/17-05-10/","text":"概述 在开发中，经常会遇到键盘挡住输入框的情况，比如登录界面或注册界面，弹出的软键盘把登录或注册按钮挡住了，用户必须把软键盘收起，才能点击相应按钮，这样的用户体验非常不好。像微信则直接把登录按钮做在输入框的上面，但有很多情况下，这经常满足不了需求。同时如果输入框特别多的情况下，点击输入时，当前输入框没被挡住，但是当前输入框下面的输入框却无法获取焦点，必须先把键盘收起，再去获取下面输入框焦点，这样用户体验也非常不好，那有什么办法呢？ 方法一 非透明状态栏下使用adjustResize和adjustPan，或是透明状态栏下使用fitsSystemWindows=true属性 主要实现方法：在AndroidManifest.xml对应的Activity里添加Android:windowSoftInputMode=”adjustPan”或是android:windowSoftInputMode=”adjustResize”属性 这两种属性的区别，官方的解释是： 属性 描述 adjustResize 该活动的主窗口始终调整大小，以使屏幕上的软键盘的余地。 adjustPan 该活动的主窗口无法调整大小，使软键盘的余地。相反，窗口的内容是自动平移以便当前焦点从来没有遮挡键盘，用户始终可以看到他们正在键入。这是比调整大小，一般是较不可取，因为用户可能需要关闭软键盘在获取和与模糊部分窗口的互动。 这两个属性作用都是为了调整界面使键盘不挡住输入框 ，我这里对这两种属性使用场景、优缺点、注意事项进行了全方面总结，不知大家平时使用时是否注意到了。 属性 注意事项 优缺点 失效情况 适用情况 adjustResize 需要界面本身可调整尺寸，如在布局添加ScrollView，或输入控件属于RecycleView/ListView某一项 优点：1.不会把标题栏顶出当前布局；2.有多项输入时，当前输入框下面的输入框可上下滑动输入缺点：1.需要界面本身可调整尺寸;2. 全屏时失效 1.Activity主窗口尺寸无法调整；2.Activity全屏3.android5.0以上通过style设置沉浸式状态栏模式而不设置fitSystemWindow为true 非全屏或是非沉浸式状态栏输入界面，输入框比较多 adjustPan 页面不会重新布局，当前输入框和键盘会直接将当前输入框以上界面整体向上平移，这样即使界面包含标题栏，也会被顶上去 优点： 使用简单，不需要界面本身可调整尺寸，不会有失效情况 缺点： 会把标题栏顶出当前布局；有多项输入时，当前输入框下面的输入框无法输入，必须收起键盘显示输入框再输入 无 有少量输入项，且输入量居界面上方 fitsSystemWindows 如果多个View设置了fitsSystemWindows=”true”,只有初始的view起作用，都是从第一个设置了fitsSystemWindows的view开始计算padding 优点：使用简单，需要沉浸式状态栏的界面，不需要自己计算padding状态栏的高度缺点：使用有限制 1.View 的其他 padding 值被重新改写了2.手机系统版本&gt;=android 4.4 1.界面全屏2.设置界面主题为沉浸式状态栏 adjustResize失效情况：activity设置了全屏属性指Theme.Light.NotittleBar.Fullscreen(键盘弹起时会将标题栏也推上去)或者设置了activity对应的主题中android:windowTranslucentStatus属性，设置方式为：android:windowTranslucentStatus=true，这时如果对应的页面上含有输入框，将会导致点击输入框时软键盘弹出后键盘覆盖输入框，导致输入框看不见。 fitsSystemWindows=”true”,只有初始的view起作用：如果在布局中不是最外层控件设置fitsSystemWindows=”true”, 那么设置的那个控件高度会多出一个状态栏高度。若有多个view设置了，因第一个view已经消耗掉insect，其他view设置了也会被系统忽略。 假设原始界面是一个LinearLayout包含若干EditText,如下图所示，在分别使用两种属性时的表现。 adjustPan整个界面向上平移，使输入框露出，它不会改变界面的布局；界面整体可用高度还是屏幕高度，这个可以通过下面的截图看出，如点击输入框6,输入框会被推到键盘上方，但输入框1被顶出去了，如果界面包含标题栏，也会被顶出去。 adjustResize 但使用这两种属性，我们可以总结以下几点：1) 使用adjustPan, 如果需要输入的项比较多时，点击输入框，当前输入项会被顶到软键盘上方，但若当前输入框下面还有输入项时，却需要先收起键盘，再点击相应的输入项才能输入。这样操作太繁琐了，对于用户体验不大好；2) adjustResize的使用，需要界面本身可显示的窗口内容能调整，可结合scrollview使用； 方法二 在界面最外层布局包裹ScrollView 只使用ScrollView在相应界面的xml布局中，最外层添加一个ScrollView，不在AndroidMainfest.xml中设置任何android:windowSoftInputMode属性，此时点击输入框，输入框均不会被软键盘档住。即使当前输入框下方也有输入框，在键盘显示的情况下，也可以通过上下滑动界面来输入，而不用先隐藏键盘，点击下方输入框，再显示键盘输入。 我们可以根据Android Studio的Inspect Layout工具来查看界面真正占用的布局高度，工具在通过该工具，我们看到：界面真正能用的高度=屏幕高度-状态栏高度-软键盘高度界面中蓝框是真正界面所用的高度： ScrollView+adjustPan我们再在该类的AndroidMainfest.xml中设置windowSoftInputMode属性为adjustPan1&lt;activity android:name=\".TestInputActivity\" android:windowSoftInputMode=\"adjustPan\"&gt; 发现当前输入框不会被挡住，但是输入框比较多时，在有键盘显示时，界面上下滑动，但只能滑动部分，且如果输入框在界面靠下方时，点击输入框，标题栏也会被顶出去，如下图所示： 我们借助Inspect Layout工具查看此设置布局可用高度，从下图可以看出，此时布局可用高度是屏幕的高度，上下滑动也只是此屏的高度，在输入框9以下的输入框滑不出来，向上滑动，也只能滑到输入框1。 ScrollView+adjustResize我们前面说过adjustResize的使用必须界面布局高度是可变的，如最外层套个ScrollView或是界面可收缩的，才起作用。这里在该类的AndroidMainfest.xml中设置windowSoftInputMode属性为adjustResize1&lt;activity android:name=\".TestInputActivity\" android:windowSoftInputMode=\"adjustResize\"&gt; 发现效果和1不设置任何windowSoftInputMode属性类似，其使用高度也是：屏幕高度-状态栏高度-软键盘高度 我们再来看看windowSoftInputMode默认属性值stateUnspecified: 属性 描述 stateUnspecified 软键盘的状态(隐藏或可见)没有被指定。系统将选择一个合适的状态或依赖于主题的设置 可以看出，系统将选择合适的状态，也就是在界面最外层包含一层ScrollView时，设置默认属性值stateUnspecified其实就是adjustResize属性。 但以下两方面无法满足需求：1) 当Activity设置成全屏fullscreen模式时或是使用沉浸式状态栏时，界面最外层包裹 ScrollView，当输入框超过一屏，当前输入框下面的输入框并不能上下滑动来输入，情况类似于ScrollView+adjustPan，只能滑动部分，通过Inspect Layout也可以看到，界面可用高度是整个屏幕高度，并不会进行调整高度。即使设置adjustResize，也不起作用。2) 如果是类似于注册界面或是登录界面，键盘会挡住输入框下面的登录按钮。 沉浸式状态栏／透明状态栏情况下自android系统4.4(API&gt;=19）就开始支持沉浸式状态栏，当使用觉System windows(系统窗口),显示系统一些属性和操作区域，如 最上方的状态及没有实体按键的最下方的虚拟导航栏。android:fitsSystemWindows=“true”会使得屏幕上的可布局空间位于状态栏下方与导航栏上方 方法三 使用scrollTo方法，当键盘弹起时，让界面整体上移；键盘收起，让界面整体下移使用场景：针对界面全屏或是沉浸式状态栏，输入框不会被键盘遮挡。主要用于一些登录界面，或是需要把界面整体都顶上去的场景。 主要实现步骤 获取Activity布局xml的最外层控件，如xml文件如下： 123456789101112131415161718192021222324252627282930&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:id=\"@+id/main\" tools:context=\"com.example.liubin1.softkeyboardhelper.MainActivity\"&gt; &lt;EditText android:id=\"@+id/name\" android:hint=\"请输入用户名：\" android:layout_centerInParent=\"true\" android:layout_width=\"match_parent\" android:layout_height=\"50dp\" /&gt; &lt;EditText android:id=\"@+id/pas\" android:layout_below=\"@id/name\" android:hint=\"请输入密码：\" android:layout_centerInParent=\"true\" android:layout_width=\"match_parent\" android:layout_height=\"50dp\" /&gt; &lt;Button android:id=\"@+id/login_btn\" android:layout_below=\"@id/rpas\" android:layout_centerHorizontal=\"true\" android:text=\"登录\" android:layout_width=\"180dp\" android:layout_height=\"50dp\" /&gt;&lt;/RelativeLayout&gt; 先获取到最外层控件，再获取到最后一个控件，如上面的xml文件，最后一个控件是Button 12RelativeLayout main = (RelativeLayout) findViewById(R.id.main);Button login_btn = (Button) findViewById(R.id.login_btn); 给最外层控件和最后一个控件添加监听事件 12345678910111213141516171819202122232425262728293031323334//在Activity的onCreate里添加如下方法addLayoutListener(main,login_btn);/** * addLayoutListener方法如下 * @param main 根布局 * @param scroll 需要显示的最下方View */public void addLayoutListener(final View main, final View scroll) &#123; main.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() &#123; @Override public void onGlobalLayout() &#123; Rect rect = new Rect(); //1、获取main在窗体的可视区域 main.getWindowVisibleDisplayFrame(rect); //2、获取main在窗体的不可视区域高度，在键盘没有弹起时，main.getRootView().getHeight()调节度应该和rect.bottom高度一样 int mainInvisibleHeight = main.getRootView().getHeight() - rect.bottom; int screenHeight = main.getRootView().getHeight();//屏幕高度 //3、不可见区域大于屏幕本身高度的1/4：说明键盘弹起了 if (mainInvisibleHeight &gt; screenHeight / 4) &#123; int[] location = new int[2]; scroll.getLocationInWindow(location); // 4､获取Scroll的窗体坐标，算出main需要滚动的高度 int srollHeight = (location[1] + scroll.getHeight()) - rect.bottom; //5､让界面整体上移键盘的高度 main.scrollTo(0, srollHeight); &#125; else &#123; //3、不可见区域小于屏幕高度1/4时,说明键盘隐藏了，把界面下移，移回到原有高度 main.scrollTo(0, 0); &#125; &#125; &#125;);&#125; 实现原理此方法通过监听Activity最外层布局控件来检测软键盘是否弹出，然后去手动调用控件的scrollTo方法达到调整布局目的。 弊端此种方法需要在当前界面写比较多的代码，在某些手机上，若输入时，软键盘高度是可变的，如中英文切换，高度变化时，会发现适配的不大好。如下图：从上图可以看出，如果键盘高度变化，键盘还是会挡住登录按钮。 方法四 适配键盘高度变化情况，当键盘弹起时，让界面整体上移；键盘收起，让界面整体下移此方法主要是通过在需要移动的控件外套一层scrollView，同时最布局最外层使用自定义view监听键盘弹出状态，计算键盘高度，再进行计算需要移动的位置，这个和方法三有点类似，但能适配键盘高度变化情况。 实现步骤 先写自定义View，实时临听界面键盘弹起状态，计算键盘高度 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081public class KeyboardLayout extends FrameLayout &#123; private KeyboardLayoutListener mListener; private boolean mIsKeyboardActive = false; //输入法是否激活 private int mKeyboardHeight = 0; // 输入法高度 public KeyboardLayout(Context context) &#123; this(context, null, 0); &#125; public KeyboardLayout(Context context, AttributeSet attrs) &#123; this(context, attrs, 0); &#125; public KeyboardLayout(Context context, AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); // 监听布局变化 getViewTreeObserver().addOnGlobalLayoutListener(new KeyboardOnGlobalChangeListener()); &#125; public void setKeyboardListener(KeyboardLayoutListener listener) &#123; mListener = listener; &#125; public KeyboardLayoutListener getKeyboardListener() &#123; return mListener; &#125; public boolean isKeyboardActive() &#123; return mIsKeyboardActive; &#125; /** * 获取输入法高度 * * @return */ public int getKeyboardHeight() &#123; return mKeyboardHeight; &#125; public interface KeyboardLayoutListener &#123; /** * @param isActive 输入法是否激活 * @param keyboardHeight 输入法面板高度 */ void onKeyboardStateChanged(boolean isActive, int keyboardHeight); &#125; private class KeyboardOnGlobalChangeListener implements ViewTreeObserver.OnGlobalLayoutListener &#123; int mScreenHeight = 0; private int getScreenHeight() &#123; if (mScreenHeight &gt; 0) &#123; return mScreenHeight; &#125; mScreenHeight = ((WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE)) .getDefaultDisplay().getHeight(); return mScreenHeight; &#125; @Override public void onGlobalLayout() &#123; Rect rect = new Rect(); // 获取当前页面窗口的显示范围 ((Activity) getContext()).getWindow().getDecorView().getWindowVisibleDisplayFrame(rect); int screenHeight = getScreenHeight(); int keyboardHeight = screenHeight - rect.bottom; // 输入法的高度 boolean isActive = false; if (Math.abs(keyboardHeight) &gt; screenHeight / 4) &#123; isActive = true; // 超过屏幕五分之一则表示弹出了输入法 mKeyboardHeight = keyboardHeight; &#125; mIsKeyboardActive = isActive; if (mListener != null) &#123; mListener.onKeyboardStateChanged(isActive, keyboardHeight); &#125; &#125; &#125;&#125; xml文件编写，在界面最外层套上自定义view，在需要滚动的控件外层添加scrollView 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293&lt;com.example.smilexie.softboradblockedittext.util.KeyboardLayout android:id=\"@+id/main_ll\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:background=\"@mipmap/login_bg\" android:orientation=\"vertical\"&gt; &lt;ScrollView android:id=\"@+id/login_ll\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:orientation=\"vertical\"&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginLeft=\"50dp\" android:layout_marginRight=\"50dp\" android:layout_marginTop=\"200dp\" android:background=\"@mipmap/login_input_field_icon\" android:orientation=\"horizontal\"&gt; &lt;ImageView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_gravity=\"center_vertical\" android:layout_marginLeft=\"20dp\" android:background=\"@mipmap/login_yonghuming_icon\" /&gt; &lt;EditText android:id=\"@+id/ui_username_input\" style=\"@style/editext_input_style\" android:layout_marginLeft=\"40dp\" android:layout_marginRight=\"20dp\" android:background=\"@null\" android:hint=\"@string/login_hint_username\" android:imeOptions=\"actionNext\" android:textColor=\"@android:color/white\" android:textColorHint=\"@android:color/white\"&gt; &lt;requestFocus /&gt; &lt;/EditText&gt; &lt;/LinearLayout&gt; &lt;LinearLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginLeft=\"50dp\" android:layout_marginRight=\"50dp\" android:layout_marginTop=\"20dp\" android:background=\"@mipmap/login_input_field_icon\" android:orientation=\"horizontal\"&gt; &lt;ImageView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_gravity=\"center_vertical\" android:layout_marginLeft=\"20dp\" android:background=\"@mipmap/login_mima_icon\" /&gt; &lt;EditText android:id=\"@+id/ui_password_input\" style=\"@style/editext_input_style\" android:layout_marginLeft=\"40dp\" android:layout_marginRight=\"20dp\" android:background=\"@null\" android:hint=\"@string/login_hint_pwd\" android:imeOptions=\"actionDone\" android:inputType=\"textPassword\" android:textColor=\"@android:color/white\" android:textColorHint=\"@android:color/white\"&gt;&lt;/EditText&gt; &lt;/LinearLayout&gt; &lt;Button android:id=\"@+id/login_btn\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginLeft=\"50dp\" android:layout_marginRight=\"50dp\" android:layout_marginTop=\"20dp\" android:background=\"@mipmap/login_button_bg_icon\" android:text=\"@string/login\" android:textColor=\"@color/titlebar_main_color\" android:textSize=\"@dimen/font_normal\" /&gt; &lt;/LinearLayout&gt; &lt;/ScrollView&gt;&lt;/com.example.smilexie.softboradblockedittext.util.KeyboardLayout&gt; Activity调用，自定义view控件添加键盘响应，在键盘变化时调用scrollView的smoothScrollTo去滚动界面 1234567891011121314151617181920212223242526272829/** * 监听键盘状态，布局有变化时，靠scrollView去滚动界面 */public void addLayoutListener() &#123; bindingView.mainLl.setKeyboardListener(new KeyboardLayout.KeyboardLayoutListener() &#123; @Override public void onKeyboardStateChanged(boolean isActive, int keyboardHeight) &#123; Log.e(\"onKeyboardStateChanged\", \"isActive:\" + isActive + \" keyboardHeight:\" + keyboardHeight); if (isActive) &#123; scrollToBottom(); &#125; &#125; &#125;); &#125; /** * 弹出软键盘时将SVContainer滑到底 */ private void scrollToBottom() &#123; bindingView.loginLl.postDelayed(new Runnable() &#123; @Override public void run() &#123; bindingView.loginLl.smoothScrollTo(0, bindingView.loginLl.getBottom() + SoftKeyInputHidWidget.getStatusBarHeight(LoginActivityForDiffkeyboardHeight.this)); &#125; &#125;, 100); &#125;&#125; 具体实现代码见demo中的LoginActivityForDiffkeyboardHeight类。实现效果如下：可以看到键盘高度变化了，也不会影响界面布局 方法五 监听Activity顶层View，判断软键盘是否弹起，对界面重新绘制使用场景：针对界面全屏或是沉浸式状态栏，界面包含比较多输入框，界面即使包裹了一层ScrollView,在键盘显示时，当前输入框下面的输入不能通过上下滑动界面来输入。 实现步骤 把SoftHideKeyBoardUtil类复制到项目中； 在需要使用的Activity的onCreate方法中添加：SoftHideKeyBoardUtil.assistActivity(this);即可。 实现原理SoftHideKeyBoardUtil类具体代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869/** * 解决键盘档住输入框 * Created by SmileXie on 2017/4/3. */public class SoftHideKeyBoardUtil &#123; public static void assistActivity (Activity activity) &#123; new SoftHideKeyBoardUtil(activity); &#125; private View mChildOfContent; private int usableHeightPrevious; private FrameLayout.LayoutParams frameLayoutParams; //为适应华为小米等手机键盘上方出现黑条或不适配 private int contentHeight;//获取setContentView本来view的高度 private boolean isfirst = true;//只用获取一次 private int statusBarHeight;//状态栏高度 private SoftHideKeyBoardUtil(Activity activity) &#123; //1､找到Activity的最外层布局控件，它其实是一个DecorView,它所用的控件就是FrameLayout FrameLayout content = (FrameLayout) activity.findViewById(android.R.id.content); //2､获取到setContentView放进去的View mChildOfContent = content.getChildAt(0); //3､给Activity的xml布局设置View树监听，当布局有变化，如键盘弹出或收起时，都会回调此监听 mChildOfContent.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() &#123; //4､软键盘弹起会使GlobalLayout发生变化 public void onGlobalLayout() &#123; if (isfirst) &#123; contentHeight = mChildOfContent.getHeight();//兼容华为等机型 isfirst = false; &#125; //5､当前布局发生变化时，对Activity的xml布局进行重绘 possiblyResizeChildOfContent(); &#125; &#125;); //6､获取到Activity的xml布局的放置参数 frameLayoutParams = (FrameLayout.LayoutParams) mChildOfContent.getLayoutParams(); &#125; // 获取界面可用高度，如果软键盘弹起后，Activity的xml布局可用高度需要减去键盘高度 private void possiblyResizeChildOfContent() &#123; //1､获取当前界面可用高度，键盘弹起后，当前界面可用布局会减少键盘的高度 int usableHeightNow = computeUsableHeight(); //2､如果当前可用高度和原始值不一样 if (usableHeightNow != usableHeightPrevious) &#123; //3､获取Activity中xml中布局在当前界面显示的高度 int usableHeightSansKeyboard = mChildOfContent.getRootView().getHeight(); //4､Activity中xml布局的高度-当前可用高度 int heightDifference = usableHeightSansKeyboard - usableHeightNow; //5､高度差大于屏幕1/4时，说明键盘弹出 if (heightDifference &gt; (usableHeightSansKeyboard/4)) &#123; // 6､键盘弹出了，Activity的xml布局高度应当减去键盘高度 if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT)&#123; frameLayoutParams.height = usableHeightSansKeyboard - heightDifference + statusBarHeight; &#125; else &#123; frameLayoutParams.height = usableHeightSansKeyboard - heightDifference; &#125; &#125; else &#123; frameLayoutParams.height = contentHeight; &#125; //7､ 重绘Activity的xml布局 mChildOfContent.requestLayout(); usableHeightPrevious = usableHeightNow; &#125; &#125; private int computeUsableHeight() &#123; Rect r = new Rect(); mChildOfContent.getWindowVisibleDisplayFrame(r); // 全屏模式下：直接返回r.bottom，r.top其实是状态栏的高度 return (r.bottom - r.top); &#125;&#125; 原理分析( 1 ) 找到Activity的最外层布局控件，我们知道所有的Activity都是DecorView，它就是一个FrameLayout控件，该控件id是系统写死叫R.id.content，就是我们setContentView时，把相应的View放在此FrameLayout控件里1FrameLayout content = (FrameLayout) activity.findViewById(android.R.id.content); 所以content.getChildAt(0)获取到的mChildOfContent，也就是我们用setContentView放进去的View。 ( 2 ) 给我们的Activity的xml布局View设置一个Listener监听123mChildOfContent.getViewTreeObserver().addOnGlobalLayoutListener(&#123; possiblyResizeChildOfContent();&#125;); View.getViewTreeObserver()可以获取一个ViewTreeObserver对象——它是一个观察者，用以监听当前View树所发生的变化。这里所注册的addOnGlobalLayoutListener，就是会在当前的View树的全局布局（GlobalLayout）发生变化、或者其中的View可视状态有变化时，进行通知回调。『软键盘弹出/隐 』都能监听到。 ( 3 ) 获取当前界面可用高度123456private int computeUsableHeight() &#123; Rect rect = new Rect(); mChildOfContent.getWindowVisibleDisplayFrame(rect); // rect.top其实是状态栏的高度，如果是全屏主题，直接 return rect.bottom就可以了 return (rect.bottom - rect.top);&#125; 如下图所示： ( 4 ) 重设高度， 我们计算出的可用高度，是目前在视觉效果上能看到的界面高度。但当前界面的实际高度是比可用高度要多出一个软键盘的距离的。 注意：如果既使用了沉浸式状态栏，又加了fitSystetemWindow=true属性，就需要在AndroidMainfest.xml注册Activity的地方添加上以下属性。因为你两种都用，系统不知道用哪种了。fitSystetemWindow已经有resize屏幕的作用。 总结下面对上面几种方法进行对比： 方法一：优点：使用简单，只需在Activity的AndroidMainfest.xml中设置windowSoftInput属性即可。注意点：adjustResize属性必须要界面大小可以自身改变；缺点：当输入框比较多时，当前输入框下方的输入框会初键盘挡住，须收起键盘再进入输入；使用adjustPan，输入框较多时，因它是把界面当成一个整体，只会显示一屏的高度，会把ActionBar顶上去。 方法二：优点：使用简单，只需在Activity的最外层布局包裹一个ScrollView即可。注意点：不可使用adjustPan属性，否则ScrollView失效；缺点：对于全屏时，在键盘显示时，无法上下滑动界面达到输入的目的； 方法三：优点：可以解决全屏时，键盘挡入按钮问题。缺点：只要有此需求的Activity均需要获取到最外层控件和最后一个控件，监测键盘是否弹出，再调用控件的scrollTo方法对界面整体上移或是下移。代码冗余。对于键盘高度变化时，适配不好。 方法四：优点：可以解决全屏时，键盘挡入按钮问题。缺点：只要有此需求的Activity均需要获取到最外层控件和最后一个控件，布局多出一层。 方法五：优点：可以解决全屏时，键盘挡入输入框问题。只需要写一个全局类，其他有需求的界面直接在onCreate方法里调用此类的全局方法，即可。缺点：多用了一个类。 综上所述： 当输入框比较少时，界面只有一个输入框时，可以通过方法一设置adjustPan； 如果对于非全屏/非沉浸式状态栏需求，只需要使用方法二ScrollView+adjustResize； 如果对于使用沉浸式状态栏，使用fitSystemWindow=true属性，按道理android系统已经做好适配，键盘不会挡住输入框； 如果全屏/沉浸式状态栏界面，类似于登录界面，有需要把登录键钮或是评论按钮也顶起，如果键盘没有变化需求，可以使用方法三，若需要适配键盘高度变化，则需要使用方法四； 如果界面使用全屏或沉浸式状态栏，没有使用fitSystemWindow=true属性，一般如需要用到抽屈而且状态栏颜色也需要跟着变化，则选择方法五更恰当。","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"Android软键盘","slug":"Android软键盘","permalink":"http://dinson.win/tags/Android软键盘/"}]},{"title":"Android双缓冲绘图技术分析","date":"2017-05-09T15:12:42.000Z","path":"2017/05/09/17-05-09/","text":"概述 双缓冲、多缓冲技术在计算机科学中其实是一个广义的概念，不过其本质上的意思都是差不多的。今天我们就来讲一讲双缓冲技术在android绘图中的应用。所谓的双缓冲技术其实就是当程序需要在指定的View上进行绘制时，程序并不需要直接绘制到该View组件，而是先绘制到一个内存中的Bitmap图片上（就是缓冲），等内存中的Bitmap绘制好之后，再一次性将Bitmap绘制到View组件上。当进行复杂的绘制操作时会导致呈现的图像闪烁或具有 其他不可接受的外观。双缓冲的使用解决这些问题。双缓冲使用内存缓冲区来解决由多重 绘制操作造成的闪烁问题。当使用双缓冲时，首先在内存缓冲区里完成所有绘制操作，而 不是在屏幕上直接进行绘图。当所有绘制操作完成后，把内存缓冲区完成的图像直接复制 到屏幕。因为在屏幕上只执行一个图形操作，所以消除了由复杂绘制操作造成的图像闪烁 问题。 Android绘图中的双缓冲我们知道，我们在绘图时有两样东西是少不了的，一个是Canvas（画布），一个是Paint(画笔）。Canvas提供画各种图形的方法，如画圆（drawCircle)，画矩形（drawRect）等等，Paint用来设置画笔的样式，比如笔的粗细，颜色等。每个Canvas内部持有一个Bitmap对象的引用，画图的过程其实就是往这个Bitmap当中写入ARGB信息。比如我们现在自定义一个View,在上面画一个矩形和一个圆：12345@Overrideprotected void onDraw(Canvas canvas) &#123; canvas.drawRect(rect,mPaint); canvas.drawCircle(cx,cy,100,mPaint);&#125; 那么现在有一个问题，画矩形和画圆是两个独立的动作，会不会在drawRect执行完之后屏幕上马上就会显示出来一个矩形呢？为了验证我们的猜想，我们在两个绘图动作中加一个sleep:12345678910@Overrideprotected void onDraw(Canvas canvas) &#123; canvas.drawRect(rect,mPaint); try &#123; TimeUnit.MILLISECONDS.sleep(2000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; canvas.drawCircle(cx,cy,100,mPaint);&#125; 我们会看到，并不是先显示矩形再显示圆，而是两个几乎同时一起显示出来的。这就说明必须要等onDraw方法执行完成之后，才会把数据交给GPU去处理展示。这就是android绘图当中的第一道缓冲，即显示缓冲区。 而所谓的双缓冲，在android绘图中其实就是再创建一个Canvas和对应的Bitmap，然后在onDraw方法里默认的Canvas通过drawBitmap画刚才new的那个bitmap从而实现双缓冲。用代码简单的表述是这样的：12345678910111213141516private void init()&#123; Bitmap bufferBm = Bitmap.create(getWidth,getHeight,Bitmap.Config.ARGB_8888); Canvas bufferCanvas = new Canvas(bufferBm);&#125;private void drawSomething()&#123; bufferCanvas.drawRect(); bufferCanvas.drawCircle(); ... invalidate();&#125;@Overrideprotected void onDraw(Canvas canvas) &#123; canvas.drawBitmap(bufferBm,0,0,null);&#125; 示意图： 双缓冲绘图的优缺点及适用场景我们通过一个例子来说明。实现这样一个功能，一个自定义View,每次点击的时候在点击处画一个圆。我们先不使用双缓冲来实现： 不用双缓冲的代码123456789101112131415161718192021222324252627282930313233343536373839public class MyView extends View&#123; private Paint mPaint; private List&lt;Point&gt; mPoints; public MyView(Context context) &#123; super(context); &#125; public MyView(Context context, AttributeSet attrs) &#123; super(context, attrs); mPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG); mPaint.setStyle(Paint.Style.FILL); mPaint.setColor(Color.GREEN); setBackgroundColor(Color.WHITE); mPoints = new ArrayList&lt;&gt;(); &#125; @Override public boolean onTouchEvent(MotionEvent event) &#123; int action = event.getAction(); switch (action)&#123; case MotionEvent.ACTION_DOWN: mPoints.add(new Point((int)event.getX(),(int)event.getY())); break; case MotionEvent.ACTION_UP: invalidate(); break; &#125; return true; &#125; @Override protected void onDraw(Canvas canvas) &#123; for (Point p : mPoints) &#123; canvas.drawCircle(p.x,p.y,50,mPaint); &#125; &#125;&#125; 在实验之前，我们先打开开发者选项里的”GPU呈现模式分析“，设置为“在屏幕上显示为条形图”。可以看到，当画的圆数目比较少时，GPU的负荷较低，但是出现一个逐步上升的趋势： 当画的圆数目增加到比较大时，GPU负荷有点惨不妨睹了： 我们现在改用双缓冲来绘图，代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344public class MyView extends View&#123; private Paint mPaint; private Canvas mBufferCanvas; private Bitmap mBufferBitmap; public MyView(Context context) &#123; super(context); &#125; public MyView(Context context, AttributeSet attrs) &#123; super(context, attrs); mPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG); mPaint.setStyle(Paint.Style.FILL); mPaint.setColor(Color.GREEN); setBackgroundColor(Color.WHITE); &#125; @Override public boolean onTouchEvent(MotionEvent event) &#123; int action = event.getAction(); switch (action)&#123; case MotionEvent.ACTION_DOWN: if (mBufferBitmap == null) &#123; mBufferBitmap = Bitmap.createBitmap(getWidth(),getHeight(), Bitmap.Config.ARGB_8888); mBufferCanvas = new Canvas(mBufferBitmap); &#125; mBufferCanvas.drawCircle((int)event.getX(),(int)event.getY(),50,mPaint); break; case MotionEvent.ACTION_UP: invalidate(); break; &#125; return true; &#125; @Override protected void onDraw(Canvas canvas) &#123; if (mBufferBitmap == null) &#123; return; &#125; canvas.drawBitmap(mBufferBitmap,0,0,null); &#125;&#125; 使用双缓冲，在数量较小时的GPU使用情况是这样的： 使用双缓冲，在数量非常大的时候，GPU使用情况是这样的： 从上面的实验数据我们可以得出结论： 在绘制数据量较小时，不使用双缓冲，GPU的负荷更低，即绘制性能更高； 在绘制数据量较大时，使用双缓冲绘图，绘制性能明显高于不使用双缓冲的情况； 使用双缓冲会增加内存消耗。 其实上面的结论也很好理解，就像上面举的搬砖的例子，如果砖少的话，用车来拉明显是划不来的，砖的数量很多的时候，用车来拉就可以节省很多时间，但是用车就要消耗额外的资源，这就需要根据不同的情况做出正确的选择。","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"优化","slug":"优化","permalink":"http://dinson.win/tags/优化/"},{"name":"自定义控件","slug":"自定义控件","permalink":"http://dinson.win/tags/自定义控件/"}]},{"title":"你真的了解SharedPreferences吗？","date":"2017-05-08T14:50:54.000Z","path":"2017/05/08/17-05-08/","text":"SharedPreferences踩坑 在日常开发中SharedPreferences想必肯定是经常被我们使用的了，通常情况下使用它并不会发生什么问题，但是假如遇到了在不同进程中使用SharedPreferences（例如指定了process的activity/service），那坑就来了。 这里我们可以实验一下，创建两个Activity，在AndroidManifest其中一个将其process指定为second进程 代码比较简单，就是将输入框的内容存入到SharedPreferences中，并显示到TextView上，点击跳转按钮跳转到SecondActivity SecondActivity就是点击按钮获取SharedPreferences的值并显示到TextView，不过这里要注意它是运行在不同的进程中的。 这里我们将值改为hello，然后点击修改，可以看到SharedPreferences的值已经改成功了。 然后我们跳转到SecondActivity并获取值， 一切正常，好现在我们回到MainActivity，并再次修改SharedPreferences中的值， 可以看到SharedPreferences的值已经再次被修改成功，这时我们再跳转到SecondActivity并获取值， 不管怎么获取都是之前的值，然后重启app，再进入SecondActivity，便又能获取到正确的值了。-SecondActivity(重启app后)- 这里我们先总结一下结论 先启动主进程并获取SharedPreferences对象，然后启动其他进程并获取SharedPreferences对象，那么此时对SharedPreferences的数值进行修改均不能对其他进程产生作用。 先启动主进程并获取SharedPreferences对象，然后对值进行修改，然后启动其他进程并获取SharedPreferences对象，能取得修改后的值，但此时如果再对此值进行修改，均不能对其他进程产生作用。 总结下来就是，其他进程在启动时获取到的SharedPreferences的值只能是这个进程启动前这个值的最后值，即在进程启动后对值的修改只对当前进程有效，须等到进程重启或者app重启才能与其他进程进行“同步”。 这里即使把获取SharedPreferences对象的模式改为MODE_MULTI_PROCESS，也仅仅是在Android 3.0以下才有效，在Android 3.0以上也是一样不行的。 那么为什么会这样子呢，笔者带大家从源码的角度来分析一下，我们来看一下关于SharedPreferences的源码。 源码分析通常我们获取SharedPreferences对象一般是这样123SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);//或者这样SharedPreferences sharedPreferences = getSharedPreferences(\"name\", Context.MODE_PRIVATE); 实际上PreferenceManager.getDefaultSharedPreferences(context)方法也是对getSharedPreferences做了封装 所以不管通过哪种方式，最终都是通过Context中的getSharedPreferences方法来获取SharedPreferences对象，在Context中，getSharedPreferences方法是一个抽象方法，没有具体实现。12public abstract SharedPreferences getSharedPreferences(String name, int mode); 我们知道Context的实现类其实就是ContextImpl，所以这里我们直接去到ContextImpl的getSharedPreferences方法中， 这里比较简单，先判断了ArrayMap中是否存在该File对象，不存在则创建一个并放入ArrayMap，然后调用getSharedPreferences的重载方法getSharedPreferences(file, mode)，我们看一下这个方法的源码 可以看到，这里将SharedPreferences的实例对象SharedPreferencesImpl缓存起来，以后每次获取如果内存中已经存在那么直接返回，如果不存在才会进行重新创建; 那么这里我们可以有个猜想，即是否只有在创建SharedPreferences对象的时候才会从磁盘中进行读取，读取后的值保存在了内存中，获取SharedPreferences对象优先从缓存中获取，再次创建时才会重新从磁盘中再次读取文件。 我们直接看一下SharedPreferencesImpl的源码，验证一下我们的猜想。 可以看到，在SharedPreferencesImpl的构造方法中调用了startLoadFromDisk，startLoadFromDisk方法中开启了一个线程加载磁盘中的文件，loadFromDisk源码如下 看到这里，已经逐步验证了我们之前的猜想，在构造方法中读取了磁盘文件的内容并赋值给了成员变量mMap集合，我们只需要看看所有的get方法是不是从mMap成员变量中获取值就能完全验证我们的猜想是否正确，因为get方法都大同小异，所以我们就只分析一下getString方法就可以了。 可以看到，果然是这样的，从mMap集合中直接取出值进行返回，那么看到这里肯定会有个疑问，为什么在同个进程却又没有问题呢，或者其他进程对SharedPreferences的获取在值修改完毕之后也没有问题，这里我们看一下SharedPreferencesImpl的内部类EditorImpl的源码，EditorImpl是Editor的实现类。 可以看到，EditorImpl内部有一个mModified的Map成员变量，我们所有的修改在调用了commit或者apply方法后才会执行保存，可以看到，不管调用哪个方法都会调用commitToMemory()和enqueueDiskWrite方法，那么我们看一下这两个方法的源码 其实通过方法名我们也可以猜到，就是将值提交到内存，从代码上也可以看出来，就是将Editor的所有put进去的值添加到SharedPreferences的mMap成员变量中。 那么最后将内容写入磁盘的方法就是enqueueDiskWrite了，我们看一下它的源码 源码比较简单，其中最主要的就是区分了apply方法调用和commit的调用,apply调用的话会将写入磁盘的任务加入到一个线程池中在后台运行，直接commit的话则会在当前线程进行写入。 总结整个获取SharedPreferences对象过程的流程图如下","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"SharedPreferences","slug":"SharedPreferences","permalink":"http://dinson.win/tags/SharedPreferences/"}]},{"title":"全世界最著名的 icons 网站都在这了","date":"2017-05-05T02:45:52.000Z","path":"2017/05/05/17-05-05/","text":"概述 分享几个高逼格，免费的icons网站 icons8icons8：拥有 48,900 个免费图标，提供各个平台的基础图标与分类图标，其特色是大小和颜色随意自定义。 iconfindericonfinder：哥本哈根一个团队做的 icon 专业图标网站，拥有 1,667,626 个图标和 40,113 图标集，是最专业的 icon 图标网站之一。 iconfonticonfont：国内功能很强大且图标内容很丰富的矢量图标库,提供矢量图标下载、在线存储、格式转换等功能，是阿里妈妈 MUX 组业余时间做的的矢量图标管理、交流平台。 Font-AwesomeFont-Awesome：一套专门为 Twitter Boostrap 设计的图标字体库。这套图标字体集几乎囊括了网页中可能用到的所有图标，除了包括 Twitter Boostrap 的默认图标外，还有社交网络图标、Web 应用程序图标和编辑器图标等等，可以免费用于商业项目。 iconstoreiconstore：Icon Store 提供高质量的免费的/收费的图标，包括卡通风格图标，极简主义图标，扁平化设计风格图标，手绘风格图标，像素风格图标等等，也包括各种类型主题图标，比如圣诞节主题图标，情人节主题图标，天气图标，办公室图标,动物图标，美容美发图标等等。 Material iconsMaterial icons：Google 官方的扁平化图标手册，收集了多达10,000+图标，包括了网页，排版，音频，商务等等主题的绝大多数图标。格式包括SVG,PNG,ICON,以及字体图标，你可以在网页中轻松引用图标。 swifticonsswifticons：覆盖 20 个大类包含 2,264 个高质量图标 flat-icon-designflat-icon-design：一个日本的免费扁平化设计图示网站，总数量大约有 500 个左右！网站提供的图示风格设计都很简约、可爱，非常适合使用于网页设计、应用程序开发或投影片报告，而且这些图示明确标示为「可以作为商业用途」，网站开放 Illustrator AI、EPS、JPEG、PNG 和 SVG 五种格式下载。 Noun ProjectNoun Project：国外三位设计师 2010 创建一个收录、并可免费使用高清符号图示的媒体库，包含25个语言版本，每天都有来自世界各地的设计师提交新 icon。 FlaticonFlaticon：搜索海量扁平化图标，让图标搜索和转换变得非常简单和快速，并提供常用格式 SVG、PSD 源文件和 PNG 下载。","categories":[{"name":"UI设计","slug":"UI设计","permalink":"http://dinson.win/categories/UI设计/"}],"tags":[{"name":"UI","slug":"UI","permalink":"http://dinson.win/tags/UI/"},{"name":"设计师","slug":"设计师","permalink":"http://dinson.win/tags/设计师/"}]},{"title":"Android Studio 打包时Signature Version V1 V2","date":"2017-04-18T01:00:16.000Z","path":"2017/04/18/17-04-18/","text":"前几天更新了一下Android Studio ,今天在打正式包的时候发现多了个签名版本选择： 从图中可以看到多了签名版本的选择，因为刚开始默认勾选的v2(Full APK Signature)，没多想一路下一步下去，结果在测试机上（5.0.1）一直都安装失败，想着和那个选择签名版本有关系，那就查查吧。 问题描述 Android 7.0中引入了APK Signature Scheme v2，v1呢是jar Signature来自JDK V1：应该是通过ZIP条目进行验证，这样APK 签署后可进行许多修改，可以移动甚至重新压缩文件。V2：验证压缩文件的所有字节，而不是单个 ZIP 条目，因此，在签名后无法再更改(包括 zipalign)。正因如此，现在在编译过程中，我们将压缩、调整和签署合并成一步完成。好处显而易见，更安全而且新的签名可缩短在设备上进行验证的时间（不需要费时地解压缩然后验证），从而加快应用安装速度。 解决方案一v1和v2的签名使用只勾选v1签名并不会影响什么，但是在7.0上不会使用更安全的验证方式只勾选V2签名7.0以下会直接安装完显示未安装，7.0以上则使用了V2的方式验证同时勾选V1和V2则所有机型都没问题 解决方案二在app的build.gradle的android标签下加入如下12345678910signingConfigs &#123; debug &#123; v1SigningEnabled true v2SigningEnabled true &#125; release &#123; v1SigningEnabled true v2SigningEnabled true &#125; &#125;","categories":[{"name":"Android庶系","slug":"Android庶系","permalink":"http://dinson.win/categories/Android庶系/"}],"tags":[{"name":"AS","slug":"AS","permalink":"http://dinson.win/tags/AS/"},{"name":"签名","slug":"签名","permalink":"http://dinson.win/tags/签名/"}]},{"title":"Minimum supported Gradle version is 3.3. Current version is 2.14.1","date":"2017-04-17T10:31:16.000Z","path":"2017/04/17/17-04-17/","text":"最近gradle更新到了3.3，studio 每次重新进入项目都会提醒更新，于是手贱便点击了update。点击更新后发现我的项目就瘫痪了，但是打开其他的项目发现并没有出现什么问题。结果就是自己挖的坑把自己埋了一天半，在这记录一下 首先要搞懂两个概念，gradle版本和gradle插件版本，比如我现在as升级到了2.3，那么2.3就是gradle版本，2.14.1就是gradle插件版本，这两个概念的一一对应的，而之所以出现这个报错信息，就是因为当前项目的gradle插件版本是2.14.1，而gradle2.3对应的插件版本就是3.3，所以导致了报错。（gradle2.2.3对应的插件版本是2.14.1）那应该怎么解决呢？ 首先我们先查看一下gradle版本，打开根目录的build.gradle文件，框选的即为当前项目的gradle版本 再来看一下gradle插件版本，打开gradle/wrapper/gradle-wrapper.properties文件，框选的即为gradle插件版本 这里我们是修改了gradle版本，即在build.gradle中把2.3改为了2.2.0，当然我们也可以修改gradle插件的版本，在gradle-wrapper.properties文件中把2.14.1改为3.3，这时候联网下载gradle3.3插件的时候会非常慢，其实我们可以直接从网上下载好对应的gradle-3.3-all.zip包，然后直接放在C:\\Users\\用户名.gradle\\wrapper\\dists\\gradle-3.3-all\\xxxxxxxxxxxxxx文件下（这里注意不要解压缩），然后重新编译就可以了~ 对应关系","categories":[{"name":"Android庶系","slug":"Android庶系","permalink":"http://dinson.win/categories/Android庶系/"}],"tags":[{"name":"AS","slug":"AS","permalink":"http://dinson.win/tags/AS/"},{"name":"Gradle","slug":"Gradle","permalink":"http://dinson.win/tags/Gradle/"},{"name":"异常","slug":"异常","permalink":"http://dinson.win/tags/异常/"}]},{"title":"Android共享元素场景切换动画的实现","date":"2017-04-16T01:41:19.000Z","path":"2017/04/16/17-04-16/","text":"概述 我们知道安卓5.0系统引入了共享元素，能做出非常炫酷的场景切换效果，这让人非常兴奋同时非常蛋疼，因为低版本没法使用啊，所以今天就跟大家分享一下自己写的一个库，其实只有2个文件而已，还是叫它工具比较合适吧……非常轻量级，简直是人畜无害，兼容安卓5.0以下的版本。 先看看效果：效果图涉及了Activity中的元素（顶部bar）和ListView中的元素（icon和name），事实上无论哪个位置的元素都能轻松实现。 用法使用这个工具非常简单，假设有ActivityA（简称A）和ActivityB（简称B），在A中启动B，再从B回退到A，首先需要在A和B中，各自定义id相同的两个View，这里可以是ListView的item布局中的View，只要获取到View即可，然后： ·A启动B：·B回退到A： 用法非常简单，当然以上只是最少参数的基本用法，除此之外可以设置的参数还有时间、加减速以及动画监听，其中动画监听可以方便在动画开始前做一些初始化操作，以及动画结束后做一些显示操作，下面就来讲一下实现的原理。 原理从A启动B时，首先需要构造一个EasyTransitionOptions对象，直接通过EasyTransitionOptions.makeTransitionOptions方法进行构造，传入的参数为ActivityA以及需要共享的元素View，我们看一下EasyTransitionOptions有啥：可以看到前两个即为构造时传入的参数，第三个attrs接下来会用到。 接着我们跟往常一样，构造一个Intent对象，然后调用EasyTransition.startActivity方法，传入了该Intent以及前面构造好的options，我们看看EasyTransition.startActivity做了什么：首先调用了options.update方法，接着又获取了options的attrs并放到intent中，看看update方法：就是这里，options使用传入的View填充了之前看到的那个ViewAttrs集合attrs，attrs存储了View的一些属性，分别为：id用于获取B中的对应的View，接下来会讲到。startX和startY分别为View在A中的x、y坐标，这里通过View的getLocationOnScreen方法获取View在屏幕中的坐标，可以看到该方法的参数为int[] outLocation，以out开头的参数，意思即为执行方法后将填充该参数。width和height分别为View在A中的宽和高。 接下来通过options获取Activity并调用真正的startActivity方法，然后再调用overridePendingTransition(0, 0)将系统的转场动画覆盖，0表示没有转场动画。 然后进入到B，我们在B的onCreate方法中，只调用了一个方法EasyTransition.enter，看看这个方法做了什么：这个方法有很多个重载，最简单的只需要传入一个Activity参数即可。参数都很简单，分别为ActivityB，动画时间，动画的差值器以及动画监听。 首先通过Activity获取到Intent并拿到从A传入的ViewAttrs集合，接着执行了runEnterAnimation方法，到这里就要开始执行动画了，看看runEnterAnimation方法：看似挺长的，其实只做了一件事，即根据ViewAttrs集合attrs，给B中的View先设置属性，再执行一段动画。 首先遍历attrs，通过id找到B中对应的View；然后在ViewTreeObserver.OnPreDrawListener中设置View的属性，其中scale属性设置为A中View的宽高与B中View的宽高的比，transition属性设置为A中View的坐标相对于B中View的坐标的偏移量，之所以使用屏幕坐标就是为了准确地算出坐标的偏移量，而不受状态栏等其他因素的影响。 设置完成后，再调用View.animate方法，将动画结束状态设置为View在B中的初始状态，再传入时间、动画差值器以及监听器，就这样简单地完成了转场动画。 接着我们需要从B回退到A，在回退的操作中，调用了EasyTransition.exit方法，看看它做了什么：看起来跟enter方法差不多，通过Activity获取到Intent，再拿到ViewAttrs集合，是的它又派上用场了，接着执行了runExitAnimation方法，可以看到也是挺眼熟的：也是遍历attrs，找到B中对应id的View，只不过这次动画是从View在B中的初始状态开始，变到View在A中的状态，属性还是那些属性，没有啥其他的。不一样的是，在执行动画后需要关闭B，所以调用了View.postDelayed方法，然后finish掉当前的Activity，依旧是覆盖一下系统的转场动画overridePendingTransition(0, 0)。 就这样简单的实现了共享元素炫酷的转场动画，最初纠结于如何实现比较优雅，然后开始看5.0共享元素有关的那部分源码（也只是粗略看了一下），再看了看网上一些其他人的做法，最终提炼出了这个工具，非常轻量，用起来也挺舒服的。","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[]},{"title":"android 最全缓存目录获取方式和函数解析","date":"2016-07-28T02:18:06.000Z","path":"2016/07/28/16-07-28/","text":"概述 Android 开发中基本都要使用到文件的保存和读取操作，我们一般遇见的文件读写问题有几个：文件保存在哪？以及如何使用相关函数，目录权限的问题？以及删除应用之后目录是否会随之删除的问题？接下来就来解析一下这几个相关目录的操作函数。 /data/data/package_name/… 该目录是只对应用可见的，而且如果手机没有 root，用普通权限的 adb 也看不了这个目录，该目录用来存储和应用周期相关的文件，会随着应用的卸载一起删除，相关的子目录如下所示： /data/data/package_name/shared_prefs/用来存储 SharedPreference，对应函数为：getSharedPreferences(String fileName, int mode)； /data/data/package_name/databases/用来存储数据库 DB，相关函数还有 getDatabasePath()； /data/data/package_name/app_webview 和 /data/data/package_name/xxxwebviewcachexxx来存储应用内置 webview 所产生的 cache 和 cookies 等，该目录由于 android 版本不同名字和位置也可能不同； /data/data/package_name/lib用来存储该应用的 .so 静态库文件； /data/data/package_name/cache该目录可以使用函数 getCacheDir() 获取； /data/data/package_name/files该目录可以使用函数 getFilesDir() 获取，openFileInput() 和 openFileOutput() 函数也是在该目录下操作文件， fileList() 函数是用来列出该 files 目录下的所有文件，deleteFile(String name) 用来删除该 files 目录下的文件； /data/data/package_name/XXXX这个目录下面当然也能够创建子集的目录，使用的方法就是 getDir(String name, int mode)，参数中的 name 就是需要在该目录下创建的子目录名字。 如果能够打开应用的该目录，一般会在该目录下看到很多子目录。 还有一个特别奇怪的函数，无意中看见的 getCodeCacheDir() 函数，该函数的解释为 This location is optimal for storing compiled or optimized code generated by your application at runtime，该目录适合在运行时存放应用产生的编译或者优化的代码，但是我调用就报了 NoSuchMethodError，不知道为什么，知道的可以告诉我。 另外还有其他两个相关函数： 12getPackageCodePath() = /data/app/com.android.framework-1.apk getPackageResourcePath() = /data/app/com.android.framework-1.apk 以上函数没有明确指定的都是使用 Context 调用。 SD卡下的目录 SD 卡下的目录，顾名思义就是需要插入 SD 卡，当 SD 卡不可用时这两个目录都是无效的，SD 卡下面也分为应用的私有目录和共有目录，私有目录的生命周期也是和应用挂钩的，卸载之后就会被删除，共有目录不会随着应用的卸载而删除。 可以通过 Environment.getExternalStorageState() 函数来获取 SD 卡的挂载状态，当该函数返回 mounted 的时候，代表 SD 卡可用。 注意 SD 卡使用时需要注册相关权限：。 SD卡私有目录 该目录下的文件卸载应用之后会自动删除。 /sdcard/Android/data/package_name/ /sdcard/Android/data/com.android.framework/files/该目录可用 getExternalFilesDir(String type) 和 getExternalFilesDirs(String type) 获取，参数 type 为子目录名字，null 则为根目录，后者调用之后会自动生成该目录，并且后者返回的是一个数组，如果插入外置存储卡，外置存储卡目录也会一并返回，具体区别可以查看后面的源码和结果； /sdcard/Android/data/com.android.framework/cache/该目录可用 getExternalCacheDir() 和 getExternalCacheDirs() 获取，后者调用之后自动生成该目录，和上面一样，后者返回的是一个数组，如果插入外置存储卡，外置存储卡目录也会一并返回，具体区别可以查看后面的源码和结果。 /sdcard/Android/obb/package_name/ 需要注意的是，obb 目录也可能不存在，原文：Note if the application does not have any OBB files, this directory may not exist，一般游戏 APP 会将游戏相关的数据包放到这个目录下。 该目录的的相关函数简单只有两个：getObbDirs() 和 getObbDir()，前者调用之后会自动生成该目录，后者在插入外置存储卡之后会在前者的基础上另外返回外置存储卡的 obb 目录，具体的结果可以查看后面的源码和结果。 SD卡共有目录 该目录下的文件卸载应用之后还会留存，所以为了 SD 卡的整洁度，不要随便在 SD 卡的根目录下面创建文件，最好以应用名字创建一个目录，所有的需要卸载之后留存或者需要给其他应用共享的文件都放到该目录下，不要在根目录下创建文件，还有一个公司的多个应用最好共享一个目录，特别讨厌 360 ，恨不得把 360XXX 式的目录全部创建完才行，极其讨厌和反对。 /sdcard/(any_folder_name) Environment.getExternalStorageState()这个函数用来获取 SD 卡的挂载状态，如果传入参数 path 则是获取该路径的的挂载状态，比如这个目录被用户的 PC 挂载，或者从设备中移除，或者其他问题发生，状态的返回是不一样的； Environment.getExternalStorageDirectory()该函数用来返回 SD 卡的根目录，即 /storage/emulated/0，注意不要在根目录下创建文件，强烈建立创建一个子目录去操作，要不然会污染 SD 卡的主目录，该目录所有应用都可操作，为共享目录； Environment.getDownloadCacheDirectory()该函数用来返回 SD 卡下面的下载缓存目录； Environment.getDataDirectory()该函数用来获取用户的数据目录； Environment.getExternalStoragePublicDirectory(String type)该函数用来根据类型返回相关目录，类型为 Environment 的一些变量，传入的类型参数不能是 null，返回的目录路径有可能不存在，所以必须在使用之前确认一下，没有就创建该目录； Environment.getRootDirectory()该函数用来返回根 System 目录，只挂载为只读; 源码及结果 手机如果还能够SD卡扩展，就相当于能挂载两张SD卡，下面的测试结果也是两张SD卡的结果： 12345678910111213141516171819202122232425262728293031L.e(\"getDatabasePath():\"+getDatabasePath(\"student.db\"));L.e(\"getCacheDir():\" + getCacheDir());L.e(\"getFilesDir():\" + getFilesDir());String[] strings = fileList();for (String path : strings)&#123;//为空 L.e(\"fileList():---\" + path);&#125;L.e(\"getDir(\\\"zhao\\\"):\" + getDir(\"zhao\", MODE_PRIVATE));// L.e(\"getCodeCacheDir():\" + getCodeCacheDir()); //java.lang.NoSuchMethodErrorL.e(\"getPackageCodePath():\" + getPackageCodePath());L.e(\"getPackageResourcePath():\" + getPackageResourcePath());L.e(\"getExternalFilesDir():\" + getExternalFilesDir(null));File[] paths = getExternalFilesDirs(null);for (File path : paths)&#123; L.e(\"getExternalFilesDirs():---\" + path.getPath());&#125;L.e(\"getExternalCacheDir():\" + getExternalCacheDir());paths = getExternalCacheDirs();for (File path : paths)&#123; L.e(\"getExternalCacheDirs():---\" + path.getPath());&#125;L.e(\"getObbDir():\" + getObbDir());paths = getObbDirs();for (File path : paths)&#123; L.e(\"getObbDirs():---\" + path.getPath());&#125;L.e(\"Environment.getExternalStorageState():\"+ Environment.getExternalStorageState());L.e(\"Environment.getExternalStorageDirectory():\"+Environment.getExternalStorageDirectory());L.e(\"Environment.getDownloadCacheDirectory():\"+Environment.getDownloadCacheDirectory());L.e(\"Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC):\"+Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC));L.e(\"Environment.getRootDirectory():\"+Environment.getRootDirectory()); 对应的结果为，注意看外部存储卡的路径：1234567891011121314151617181920getDatabasePath():/data/data/com.dinson.framework/databases/student.dbgetCacheDir():/data/data/com.dinson.framework/cachegetFilesDir():/data/data/com.dinson.framework/filesgetDir(\"zhao\"):/data/data/com.dinson.framework/app_zhaogetPackageCodePath():/data/app/com.dinson.framework-1.apkgetPackageResourcePath():/data/app/com.dinson.framework-1.apkgetExternalFilesDir():/storage/emulated/0/Android/data/com.dinson.framework/filesgetExternalFilesDirs():---/storage/emulated/0/Android/data/com.dinson.framework/filesgetExternalFilesDirs():---/storage/ext_sd/Android/data/com.dinson.framework/files*******getExternalCacheDir():/storage/emulated/0/Android/data/com.dinson.framework/cachegetExternalCacheDirs():---/storage/emulated/0/Android/data/com.dinson.framework/cachegetExternalCacheDirs():---/storage/ext_sd/Android/data/com.dinson.framework/cache*******getObbDir():/storage/emulated/0/Android/obb/com.dinson.frameworkgetObbDirs():---/storage/emulated/0/Android/obb/com.dinson.frameworkgetObbDirs():---/storage/ext_sd/Android/obb/com.dinson.framework*******Environment.getExternalStorageState():mountedEnvironment.getExternalStorageDirectory():/storage/emulated/0Environment.getDownloadCacheDirectory():/cacheEnvironment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MUSIC):/storage/emulated/0/MusicEnvironment.getRootDirectory():/system","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[]},{"title":"查看Android应用包名、Activity的几个方法","date":"2016-07-25T12:49:20.000Z","path":"2016/07/25/16-07-25/","text":"概述 使用自动化测试工具monkeyrunner启动应用时，需要填写被测程序的包名和启动的Activity，以下有两种查看应用包名package和入口activity名称的方法： 有源码情况直接打开AndroidManifest.xml文件，找到包含Android.intent.action.MAIN和android.intent.category.LAUNCHER对应的activity。 如下图中第三行package为com.cola.ui，第七行主Activity为com.cola.ui.ColaBox(.ColaBox为Activity简写方式)。 只有Apk的情况aapt使用命令行aapt dump xmltree xxxxxx.apk AndroidManifest.xml aapt使用命令行aapt dump badging xxxxxx.apk 反编译使用反编译工具apktool，反编译后打开AndroidManifest.xml文件，查找方式同“有源码情况”反编译传送门 没有apk，应用已经安装到手机或虚拟机中logcat 清除logcat内容，使用命令adb logcat -c 启动logcat，使用命令adb logcat ActivityManager:I *:s 启动要查看的程序 dumpsys 启动要查看的程序； 命令行输入：adb shell dumpsys window w |findstr \\/ |findstr name=","categories":[{"name":"Android庶系","slug":"Android庶系","permalink":"http://dinson.win/categories/Android庶系/"}],"tags":[{"name":"应用包名","slug":"应用包名","permalink":"http://dinson.win/tags/应用包名/"}]},{"title":"Android keycode","date":"2016-07-21T10:44:33.000Z","path":"2016/07/21/16-07-21/","text":"概述 Android 常用按键大全 电话键 键名 描述 键值 KEYCODE_CALL 拨号键 5 KEYCODE_ENDCALL 挂机键 6 KEYCODE_HOME 按键Home 3 KEYCODE_MENU 菜单键 82 KEYCODE_BACK 返回键 4 KEYCODE_SEARCH 搜索键 84 KEYCODE_CAMERA 拍照键 27 KEYCODE_FOCUS 拍照对焦键 80 KEYCODE_POWER 电源键 26 KEYCODE_NOTIFICATION 通知键 83 KEYCODE_MUTE 话筒静音键 91 KEYCODE_VOLUME_MUTE 扬声器静音键 164 KEYCODE_VOLUME_UP 音量增加键 24 KEYCODE_VOLUME_DOWN 音量减小键 25 ##控制键 键名 描述 键值 KEYCODE_ENTER 回车键 66 KEYCODE_ESCAPE ESC键 111 KEYCODE_DPAD_CENTER 导航键 确定键 23 KEYCODE_DPAD_UP 导航键 向上 19 KEYCODE_DPAD_DOWN 导航键 向下 20 KEYCODE_DPAD_LEFT 导航键 向左 21 KEYCODE_DPAD_RIGHT 导航键 向右 22 KEYCODE_MOVE_HOME 光标移动到开始键 122 KEYCODE_MOVE_END 光标移动到末尾键 123 KEYCODE_PAGE_UP 向上翻页键 92 KEYCODE_PAGE_DOWN 向下翻页键 93 KEYCODE_DEL 退格键 67 KEYCODE_FORWARD_DEL 删除键 112 KEYCODE_INSERT 插入键 124 KEYCODE_TAB Tab键 61 KEYCODE_NUM_LOCK 小键盘锁 143 KEYCODE_CAPS_LOCK 大写锁定键 115 KEYCODE_BREAK Break/Pause键 121 KEYCODE_SCROLL_LOCK 滚动锁定键 116 KEYCODE_ZOOM_IN 放大键 168 KEYCODE_ZOOM_OUT 缩小键 169 组合键 键名 描述 KEYCODE_ALT_LEFT Alt+Left KEYCODE_ALT_RIGHT Alt+Right KEYCODE_CTRL_LEFT Control+Left KEYCODE_CTRL_RIGHT Control+Right KEYCODE_SHIFT_LEFT Shift+Left KEYCODE_SHIFT_RIGHT Shift+Right 基本 键名 描述 键值 KEYCODE_0 按键’0’ 7 KEYCODE_1 按键’1’ 8 KEYCODE_2 按键’2’ 9 KEYCODE_3 按键’3’ 10 KEYCODE_4 按键’4’ 11 KEYCODE_5 按键’5’ 12 KEYCODE_6 按键’6’ 13 KEYCODE_7 按键’7’ 14 KEYCODE_8 按键’8’ 15 KEYCODE_9 按键’9’ 16 KEYCODE_A 按键’A’ 29 KEYCODE_B 按键’B’ 30 KEYCODE_C 按键’C’ 31 KEYCODE_D 按键’D’ 32 KEYCODE_E 按键’E’ 33 KEYCODE_F 按键’F’ 34 KEYCODE_G 按键’G’ 35 KEYCODE_H 按键’H’ 36 KEYCODE_I 按键’I’ 37 KEYCODE_J 按键’J’ 38 KEYCODE_K 按键’K’ 39 KEYCODE_L 按键’L’ 40 KEYCODE_M 按键’M’ 41 KEYCODE_N 按键’N’ 42 KEYCODE_O 按键’O’ 43 KEYCODE_P 按键’P’ 44 KEYCODE_Q 按键’Q’ 45 KEYCODE_R 按键’R’ 46 KEYCODE_S 按键’S’ 47 KEYCODE_T 按键’T’ 48 KEYCODE_U 按键’U’ 49 KEYCODE_V 按键’V’ 50 KEYCODE_W 按键’W’ 51 KEYCODE_X 按键’X’ 52 KEYCODE_Y 按键’Y’ 53 KEYCODE_Z 按键’Z’ 54 符号 键名 描述 KEYCODE_PLUS 按键’+’ KEYCODE_MINUS 按键’-‘ KEYCODE_STAR 按键’*’ KEYCODE_SLASH 按键’/‘ KEYCODE_EQUALS 按键’=’ KEYCODE_AT 按键’@’ KEYCODE_POUND 按键’#’ KEYCODE_APOSTROPHE 按键’’’ (单引号) KEYCODE_BACKSLASH 按键’\\’ KEYCODE_COMMA 按键’,’ KEYCODE_PERIOD 按键’.’ KEYCODE_LEFT_BRACKET 按键’[‘ KEYCODE_RIGHT_BRACKET 按键’]’ KEYCODE_SEMICOLON 按键’;’ KEYCODE_GRAVE 按键’`’ KEYCODE_SPACE 空格键 小键盘 键名 描述 KEYCODE_NUMPAD_0 小键盘按键’0’ KEYCODE_NUMPAD_1 小键盘按键’1’ KEYCODE_NUMPAD_2 小键盘按键’2’ KEYCODE_NUMPAD_3 小键盘按键’3’ KEYCODE_NUMPAD_4 小键盘按键’4’ KEYCODE_NUMPAD_5 小键盘按键’5’ KEYCODE_NUMPAD_6 小键盘按键’6’ KEYCODE_NUMPAD_7 小键盘按键’7’ KEYCODE_NUMPAD_8 小键盘按键’8’ KEYCODE_NUMPAD_9 小键盘按键’9’ KEYCODE_NUMPAD_ADD 小键盘按键’+’ KEYCODE_NUMPAD_SUBTRACT 小键盘按键’-‘ KEYCODE_NUMPAD_MULTIPLY 小键盘按键’*’ KEYCODE_NUMPAD_DIVIDE 小键盘按键’/‘ KEYCODE_NUMPAD_EQUALS 小键盘按键’=’ KEYCODE_NUMPAD_COMMA 小键盘按键’,’ KEYCODE_NUMPAD_DOT 小键盘按键’.’ KEYCODE_NUMPAD_LEFT_PAREN 小键盘按键’(‘ KEYCODE_NUMPAD_RIGHT_PAREN 小键盘按键’)’ KEYCODE_NUMPAD_ENTER 小键盘按键回车 功能键 键名 描述 KEYCODE_F1 按键F1 KEYCODE_F2 按键F2 KEYCODE_F3 按键F3 KEYCODE_F4 按键F4 KEYCODE_F5 按键F5 KEYCODE_F6 按键F6 KEYCODE_F7 按键F7 KEYCODE_F8 按键F8 KEYCODE_F9 按键F9 KEYCODE_F10 按键F10 KEYCODE_F11 按键F11 KEYCODE_F12 按键F12 多媒体键 键名 描述 KEYCODE_MEDIA_PLAY 多媒体键 播放 KEYCODE_MEDIA_STOP 多媒体键 停止 KEYCODE_MEDIA_PAUSE 多媒体键 暂停 KEYCODE_MEDIA_PLAY_PAUSE 多媒体键 播放/暂停 KEYCODE_MEDIA_FAST_FORWARD 多媒体键 快进 KEYCODE_MEDIA_REWIND 多媒体键 快退 KEYCODE_MEDIA_NEXT 多媒体键 下一首 KEYCODE_MEDIA_PREVIOUS 多媒体键 上一首 KEYCODE_MEDIA_CLOSE 多媒体键 关闭 KEYCODE_MEDIA_EJECT 多媒体键 弹出 KEYCODE_MEDIA_RECORD 多媒体键 录音 手柄按键 键名 描述 KEYCODE_BUTTON_1 通用游戏手柄按钮 #1 KEYCODE_BUTTON_2 通用游戏手柄按钮 #2 KEYCODE_BUTTON_3 通用游戏手柄按钮 #3 KEYCODE_BUTTON_4 通用游戏手柄按钮 #4 KEYCODE_BUTTON_5 通用游戏手柄按钮 #5 KEYCODE_BUTTON_6 通用游戏手柄按钮 #6 KEYCODE_BUTTON_7 通用游戏手柄按钮 #7 KEYCODE_BUTTON_8 通用游戏手柄按钮 #8 KEYCODE_BUTTON_9 通用游戏手柄按钮 #9 KEYCODE_BUTTON_10 通用游戏手柄按钮 #10 KEYCODE_BUTTON_11 通用游戏手柄按钮 #11 KEYCODE_BUTTON_12 通用游戏手柄按钮 #12 KEYCODE_BUTTON_13 通用游戏手柄按钮 #13 KEYCODE_BUTTON_14 通用游戏手柄按钮 #14 KEYCODE_BUTTON_15 通用游戏手柄按钮 #15 KEYCODE_BUTTON_16 通用游戏手柄按钮 #16 KEYCODE_BUTTON_A 游戏手柄按钮 A KEYCODE_BUTTON_B 游戏手柄按钮 B KEYCODE_BUTTON_C 游戏手柄按钮 C KEYCODE_BUTTON_X 游戏手柄按钮 X KEYCODE_BUTTON_Y 游戏手柄按钮 Y KEYCODE_BUTTON_Z 游戏手柄按钮 Z KEYCODE_BUTTON_L1 游戏手柄按钮 L1 KEYCODE_BUTTON_L2 游戏手柄按钮 L2 KEYCODE_BUTTON_R1 游戏手柄按钮 R1 KEYCODE_BUTTON_R2 游戏手柄按钮 R2 KEYCODE_BUTTON_MODE 游戏手柄按钮 Mode KEYCODE_BUTTON_SELECT 游戏手柄按钮 Select KEYCODE_BUTTON_START 游戏手柄按钮 Start KEYCODE_BUTTON_THUMBL Left Thumb Button KEYCODE_BUTTON_THUMBR Right Thumb Button 待查 键名 描述 KEYCODE_NUM 按键Number modifier KEYCODE_INFO 按键Info KEYCODE_APP_SWITCH 按键App switch KEYCODE_BOOKMARK 按键Bookmark KEYCODE_AVR_INPUT 按键A/V Receiver input KEYCODE_AVR_POWER 按键A/V Receiver power KEYCODE_CAPTIONS 按键Toggle captions KEYCODE_CHANNEL_DOWN 按键Channel down KEYCODE_CHANNEL_UP 按键Channel up KEYCODE_CLEAR 按键Clear KEYCODE_DVR 按键DVR KEYCODE_ENVELOPE 按键Envelope special function KEYCODE_EXPLORER 按键Explorer special function KEYCODE_FORWARD 按键Forward KEYCODE_FORWARD_DEL 按键Forward Delete KEYCODE_FUNCTION 按键Function modifier KEYCODE_GUIDE 按键Guide KEYCODE_HEADSETHOOK 按键Headset Hook KEYCODE_META_LEFT 按键Left Meta modifier KEYCODE_META_RIGHT 按键Right Meta modifier KEYCODE_PICTSYMBOLS 按键Picture Symbols modifier KEYCODE_PROG_BLUE 按键Blue “programmable” KEYCODE_PROG_GREEN 按键Green “programmable” KEYCODE_PROG_RED 按键Red “programmable” KEYCODE_PROG_YELLOW 按键Yellow “programmable” KEYCODE_SETTINGS 按键Settings KEYCODE_SOFT_LEFT 按键Soft Left KEYCODE_SOFT_RIGHT 按键Soft Right KEYCODE_STB_INPUT 按键Set-top-box input KEYCODE_STB_POWER 按键Set-top-box power KEYCODE_SWITCH_CHARSET 按键Switch Charset modifier KEYCODE_SYM 按键Symbol modifier KEYCODE_SYSRQ 按键System Request / Print Screen KEYCODE_TV 按键TV KEYCODE_TV_INPUT 按键TV input KEYCODE_TV_POWER 按键TV power KEYCODE_WINDOW 按键Window KEYCODE_UNKNOWN 未知按键","categories":[{"name":"Android庶系","slug":"Android庶系","permalink":"http://dinson.win/categories/Android庶系/"}],"tags":[{"name":"安卓按键","slug":"安卓按键","permalink":"http://dinson.win/tags/安卓按键/"}]},{"title":"Android自动测试之Monkey工具","date":"2016-07-20T06:07:39.000Z","path":"2016/07/20/16-07-20/","text":"概述 Monkey是一个命令行工具，可以运行在模拟器里或实际设备中，使用安卓调试桥(adb)来运行它，向系统发送伪随机的用户事件流，实现对正在开发的应用程序进行压力测试，可以根据获取的log信息进行修复。 Monkey的基本使用 连接设备：adb devices 查看设备是否连接成功 adb shell 进入shell界面 设备安装要运行的程序包或apk（或者通过查看data/data下的程序包)：adb安装apk：在所安装的apk路径下，使用adb install **.apk 执行monkey测试命令：monkey -p your.package.name -v 500 在不知道所安装的apk的包名的时候，采用adb命令查看包名： 清除logcat内容，使用命令adb logcat -c 启动logcat，使用命令adb logcat ActivityManager:I *:s 启动要查看的程序， 打开已安装的apk，查看出现的ActivityManager信息，cmp=name，此name就是打开的apk的包名。 Monkey命令使用 -help列出简单用法 -v作用：命令行上的每一个-v都将增加反馈信息的详细级别。Lv0：默认，除了启动、测试完成和最终结果外只提供较少的信息。Lv1：提供了较为详细的测试信息，如逐个发送到Activity的事件信息。Lv2：提供了更多的设置信息，如测试中选中或未选中的Activity信息。例：adb shell monkey -v 10 adb shell monkey -v -v 10 adb shell monkey -v -v -v 10 -s 伪随机数生成器的seed值。如果用相同的seed值再次运行monkey，将生成相同的事件序列。例： adb shell monkey -s 12345 -v 10 -p 如果你指定一个或多个包，Monkey将只允许访问这些包中的Activity。如果你的应用程序需要访问这些包(如选择联系人)以外的Activity，你需要指定这些包。如果你不指定任何包，Monkey将允许系统启动所有包的Activity。指定多个包，使用多个-p，一个-p后面接一个包名。例： adb shell monkey -p com.android.browser -v 10 -c 如果你指定一个或多个类别，Monkey将只允许系统启动这些指定类别中列出的Activity。如果你不指定任何类别，Monkey将选择谢列类别中列出的Activity，Intent.CATEGORY_LAUNCHER和Intent.CATEGORY_MONKEY。指定多个类别使用多个-c，每个-c指定一个类别。例： adb shell monkey -p com.paipai.ershou -v 10 -c –ignore-crashes通常，应用发生崩溃或异常时Monkey会停止运行。如果设置此项，Monkey将继续发送事件给系统，直到事件计数完成。 –ignore-timeouts事件请求超时会影响monkey的测试。如果设置此项，Monkey将继续发送事件给系统，直到事件计数完成。 adb shell monkey -p com.ihongqiqu -v -v -v 500 &gt; monkeytest.txt保存测试日志 九个事件及百分比控制0 –pct-touch 调整触摸事件的百分比(触摸事件是一个down-up事件，它发生在屏幕上的某单一位置)（——点击事件，涉及down、up） 1 –pct-motion 调整动作事件的百分比(动作事件由屏幕上某处的一个down事件、一系列的伪随机事件和一个up事件组成) （——注：move事件，涉及down、up、move三个事件） 2 –pct-pinchzoom 二指缩放百分比，即智能机上的放大缩小手势操作 3 –pct-trackball 调整轨迹事件的百分比(轨迹事件由一个或几个随机的移动组成，有时还伴随有点击)–（轨迹球） 4 –pct-rotation 屏幕旋转百分比，横屏竖屏 5 –pct-permission 权限变换测试 6–pct-nav 调整“基本”导航事件的百分比(导航事件由来自方向输入设备的up/down/left/right组成) 7–pct-majornav 调整“主要”导航事件的百分比(这些导航事件通常引发图形界面中的动作，如：5-way键盘的中间按键、回退按键、菜单按键) 8–pct-syskeys 调整“系统”按键事件的百分比(这些按键通常被保留，由系统使用，如Home、Back、Start Call、End Call及音量控制键) 9–pct-appswitch 调整启动Activity的百分比。在随机间隔里，Monkey将执行一个startActivity()调用，作为最大程度覆盖包中全部Activity的一种方法。（从一个Activity跳转到另一个Activity） 10–pct-flip 调整“键盘翻转”事件的百分比。 11–pct-anyevent 调整其它类型事件的百分比。它包罗了所有其它类型的事件，如：按键、其它不常用的设备按钮、等等。红色的数字对应下面百分比对应的数字。比如下图中0：15.0%，表示分配–pct-touch事件15%。测试100次分配15次测试down-up。 如果在monkey参数中不指定上述参数，这些动作都是随机分配的，9个动作其每个动作分配的百分比之和为100%，我们可以通过添加命令选项来控制每个事件的百分比，进而可以将操作限制在一定的范围内。我们先来看一下不加动作百分比控制，系统默认分配事件百分比的情况 再看一下指定事件，控制事件百分比之后的情况 Monkey测试信息 在Monkey测试过程中可能会出现程序崩溃(CRASH)和程序无响应的情况(ANR),要将测试的log信息获取到，从而解决bug。 CRASH:即崩溃信息，程序在运行中非正常退出。 不设置忽略crashes，在测试过程中出现CRASH，会中断测试，并显示CRASH信息和seed信息根据seed值来完成bug的复现：adb shell monkey -p com.feicuiedu.monkeytestdemo -s 1476474162566 -v 1000 ANR:同样在monkey测试过程中，如果出现ANR现象，会输出相应的信息，以ANR开头，获取到信息进行问题的解决，同样可以通过seed来进行复现。 附：如果在手动测试过程中出现ANR，日志信息出现在手机中： adb shell cd /data/anr 切换到设备路径下 ls 可以看到traces.txt 里面即为log信息 MonkeyScript MonkeyScript是monkey的脚本语言，是一组可以被Monkey识别的命令集合，可以帮我们完成一系列的被固定的重复性操作，Monkey通过脚本来进行测试，简单快捷、不需要任何工具，只是一个记事本文件，缺点是在坐标、按键等方面没有逻辑性。 脚本格式123456789#头文件、控制monkey发送消息的参数type=raw eventscount=10speed=1.0#以下为monkey命令start data &gt;&gt;DispatchPress (KEYCODE_HOME)DispatchPress (KEYCODE_MENU) 常用API 常用API的介绍，其中keycode参考keycode列表 LaunchActivity(pkg_name, cl_name) 启动应用的Activity。参数：包名和启动的Activity。 Tap(x, y, tapDuration) 模拟一次手指单击事件。参数：x,y为控件坐标，tapDuration为点击的持续时间，此参数可省略。 DispatchPress(keyName) 按键。参数： keycode RotateScreen(rotationDegree, persist) 旋转屏幕。 参数：rotationDegree为旋转角度， e.g. 1代表90度；persist表示旋转之后是否固定，0表示旋转后恢复，非0则表示固定不变。 DispatchFlip(true/false) 打开或者关闭软键盘。 LongPress() 长按2秒。 PressAndHold(x, y, pressDuration) 模拟长按事件。 DispatchString(input) 输入字符串。 Drag(xStart, yStart, xEnd, yEnd, stepCount) 用于模拟一个拖拽操作。 PinchZoom(x1Start, y1Start, x1End, y1End, x2Start, y2Start, x2End, y2End, stepCount) 模拟缩放手势。 UserWait(sleepTime) 休眠一段时间 DeviceWakeUp() 唤醒屏幕。 PowerLog(power_log_type, test_case_status) 模拟电池电量信息。 WriteLog() 将电池信息写入sd卡。 RunCmd(cmd) 运行shell命令。 DispatchPointer(downtime,eventTime,action,x,yxpressure,size,metastate,xPrecision,yPrecision,device,edgeFlags) 向指定位置，发送单个手势。 DispatchPointer(downtime,eventTime,action,x,yxpressure,size,metastate,xPrecision,yPrecision,device,edgeFilags) 发送按键消息。 LaunchInstrumentation(test_name,runner_name) 运行一个instrumentation测试用例。 DispatchTrackball 模拟发送轨迹球事件。 ProfileWait 等待5秒。 StartCaptureFramerate() 获取帧率。 EndCaptureFramerate(input) 结束获取帧率。 API方法中控件位置(X,Y轴的坐标)的获取：使用Android提供的工具uiautomatorviewer.bat 在Android SDK路径下–&gt; tools –&gt; uiautomatorviewer.bat，打开就可以展示设备/模拟器上展示的视图，展示视图结构和坐标。 简单示例1234567891011121314151617181920212223#头文件、控制monkey发送消息的参数type=raw eventscount=10speed=1.0#以下为脚本正文start data &gt;&gt;#1.打开浏览器LaunchActivity(com.android.browser,com.android.browser.BrowserActivity)ProfileWait()#2.清空网址Tap(223,146)ProfileWait()DispatchPress(112)ProfileWait()#3.输入网址DispatchString(www.baidu.com)ProfileWait()#4.确认，载入网址DispatchPress(KEYCODE_ENTER)ProfileWait()#5.完成退出浏览器DispatchPress(KEYCODE_HOME)ProfileWait() 1.脚本完成后将.txt 文件push到手机中 1adb push name.txt path 其中name是指monkey脚本文件的名称，path是要push到手机上的路径 2.运行Monkey脚本 1monkey -f path/name.txt -v 500 path是push的路径，name是脚本文件的名称。 案例实践随机事件流对MonketTestDemo进行测试： adb devices 查看设备是否连接 adb shell 进入shell界面 monkey -p com.feicuiedu.monkeytestdemo -v 500 执行monkey命令 (可选)monkey -p com.feicuiedu.monkeytestdemo -v 500 &gt; monkeytest.txt 执行monkey命令，并将monkey日志存储 一次随机的自动化Monkey测试完成。MonkeyScript对MonkeyTestDemo进行测试： 完成monkey.txt脚本的编写，保存到某一路径下 切换到monkey.txt路径下 adb push monkey.txt /data/local/temp/(设备的任一路径，无确切规定) adb shell 切换到设备下 cd /data/local/temp 切换到monkey.txt路径下 monkey -f monkey.txt -v 10 执行monkey脚本及执行次数 一次MonkeyScript的自动化Monkey测试完成。 关于Monkey测试的停止条件Monkey Test执行过程中在下列三种情况下会自动停止： 如果限定了Monkey运行在一个或几个特定的包上，那么它会监测试图转到其它包的操作，并对其进行阻止。 如果应用程序崩溃或接收到任何失控异常，Monkey将停止并报错。 如果应用程序产生了应用程序不响应(application not responding)的错误，Monkey将会停止并报错。 通过多次并且不同设定下的Monkey测试才算它是一个稳定性足够的程序。","categories":[{"name":"Android庶系","slug":"Android庶系","permalink":"http://dinson.win/categories/Android庶系/"}],"tags":[{"name":"Monkey工具","slug":"Monkey工具","permalink":"http://dinson.win/tags/Monkey工具/"},{"name":"自动化测试","slug":"自动化测试","permalink":"http://dinson.win/tags/自动化测试/"}]},{"title":"Hexo设置指南","date":"2016-07-17T05:56:19.000Z","path":"2016/07/17/16-07-17/","text":"概述 设置指南 设置阅读全文 建议使用第一种方式，除了可以精确控制需要显示的摘录内容以外， 这种方式也可以让 Hexo 中的插件更好的识别。 在文章中使用&lt;!–more–> 手动进行截断。这种方法可以根据文章的内容，自己在合适的位置添加&lt;!–more–>标签，使用灵活，也是Hexo推荐的方法。 在文章中的front-matter中添加description，并提供文章摘录。这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。 自动形成摘要，在主题配置_config.yml文件中添加。默认截取的长度为 150 字符，可以根据需要自行设定。 123auto_excerpt: enable: truelength: 150","categories":[{"name":"个人博客辛酸系列","slug":"个人博客辛酸系列","permalink":"http://dinson.win/categories/个人博客辛酸系列/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://dinson.win/tags/Hexo/"}]},{"title":"GitHub+Hexo搭建个人博客辛酸史--分支控制(贰)","date":"2016-07-15T02:05:54.000Z","path":"2016/07/15/16-07-15/","text":"概述 利用github的不同分支来分别保存网站静态文件与hexo源码（md原始文件及主题等），实现在不同电脑上都可以自由写博客 当然，这种方式也有缺点，那就是所有的静态页面由于都需要保存在github里的自己名下的网站同名项目仓库内，所以如果项目仓库是public的，那么所有人都会看到你的网站代码， 这个其实应该也没有关系吧！！！hexo都是开源的，而且静态博客是编译后的，框架和主题都是用的别人开源出来的，但博客写了不就是让别人看的？所以应该真的无所谓。。。 如果你实在不想让别人看到你的md原件，那么就不要使用本文所说的同一个项目的分支啦，就去新建一个项目来单独保存源码文件吧，并且把这个项目设为priviate的，要花钱的哦，这样别人就看不到啦。。。 新建hexo分支 如上图在红色输入框内写入新建的branch名 hexo 后，回车即可建立新的branch-hexo； 设置默认分支因为我们写博客更多的是更新这个分支，网站文件所在的 master 分支则由 hexo d 命令发布文章的时候进行推送，所以我们将 hexo分支设置为默认分支，这样我们在新的电脑环境下 git clone 该仓库时，自动切到 hexo分支。按下图进行操作。 配置hexo deploy参数为了保证 hexo d 命令可以正确部署到 master 分支，在hexo 的配置文件 _config.yml 文件中配置参数如下：1234deploy: type: git repo: https://github.com/username/username.github.io.git branch: master hexo 3.0之后 deploy type，将github改为了git，这样适用性更广了，如果你发现无法 hexo d ，使用下面的命令安装git deployer插件后重试即可。1npm install hexo-deployer-git --save 修改推送到hexo分支上一步的deploy参数正确配置后，文章写完使用 hexo g -d 命令就可以直接部署了，生成的博客静态文件会自动部署到 username.github.io 仓库的 master 分支上。 网站页面是保存了，但这时候我们还没有保存我们的hexo原始文件，包括我们的文章md文件，我们千辛万苦修改的主题配置等。。。接下来使用下面的步骤将他们都统统推送到 hexo 分支上去。123git add .git commit -m “change description”git push origin hexo 这样就OK了，我们的原始文件就都上去了，换电脑也不怕了。 日常写博客有时候我们可能会在不同的电脑上写博客，那在不同的电脑上配置 hexo、git、node.js，以及配置git ssh key等都要折腾一下的，这是免不了的，也是比wordpress等其他博客框架麻烦的一点。 已有环境如果在电脑上已经写过博客，那么可以在已有的工作目录下同步之前写的博客。在你的仓库目录下右键’git bash shell’，起来bash命令行，然后1git pull 这样你的状态就更新了，之后就是 hexo 命令写文章啦。。。 写完 hexo g -d 部署好后，使用123git add .git commit -m “change description”git push origin hexo 推送上去。 新的环境到了新的电脑上时，我们需要将项目先下载到本地，然后再进行hexo初始化。1234git clone https://github.com/username/username.github.io.gitnpm install hexonpm installnpm install hexo-deployer-git --save 之后开始写博客，写好部署好之后，别忘记 git add , … , git push origin hexo…推上去…","categories":[{"name":"个人博客辛酸系列","slug":"个人博客辛酸系列","permalink":"http://dinson.win/categories/个人博客辛酸系列/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://dinson.win/tags/博客/"},{"name":"Hexo","slug":"Hexo","permalink":"http://dinson.win/tags/Hexo/"}]},{"title":"Android主题换肤 无缝切换","date":"2016-07-11T15:29:23.000Z","path":"2016/07/11/16-07-11/","text":"概述 关于Android的主题换肤都是个老生常谈的问题了。网上给出的方案也是层出不穷，最近我也是很想去了解这方面的知识，所以我去搜一下就会有一大堆介绍这方面的文章，但是最后的结果都是不尽人意的，有的确实是给出了一些比较好的解决方案，但是没有一个实质性的Demo可以参考，所以也只能是纸上谈兵罢了，有的呢，确实是给出了一个参考的Demo但是最后的结果不是我想要的。关于Android的换肤方案技术的总结，这篇文章还是挺有参考价值的Android换肤技术总结。感兴趣的同学可以去了解下，就当做是一个知识的普及。 今天我要实现的一个换肤方案是基于github上的这个开源框架Android-Skin-Loader。 这个框架的换肤机制是使用动态加载的机制去加载皮肤包里面的内容，无需Acitvity重启即可实现皮肤的实时更换，皮肤包是可以与原安装包相分离的，需要自己定做（这个皮肤包其实也就是一个普通的Android项目，只是只有资源文件没有类文件而已），这样做的好处就是可以在线提供皮肤包供用户去下载，也可以大大的减少安装包的体积，同时也很好的实现了插件化。 其实这个框架是可以拿来直接来用的，直接几行代码基本上就可以解决Android的主题换肤，但是作为一个程序员怎么可以只是简单的知道怎么用就行了吗？如果真是这样就真的太low了。遇到一个好的开源项目我们至少需要把他的源码大致看一下，走一下基本的流程，了解一下他的基本原理，这样我们在技术上才会有所提升。 好了说了这么多，通过本文你可以学到什么，这个可能是大家比较关心的一点 设计出一个基于MaterialDesign风格的App 自己实现一个主题换肤的框架 高仿网易云音乐的主题换肤（ps：其实本来我想以这个作为标题的，这样做也可以增加流量，可我不想单纯的做个标题党，给大家带来干货才是最重要的） 让你的技术更上一层楼（这个说了也是白说） 说了这么久可能就会有人按捺不住了：我是来看干货的，不是来这听你瞎BB的。不要急干货马上来。如果实在感觉枯燥可以直接跳到文末去看源码。下面先来几张效果图来爽一下 网易云音乐换肤界面 这个是网易云音乐的换肤界面，他提供了几个默认的，也提供了可以在线下载的主题，他的切换效果还是非常赞的，用过这个软件的同学肯定是知道的。学习完本文后就可以做出类似于这个换肤效果。这个动态图是最终我们这个Demo实现的效果，这个Demo总体来说还是比较简单的，只提供了三种皮肤。实现了一个基本的换肤效果，主要还是用于拿来学习使用。当然更复杂的换肤基于这个Demo也是可以办到的，这里主要还是去讲解原理。 在介绍之前还需要先给大家普及一下LayoutInflaterFactory相关的知识。如果已经知道了这方面的知识点，下面这一段可以直接略过。 对于LayoutInflater大家可能都不太陌生，当你需要把xml文件转化成对应View的时候就必须用到它，我想对于他怎么使用的就不用我介绍了。LayoutInflater 提供了setFactory(LayoutInflater.Factory factory)和setFactory2(LayoutInflater.Factory2 factory)两个方法可以让你去自定义布局的填充（有点类似于过滤器，我们在填充这个View之前可以做一些额外的事，但不完全是），Factory2 是在API 11才添加的。他们提供了下面的方法让你去重写。在这里面你完全可以自己去定义去创建你所想要的View，如果在你在重写的方法中返回null的话，就会以系统默认的方式去创建View。 123View onCreateView(String name, Context context, AttributeSet attrs)//LayoutInflater.FactoryView onCreateView(View parent, String name, Context context, AttributeSet attrs)//LayoutInflater.Factory2 LayoutInflater都被设置了一个默认的Factory，Activity 是实现了LayoutInflater.Factory接口的,因此在你的Activity中直接重写onCreateView就可以自定义View的填充了。 下面这句是对LayoutInflater.Factory一个比较好的理解 Inflating your own custom views, instead of letting the system do it这个也是这个Demo其中的一个比较重要技术点。如果有想更详细了解的文末会有参考链接。 下面就正式开始介绍怎么去做这个主题换肤吧。 先来看看这个Demo的项目结构： 至于xRecyclerView可以不用管，这里我们用不到（这是之前用到的，与本次无关），他只是一个RecyclerView的一个扩展框架，支持下拉刷新和上拉加载，是一个在github上的一个开源项目。 这里我们直接来看看lib_skinloader这个库吧（这里面的内容大部分是来源于Android-Skin-Loader这个框架，我只做了部分修改，主要是适配AppCompatActivity，原框架是基于最初的Activty开发的），这个库就是今天所讲的核心内容lib_skinloader包结构图 我们都知道在Android中如果想去获取资源文件都必须通过Resources去获取。这个库的核心思想就是动态的去加载第三方包里面的包，获取到其Resources然后以获取到的这个Resources去获取第三方包里面的资源内容，最后设置到我们有需响应皮肤更改的View上。 这里我就只介绍load和base两个包，其他包的内容在讲解的时候会涉及到 Load包我们先来看看这个load包里面的内容（其实这里就是今天核心内容的核心）。 里面有两个类文件：SkinInflaterFactory、SkinManager我们先来看看SkinManager的实现，直接跳到load方法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public void load(String skinPackagePath, final ILoaderListener callback) &#123; new AsyncTask&lt;String, Void, Resources&gt;() &#123; @Override protected void onPreExecute() &#123; if (callback != null) &#123; callback.onStart(); &#125; &#125; @Override protected Resources doInBackground(String... params) &#123; try &#123;if (params.length == 1) &#123; String skinPkgPath = params[0]; Log.i(\"loadSkin\", skinPkgPath); File file = new File(skinPkgPath); if (file == null || !file.exists()) &#123; return null; &#125; PackageManager mPm = context.getPackageManager(); PackageInfo mInfo = mPm.getPackageArchiveInfo(skinPkgPath, PackageManager.GET_ACTIVITIES); skinPackageName = mInfo.packageName; AssetManager assetManager = AssetManager.class.newInstance(); Method addAssetPath = assetManager.getClass().getMethod(\"addAssetPath\", String.class); addAssetPath.invoke(assetManager, skinPkgPath); Resources superRes = context.getResources(); Resources skinResource = new Resources(assetManager, superRes.getDisplayMetrics(), superRes.getConfiguration()); SkinConfig.saveSkinPath(context, skinPkgPath); skinPath = skinPkgPath; isDefaultSkin = false; return skinResource; &#125; return null; &#125; catch (Exception e) &#123; e.printStackTrace(); return null; &#125; &#125; protected void onPostExecute(Resources result) &#123; mResources = result; if (mResources != null) &#123; if (callback != null) callback.onSuccess(); notifySkinUpdate(); &#125; else &#123; isDefaultSkin = true; if (callback != null) callback.onFailed(); &#125; &#125; &#125;.execute(skinPackagePath);&#125; 这个方法有两个参数，第一个是皮肤包的路径，第二个就是一个简单的回调 其中doInBackground方法里面就实现了动态的去获取皮肤包的Resources，当获取成功之后，在onPostExecute方法中就将这个Resources赋值到我们定义好的变量中去，以方便我们之后的使用，注意到当获取到的这个Resources不为空时，也就是我们已经获取到了皮肤包里面的资源，我们就调用notifySkinUpdate()这个方法来通知界面去更改皮肤，如果为空就还是使用默认的皮肤。 我们来看看notifySkinUpdate()的实现 这里很简单，就是去遍历mSkinObservers这个集合，然后去通知更新。对于ISkinUpdate是一个接口，每个需要皮肤更新的Activity都需要去实现这个接口。 SkinManager这个类里面还有诸如getColor(int resId)、getDrawable(int resId)这样的方法，就是去获取第三方包对应的资源文件，值得注意的是如果你的第三方包里没有对应的资源文件，那么就会使用默认的资源文件，如果你有需求，你完全可以去添加一些类似getMipmap(int resID)这样的方法。 对了，还有一个比较重要的方法忘了讲，restoreDefaultTheme 这个方法就是恢复到系统的默认主题，原理和load都差不多，实现还简单了很多。 我们再来看看SkinInflaterFactory，在这里面主要就是做一些填充View相关的一些工作。我实现的是LayoutInflaterFactory这个接口而不是文章之前提到的LayoutInflater.Factory这个接口是因为这里需要与AppCompatActivity兼容，如果你还是用之前的那个就会出现一些错误，反正我刚弄的时候是折腾了很久的。不管怎么样原理始终是一样的。SkinInflaterFactory的作用就是去搜集那些有需要响应皮肤更改的View。 我们来看看onCreateView的实现 首先我们先去判断这个当前将要View是否有更改皮肤的需求，如果没有我们就返回默认的实现。如果有，我们就自己去处理来看看createView方法的实现 看起来很多，其实这个方法就是去动态的去创建View。 下面来看看parseSkinAttr的实现： 这个方法其实就是去搜集View中换肤的时候可以更改的属性，当我们换肤的时候就是去更改的这些属性的值，这里你必须要注意一点，这个属性的值一定要是引用类型的（例如:@color/red），千万不能写死，第二个if的判断就是这个作用。到这里可能你就会有个疑问，我怎么知道哪些属性在换肤的时候需要更改。如果你细心一点肯定注意到了这行代码 1SkinAttr mSkinAttr = AttrFactory.get(attrName, id, entryName, typeName); 这里有个AttrFacory他的作用就是根据属性名，动态的去创建SkinAttr。在AttrFacory中定义了一些类似于这样的常量： 这就是我们换肤的时候可以更改的那些属性。SkinAttr是一个抽象类，比如background就会去创建一个BackgroundAttr,本项目所用到的属性全都在attr包中。SkinAttr是比较灵活的一个地方,如果你有哪个属性在换肤的时候需要更改，你就去实现一个对应的SkinAttr。 在parseSkinAttr这个方法的最后我们将View和SkinAttr封装成了一个SkinItem然后添加到一个集合中去，最后还需注意的是，如果当前皮肤不是默认皮肤，一定要去apply一下，这样做主要是防止换了皮肤启动一些新的页面有可能导致换肤不及时的问题。SkinInflaterFactory这个类里面还提供了动态的添加SkinItem的方法，原理都和这里差不多，我就不过多的去说了。 load包里面的这两个类讲的差不多了，这里看懂了后面的内容也就是小菜一碟了，我相信你看了这里再去看源码一定会轻松地多。 Base包base包结构 可以看见这个包里面肯定就是Activity、Fragment、Application的实现，作用肯定就是封装一些公用的方法和属性在里面。 下面我们一个一个来分析 SkinBaseApplication： SkinBaseApplication SkinBaseActivity 我们来看看其onCreate方法 在这里使用了我们之前自定义的View的InflaterFactory，来替换默认的Factory。记住一定要在super.onCreate(savedInstanceState);这个方法之前调用。SkinBaseActivity里面还提供了动态添加可以响应皮肤更改需求的View的相关方法。当然需要响应换肤更改的Activity都需要继承SkinBaseActivity。详细实现请看源码。 SkinBaseFragment 这个和SkinBaseActivity的思想差不多。具体实现看源码，这里我只是给大家提供这个换肤框架的思想，让大家在看源码的时候更轻松。 这个框架就介绍到这，下面我们来看看怎么去使用。 在使用的时候一定要记得要Activity要去继承于SkinBaseActivity，Fragment要继承于SkinBaseFragment，Application要继承于SkinBaseApplication。当然把这个框架做为你的项目依赖项肯定是必不可少的。为了Demo的简单，这里我只使用了下面三个颜色作为可以换肤的资源，当然如果你想要使用drawable文件也是可以办到的，前提是你一定要把这个Demo看懂。 来看一个布局文件 其中 xmlns:skin=”http://schemas.android.com/android/skin&quot;` 是我们自定义的，在SkinConfig有。我们只需在有皮肤更改需求的View中加入skin:enable=”true” 就OK了。 再来看看MainActicvity的部分代码 这里就是动态的添加有皮肤更改需求的View。 上面就介绍完了在布局文件中使用方法和在代码中使用方法。 我们应该怎么去换肤呢？很简单，只需调用SkinManager的load方法就可以了，把皮肤路径传进去就可以了，我的这个Demo为了简单起见，没有做在线换肤的功能，只是在本地提供了可以更换的皮肤，看到这里我相信你对怎样在线换肤已经有想法了。 怎样去换肤最最后我们来看看怎么去开发皮肤包。其实这个是最简单的，皮肤包实际上就是一个基本的Android项目，里面不包含类文件，只有资源文件。这里只需注意 这里的资源文件名字一定要和原项目中的相同，并且只用包含那些在皮肤更改时需要改变的那些就行了！例如我的这个Demo就只是简单对上面的三种颜色做了简单的切换。开发了棕色和黑色两款皮肤，所以资源文件中只有三个color的值，开发完成之后我们需要将其打包成apk文件，为防止用户点击安装，我们将其后缀改成了skin，这样做也具有标识性。如果还是不太清楚可以直接去源码中查看。 这下再来看一看文章开头效果图是不是突然变得有思路了,快动起你的小手指去敲一个主题换肤的框架吧~~~ 参考链接: LayoutInflater Factories（需梯子） How to Get the Right LayoutInflater Android apk动态加载机制的研究 Android换肤技术总结","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"主题换肤","slug":"主题换肤","permalink":"http://dinson.win/tags/主题换肤/"}]},{"title":"Android换肤技术总结","date":"2016-07-08T15:42:21.000Z","path":"2016/07/08/16-07-08/","text":"概述 纵观现在各种Android app，其换肤需求可以归为 白天/黑夜主题切换（或者别的名字，通常2套），如同花顺/自选股/天天动听等，UI表现为一个switcher。 多种主题切换，通常为会员特权，如QQ/QQ空间。 对于第一种来说，目测应该是直接通过本地theme来做的，即所有图片/颜色的资源都在apk里面打包了。 而对于第二种，则相对复杂一些，由于作为一种线上服务，可能上架新皮肤，且那么多皮肤包放在apk里面实在太占体积了，所以皮肤资源会在选择后再进行下载，也就不能直接使用android的那套theme。 技术方案内部资源加载方案和动态下载资源下载两种。 动态下载可以称为一种黑科技了，因为往往需要hack系统的一些方法，所以在部分机型和新的API上有时候可能有坑，但相对好处则很多 图片/色值等资源由于是后台下发的，可以随时更新 APK体积减小 对应用开发者来说，换肤几乎是透明的，不需要关心有几套皮肤 可以作为增值服务卖钱！！ 内部资源加载方案内部资源加载都是通过android本身那套theme来做的，相对业务开发来说工作量更大（需要定义attr和theme），不同方案类似地都是在BaseActivity里面做setTheme，差别主要在解决以下2个问题的策略： setTheme后如何实时刷新，而不用重新创建页面（尤其是listview里面的item）。 哪些view需要刷新，刷新什么（背景？字体颜色？ImageView的src？）。 自定义viewMultipleTheme做自定义view是为了在setTheme后会去立即刷新，更新页面UI对应资源（如TextView替换背景图和文字颜色），在上述项目中，则是通过对rootView进行遍历，对所有实现了ColorUiInterface的view/viewgroup进行setTheme操作来实现即使刷新的。 显然这样太重了，需要把应用内的各种view/viewgroup进行替换。 手动绑定view和要改变的资源类型Colorful 这个…我们看看用法吧….12345678910111213ViewGroupSetter listViewSetter = new ViewGroupSetter(mNewsListView);// 绑定ListView的Item View中的news_title视图，在换肤时修改它的text_color属性listViewSetter.childViewTextColor(R.id.news_title, R.attr.text_color);// 构建Colorful对象来绑定View与属性的对象关系mColorful = new Colorful.Builder(this) .backgroundDrawable(R.id.root_view, R.attr.root_view_bg) // 设置view的背景图片 .backgroundColor(R.id.change_btn, R.attr.btn_bg) // 设置背景色 .textColor(R.id.textview, R.attr.text_color) .setter(listViewSetter) // 手动设置setter .create(); // 设置文本颜色 我就是想换个皮肤，还得在activity里自己去设置要改变哪个view的什么属性，对应哪个attribute？是不是成本太高了？而且activity的逻辑也很容易被弄得乱七八糟。 动态资源加载方案 resource替换 覆盖application的getResource方法，实现自己的resource，优先加载本地皮肤包文件夹下的资源包，对于性能问题，可以通过attribute或者资源名称规范(如需要换肤则用skin_开头)来优化，从而不对不换肤的资源进行额外检查开销。 不过由于Android5.1源码里，drawable初始化的时候调用的是loadDrawable，而不是resource.getDrawable，而loadDrawable是私有的方法，无法覆盖，所以虽然很方便，却无法继续使用（不用关心任何皮肤相关的事情，android:color指定颜色就行了，神奇滴会自动换肤）。 自定义LayoutInflator.Factory 开源项目可参照Android-Skin-Loader。 即setFactory使用自定义的LayoutInflator.Factory，可以重点关注该项目中的SkinInflaterFactory和SkinManager（实现了自己的getColor、getDrawable、getBitmap、getColorStateList等等方法）。 需要自定义一个tag比如app:customStyle，重写所有的style，转成set方法，这样带来的牺牲就是增加了换肤的成本，要写很多style，自己去set，并不完全透明了。 Hack Resources internally 黑科技方法，直接对Resources进行hack，Resources.java:12345678// Information about preloaded resources. Note that they are not// protected by a lock, because while preloading in zygote we are all// single-threaded, and after that these are immutable.private static final LongSparseArray&lt;Drawable.ConstantState&gt;[] sPreloadedDrawables;private static final LongSparseArray&lt;Drawable.ConstantState&gt; sPreloadedColorDrawables = new LongSparseArray&lt;Drawable.ConstantState&gt;();private static final LongSparseArray&lt;ColorStateList&gt; sPreloadedColorStateLists = new LongSparseArray&lt;ColorStateList&gt;(); 直接对Resources里面的这三个LongSparseArray进行替换，由于apk运行时的资源都是从这三个数组里面加载的，所以只要采用interceptor模式： 1public class DrawablePreloadInterceptor extends LongSparseArray&lt;Drawable.ConstantState&gt; 自己实现一个LongSparseArray，并通过反射set回去，就能实现换肤，具体getDrawable等方法里是怎么取preload数组的，可以自己看Resources的源码。 等等，就这么简单？，NONO，少年你太天真了，怎么去加载xml，9patch的padding怎么更新，怎么打包/加载自定义的皮肤包，drawable的状态怎么刷新，等等。这些都是你需要考虑的，在存在插件的app中，还需要考虑是否会互相覆盖resource id的问题，进而需要修改apt，把resource id按位放在2个range。 手机Q和独立版QQ空间使用的是这种方案，效果挺好。 总结尽管动态加载方案比较黑科技，可能因为系统API的更改而出问题 好处有 灵活性高，后台可以随时更新皮肤包 相对透明，开发者几乎不用关心有几套皮肤，不用去定义各种theme和attr，甚至连皮肤包的打包都可以交给设计或者专门的同学 apk体积节省 存在的问题 没有完善的开源项目，如果我们采用动态加载的第二种方案，需要的项目功能包括： 自定义皮肤包结构 换肤引擎，加载皮肤包资源并load，实时刷新。 皮肤包打包工具 对各种rom的兼容 内部加载方案大同小异，主要解决的都是即时刷新的问题，然而从目前的一些开源项目来看，仍然没有特别简便的方案。让我选的话，我宁愿让界面重新创建，比如重启activity，或者remove所有view再添加回来（或者你可能想遍历rootview，然后一个个检查是否需要换肤然后set…）。","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"主题换肤","slug":"主题换肤","permalink":"http://dinson.win/tags/主题换肤/"}]},{"title":"Fragment实现懒加载，让应用更优化","date":"2016-06-15T15:06:28.000Z","path":"2016/06/15/16-06-15/","text":"概述 玩过微信的都知道，微信用的是懒加载的模式，之所以使用懒加载是因为：当使用viewpager+adapter作为应用大的布局时，viewpager会通过setOffscreenPageLimit来设置预加载的项目，不设置setOffscreenPageLimit，则默认为1（设置0无效，可以查看该方法源码知道），也就是当我们打开应用看到的时候fragmentOne时，实际上其他fragment（例如fragmentSecond）也进行了加载，只不过没有显示出来罢了，但是这样就造成了不必要的资源浪费（例如，fragmentSecond没有显示，但是却进行了大量的网络加载操作）。 基于上述情况，就有了懒加载方式的诞生（即只加载当前显示页面且只加载一次，滑动到其他页面时才加载其他页面数据，当再滑动到已加载过数据的页面时不再进行数据加载操作，若想要刷新数据，再调用相应的加载数据方法就好了） Fragment生命周期基本探索为了更好的知道懒加载的实现原理,下面通过几个测试来学习下。测试的几个文件如下（可以看到有3个fragment，由FragmentPagerAdapter+viewpager构成） 情况一 setOffscreenPageLimit（1） （即默认情况） 情况二 setOffscreenPageLimit（3） （即设置预加载数目为实际fragment数目） Fragment懒加载实现可以看到无论是情况一还是情况二,fragment都会调用fragment的setUserVisibleHint进行判断，所以我们就需要在这里做文章。123当isVisibleToUser 为true则进行数据加载，当isVisibleToUser为false则不进行数据加载对于已经加载过数据的fragment，再次被滑动到也不在进行加载数据，也就是每个fragment仅做一次数据加载工作 下面就来看代码实现主要代码都在BaseFragment中1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798public abstract class BaseFragment extends Fragment &#123; private boolean isVisible = false;//当前Fragment是否可见 private boolean isInitView = false;//是否与View建立起映射关系 private boolean isFirstLoad = true;//是否是第一次加载数据 private View convertView; private SparseArray&lt;View&gt; mViews; @Nullable @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; LogUtil.m(\" \" + this.getClass().getSimpleName()); convertView = inflater.inflate(getLayoutId(), container, false); mViews = new SparseArray&lt;&gt;(); initView(); isInitView = true; lazyLoadData(); return convertView; &#125; @Override public void onViewCreated(View view, Bundle savedInstanceState) &#123; super.onViewCreated(view, savedInstanceState); LogUtil.m(\" \" + this.getClass().getSimpleName()); &#125; @Override public void onAttach(Context context) &#123; super.onAttach(context); LogUtil.m(\"context\" + \" \" + this.getClass().getSimpleName()); &#125; @Override public void setUserVisibleHint(boolean isVisibleToUser) &#123; LogUtil.m(\"isVisibleToUser \" + isVisibleToUser + \" \" + this.getClass().getSimpleName()); if (isVisibleToUser) &#123; isVisible = true; lazyLoadData(); &#125; else &#123; isVisible = false; &#125; super.setUserVisibleHint(isVisibleToUser); &#125; private void lazyLoadData() &#123; if (isFirstLoad) &#123; LogUtil.m(\"第一次加载 \" + \" isInitView \" + isInitView + \" isVisible \" + isVisible + \" \" + this.getClass().getSimpleName()); &#125; else &#123; LogUtil.m(\"不是第一次加载\" + \" isInitView \" + isInitView + \" isVisible \" + isVisible + \" \" + this.getClass().getSimpleName()); &#125; if (!isFirstLoad || !isVisible || !isInitView) &#123; LogUtil.m(\"不加载\" + \" \" + this.getClass().getSimpleName()); return; &#125; LogUtil.m(\"完成数据第一次加载\"); initData(); isFirstLoad = false; &#125; /** * 加载页面布局文件 * @return */ protected abstract int getLayoutId(); /** * 让布局中的view与fragment中的变量建立起映射 */ protected abstract void initView(); /** * 加载要显示的数据 */ protected abstract void initData(); /** * fragment中可以通过这个方法直接找到需要的view，而不需要进行类型强转 * @param viewId * @param &lt;E&gt; * @return */ protected &lt;E extends View&gt; E findView(int viewId) &#123; if (convertView != null) &#123; E view = (E) mViews.get(viewId); if (view == null) &#123; view = (E) convertView.findViewById(viewId); mViews.put(viewId, view); &#125; return view; &#125; return null; &#125;&#125; 可以看到initView方法是在onCreateView中调用，而initData只有执行过onCreateView才会调用，这样的顺序安排就不会导致在initData中执行数据加载过程，找不到需要的view而报错。 项目结构 演示效果 可以看到fragment只会进行执行一次initData，懒加载到此完整","categories":[{"name":"Android嫡系","slug":"Android嫡系","permalink":"http://dinson.win/categories/Android嫡系/"}],"tags":[{"name":"Fragment","slug":"Fragment","permalink":"http://dinson.win/tags/Fragment/"},{"name":"懒加载","slug":"懒加载","permalink":"http://dinson.win/tags/懒加载/"},{"name":"优化","slug":"优化","permalink":"http://dinson.win/tags/优化/"}]},{"title":"MarkdownPad2在Win10下HTML渲染错误解决办法及注册码","date":"2016-06-14T15:33:10.000Z","path":"2016/06/14/16-06-14/","text":"HTML渲染错误解决办法在win10上安装MarkdownPad2 时，出现如下的错误信息：HTML渲染组出错，这个问题可以通过安装某个缺失组件来解决，是否想要了解详细信息？ MarkdownPad 的FAQ文档中给出了解决办法：http://markdownpad.com/faq.html#livepreview-directx LivePreview is not working - it displays an error message stating This view has crashed! 官方给出的解释是：这个问题一般多见于win8（*当然现在win10也有，官方文档该更新啦）。错误的表现形式即：不能实时预览Markdown生成的HTML页面。 This issue has been specifically observed in Windows 8. You may see an error message as shown here, and no HTML will be rendered when you type in the Markdown Editor pane. 为了修复这个问题，你需要安装这么一个SDK工具包，点击链接获取。 To fix this issue, please try installing the Awesomium 1.6.6 SDK. 如果还没有解决，那就买个新电脑吧！哦！不是，让你再装个微软的渲染插件If you continue to experience issues, please install Microsoft’s DirectX End-User Runtimes (June 2010) MarkdownPad2.5注册码邮箱： Soar360@live.com 授权密钥： GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==","categories":[{"name":"软件破解","slug":"软件破解","permalink":"http://dinson.win/categories/软件破解/"}],"tags":[{"name":"破解","slug":"破解","permalink":"http://dinson.win/tags/破解/"}]},{"title":"Android Studio插件整理","date":"2016-06-10T15:33:10.000Z","path":"2016/06/10/16-06-10/","text":"概述 在现如今这个极度推崇敏捷开发的年代，开发时间的节省将会直接压缩开发成本，在这其中，一些开发工具的合理利用讲会极大简化开发工作并增强开发效率。本文将介绍笔者自己在平时开发中经常用到的一些插件，我只能说它们都很实用，当然都是适用于Android Studio的啦。 GsonFormat快速将json字符串转换成一个Java Bean，免去我们根据json字符串手写对应Java Bean的过程。使用方法：快捷键Alt+S也可以使用Alt+Insert选择GsonFormat Android ButterKnife Zelezny 配合ButterKnife实现注解，从此不用写findViewById，想着就爽啊。在Activity，Fragment，Adapter中选中布局xml的资源id自动生成butterknife注解。使用方法：Ctrl+Shift+B选择图上所示选项 Android Code Generator 根据布局文件快速生成对应的Activity，Fragment，Adapter，Menu。 Android Methods Count 显示依赖库中得方法数 Lifecycle Sorter 可以根据Activity或者fragment的生命周期对其生命周期方法位置进行先后排序使用方法：快捷键Ctrl + alt + K CodeGlance 在右边可以预览代码，实现快速定位 FindBugs-IDEA 查找bug的插件，Android Studio也提供了代码审查的功能（Analyze-Inspect Code…） ADB WIFI 使用wifi无线调试你的app，无需root权限 Android Styler 根据xml自动生成style代码的插件使用方法：快捷键Ctrl+Shift+D (or context menu) Android Drawable Importer 这是一个非常强大的图片导入插件。它导入Android图标与Material图标的Drawable ，批量导入Drawable ，多源导入Drawable（即导入某张图片各种dpi对应的图片） SelectorChapek for Android 通过资源文件命名自动生成Selector文件。 LeakCanary 帮助你在开发阶段方便的检测出内存泄露的问题，使用起来更简单方便。 Android Postfix Completion 可根据后缀快速完成代码，这个属于拓展吧，系统已经有这些功能，如sout、notnull等，这个插件在原有的基础上增添了一些新的功能 Android Holo Colors Generator 通过自定义Holo主题颜色生成对应的Drawable和布局文件 GradleDependenciesHelperPlugin maven gradle 依赖支持自动补全 Idea-markdown markdown插件 Sexy Editor 设置AS代码编辑区的背景图 Android-DPI-Calculator DPI计算插件 使用： 或者： Gradle-retrolambda 在java 6 7中使用 lambda表达式插件 Material Theme UI 添加Material主题到你的AS ECTranslation Android Studio Plugin,Translate English to Chinese. Android Studio 翻译插件,可以将英文翻译为中文 PermissionsDispatcher plugin 自动生成6.0权限的代码 WakaTime 记录你在IDE上的工作时间 AndroidLocalizationer 可用于将项目中的 string 资源自动翻译为其他语言的 Android Studio/IntelliJ IDEA 插件","categories":[{"name":"Android庶系","slug":"Android庶系","permalink":"http://dinson.win/categories/Android庶系/"}],"tags":[{"name":"插件","slug":"插件","permalink":"http://dinson.win/tags/插件/"},{"name":"AS","slug":"AS","permalink":"http://dinson.win/tags/AS/"}]},{"title":"安卓反编译","date":"2016-06-08T06:45:46.000Z","path":"2016/06/08/16-06-08/","text":"准备工作 apktool:资源文件获取，可以提取出图片文件和布局文件进行使用查看 dex2jar:将apk反编译成Java源码（classes.dex转化成jar文件） jd-gui:查看APK中classes.dex转化成出的jar文件，即源码文件 网盘： http://pan.baidu.com/s/1eSkSctc &emsp; 密码：low6 反编译得到源代码、图片、XML配置、语言资源等打开命令行界面（运行-CMD），定位到apktool文件夹，输入以下命令：apktool.bat&emsp;d&emsp;-f&emsp;[apk文件 ]&emsp;[输出文件夹] 例：apktool.bat&emsp;d&emsp;-f&emsp;test.apk&emsp;test 之后发现在文件夹下多了个test文件，点击便可以查看该应用的所有资源文件了。 如果你想将反编译完的文件重新打包成apk，那你可以：输入apktool.bat&emsp;b&emsp;test（你编译出来文件夹）便可。之后在之前的test文件下便可以发现多了2个文件夹:&emsp;&emsp; - build&emsp;&emsp; - dist(里面存放着打包出来的APK文件) 反编译得到Java源代码将APK后缀名改为.rar或.zip，并解压，得到其中的额classes.dex文件（它就是java文件编译再通过dx工具打包而成的），将获取到的classes.dex放到之前解压出来的工具dex2jar-0.0.9.15 文件夹内，在命令行下定位到dex2jar.bat所在目录，输入1dex2jar.bat classes.dex 将生成classes.dex.dex2jar.jar，如下图运行JD-GUI（jd-gui.exe），打开上面生成的jar包，即可看到源代码了HelloAndroid源码（编译前的apk源码对照）如下：","categories":[{"name":"Android庶系","slug":"Android庶系","permalink":"http://dinson.win/categories/Android庶系/"}],"tags":[{"name":"反编译","slug":"反编译","permalink":"http://dinson.win/tags/反编译/"}]},{"title":"常用配置","date":"2016-06-07T10:11:53.000Z","path":"2016/06/07/16-06-07/","text":"Java环境变量123456新建：值为JDK安装目录JAVA_HomePath中添加%JAVA_HOME%\\bin%JAVA_HOME%\\jre\\bin Android环境变量123456新建：值为SDK安装目录 Android_HomePath中添加%Android_Home%\\tools%Android_Home%\\platform-tools win10修改文件类型图标比如..rmvb、.doc，我们并不想使用其原先的默认图标；或者是某个软件因为下载的是硬盘版，所以没有进行文件关联，从而进行关联的时候，致使这类文件图标并不美观，等等。在一般情况下，我们可以通过安装其它软件从而达到修改文件图标的目的。但是在这里，我将向大家介绍修改注册表的方法更改文件图标。下面我以*.apk 这类文件作为例子，向大家介绍如何通过修改注册表更改文件图标。","categories":[{"name":"系统配置","slug":"系统配置","permalink":"http://dinson.win/categories/系统配置/"}],"tags":[{"name":"系统配置","slug":"系统配置","permalink":"http://dinson.win/tags/系统配置/"}]},{"title":"GitHub+Hexo搭建个人博客辛酸史--基础搭建(壹)","date":"2016-06-06T15:33:10.000Z","path":"2016/06/06/16-06-06/","text":"概述 hexo是一款基于Node.js的静态博客框架, Hexo github 链接 链接 ,这篇教程是针对与Mac的，参考链接，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。 PS : 以下教程是针对hexo的版本为3.x 准备工作 安装node 到 Node.js 官网下载相应平台的最新版本，一路安装即可。 安装Git 下载 msysgit 并执行即可完成安装。 安装hexo 使用以下命令安装hexo到全局（在任意位置点击鼠标右键，选择Git bash） 1npm install -g hexo ps : npm ERR! registry error parsing json 错误(可能需要设置npm代理,执行命令) 1npm config set registry http://registry.cnpmjs.org 创建hexo文件夹 安装完成后，在你喜爱的文件夹下（如H:\\hexo），执行以下指令(在H:\\hexo内点击鼠标右键，选择Git bash)，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。 1hexo init 安装依赖包 1npm install 本地查看 至此，我们的博客就已经搭建完毕了，执行下面命令部署到本地服务器，然后到浏览器输入localhost:4000看看。 12hexo generatehexo server 执行hexo server提示找不到该指令在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下： 1npm install hexo-server --save 这里我碰到了一个问题，就是提示 npm WARN deprecated swig@1.4.2: This package is no longer maintained 如下图： 起初以为是报了个错误，于是网上一顿搜，各种更新各种折腾。后来发现，其实一直是在安装中，只是速度慢而已，导致我认为出了错误。通过google，通过npm config set registry “https://registry.npm.taobao.org&quot;设置淘宝镜像源后，很快就安装完毕了，弹出了如下界面 Hexo插件 1234567891011$ npm install hexo-generator-index --save #索引生成器$ npm install hexo-generator-archive --save #归档生成器$ npm install hexo-generator-category --save #分类生成器$ npm install hexo-generator-tag --save #标签生成器$ npm install hexo-server --save #本地服务$ npm install hexo-deployer-git --save #hexo通过git发布（必装）$ npm install hexo-renderer-marked@0.2.7 --save #渲染器$ npm install hexo-renderer-stylus@0.3.0 --save #渲染器$ npm install hexo-generator-sitemap --save #站点地图$ npm install hexo-generator-baidu-sitemap --save #百度站点地图 Github 创建博客空间 注册账号 地址：https://github.com/ 创建页面仓库 命名规则：你的github账号.github.io（必须，否则部署完毕之后会404）笔者因为已创建所以报错 生成SSH密钥 1ssh-keygen -t rsa -C “你的邮箱地址” 按3个回车，密码为空。 在C:\\Users\\Administrator.ssh下，得到两个文件id_rsa和id_rsa.pub。 在GitHub上添加SSH密钥 打开id_rsa.pub，复制全文。https://github.com/settings/ssh ，Add SSH key，粘贴进去。 Hexo简单介绍 目录结构 12345678910├── .deploy #需要部署的文件├── node_modules #Hexo插件├── public #生成的静态网页文件├── scaffolds #模板├── source #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里 ├── _drafts #草稿 └── _posts #文章├── themes #主题├── _config.yml #全局配置文件└── package.json 全局配置 _config.yml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# Hexo Configuration# Docs: http://hexo.io/docs/configuration.html# Source: https://github.com/hexojs/hexo/# Site #站点信息title: #标题subtitle: #副标题description: #站点描述，给搜索引擎看的author: #作者email: #电子邮箱language: zh-CN #语言# URL #链接格式url: #网址root: / #根目录permalink: :year/:month/:day/:title/ #文章的链接格式tag_dir: tags #标签目录archive_dir: archives #存档目录category_dir: categories #分类目录code_dir: downloads/codepermalink_defaults:# Directory #目录source_dir: source #源文件目录public_dir: public #生成的网页文件目录# Writing #写作new_post_name: :title.md #新文章标题default_layout: post #模板，包括 post、page、photo、draft（文章、页面、照片、草稿）titlecase: false #标题转换成大写external_link: true #在新选项卡中打开连接filename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsehighlight: #语法高亮 enable: true #是否启用 line_number: true #显示行号 tab_replace:# Category &amp; Tag #分类和标签default_category: uncategorized #默认分类category_map:tag_map:# Archives2: 开启分页1: 禁用分页0: 全部禁用archive: 2category: 2tag: 2# Server #本地服务器port: 4000 #端口号server_ip: localhost #IP 地址logger: falselogger_format: dev# Date / Time format #日期时间格式date_format: YYYY-MM-DD #参考http://momentjs.com/docs/#/displaying/format/time_format: H:mm:ss# Pagination #分页per_page: 10 #每页文章数，设置成 0 禁用分页pagination_dir: page# Disqus #Disqus评论，替换为多说disqus_shortname:# Extensions #拓展插件theme: landscape-plus #主题exclude_generator:plugins: #插件，例如生成 RSS 和站点地图的- hexo-generator-feed- hexo-generator-sitemap# Deployment #部署，将 lmintlcx 改成用户名deploy: type: git repo: 刚刚github创库地址.git branch: master 常用命令 12345678hexo help #查看帮助hexo init #初始化一个目录hexo new \"postName\" #新建文章，简写 hexo nhexo new page \"pageName\" #新建页面hexo generate #生成网页，可以在 public 目录查看整个网站的文件，简写 hexo ghexo server #本地预览，'Ctrl+C'关闭，简写 hexo shexo deploy #部署.deploy目录，简写 hexo d，部署的地址为全局配置设置hexo clean #清除缓存 部署 1hexo g -d hexo deploy问题：Deployer not found: git 1npm install hexo-deployer-git --save Hexo文章格式 1234567---title: #文章的标题date: 2015-07-30 07:56:29 #发表日期，一般不改动（可以改动）categories: categories1 #文章文类tags: [tags1,tags2] #文章标签，多于一项时用这种格式---正文，使用Markdown语法书写 域名的绑定 创建CNAME文件 在站点source目录或者在Repository的根目录下面，新建一个名为CNAME的文本文件，里面写入你要绑定的域名，比如dinson.win DNS域名指向 在你购买域名的网站的控制台修改，例如我在阿里云买的，则去阿里云登录，再把你的域名指向你项目的IP地址，如何知道你项目的ip地址呢，在命令提示符中输入下面代码 1ping \"你的用户名\".github.io","categories":[{"name":"个人博客辛酸系列","slug":"个人博客辛酸系列","permalink":"http://dinson.win/categories/个人博客辛酸系列/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://dinson.win/tags/博客/"},{"name":"Hexo","slug":"Hexo","permalink":"http://dinson.win/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"http://dinson.win/tags/GitHub/"}]}]