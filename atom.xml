<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Android - Dinson - 酸奶布丁 - 国家一级码农</title>
  <subtitle>一只行走在程序员道路上的喵星人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dinson.win/"/>
  <updated>2018-02-03T15:05:15.531Z</updated>
  <id>http://dinson.win/</id>
  
  <author>
    <name>DINSON</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android分屏功能,适配及相关问题</title>
    <link href="http://dinson.win/2018/02/03/18-02-03/"/>
    <id>http://dinson.win/2018/02/03/18-02-03/</id>
    <published>2018-02-03T14:38:20.000Z</published>
    <updated>2018-02-03T15:05:15.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>所谓分屏多任务，就是同时开两个应用时，将手机屏幕一分为二，一个应用占据屏幕上方，一个应用占据屏幕下方，两个应用分别独立工作，并且相互之间不受影响。</p>
</blockquote>
<a id="more"></a>
<!-- 这是　　缩进-->
<h2 id="如何分屏"><a href="#如何分屏" class="headerlink" title="如何分屏"></a>如何分屏</h2><p>如果您的应用是使用 N Preview SDK 构建的，且未禁用多窗口支持，则应用默认支持分屏操作。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">compileSdkVersion</span> <span class="string">'android-N'</span></div><div class="line">buildToolsVersion <span class="string">"24.0.0 rc4"</span></div><div class="line"></div><div class="line">defaultConfig &#123;</div><div class="line">    <span class="attribute">applicationId</span> <span class="string">"com.yll520wcf.myapplication"</span></div><div class="line">    minSdkVersion <span class="number">14</span></div><div class="line">    targetSdkVersion <span class="string">'N'</span></div><div class="line">    versionCode <span class="number">1</span></div><div class="line">    versionName <span class="string">"1.0"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="多窗口生命周期"><a href="#多窗口生命周期" class="headerlink" title="多窗口生命周期"></a>多窗口生命周期</h2><p><strong>还需要注意的是多窗口不会影响Activity的生命周期。</strong></p>
<p>在多窗口模式中，在指定时间只有最近与用户交互过的 Activity 为活动状态。 该 Activity 将被视为顶级 Activity。 所有其他 Activity 虽然可见，但均处于暂停状态。 但是，这些已暂停但可见的 Activity 在系统中享有比不可见 Activity 更高的优先级。 如果用户与其中一个暂停的 Activity 交互，该 Activity 将恢复，而之前的顶级 Activity 将暂停。 </p>
<p><strong>在多窗口模式中，用户仍可以看到处于暂停状态的应用。 应用在暂停状态下可能仍需要继续其操作。</strong></p>
<p>例如，处于暂停模式但可见的视频播放应用应继续显示视频。因此，我们建议播放视频的 Activity 不要在 onPause()方法中暂停视频，应在onStop()暂停视频播放，并在 onStart()中恢复视频播放。</p>
<p>用户使用多窗口模式显示应用时，系统将通知 Activity 发生配置变更。 该变更与系统通知应用设备从纵向模式切换到横向模式时的 Activity 生命周期影响基本相同，但设备不仅仅是交换尺寸，而是会变更尺寸。您的 Activity 可以自行处理配置变更，或允许系统销毁 Activity，并以新的尺寸重新创建该 Activity。</p>
<p>给Activity加上如下配置可以保证切换成多屏模式或者画中画模式时Activity不会销毁重建。</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">android:</span>configChanges=<span class="string">"screenSize|smallestScreenSize|screenLayout|orientation"</span>&gt;</div></pre></td></tr></table></figure>
<h2 id="针对多窗口进行配置"><a href="#针对多窗口进行配置" class="headerlink" title="针对多窗口进行配置"></a>针对多窗口进行配置</h2><p>在清单文件的 <activity>或 <application>节点中设置该属性，启用或禁用多窗口显示：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:resizeableActivity=[<span class="string">"true"</span> <span class="string">| "</span>false<span class="string">"]</span></div></pre></td></tr></table></figure></application></activity></p>
<p>如果该属性设置为 true，Activity 将能以分屏和自由形状模式启动。 如果此属性设置为 false，Activity 将不支持多窗口模式。 如果该值为 false，且用户尝试在多窗口模式下启动 Activity，该 Activity 将全屏显示。</p>
<p>如果您的应用面向 Android N，但未对该属性指定值，则该属性的值默认设为 true。<br>如果做电视开发或其它特殊需求，还有一个属性需要注意：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:supportsPictureInPicture=[<span class="string">"true"</span> <span class="string">| "</span>false<span class="string">"]</span></div></pre></td></tr></table></figure></p>
<p>在清单文件的 <activity>节点中设置该属性，指明 Activity 是否支持画中画显示。如果 android:resizeableActivity为 false，将忽略该属性。</activity></p>
<p>当然你还可以指定在自由形状模式时 Activity 的默认大小、位置和最小尺寸：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:name=<span class="string">".MainActivity"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">android:defaultHeight</span>=<span class="string">"500dp"</span></span></span></div><div class="line">          <span class="attr">android:defaultWidth</span>=<span class="string">"600dp"</span></div><div class="line">          <span class="attr">android:gravity</span>=<span class="string">"top|end"</span></div><div class="line">          <span class="attr">android:minimalSize</span>=<span class="string">"450dp"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>对于 Android N，<layout>清单文件元素支持以下几种属性，这些属性影响 Activity 在多窗口模式中的行为：</layout></p>
<ol>
<li>android:defaultWidth 以自由形状模式启动时 Activity 的默认宽度。</li>
<li>android:defaultHeight 以自由形状模式启动时 Activity 的默认高度。</li>
<li>android:gravity 以自由形状模式启动时 Activity 的初始位置。</li>
<li>android:minimalSize 分屏和自由形状模式中 Activity 的最小高度和最小宽度。 如果用户在分屏模式中移动分界线，使 Activity 尺寸低于指定的最小值，系统会将 Activity 裁剪为用户请求的尺寸。 </li>
</ol>
<h2 id="多窗口模式中运行应用注意事项"><a href="#多窗口模式中运行应用注意事项" class="headerlink" title="多窗口模式中运行应用注意事项"></a>多窗口模式中运行应用注意事项</h2><p>在设备处于多窗口模式中时，某些功能会被禁用或忽略，因为这些功能对与其他 Activity 或应用共享设备屏幕的 Activity 而言没有意义。 此类功能包括：</p>
<ol>
<li>某些自定义选项将被禁用；例如，在非全屏模式中，应用无法隐藏状态栏。</li>
<li>系统将忽略对 android:screenOrientation属性所作的更改</li>
</ol>
<p><strong>Activity类中添加了以下新方法，以支持多窗口显示。</strong></p>
<ol>
<li><strong>Activity.inMultiWindow()</strong>调用该方法以确认 Activity 是否处于多窗口模式。</li>
<li><strong>Activity.inPictureInPicture()</strong> 调用该方法以确认 Activity 是否处于画中画模式。注：画中画模式是多窗口模式的特例。 如果myActivity.inPictureInPicture()返回 true，则 myActivity.inMultiWindow()也返回 true。</li>
<li><strong>Activity.onMultiWindowChanged()</strong> Activity 进入或退出多窗口模式时系统将调用此方法。 在 Activity 进入多窗口模式时，系统向该方法传递 true 值，在退出多窗口模式时，则传递 false 值。</li>
<li><strong>Activity.onPictureInPictureChanged()</strong> Activity 进入或退出画中画模式时系统将调用此方法。 在 Activity 进入画中画模式时，系统向该方法传递 true 值，在退出画中画模式时，则传递 false 值。</li>
</ol>
<p>每个方法还有 Fragment版本，例如 Fragment.inMultiWindow()。</p>
<h2 id="在多窗口模式中启动新Activity"><a href="#在多窗口模式中启动新Activity" class="headerlink" title="在多窗口模式中启动新Activity"></a>在多窗口模式中启动新Activity</h2><p>在启动新 Activity 时，用户可以提示系统如果可能，应将新 Activity 显示在当前 Activity 旁边。 要执行此操作，可使用标志<strong>Intent.FLAG_ACTIVITY_LAUNCH_TO_ADJACENT</strong>。传递此标志将请求以下行为：</p>
<ol>
<li>如果设备处于分屏模式，系统会尝试在启动系统的 Activity 旁创建新 Activity，这样两个 Activity 将共享屏幕。 系统并不一定能实现此操作，但如果可以，系统将使两个 Activity 处于相邻的位置。<br>如果设备不处于分屏模式，则该标志无效。<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> void click(View v)&#123;</div><div class="line">    <span class="keyword">Intent</span> <span class="keyword">intent</span>=new <span class="keyword">Intent</span>();</div><div class="line">    <span class="keyword">intent</span>.setAction(<span class="keyword">Intent</span>.ACTION_VIEW);</div><div class="line">    <span class="keyword">intent</span>.setFlags(<span class="keyword">Intent</span>.FLAG_ACTIVITY_LAUNCH_ADJACENT);</div><div class="line">    <span class="keyword">intent</span>.setData(Uri.parse(<span class="string">"http://www.baidu.com"</span>));</div><div class="line">    startActivity(<span class="keyword">intent</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://ondlsj2sn.bkt.clouddn.com/FpPoyAEBpq8-_nf8aJPHDLfhdZkS.png" alt=""></p>
<h2 id="支持拖放"><a href="#支持拖放" class="headerlink" title="支持拖放"></a>支持拖放</h2><p>用户可以在两个 Activity 共享屏幕的同时在这两个 Activity 之间拖放。因此，如果您的应用目前不支持拖放功能，您可以在其中添加此功能。</p>
<ol>
<li><strong>android.view.DropPermissions</strong>令牌对象，负责指定对接收拖放数据的应用授予的权限。</li>
<li><strong>View.startDragAndDrop()</strong> View.startDrag()的新别名。要启用跨 Activity 拖放，请传递新标志 View.DRAG_FLAG_GLOBAL。如需对接收拖放数据的 Activity 授予 URI 权限，可根据情况传递新标志 View.DRAG_FLAG_GLOBAL_URI_READ或 View.DRAG_FLAG_GLOBAL_URI_WRITE。</li>
<li><strong>View.cancelDragAndDrop()</strong> 取消当前正在进行的拖动操作。只能由发起拖动操作的应用调用。</li>
<li><strong>View.updateDragShadow()</strong> 替换当前正在进行的拖动操作的拖动阴影。只能由发起拖动操作的应用调用。</li>
<li><strong>Activity.requestDropPermissions()</strong> 请求使用 DragEvent中包含的 ClipData传递的内容 URI 的权限。 </li>
</ol>
<!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=songid&auto=1&height=66"></iframe> -->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;所谓分屏多任务，就是同时开两个应用时，将手机屏幕一分为二，一个应用占据屏幕上方，一个应用占据屏幕下方，两个应用分别独立工作，并且相互之间不受影响。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android嫡系" scheme="http://dinson.win/categories/Android%E5%AB%A1%E7%B3%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>Android进程保活</title>
    <link href="http://dinson.win/2017/07/11/17-07-11/"/>
    <id>http://dinson.win/2017/07/11/17-07-11/</id>
    <published>2017-07-11T01:08:38.000Z</published>
    <updated>2017-07-12T15:14:12.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>所谓保活即进程在后台一直运行不被杀死。统计一下目前的保活手段：</p>
<ol>
<li><p>监听系统广播，如开机、充电状态、网络变化、安装卸载app、锁屏解锁、集成的推送消息等等，亲测无效，在进程被杀了之后也无法再监听到系统广播，也就不存在拉起，只能作为辅助手段，稍后会提起。</p>
</li>
<li><p>实现一个隐藏的前台服务，这个网上很多实现方法，也是我最开始使用的手段。实际上是把进程的优先级给提高了一级，锁屏时间长了还是会被杀死。</p>
</li>
<li><p>使用Linux命令启动一个新进程进行相互保护。才疏学浅，并不太理解原理，不敢多说，详情看这篇博客。亲测无效，不敢说是大神写的不对，可能是我姿势不对。</p>
</li>
<li><p>使用子进程进行相互保护，简而言之就是建两个service,一个是子进程： <strong>android:process=”:remote”</strong><br>亲测无效，这个一点点用都没有，因为进程被杀了之后子进程也同时被杀。</p>
</li>
<li><p>谣传QQ曾经让自己不被杀死，曾使用过后台显示一个全透明的、只有1x1像素大小的窗口，这个很匪夷所思，像IOS5之后的后台无限播放无声音乐一样狗血。</p>
</li>
</ol>
</blockquote>
<a id="more"></a>
<!-- 这是　　缩进-->
<p>以上所有出现的”被杀死”字样全部指的是进程后台状态自动被杀死，而不是指用户手用杀死，类似iphone连按两次HOME键上划杀死后台进程，这个只有一种办法保证不被杀死，就是把你应用加入到系统杀死进程的白名单。所谓跟手机厂商合作加入白名单就是指这个。这里不得不说一个很有意思的app：<code>日程管理时间管理</code>。它里面有引导用户进行白名单设置的操作，很有意思，同事让我看的时候我只想说<br><img src="http://ondlsj2sn.bkt.clouddn.com/Frd1XBrccjWSjvawFpNBKcoHsn2b.png" alt=""></p>
<p>简单说上它就是引导用户手动设置了“厂商把你的app加入白名单”这个操作，这个也被我学了过去，连带着页面一起。这只是第一步。<br>接下来如我上面所说，除了4被遗弃之外，把所有的手段都用上了，一开始并没有用5，因为我感觉已经够了。但是依然无法阻止在锁屏+后台的情况下被杀。于是我用上了最后一种手段。</p>
<p>最后一步，我参考了360，在双击返回键后并没有<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Process</span>.killProcess(<span class="built_in">Process</span>.myPid());</div></pre></td></tr></table></figure></p>
<p>和<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.<span class="keyword">exit</span>(<span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<p>而是<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Intent</span> <span class="keyword">intent</span> = new <span class="keyword">Intent</span>(<span class="keyword">Intent</span>.ACTION_MAIN);</div><div class="line"><span class="keyword">intent</span>.setFlags(<span class="keyword">Intent</span>.FLAG_ACTIVITY_NEW_TASK);</div><div class="line"><span class="keyword">intent</span>.addCategory(<span class="keyword">Intent</span>.CATEGORY_HOME);</div><div class="line">getAppContext().startActivity(<span class="keyword">intent</span>);</div></pre></td></tr></table></figure></p>
<p>并且在清单文件中加入了<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">android:</span>excludeFromRecents=<span class="string">"true"</span></div></pre></td></tr></table></figure></p>
<p>作用是不在最近使用的列表中出现，也就是连按两次HOME键就不会出现我的app了。</p>
<h2 id="1像素页面保活"><a href="#1像素页面保活" class="headerlink" title="1像素页面保活"></a>1像素页面保活</h2><ol>
<li><p>新建一个Activity，作为1像素页面的主体，我姑且叫它HooliganActivity:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HooliganActivity</span> <span class="title">extends</span> <span class="title">Activity</span> &#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HooliganActivity instance;</div><div class="line"></div><div class="line">    @<span class="function">Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span>(<span class="params">Bundle savedInstanceState</span>) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        instance = <span class="keyword">this</span>;</div><div class="line">        Window window = getWindow();</div><div class="line">        window.setGravity(Gravity.LEFT | Gravity.TOP);</div><div class="line">        WindowManager.LayoutParams <span class="keyword">params</span> = window.getAttributes();</div><div class="line">        <span class="keyword">params</span>.x = <span class="number">0</span>;</div><div class="line">        <span class="keyword">params</span>.y = <span class="number">0</span>;</div><div class="line">        <span class="keyword">params</span>.height = <span class="number">1</span>;</div><div class="line">        <span class="keyword">params</span>.width = <span class="number">1</span>;</div><div class="line">        window.setAttributes(<span class="keyword">params</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开启保活页面</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startHooligan</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(DWApplication.getAppContext(), HooliganActivity.class);</div><div class="line">        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">        DWApplication.getAppContext().startActivity(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @<span class="function">Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span>(<span class="params"></span>) &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        instance = <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 关闭保活页面</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">killHooligan</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(instance != <span class="literal">null</span>) &#123;</div><div class="line">            instance.finish();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注册清单文件</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:<span class="built_in">name</span>=<span class="string">".activity.HooliganActivity"</span></div><div class="line">        android:configChanges=<span class="string">"keyboardHidden|orientation|screenSize|navigation|keyboard"</span></div><div class="line">        android:excludeFromRecents=<span class="string">"true"</span></div><div class="line">        android:exported=<span class="string">"false"</span></div><div class="line">        android:finishOnTaskLaunch=<span class="string">"false"</span></div><div class="line">        android:launchMode=<span class="string">"singleInstance"</span></div><div class="line">        android:theme=<span class="string">"@style/HooliganActivityStyle"</span>/&gt; </div><div class="line"></div><div class="line">&lt;style <span class="built_in">name</span>=<span class="string">"HooliganActivityStyle"</span>&gt;</div><div class="line">    &lt;<span class="built_in">item</span> <span class="built_in">name</span>=<span class="string">"android:windowBackground"</span>&gt;@color/transparent&lt;/<span class="built_in">item</span>&gt;</div><div class="line">    &lt;<span class="built_in">item</span> <span class="built_in">name</span>=<span class="string">"android:windowContentOverlay"</span>&gt;@null&lt;/<span class="built_in">item</span>&gt;</div><div class="line">    &lt;<span class="built_in">item</span> <span class="built_in">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;<span class="literal">true</span>&lt;/<span class="built_in">item</span>&gt;</div><div class="line">    &lt;<span class="built_in">item</span> <span class="built_in">name</span>=<span class="string">"android:windowNoDisplay"</span>&gt;<span class="literal">false</span>&lt;/<span class="built_in">item</span>&gt;</div><div class="line">    &lt;<span class="built_in">item</span> <span class="built_in">name</span>=<span class="string">"android:windowDisablePreview"</span>&gt;<span class="literal">true</span>&lt;/<span class="built_in">item</span>&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>监听锁屏和解锁通知，不能静态注册广播，只能动态注册</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">IntentFilter <span class="built_in">filter</span> = <span class="keyword">new</span> IntentFilter();</div><div class="line"><span class="built_in">filter</span>.addAction(Intent.ACTION_SCREEN_ON);</div><div class="line"><span class="built_in">filter</span>.addAction(Intent.ACTION_SCREEN_OFF);</div><div class="line">registerReceiver(<span class="keyword">new</span> BootCompleteReceiver(),<span class="built_in">filter</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>分别在解锁和锁屏时唤醒我的HooliganActivity</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BootCompleteReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void onReceive(<span class="type">Context</span> context, <span class="type">Intent</span> intent) &#123;</div><div class="line">        <span class="keyword">if</span>(intent.getAction().equals(<span class="type">Intent</span>.<span class="type">ACTION_SCREEN_OFF</span>)) &#123;</div><div class="line">            <span class="type">HooliganActivity</span>. startHooligan();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(intent.getAction().equals(<span class="type">Intent</span>.<span class="type">ACTION_SCREEN_ON</span>))&#123;</div><div class="line">            <span class="type">HooliganActivity</span>. killHooligan();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这样你在后台每次锁屏，实际上都会吊起一个一像素的页面，假装app在前台，拥有最高进程优先级。</p>
<p><code>不推荐使用，太流氓了- -！。</code></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><blockquote>
<p>技术无罪。——王欣</p>
</blockquote>
<p>但人有罪。</p>
<!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=songid&auto=1&height=66"></iframe> -->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;所谓保活即进程在后台一直运行不被杀死。统计一下目前的保活手段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;监听系统广播，如开机、充电状态、网络变化、安装卸载app、锁屏解锁、集成的推送消息等等，亲测无效，在进程被杀了之后也无法再监听到系统广播，也就不存在拉起，只能作为辅助手段，稍后会提起。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实现一个隐藏的前台服务，这个网上很多实现方法，也是我最开始使用的手段。实际上是把进程的优先级给提高了一级，锁屏时间长了还是会被杀死。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用Linux命令启动一个新进程进行相互保护。才疏学浅，并不太理解原理，不敢多说，详情看这篇博客。亲测无效，不敢说是大神写的不对，可能是我姿势不对。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用子进程进行相互保护，简而言之就是建两个service,一个是子进程： &lt;strong&gt;android:process=”:remote”&lt;/strong&gt;&lt;br&gt;亲测无效，这个一点点用都没有，因为进程被杀了之后子进程也同时被杀。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;谣传QQ曾经让自己不被杀死，曾使用过后台显示一个全透明的、只有1x1像素大小的窗口，这个很匪夷所思，像IOS5之后的后台无限播放无声音乐一样狗血。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在百度地图上绘制运动轨迹图及相关事件处理</title>
    <link href="http://dinson.win/2017/07/10/17-07-03/"/>
    <id>http://dinson.win/2017/07/10/17-07-03/</id>
    <published>2017-07-10T02:44:08.000Z</published>
    <updated>2017-07-12T15:14:12.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>上篇文章讲述了如何在地图显示位置点，这篇文章主要讲述如何在地图上画运动轨迹，以及地图图层点击事件的处理。</p>
</blockquote>
<p>本篇将要实现的效果</p>
<ol>
<li>跑步结束后，静态的画出整个运动轨迹</li>
<li>跑步过程中，时时动态的画运动轨迹<br>很多运动类的app都有画出跑步者运动轨迹的需求，拿咕咚来说，我们看一下它的效果图： </li>
</ol>
<a id="more"></a>
<!-- 这是　　缩进-->
<p>如何实现：</p>
<ol>
<li>将点与点连成线，在百度地图MapView上画出线条图层；</li>
<li>获取定位点List<latlng>：通过百度定位sdk：LocationClient类获取，户外运动画运动轨迹，要求位置点的精度高，所以我们必须使用gps定位类型的位置结果。</latlng></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//允许使用gps定位</span></div><div class="line">mOption.setOpenGps(<span class="literal">true</span>);</div></pre></td></tr></table></figure>
<h2 id="静态画整个运动轨迹"><a href="#静态画整个运动轨迹" class="headerlink" title="静态画整个运动轨迹"></a>静态画整个运动轨迹</h2><h3 id="画轨迹"><a href="#画轨迹" class="headerlink" title="画轨迹"></a>画轨迹</h3><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//伪代码</span></div><div class="line">public void onCreate()&#123;</div><div class="line">  <span class="comment">// 地图初始化</span></div><div class="line">  <span class="type">MapView</span> mMapView = (<span class="type">MapView</span>) findViewById(<span class="type">R</span>.id.bmapView);</div><div class="line">  <span class="type">BaiduMap</span> mBaiduMap = mMapView.getMap();</div><div class="line">  <span class="comment">// 开启定位图层</span></div><div class="line">  mBaiduMap.setMyLocationEnabled(<span class="literal">true</span>);</div><div class="line"></div><div class="line">  <span class="comment">//获取运动后的定位点</span></div><div class="line">  coordinateConvert();</div><div class="line"></div><div class="line">  <span class="comment">//设置缩放中点LatLng target，和缩放比例          </span></div><div class="line">  <span class="type">MapStatus</span>.<span class="type">Builder</span> builder = <span class="function"><span class="keyword">new</span> <span class="title">MapStatus</span>.<span class="title">Builder</span>();</span></div><div class="line">  <span class="title">builder</span>.<span class="title">target</span>(target).<span class="title">zoom</span>(<span class="number">18</span>f);</div><div class="line"></div><div class="line">  <span class="comment">//地图设置缩放状态</span></div><div class="line">  <span class="title">mBaiduMap</span>.<span class="title">animateMapStatus</span>(<span class="type">MapStatusUpdateFactory</span>.newMapStatus(builder.build()));</div><div class="line"></div><div class="line">  /**</div><div class="line">  * 配置线段图层参数类： <span class="title">PolylineOptions</span></div><div class="line">  * <span class="title">ooPolyline</span>.<span class="title">width</span>(<span class="number">13</span>)：线宽</div><div class="line">  * <span class="title">ooPolyline</span>.<span class="title">color</span>(<span class="number">0xAAFF0000</span>)：线条颜色红色</div><div class="line">  * <span class="title">ooPolyline</span>.<span class="title">points</span>(latLngs)：<span class="title">List</span>&lt;<span class="title">LatLng</span>&gt; <span class="title">latLngs</span>位置点，将相邻点与点连成线就成了轨迹了</div><div class="line">  */</div><div class="line">  <span class="title">OverlayOptions</span> <span class="title">ooPolyline</span> = <span class="title">new</span> <span class="title">PolylineOptions</span>().<span class="title">width</span>(<span class="number">13</span>).<span class="title">color</span>(<span class="number">0xAAFF0000</span>).<span class="title">points</span>(latLngs);</div><div class="line"></div><div class="line">  <span class="comment">//在地图上画出线条图层，mPolyline：线条图层</span></div><div class="line">  <span class="title">mPolyline</span> = (<span class="type">Polyline</span>) <span class="title">mBaiduMap</span>.<span class="title">addOverlay</span>(ooPolyline);</div><div class="line">  <span class="title">mPolyline</span>.<span class="title">setZIndex</span>(<span class="number">3</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 我这里是在google地图取下来的wgs84坐标集合Const.googleWGS84，模拟的运动后获取的坐标集合，</div><div class="line">   所以需要转化成百度坐标；实际应该是将定位sdk返回的位置点加入到位置集合中，</div><div class="line">   定位sdk需要设置返回坐标为百度坐标：mOption.setCoorType("bd09ll")，这样就直接用，不用转换了。</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">void</span>  coordinateConvert()&#123;</div><div class="line">  <span class="comment">//百度坐标转化工具类CoordinateConverter </span></div><div class="line">  CoordinateConverter converter  = <span class="keyword">new</span> CoordinateConverter(); </div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">  * 设置需要转化的坐标类型</div><div class="line">    CoordType.COMMON：google地图、腾讯地图、高德地图所用坐标</div><div class="line">    CoordType.GPS：设备采集的原始GPS坐标</div><div class="line">  */</div><div class="line">  converter.<span class="keyword">from</span>(CoordType.COMMON);</div><div class="line"></div><div class="line">  <span class="keyword">double</span> lanSum = <span class="number">0</span>;</div><div class="line">  <span class="keyword">double</span> lonSum = <span class="number">0</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Const.googleWGS84.length; i++) &#123;</div><div class="line">    <span class="comment">//"39.881970,116.456218"</span></div><div class="line">    String[] ll = Const.googleWGS84[i].split(<span class="string">","</span>);</div><div class="line">    LatLng sourceLatLng = <span class="keyword">new</span> LatLng(<span class="keyword">Double</span>.valueOf(ll[<span class="number">0</span>]), <span class="keyword">Double</span>.valueOf(ll[<span class="number">1</span>]));</div><div class="line">    converter.coord(sourceLatLng);  <span class="comment">//需要转化的坐标点</span></div><div class="line">    LatLng desLatLng = converter.convert();  <span class="comment">//转化成百度坐标点</span></div><div class="line">    latLngs.add(desLatLng);<span class="comment">//加入定位点集合</span></div><div class="line">    lanSum += desLatLng.latitude;</div><div class="line">    lonSum += desLatLng.longitude;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//我这里设置地图的缩放中心点为所有点的几何中心点</span></div><div class="line">  target = <span class="keyword">new</span> LatLng(lanSum<span class="regexp">/latLngs.size(), lonSum/</span>latLngs.<span class="keyword">size</span>());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="添加起始图标图层、点击图层响应事件"><a href="#添加起始图标图层、点击图层响应事件" class="headerlink" title="添加起始图标图层、点击图层响应事件"></a>添加起始图标图层、点击图层响应事件</h3><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//始点图层图标</span></div><div class="line"><span class="type">BitmapDescriptor</span> startBD= <span class="type">BitmapDescriptorFactory</span></div><div class="line">            .fromResource(<span class="type">R</span>.drawable.ic_me_history_startpoint);</div><div class="line"><span class="comment">//终点图层图标</span></div><div class="line"><span class="type">BitmapDescriptor</span> finishBD= <span class="type">BitmapDescriptorFactory</span></div><div class="line">            .fromResource(<span class="type">R</span>.drawable.ic_me_history_finishpoint);</div><div class="line"></div><div class="line"><span class="comment">//地图中显示信息窗口</span></div><div class="line"><span class="type">InfoWindow</span> mInfoWindow;</div><div class="line"></div><div class="line"><span class="type">MarkerOptions</span> oStart = <span class="function"><span class="keyword">new</span> <span class="title">MarkerOptions</span>();<span class="comment">//地图标记类型的图层参数配置类 </span></span></div><div class="line"><span class="title">oStart</span>.<span class="title">position</span>(latLngs.get(<span class="number">0</span>));<span class="comment">//图层位置点，第一个点为起点</span></div><div class="line"><span class="title">oStart</span>.<span class="title">icon</span>(startBD);<span class="comment">//设置图层图片</span></div><div class="line"><span class="title">oStart</span>.<span class="title">zIndex</span>(<span class="number">1</span>);<span class="comment">//设置图层Index</span></div><div class="line"><span class="comment">//添加起点图层</span></div><div class="line"><span class="title">Marker</span> <span class="title">mMarkerA</span> = (<span class="type">Marker</span>) (mBaiduMap.addOverlay(oStart)); </div><div class="line"></div><div class="line"><span class="comment">//添加终点图层</span></div><div class="line"><span class="title">MarkerOptions</span> <span class="title">oFinish</span> = <span class="title">new</span> <span class="title">MarkerOptions</span>().<span class="title">position</span>(latLngs.get(latLngs.size()-1)).<span class="title">icon</span>(finishBD).<span class="title">zIndex</span>(<span class="number">2</span>);</div><div class="line"><span class="title">Marker</span> <span class="title">mMarkerB</span> = (<span class="type">Marker</span>) (mBaiduMap.addOverlay(oFinish));</div><div class="line"></div><div class="line"><span class="comment">//设置图层点击监听回调</span></div><div class="line"><span class="title">mBaiduMap</span>.<span class="title">setOnMarkerClickListener</span>(new <span class="type">OnMarkerClickListener</span>() &#123;</div><div class="line">  <span class="title">public</span> <span class="title">boolean</span> <span class="title">onMarkerClick</span>(final <span class="type">Marker</span> marker) &#123;</div><div class="line">    <span class="title">if</span> (marker.getZIndex() == <span class="title">mMarkerA</span>.<span class="title">getZIndex</span>() ) &#123;<span class="comment">//如果是起始点图层</span></div><div class="line">      <span class="title">TextView</span> <span class="title">textView</span> = <span class="title">new</span> <span class="title">TextView</span>(getApplicationContext());</div><div class="line">      <span class="title">textView</span>.<span class="title">setText</span>("起点");</div><div class="line">      <span class="title">textView</span>.<span class="title">setTextColor</span>(<span class="type">Color</span>.<span class="type">BLACK</span>);</div><div class="line">      <span class="title">textView</span>.<span class="title">setGravity</span>(<span class="type">Gravity</span>.<span class="type">CENTER</span>);</div><div class="line">      <span class="title">textView</span>.<span class="title">setBackgroundResource</span>(<span class="type">R</span>.drawable.popup);</div><div class="line"></div><div class="line">      <span class="comment">//设置信息窗口点击回调</span></div><div class="line">      <span class="title">OnInfoWindowClickListener</span> <span class="title">listener</span> = <span class="title">new</span> <span class="title">OnInfoWindowClickListener</span>() &#123;</div><div class="line">        <span class="title">public</span> <span class="title">void</span> <span class="title">onInfoWindowClick</span>() &#123;</div><div class="line">          <span class="comment">//这里是主线线程，可以实现自己的一些功能</span></div><div class="line">          <span class="title">Toast</span>.<span class="title">makeText</span>(getApplicationContext(),"这里是起点", <span class="title">Toast</span>.<span class="title">LENGTH_SHORT</span>).<span class="title">show</span>();</div><div class="line">          <span class="title">mBaiduMap</span>.<span class="title">hideInfoWindow</span>();<span class="comment">//隐藏信息窗口</span></div><div class="line">        &#125;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      <span class="title">LatLng</span> <span class="title">latLng</span> = <span class="title">marker</span>.<span class="title">getPosition</span>();<span class="comment">//信息窗口显示的位置点</span></div><div class="line"></div><div class="line">      /**</div><div class="line">      * 通过传入的 <span class="title">bitmap</span> <span class="title">descriptor</span> 构造一个 <span class="title">InfoWindow</span></div><div class="line">      * <span class="title">bd</span> - 展示的<span class="title">bitmap</span></div><div class="line">        <span class="title">position</span> - <span class="title">InfoWindow</span>显示的位置点</div><div class="line">        <span class="title">yOffset</span> - 信息窗口会与图层图标重叠，设置<span class="title">Y</span>轴偏移量可以解决</div><div class="line">        <span class="title">listener</span> - 点击监听者</div><div class="line">      */</div><div class="line">      <span class="title">mInfoWindow</span> = <span class="title">new</span> <span class="title">InfoWindow</span>(<span class="type">BitmapDescriptorFactory</span>.fromView(textView), <span class="title">latLng</span>, -47, <span class="title">listener</span>);</div><div class="line">      <span class="title">mBaiduMap</span>.<span class="title">showInfoWindow</span>(mInfoWindow);<span class="comment">//显示信息窗口</span></div><div class="line">    &#125; <span class="title">else</span> <span class="title">if</span> (marker.getZIndex() == <span class="title">mMarkerB</span>.<span class="title">getZIndex</span>()) &#123;<span class="comment">//如果是终点图层</span></div><div class="line">      <span class="title">Button</span> <span class="title">button</span> = <span class="title">new</span> <span class="title">Button</span>(getApplicationContext());</div><div class="line">      <span class="title">button</span>.<span class="title">setText</span>("终点");</div><div class="line">      <span class="title">button</span>.<span class="title">setOnClickListener</span>(new <span class="type">OnClickListener</span>() &#123;</div><div class="line">        <span class="title">public</span> <span class="title">void</span> <span class="title">onClick</span>(<span class="type">View</span> v) &#123;</div><div class="line">          <span class="title">Toast</span>.<span class="title">makeText</span>(getApplicationContext(),"这里是终点", <span class="title">Toast</span>.<span class="title">LENGTH_SHORT</span>).<span class="title">show</span>();</div><div class="line">          <span class="title">mBaiduMap</span>.<span class="title">hideInfoWindow</span>();</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      <span class="title">LatLng</span> <span class="title">latLng</span> = <span class="title">marker</span>.<span class="title">getPosition</span>();</div><div class="line">      /**</div><div class="line">      * 通过传入的 <span class="title">view</span> 构造一个 <span class="title">InfoWindow</span>, 此时只是利用该<span class="title">view</span>生成一个<span class="title">Bitmap</span>绘制在地图中，监听事件由自己实现。</div><div class="line">        <span class="title">view</span> - 展示的 <span class="title">view</span></div><div class="line">        <span class="title">position</span> - 显示的地理位置</div><div class="line">        <span class="title">yOffset</span> - <span class="title">Y</span>轴偏移量</div><div class="line">      */</div><div class="line">      <span class="title">mInfoWindow</span> = <span class="title">new</span> <span class="title">InfoWindow</span>(button, latLng, <span class="number">-47</span>);</div><div class="line">      <span class="title">mBaiduMap</span>.<span class="title">showInfoWindow</span>(mInfoWindow);</div><div class="line">    &#125; </div><div class="line">    <span class="title">return</span> <span class="title">true</span>;</div><div class="line"> &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//也可以给运动轨迹添加点击事件</span></div><div class="line"><span class="title">mBaiduMap</span>.<span class="title">setOnPolylineClickListener</span>(new <span class="type">BaiduMap</span>.<span class="type">OnPolylineClickListener</span>() &#123;</div><div class="line">  @<span class="title">Override</span></div><div class="line">  <span class="title">public</span> <span class="title">boolean</span> <span class="title">onPolylineClick</span>(<span class="type">Polyline</span> polyline) &#123;</div><div class="line">    <span class="title">if</span> (polyline.getZIndex() == <span class="title">mPolyline</span>.<span class="title">getZIndex</span>()) &#123;</div><div class="line">      <span class="title">Toast</span>.<span class="title">makeText</span>(getApplicationContext(),"点数：" + <span class="title">polyline</span>.<span class="title">getPoints</span>().<span class="title">size</span>() + ",<span class="title">width</span>:" + polyline.getWidth(), <span class="type">Toast</span>.<span class="type">LENGTH_SHORT</span>).show();</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>到这里，运动结束后画出整个轨迹图和图层添加点击事件就介绍完了。</p>
<h2 id="时时动态的画运动轨迹"><a href="#时时动态的画运动轨迹" class="headerlink" title="时时动态的画运动轨迹"></a>时时动态的画运动轨迹</h2><blockquote>
<p>关键在于取点：gps刚接收到信号时返回的一些点精度不高，容易造成位置偏移，如何取点很重要。</p>
</blockquote>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//伪代码</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">  mMapView = (MapView) findViewById(R.id.bmapView);</div><div class="line">  mBaiduMap = mMapView.getMap();</div><div class="line">  <span class="comment">// 开启定位图层</span></div><div class="line">  mBaiduMap.setMyLocationEnabled(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">  <span class="comment">/**添加地图缩放状态变化监听，当手动放大或缩小地图时，拿到缩放后的比例，然后获取到下次定位，</span></div><div class="line">  *  给地图重新设置缩放比例，否则地图会重新回到默认的mCurrentZoom缩放比例</div><div class="line">  */</div><div class="line">  mCurrentZoom = <span class="number">18</span>;</div><div class="line">  mBaiduMap.setOnMapStatusChangeListener(<span class="keyword">new</span> OnMapStatusChangeListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onMapStatusChangeStart</span><span class="params">(MapStatus arg0)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onMapStatusChangeFinish</span><span class="params">(MapStatus arg0)</span> </span>&#123;</div><div class="line">      mCurrentZoom = arg0.zoom;<span class="comment">//获取手指缩放地图后的值</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onMapStatusChange</span><span class="params">(MapStatus arg0)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">//设置定位图标类型为跟随模式</span></div><div class="line">  mBaiduMap.setMyLocationConfiguration(<span class="keyword">new</span> MyLocationConfiguration(</div><div class="line">                com.baidu.mapapi.map.MyLocationConfiguration.LocationMode.FOLLOWING, <span class="keyword">true</span>, <span class="keyword">null</span>));</div><div class="line"></div><div class="line">  <span class="comment">// 定位初始化</span></div><div class="line">  mLocClient = <span class="keyword">new</span> LocationClient(<span class="keyword">this</span>);</div><div class="line">  mLocClient.registerLocationListener(myListener);</div><div class="line">  LocationClientOption option = <span class="keyword">new</span> LocationClientOption();</div><div class="line">  option.setLocationMode(LocationMode.Device_Sensors);<span class="comment">//只接受gps位置</span></div><div class="line">  option.setOpenGps(<span class="keyword">true</span>); <span class="comment">// 允许gps定位</span></div><div class="line">  option.setCoorType(<span class="string">"bd09ll"</span>); <span class="comment">// 设置坐标类型</span></div><div class="line">  option.setScanSpan(<span class="number">1000</span>);<span class="comment">//一秒一个gps</span></div><div class="line">  mLocClient.setLocOption(option);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//开始获取位置点</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">  start.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mLocClient != <span class="keyword">null</span> &amp;&amp; !mLocClient.isStarted()) &#123;</div><div class="line">            mLocClient.start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//位置回调，取点很重要</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocationListenner</span> <span class="keyword">implements</span> <span class="title">BDLocationListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onReceiveLocation</span><span class="params">(<span class="keyword">final</span> BDLocation location)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (location == <span class="keyword">null</span> || mMapView == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (location.getLocType() == BDLocation.TypeGpsLocation) &#123;<span class="comment">//只要gps点</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (isFirstLoc) &#123;<span class="comment">//首次定位</span></div><div class="line">                <span class="comment">/**第一个点很重要，决定了轨迹的效果，gps刚接收到信号时返回的一些点精度不高，</span></div><div class="line">                * 尽量选一个精度相对较高的起始点，这个过程大概从gps刚接收到信号后5-10秒就可以完成，不影响效果。</div><div class="line">                * 注：gps接收卫星信号少则十几秒钟，多则几分钟，</div><div class="line">                * 如果长时间手机收不到gps，退出，重启手机再试，这是硬件的原因</div><div class="line">                */</div><div class="line">                LatLng ll = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">                <span class="comment">//选一个精度相对较高的起始点</span></div><div class="line">                ll = getMostAccuracyLocation(location);</div><div class="line">                <span class="keyword">if</span>(ll == <span class="keyword">null</span>)&#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                isFirstLoc = <span class="keyword">false</span>;</div><div class="line">                points.add(ll);<span class="comment">//加入集合</span></div><div class="line">                last = ll;</div><div class="line"></div><div class="line">                <span class="comment">//显示当前定位点，缩放地图</span></div><div class="line">                locateAndZoom(location, ll);</div><div class="line"></div><div class="line">                <span class="comment">//标记起点图层位置</span></div><div class="line">                MarkerOptions oStart = <span class="keyword">new</span> MarkerOptions();<span class="comment">// 地图标记覆盖物参数配置类</span></div><div class="line">                oStart.position(points.get(<span class="number">0</span>));<span class="comment">// 覆盖物位置点，第一个点为起点</span></div><div class="line">                oStart.icon(startBD);<span class="comment">// 设置覆盖物图片</span></div><div class="line">                mBaiduMap.addOverlay(oStart); <span class="comment">// 在地图上添加此图层</span></div><div class="line">                <span class="keyword">return</span>;<span class="comment">//画轨迹最少得2个点，首地定位到这里就可以返回了</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//从第二个点开始</span></div><div class="line">            LatLng ll = <span class="keyword">new</span> LatLng(location.getLatitude(), location.getLongitude());</div><div class="line">            <span class="comment">//sdk回调gps位置的频率是1秒1个，位置点太近动态画在图上不是很明显，可以设置点之间距离大于为5米才添加到集合中</span></div><div class="line">            <span class="keyword">if</span> (DistanceUtil.getDistance(last, ll) &lt; <span class="number">5</span>) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            points.add(ll);<span class="comment">//如果要运动完成后画整个轨迹，位置点都在这个集合中</span></div><div class="line"></div><div class="line">            last = ll;</div><div class="line"></div><div class="line">            <span class="comment">//显示当前定位点，缩放地图</span></div><div class="line">            locateAndZoom(location, ll);</div><div class="line"></div><div class="line">            <span class="comment">//清除上一次轨迹，避免重叠绘画</span></div><div class="line">            mMapView.getMap().clear();</div><div class="line"></div><div class="line">            <span class="comment">//起始点图层也会被清除，重新绘画</span></div><div class="line">            MarkerOptions oStart = <span class="keyword">new</span> MarkerOptions();</div><div class="line">            oStart.position(points.get(<span class="number">0</span>));</div><div class="line">            oStart.icon(startBD);</div><div class="line">            mBaiduMap.addOverlay(oStart);</div><div class="line"></div><div class="line">            <span class="comment">//将points集合中的点绘制轨迹线条图层，显示在地图上</span></div><div class="line">            OverlayOptions ooPolyline = <span class="keyword">new</span> PolylineOptions().width(<span class="number">13</span>).color(<span class="number">0xAAFF0000</span>).points(points);</div><div class="line">            mPolyline = (Polyline) mBaiduMap.addOverlay(ooPolyline);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//首次定位很重要，选一个精度相对较高的起始点</span></div><div class="line"><span class="keyword">private</span> <span class="function">LatLng <span class="title">getMostAccuracyLocation</span><span class="params">(<span class="keyword">final</span> BDLocation location)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (location.getRadius()&gt;<span class="number">25</span>) &#123;<span class="comment">//gps位置精度大于25米的点直接弃用</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    LatLng ll = <span class="keyword">new</span> LatLng(location.getLatitude(), location.getLongitude());</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (DistanceUtil.getDistance(last, ll ) &gt; <span class="number">5</span>) &#123;</div><div class="line">        last = ll;</div><div class="line">        points.clear();<span class="comment">//有两点位置大于5，重新来过</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    points.add(ll);</div><div class="line">    last = ll;</div><div class="line">    <span class="comment">//有5个连续的点之间的距离小于5，认为gps已稳定，以最新的点为起始点</span></div><div class="line">    <span class="keyword">if</span>(points.size() &gt;= <span class="number">5</span>)&#123;</div><div class="line">        points.clear();</div><div class="line">        <span class="keyword">return</span> ll;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//显示当前定位点，缩放地图</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">locateAndZoom</span><span class="params">(BDLocation location, LatLng ll)</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 记录当前经纬度，当位置不变，手机转动，取得方向传感器的方向，</div><div class="line">      给地图重新设置位置参数，在跟随模式下可使地图箭头随手机转动而转动</div><div class="line">    */</div><div class="line">    mCurrentLat = location.getLatitude();</div><div class="line">    mCurrentLon = location.getLongitude();</div><div class="line">    locData = <span class="keyword">new</span> MyLocationData.Builder().accuracy(<span class="number">0</span>)<span class="comment">//去掉精度圈</span></div><div class="line">            <span class="comment">//此mCurrentDirection为自己获取到的手机传感器方向信息，顺时针0-360</span></div><div class="line">            .direction(mCurrentDirection).latitude(location.getLatitude())</div><div class="line">            .longitude(location.getLongitude()).build();</div><div class="line">    mBaiduMap.setMyLocationData(locData);<span class="comment">//显示当前定位位置点</span></div><div class="line"></div><div class="line">    <span class="comment">//给地图设置缩放中心点，和缩放比例值</span></div><div class="line">    builder = <span class="keyword">new</span> MapStatus.Builder();</div><div class="line">    builder.<span class="keyword">target</span>(ll).zoom(mCurrentZoom);</div><div class="line">    mBaiduMap.animateMapStatus(MapStatusUpdateFactory.newMapStatus(builder.build()));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//运动结束增加终点图标</span></div><div class="line">finish.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mLocClient != <span class="keyword">null</span> &amp;&amp; mLocClient.isStarted()) &#123;</div><div class="line">            mLocClient.stop();<span class="comment">//停止定位</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span>(points.size() &lt;= <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//运动结束记得标记终点图标</span></div><div class="line">            MarkerOptions oFinish = <span class="keyword">new</span> MarkerOptions();</div><div class="line">            oFinish.position(points.get(points.size() - <span class="number">1</span>));</div><div class="line">            oFinish.icon(finishBD);</div><div class="line">            mBaiduMap.addOverlay(oFinish); </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>退出记得释放资源<br><figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//伪代码</div><div class="line">protected void onDestroy() &#123;</div><div class="line">  // 退出时销毁定位</div><div class="line">  mLocClient.unRegisterLocationListener(myListener)<span class="comment">;</span></div><div class="line">  mLocClient.stop()<span class="comment">;</span></div><div class="line">  // 关闭定位图层</div><div class="line">  mBaiduMap.setMyLocationEnabled(false)<span class="comment">;</span></div><div class="line">  mMapView.getMap().clear()<span class="comment">;</span></div><div class="line">  mMapView.onDestroy()<span class="comment">;</span></div><div class="line">  mMapView = null<span class="comment">;</span></div><div class="line">  startBD.recycle()<span class="comment">;</span></div><div class="line">  finishBD.recycle()<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>我们画运动轨迹要求定位sdk返回的位置精度很高，轨迹的效果才会好，因而必须接受gps位置点。但是gps位置的在刚开始收到信号时精度不高，会出现位置漂移的情况，所以要选取一个精度较好的点。在建筑物、桥梁、大树、隧道里面，gps信号不好，精度不高，所以在开阔地带，运动轨迹效果更好。</p>
</blockquote>
<!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=songid&auto=1&height=66"></iframe> -->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;上篇文章讲述了如何在地图显示位置点，这篇文章主要讲述如何在地图上画运动轨迹，以及地图图层点击事件的处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本篇将要实现的效果&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;跑步结束后，静态的画出整个运动轨迹&lt;/li&gt;
&lt;li&gt;跑步过程中，时时动态的画运动轨迹&lt;br&gt;很多运动类的app都有画出跑步者运动轨迹的需求，拿咕咚来说，我们看一下它的效果图： &lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Lambda 表达式在 Android 开发中的使用</title>
    <link href="http://dinson.win/2017/07/01/17-07-01/"/>
    <id>http://dinson.win/2017/07/01/17-07-01/</id>
    <published>2017-07-01T00:44:44.000Z</published>
    <updated>2017-07-12T15:14:12.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>Lambda ,希腊字母 “λ” 的英文名称。没错，就是你高中数学老师口中的那个“兰布达”。在编程世界中，它是匿名函数的别名， Java 从 Java 8 开始引入 lambda 表达式。而 Android 开发者的世界里，直到 Android Studio 2.4 Preview 4 及其之后的版本里，lambda 表达式才得到完全的支持（在此之前需要使用 Jack 编译器或 retrolambda 等插件，详见链接）。新版本 Android Studio 使用向导详见 <a href="https://developer.android.google.cn/studio/write/java8-support.html" target="_blank" rel="external">《在 Android Studio 上使用 Java 8 新特性》</a>。</p>
<p>Oracle 官方推出的 lambda 教程开篇第一句就表扬了其对匿名内部类笨拙繁琐的代码的简化，然而，在各大 RxJava 教程下的评论中，最受吐槽的就是作者提供的示例代码用了 lambda 表达式，给阅读造成了很大的障碍。</p>
<p>所以，在这篇文章中，我会先讲解 lambda 表达式的作用和三种形式，之后提供一个在 Android Studio 便捷使用 lambda 的小技巧，然后说一说 lambda 表达式中比较重要的变量捕获概念，最后再讲一些使用 lambda 表达式前后的差异。</p>
</blockquote>
<a id="more"></a>
<!-- 这是　　缩进-->
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>前面提到，lambda 是匿名函数的别名。简单来说，lambda 表达式是对匿名内部类的进一步简化。使用 lambda 表达式的前提是编译器可以准确的判断出你需要哪一个匿名内部类的哪一个方法。</p>
<p>我们最经常接触使用匿名内部类的行为是为 view 设置 OnClickListener ，这时你的代码是这样的：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener()&#123;</div><div class="line">	<span class="meta">@Override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</div><div class="line">		doSomeWork();</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>使用匿名内部类，实现了对象名的隐匿；而匿名函数，则是对方法名的隐匿。所以当使用 lambda 表达式实现上述代码时，是这样的：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">button.setOnClickListener( </div><div class="line">	<span class="function"><span class="params">(View v)</span> -&gt;</span> &#123;</div><div class="line">		doSomeWork();</div><div class="line">	&#125;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>看不懂？没关系,在这两个示例中，你只要理解，lambda 表达式不仅对对象名进行隐匿，更完成了方法名的隐匿，展示了一个接口抽象方法最有价值的两点：<strong>参数列表</strong>和<strong>具体实现</strong>。下面我会对 lambda 的各种形式进行列举。</p>
<h2 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h2><blockquote>
<p>在 Java 中，lambda 表达式共有三种形式：<strong>函数式接口</strong>、<strong>方法引用</strong>和<strong>构造器引用</strong>。其中，函数式接口形式是最基本的 lambda 形式，其余两种形式都是基于此形式进行拓展。</p>
</blockquote>
<p>PS：为了更好的展示使用 lambda 表达式前后的代码区别，本文将使用 lambda 表达式给引用赋值的形式作为实例展示，而不是常用的直接将 lambda 表达式传入方法之中。同时，举例也不一定具有实际意义。</p>
<h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><p>函数式接口是指<strong>有且只有一个</strong>抽象方法的接口，比如各种 Listener 接口和 Runnable 接口。lambda 表达式就是对这类接口的匿名内部类进行简化。基本形式如下：<br><strong>( 参数列表… ) -&gt; { 语句块… }</strong></p>
<p>下面以 Java 提供的 Comparator 接口来展示一个实例，该接口常用于排序比较：<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;<span class="built_in">int</span> compare(T var1, T var2);&#125;</div><div class="line">Comparator&lt;<span class="built_in">String</span>&gt; comparator = <span class="keyword">new</span> Comparator&lt;<span class="built_in">String</span>&gt; ()&#123;</div><div class="line">	<span class="meta">@Override</span> public <span class="built_in">int</span> compare(<span class="built_in">String</span> s1, <span class="built_in">String</span> s2) &#123;</div><div class="line">		doSomeWork();</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line">Comparator&lt;<span class="built_in">String</span>&gt; comparator = (<span class="built_in">String</span> s1, <span class="built_in">String</span> s2) -&gt; &#123;</div><div class="line">	doSomeWork();</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>当编译器可以推导出具体的参数类型时，我们可以从参数列表中忽略参数类型，那么上面的代码就变成了：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Comparator&lt;String&gt; comparator = ( <span class="built_in">s1</span> , <span class="built_in">s2</span> ) -&gt; &#123;</div><div class="line">	doSomeWork()<span class="comment">;</span></div><div class="line">	return result<span class="comment">;</span></div><div class="line">&#125;<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>当参数只有一个时，参数列表两侧的圆括号也可省略，比如 OnClickListener 接口可写成 ：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> <span class="title">OnClickListener</span> &#123; <span class="function"><span class="keyword">void</span> <span class="title">onClick</span>(<span class="params">View v</span>)</span>; &#125;</div><div class="line">OnClickListener listener = v -&gt; &#123; 语句块... &#125; ;</div></pre></td></tr></table></figure></p>
<p>然而，当方法没有传入参数的时候，则记得提供一对空括号假装自己是参数列表（雾），比如 Runnable 接口：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> <span class="title">Runnable</span> &#123; <span class="function"><span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>)</span>; &#125;</div><div class="line">Runnable runnable = () -&gt; &#123; 语句块... &#125; ;</div></pre></td></tr></table></figure></p>
<p>当语句块内的处理逻辑只有一句表达式时，其两侧的花括号也可省略，特别注意这句处理逻辑表达式后面也不带分号。比如这个关闭 activity 的点击方法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">button</span><span class="selector-class">.setOnClickListener</span>( <span class="selector-tag">v</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">activity</span><span class="selector-class">.finish</span>() );</div></pre></td></tr></table></figure></p>
<p>同时，当只有一句去除花括号的表达式且接口方法需要返回值时，这个表达式不用（也不能）在表达式前加 return ，就可以当作返回语句。下面用 Java 的 Function 接口作为示例，这是一个用于转换类型的接口，在这里我们获取一个 User 对象的姓名字符串并返回：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> <span class="keyword">Function</span> <span class="title">&lt;T,</span> R&gt; &#123; R apply(T t); &#125;</div><div class="line"><span class="keyword">Function</span> <span class="title">&lt;User,</span> String&gt; <span class="keyword">function</span> <span class="title">=</span> new <span class="keyword">Function</span> <span class="title">&lt;User,</span> String&gt;()&#123;</div><div class="line">	@Override public String apply(User user) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="type">user.getName()</span>;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">Function</span> <span class="title">&lt;User,</span> String&gt; <span class="keyword">function</span> <span class="title">=</span> user -&gt; user.getName() ;</div></pre></td></tr></table></figure></p>
<h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>在介绍第一种形式的之前，我曾写道：函数式接口形式是最基本的 lambda 表达式形式，其余形式都是由其拓展而来。那么，现在来介绍第二种形式：方法引用形式。</p>
<p>当我们使用第一种 lambda 表达式的时候，进行逻辑实现的时候我们既可以自己实现一系列处理，也可以直接调用已经存在的方法，下面以 Java 的 Predicate 接口作为示例，此接口用来实现判断功能，我们来对字符串进行全面的判空操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>; &#125;</div><div class="line">Predicate&lt;String&gt; predicate=</div><div class="line">	s -&gt; &#123;</div><div class="line">		<span class="comment">//用基本代码组合进行判断</span></div><div class="line">		<span class="keyword">return</span> s==<span class="keyword">null</span> || s.length()==<span class="number">0</span> ;</div><div class="line">	&#125;;</div></pre></td></tr></table></figure></p>
<p>我们知道，TextUtils 的 isEmpty() 方法实现了上述功能，所以我们可以写作：<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Predicate&lt;<span class="built_in">String</span>&gt; predicate = s -&gt; TextUtils.isEmpty(s) ;</div></pre></td></tr></table></figure></p>
<p>这时我们调用了已存在的方法来进行逻辑判断，我们就可以使用方法引用的形式继续简化这一段 lambda 表达式：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Predicate<span class="params">&lt;String&gt;</span> predicate = <span class="symbol">TextUtils::</span>isEmpty ;</div></pre></td></tr></table></figure></p>
<p>惊不惊喜？意不意外？</p>
<p>方法引用形式就是<strong>当逻辑实现只有一句且调用了已存在的方法进行处理( this 和 super 的方法也可包括在内)时，对函数式接口形式的 lambda 表达式进行进一步的简化。</strong>传入引用方法的参数就是原接口方法的参数。</p>
<p>接下来总结一下方法引用形式的三种格式：</p>
<ol>
<li><p>object :: instanceMethod<br>直接调用任意对象的实例方法，如 obj::equals 代表调用 obj 的 equals 方法与接口方法参数比较是否相等，效果等同 obj.equals(t);。<br>当前类的方法可用this::method进行调用，父类方法同理。</p>
</li>
<li><p>ClassName :: staticMethod<br>直接调用某类的静态方法，并将接口方法参数传入，如上述 TextUtils::isEmpty ，效果等同 TextUtils.isEmpty(s);</p>
</li>
<li><p>ClassName :: instanceMethod<br>较为特殊,将接口方法参数列表的第一个参数作为方法调用者，其余参数作为方法参数。由于此类接口较少，故选择 Java 提供的 BiFunction 接口作为示例，该接口方法接收一个 T1 类对象和一个 T2 类对象，通过处理后返回 R 类对象：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> BiFunction&lt;T1, T2, R&gt; &#123;</div><div class="line">	R apply(T1 t1, T2 t2);</div><div class="line">&#125;</div><div class="line">BiFunction&lt;<span class="built_in">String</span>,<span class="built_in">String</span>,<span class="built_in">Boolean</span>&gt; biFunction=</div><div class="line">	<span class="keyword">new</span> BiFunction&lt;<span class="built_in">String</span>, <span class="built_in">String</span>, <span class="built_in">Boolean</span>&gt;() &#123;</div><div class="line">		<span class="meta">@Override</span> <span class="keyword">public</span> <span class="built_in">Boolean</span> apply(<span class="built_in">String</span> s1, <span class="built_in">String</span> s2)&#123;</div><div class="line">	        <span class="keyword">return</span> s1.equals(s2);</div><div class="line">	    &#125;</div><div class="line">    &#125;;</div><div class="line"><span class="comment">// ClassName 为接口方法的第一个参数的类名，同时利用接口方法的第一个参数作为方法调用者，其余参数作为方法参数，实现 s1.equals(s2);</span></div><div class="line">BiFunction&lt;<span class="built_in">String</span>,<span class="built_in">String</span>,<span class="built_in">Boolean</span>&gt; biFunction= <span class="built_in">String</span>::equals;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><p>Lambda 表达式的第三种形式，其实和方法引用十分相似，只不过方法名替换为 new 。其格式为<strong>ClassName :: new</strong>。这时编译器会通过上下文判断传入的参数的类型、顺序、数量等，来调用适合的构造器，返回对象。</p>
<h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><p>Android Studio 会在可以转化为 lambda 表达式的代码上进行如图的灰色标识，这时将光标移至灰色区域，按下 Alt + Enter ，选择第一项（方法引用和构造器引用在第二项），IDE 就会自动进行转换。<br><img src="http://ondlsj2sn.bkt.clouddn.com/FjLLt5fswLsU3L2bFJNN_kYKGrVH.png" alt=""></p>
<h2 id="变量捕获"><a href="#变量捕获" class="headerlink" title="变量捕获"></a>变量捕获</h2><p>在使用匿名内部类时，若要在内部类中使用外部变量，则需要将此变量定义为 final 变量。因为我们并不知道所实现的接口方法何时会被调用，所以通过设立 final 来确保安全。在 lambda 表达式中，仍然需要遵守这个标准。</p>
<p>不过在 Java 8 中，新增了一个 effective final 功能，只要一个变量没有被修改过引用（基本变量则不能更改变量值），即为实质上的 final 变量，那么不用再在声明变量时加上 final 修饰符。接下来还是通过一个示例解释，示例中共有三句被注释掉的赋值语句，去除任意一句的注释，都会报错：Variable used in lambda expression should be final or effectively final。<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> effectiveFinalInt=<span class="number">666</span>;<span class="comment">//外部变量</span></div><div class="line"><span class="comment">//①effectiveFinalInt=233；</span></div><div class="line"><span class="keyword">button</span>.setOnClickListener(v -&gt; &#123;</div><div class="line">	  Toast.makeText( effectiveFinalInt + <span class="string">""</span>).show();</div><div class="line">      <span class="comment">//②effectiveFinalInt=233;</span></div><div class="line">    &#125;);</div><div class="line">    </div><div class="line"><span class="comment">//③effectiveFinalInt=233;</span></div></pre></td></tr></table></figure></p>
<p>可以看到，我们可以不做任何声明上的改变即可在 lambda 中使用外部变量，前提是我们以 final 的规则对待这个变量。</p>
<h2 id="一点玄学"><a href="#一点玄学" class="headerlink" title="一点玄学"></a>一点玄学</h2><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><p>在匿名内部类中，this 关键字指向的是匿名类本身的对象，而在 lambda 中，this 指向的是 lambda 表达式的外部类。</p>
<h3 id="方法数差异"><a href="#方法数差异" class="headerlink" title="方法数差异"></a>方法数差异</h3><p>当前 Android Studio 对 Java 8 新特性编译时采用脱糖（desugar）处理，lambda 表达式经过编译器编译后，每一个 lambda 表达式都会增加 1~2 个方法数。而 Android 应用的方法数不能超过 65536 个。虽然一般应用较难触发，但仍需注意。</p>
<p>参考资料</p>
<p>书籍：《 Java 核心技术 》</p>
<p>网络文章：<br><a href="https://developer.android.google.cn/studio/write/java8-support.html" target="_blank" rel="external">在 Android Studio 上使用 Java 8 新特性(官方)</a><br><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="external">Oracle 官方 lambda 教程</a><br><a href="https://zh.wikipedia.org/wiki/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0" target="_blank" rel="external">匿名函数–维基百科（需科学上网）</a><br><a href="http://blog.oneapm.com/apm-tech/226.html" target="_blank" rel="external">深入浅出 Java 8 Lambda 表达式</a></p>
<!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=songid&auto=1&height=66"></iframe> -->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Lambda ,希腊字母 “λ” 的英文名称。没错，就是你高中数学老师口中的那个“兰布达”。在编程世界中，它是匿名函数的别名， Java 从 Java 8 开始引入 lambda 表达式。而 Android 开发者的世界里，直到 Android Studio 2.4 Preview 4 及其之后的版本里，lambda 表达式才得到完全的支持（在此之前需要使用 Jack 编译器或 retrolambda 等插件，详见链接）。新版本 Android Studio 使用向导详见 &lt;a href=&quot;https://developer.android.google.cn/studio/write/java8-support.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《在 Android Studio 上使用 Java 8 新特性》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Oracle 官方推出的 lambda 教程开篇第一句就表扬了其对匿名内部类笨拙繁琐的代码的简化，然而，在各大 RxJava 教程下的评论中，最受吐槽的就是作者提供的示例代码用了 lambda 表达式，给阅读造成了很大的障碍。&lt;/p&gt;
&lt;p&gt;所以，在这篇文章中，我会先讲解 lambda 表达式的作用和三种形式，之后提供一个在 Android Studio 便捷使用 lambda 的小技巧，然后说一说 lambda 表达式中比较重要的变量捕获概念，最后再讲一些使用 lambda 表达式前后的差异。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android嫡系" scheme="http://dinson.win/categories/Android%E5%AB%A1%E7%B3%BB/"/>
    
    
      <category term="Lambda" scheme="http://dinson.win/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>2017年Android百大框架排行榜</title>
    <link href="http://dinson.win/2017/06/28/17-06-28/"/>
    <id>http://dinson.win/2017/06/28/17-06-28/</id>
    <published>2017-06-28T00:57:07.000Z</published>
    <updated>2017-07-12T15:14:12.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>排行榜包括四大类：</p>
<ul>
<li>单一框架：仅提供路由、网络层、UI层、通信层或其他单一功能的框架</li>
<li>混合开发框架：提供开发hybrid app、h5与webview结合能力、web app能力的框架。</li>
<li>企业级开源项目：可以独立运行的app，有极高的学习价值、思路借鉴意义</li>
<li>书籍类开源项目：类似Open-sourc-project这样的导航类项目，大型公司的Android课程的学习目录</li>
</ul>
</blockquote>
<a id="more"></a>
<!-- 这是　　缩进-->
<h2 id="百大框架排行榜"><a href="#百大框架排行榜" class="headerlink" title="百大框架排行榜"></a>百大框架排行榜</h2><table>
<thead>
<tr>
<th>框架名称　　</th>
<th>上榜关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.Retrofit　　</td>
<td>网络</td>
</tr>
<tr>
<td>2.okhttp</td>
<td>网络</td>
</tr>
<tr>
<td>3.Butter Knife</td>
<td>代码模板</td>
</tr>
<tr>
<td>4.MPAndroidChart</td>
<td>图表</td>
</tr>
<tr>
<td>5.glide</td>
<td>图片</td>
</tr>
<tr>
<td>6.leakcanary</td>
<td>内存</td>
</tr>
<tr>
<td>7.Android-Universal-Image-Loader</td>
<td>图片</td>
</tr>
<tr>
<td>8.EventBus</td>
<td>事件消息</td>
</tr>
<tr>
<td>9.zxing</td>
<td>条码扫描</td>
</tr>
<tr>
<td>10.picasso</td>
<td>图片</td>
</tr>
<tr>
<td>11.lottie-android</td>
<td>动画</td>
</tr>
<tr>
<td>12.fresco</td>
<td>图片</td>
</tr>
<tr>
<td>13.RxAndroid</td>
<td>异步</td>
</tr>
<tr>
<td>14.SlidingMenu</td>
<td>菜单</td>
</tr>
<tr>
<td>15.PhotoView</td>
<td>图片</td>
</tr>
<tr>
<td>16.material-dialogs</td>
<td>UI</td>
</tr>
<tr>
<td>17.droid-async-http</td>
<td>网络</td>
</tr>
<tr>
<td>18.androidannotations</td>
<td>注解</td>
</tr>
<tr>
<td>19.fastjson</td>
<td>json</td>
</tr>
<tr>
<td>20.Material-Animations</td>
<td>动画</td>
</tr>
<tr>
<td>21.tinker</td>
<td>热修复</td>
</tr>
<tr>
<td>22.ViewPagerIndicator</td>
<td>UI</td>
</tr>
<tr>
<td>23.Android-CleanArchitecture</td>
<td>架构</td>
</tr>
<tr>
<td>24.Android-PullToRefresh</td>
<td>刷新</td>
</tr>
<tr>
<td>25.flexbox-layout</td>
<td>UI</td>
</tr>
<tr>
<td>26.AndroidSwipeLayout</td>
<td>UI</td>
</tr>
<tr>
<td>27.realm-java</td>
<td>数据库</td>
</tr>
<tr>
<td>28.greenDAO</td>
<td>数据</td>
</tr>
<tr>
<td>29.stetho</td>
<td>调试</td>
</tr>
<tr>
<td>30.BaseRecyclerViewAdapterHelper</td>
<td>UI</td>
</tr>
<tr>
<td>31.AndroidViewAnimations</td>
<td>动画</td>
</tr>
<tr>
<td>32.MaterialDrawer</td>
<td>菜单</td>
</tr>
<tr>
<td>33.Android-ObservableScrollView</td>
<td>UI</td>
</tr>
<tr>
<td>34.CircleImageView</td>
<td>图片</td>
</tr>
<tr>
<td>35.logger</td>
<td>调试</td>
</tr>
<tr>
<td>36.agera</td>
<td>异步</td>
</tr>
<tr>
<td>37.BottmBar</td>
<td>菜单</td>
</tr>
<tr>
<td>38.Calligraphy</td>
<td>字体</td>
</tr>
<tr>
<td>39.AndroidSlidingUpPanel</td>
<td>UI</td>
</tr>
<tr>
<td>40.AppIntro</td>
<td>UI</td>
</tr>
<tr>
<td>41.recyclerview-animators</td>
<td>动画</td>
</tr>
<tr>
<td>42.dagger</td>
<td>依赖注入</td>
</tr>
<tr>
<td>43.Android-Bootstarp</td>
<td>UI</td>
</tr>
<tr>
<td>44.RxBinding</td>
<td>响应式</td>
</tr>
<tr>
<td>45.ListViewAnimations</td>
<td>动画</td>
</tr>
<tr>
<td>46.UItimateRecyclerView</td>
<td>UI</td>
</tr>
<tr>
<td>47.uCrop</td>
<td>图片</td>
</tr>
<tr>
<td>48.RxJava-Android-Samples</td>
<td>用例</td>
</tr>
<tr>
<td>49.AndroidAutoLayout</td>
<td>适配</td>
</tr>
<tr>
<td>50.EffectiveAndroidUI</td>
<td>性能</td>
</tr>
<tr>
<td>51.Luban</td>
<td>图片</td>
</tr>
<tr>
<td>52.DroidPlugin</td>
<td>插件化</td>
</tr>
<tr>
<td>53.otto</td>
<td>响应式</td>
</tr>
<tr>
<td>54.u2020</td>
<td>用例</td>
</tr>
<tr>
<td>55.buck</td>
<td>构建</td>
</tr>
<tr>
<td>56.PermissionsDispatcher</td>
<td>权限</td>
</tr>
<tr>
<td>57.android-gif-drawable</td>
<td>GIF</td>
</tr>
<tr>
<td>58.Apktool</td>
<td>反编译</td>
</tr>
<tr>
<td>59.dynamic-load-apk</td>
<td>插件化</td>
</tr>
<tr>
<td>60.atlas</td>
<td>插件化</td>
</tr>
<tr>
<td>61.volley</td>
<td>网络</td>
</tr>
<tr>
<td>62.androidmvp</td>
<td>用例</td>
</tr>
<tr>
<td>63.SwipeBackLayout</td>
<td>手势</td>
</tr>
<tr>
<td>64.FlycoTabLayout</td>
<td>UI</td>
</tr>
<tr>
<td>65.android-testing</td>
<td>测试</td>
</tr>
<tr>
<td>66.FileDownloader</td>
<td>下载</td>
</tr>
<tr>
<td>67.JieCaoVideoPlayer</td>
<td>多媒体</td>
</tr>
<tr>
<td>68.glide-transformations</td>
<td>图片</td>
</tr>
<tr>
<td>69.android-gpuimage</td>
<td>图片</td>
</tr>
<tr>
<td>70.RxPermissions</td>
<td>权限</td>
</tr>
<tr>
<td>71.freeline</td>
<td>编译</td>
</tr>
<tr>
<td>72.RxLifecycle</td>
<td>生命周期</td>
</tr>
<tr>
<td>73.classyshark</td>
<td>反编译</td>
</tr>
<tr>
<td>74.acra</td>
<td>崩溃日志</td>
</tr>
<tr>
<td>75.DiskLruCache</td>
<td>文件</td>
</tr>
<tr>
<td>76.dexposed</td>
<td>热修复</td>
</tr>
<tr>
<td>77.Litho</td>
<td>性能</td>
</tr>
<tr>
<td>78.mosby</td>
<td>MVP</td>
</tr>
<tr>
<td>79.AndResGuard　　　　</td>
<td>混淆</td>
</tr>
<tr>
<td>80.StatusBarUtil</td>
<td>状态栏</td>
</tr>
<tr>
<td>81.robolectric</td>
<td>测试</td>
</tr>
<tr>
<td>82.Fragmentation</td>
<td>嵌套</td>
</tr>
<tr>
<td>83.Small</td>
<td>插件化</td>
</tr>
<tr>
<td>84.JsBridge</td>
<td>hybrid</td>
</tr>
<tr>
<td>85.richeditor-android</td>
<td>UI</td>
</tr>
<tr>
<td>86.Transitions-Everywhere</td>
<td>动画</td>
</tr>
<tr>
<td>87.android-viewbadger</td>
<td>勋章</td>
</tr>
<tr>
<td>88.AndroidWiFiADB</td>
<td>调试</td>
</tr>
<tr>
<td>89.emojicon</td>
<td>表情包</td>
</tr>
<tr>
<td>90.packer-ng-plugin</td>
<td>多渠道</td>
</tr>
<tr>
<td>91.android-priority-jobqueue</td>
<td>多线程</td>
</tr>
<tr>
<td>92.Android-Debug-Database</td>
<td>调试</td>
</tr>
<tr>
<td>93.conceal</td>
<td>加密</td>
</tr>
<tr>
<td>94.ARouter</td>
<td>页面路由</td>
</tr>
<tr>
<td>95.MagicaSakura</td>
<td>多主题</td>
</tr>
<tr>
<td>96.CustomActivityOnCrash</td>
<td>崩溃</td>
</tr>
<tr>
<td>97.XhsEmoticonsKeyboard</td>
<td>键盘</td>
</tr>
</tbody>
</table>
<h3 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit　　"></a>Retrofit　　</h3><blockquote>
<p>一句话介绍：Retrofit是一款类型安全的网络框架，基于HTTP协议，服务于Android和java语言</p>
<p>上榜理由：Retrofit以21.8k的stars量雄踞github中android子标题榜首，第一当之无愧。</p>
</blockquote>
<p>官网地址：<a href="http://square.github.io/retrofit/" target="_blank" rel="external">http://square.github.io/retrofit/</a></p>
<p>github：<a href="https://github.com/square/retrofit" target="_blank" rel="external">https://github.com/square/retrofit</a></p>
<p>作者：square团队</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:retrofit:2.3.0'</span></div></pre></td></tr></table></figure></p>
<h3 id="okhttp"><a href="#okhttp" class="headerlink" title="okhttp"></a>okhttp</h3><blockquote>
<p>一句话介绍：okhttp是一款基于HTTP和HTTP2.0协议的网络框架，服务于java和android客户端</p>
<p>上榜理由：okhttp以20.4k的stars量雄踞github中android子标题第二名。大型公司比如淘宝也封装的是okhttp。Retrofit2.0开始内置okhttp框架，Retrofit专注封装接口完成业务需求，okhttp专注网络请求的安全高效，笔者将两者区分开，是想让后来学习者知道，这是两套框架，学习框架原理时可以分开学习，以免理解混乱。</p>
</blockquote>
<p>官网地址：<a href="http://square.github.io/okhttp/" target="_blank" rel="external">http://square.github.io/okhttp/</a></p>
<p>github：<a href="https://github.com/square/okhttp" target="_blank" rel="external">https://github.com/square/okhttp</a></p>
<p>作者：square团队</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.okhttp3:okhttp:3.8.0'</span></div></pre></td></tr></table></figure></p>
<h3 id="Butter-Knife"><a href="#Butter-Knife" class="headerlink" title="Butter Knife"></a>Butter Knife</h3><blockquote>
<p>一句话介绍：Butter Knife所提供了一种能力——使用注解生成模板代码，将view与方法和参数绑定。</p>
<p>上榜理由：github上16.5K个star，配合Androidstudio提供的Butter Knife插件，帮助开发者省却了频繁findviewbyid的烦恼，最新的Butter Knife还提供了onclick绑定以及字符串的初始化，初学者可以查阅Butter Knife以及Butter Knife插件进一步学习！</p>
</blockquote>
<p>官网地址：<a href="http://jakewharton.github.io/butterknife/" target="_blank" rel="external">http://jakewharton.github.io/butterknife/</a></p>
<p>github：<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">https://github.com/JakeWharton/butterknife</a></p>
<p>作者：JakeWharton ，也是square团队成员之一</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">  <span class="keyword">compile</span> <span class="string">'com.jakewharton:butterknife:8.6.0'</span></div><div class="line">  annotationProcessor <span class="string">'com.jakewharton:butterknife-compiler:8.6.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="MPAndroidChart"><a href="#MPAndroidChart" class="headerlink" title="MPAndroidChart"></a>MPAndroidChart</h3><blockquote>
<p>一句话介绍：MPAndroidChart是一款图表框架</p>
<p>上榜理由：github上16.1K个star，以快速、简洁。强大著称的图表框架</p>
</blockquote>
<p>官网地址：<a href="https://github.com/PhilJay/MPAndroidChart" target="_blank" rel="external">https://github.com/PhilJay/MPAndroidChart</a>  </p>
<p>github：<a href="https://github.com/PhilJay/MPAndroidChart" target="_blank" rel="external">https://github.com/PhilJay/MPAndroidChart</a></p>
<p>作者：PhilJay</p>
<p>使用：</p>
<ul>
<li>在根目录的 build.gradle上加入:</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section">allprojects</span> &#123;</div><div class="line">    <span class="section">repositories</span> &#123;</div><div class="line">        <span class="section">maven</span> &#123; <span class="attribute">url</span> <span class="string">"https://jitpack.io"</span> &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在app的build.gradle上加入：</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.github.PhilJay:MPAndroidChart:v3.0.2'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="glide"><a href="#glide" class="headerlink" title="glide"></a>glide</h3><blockquote>
<p>一句话介绍：glide是一款专注于提供流畅划动能力的“图片加载和缓存框架”</p>
<p>上榜理由：15.9k个star，图片加载类框架排名第一的框架，google 在2014开发者大会上演示的camera app就是基于gilde框架开发的</p>
</blockquote>
<p>github：<a href="https://github.com/bumptech/glide" target="_blank" rel="external">https://github.com/bumptech/glide</a></p>
<p>作者：Bump Technologies团队</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">repositories</span> &#123;</div><div class="line">  mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.github.bumptech.glide:glide:3.8.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:support-v4:19.1.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="leakcanary"><a href="#leakcanary" class="headerlink" title="leakcanary"></a>leakcanary</h3><blockquote>
<p>一句话介绍：一款内存检测框架，服务于java和android客户端</p>
<p>上榜理由：方便，简洁是leakcanary最大的特点，只需在应用的apllication中集成，就可以直接使用它；15.5k个star说明了它有多么受欢迎</p>
</blockquote>
<p>github：<a href="https://github.com/square/leakcanary" target="_blank" rel="external">https://github.com/square/leakcanary</a></p>
<p>作者：square团队</p>
<p>使用：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section">dependencies</span> &#123;</div><div class="line">   <span class="attribute">debugCompile</span> <span class="string">'com.squareup.leakcanary:leakcanary-android:1.5.1'</span></div><div class="line">   releaseCompile <span class="string">'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'</span></div><div class="line">   testCompile <span class="string">'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在 Application 中写入:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ExampleApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span> public void onCreate() &#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    <span class="keyword">if</span> (<span class="type">LeakCanary</span>.isInAnalyzerProcess(<span class="keyword">this</span>)) &#123;</div><div class="line">      <span class="comment">// This process is dedicated to LeakCanary for heap analysis.</span></div><div class="line">      <span class="comment">// You should not init your app in this process.</span></div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="type">LeakCanary</span>.install(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">// Normal app init code...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Android-Universal-Image-Loader"><a href="#Android-Universal-Image-Loader" class="headerlink" title="Android-Universal-Image-Loader"></a>Android-Universal-Image-Loader</h3><blockquote>
<p>一句话介绍：曾经的图片加载框架王者，android开发老手都用过它</p>
<p>上榜理由:android端图片加载框架的老大哥了，15.3k个star足以证明它的热门，UIL与gilde最大区别是可定制，UIL提供了大量配置方式，图片加载状态的回调（成功，失败，进行中），加载动画等；以及提供了移动端图片加载框架的缓存思路：三级缓存策略 sd卡-内存-网络；值得注意的是，UIL以及两年未更新了，但笔者仍推荐各位使用！</p>
</blockquote>
<p>github：<a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">https://github.com/nostra13/Android-Universal-Image-Loader</a></p>
<p>作者：nostra13</p>
<p>使用：<br>下载地址   <a href="https://github.com/nostra13/Android-Universal-Image-Loader/raw/master/downloads/universal-image-loader-1.9.5.jar" target="_blank" rel="external">universal-image-loader-1.9.5.jar</a></p>
<h3 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h3><blockquote>
<p>一句话介绍：EventBus是一款本地组件间通信框架</p>
<p>上榜理由：组件间通信框架star量第一：14.8k，在大型项目的Activities，fragments，Threads，Services都可以看到它的使用场景，尽管EventBus在向未创建的组件传递事件时有些局限，仅适合在“活着的”组件间传递消息，但仍不妨碍它活跃在各个大型项目各个场景里。</p>
</blockquote>
<p>官网地址：<a href="http://greenrobot.org/eventbus/documentation/how-to-get-started/" target="_blank" rel="external">http://greenrobot.org/eventbus/documentation/how-to-get-started/</a></p>
<p>github：<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external">https://github.com/greenrobot/EventBus</a></p>
<p>作者：greenrobot </p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'org.greenrobot:eventbus:3.0.0'</span></div></pre></td></tr></table></figure></p>
<h3 id="zxing"><a href="#zxing" class="headerlink" title="zxing"></a>zxing</h3><blockquote>
<p>一句话介绍：条码图像处理库</p>
<p>上榜理由：如果你用过二维码，你肯定已经间接使用过大名鼎鼎的zxing了。13.9K的star量，让它排在本榜单第九，实至名归，如果你有了解二维码的需求，不妨从了解、修改它源码入手。</p>
</blockquote>
<p>github：<a href="https://github.com/zxing/zxing" target="_blank" rel="external">https://github.com/zxing/zxing</a></p>
<p>作者：Sean Owen</p>
<h3 id="picasso"><a href="#picasso" class="headerlink" title="picasso"></a>picasso</h3><blockquote>
<p>一句话介绍：强力的图片下载、缓存框架</p>
<p>上榜理由：本榜单出现的第三款图片类框架，不同的是picasso更强调图片下载，你可以将picasso集成进你的项目中，你也可以结合gilde和UIL与picasso，三者一齐封装至你的项目中，按需所用。</p>
</blockquote>
<p>官网地址：<a href="http://square.github.io/picasso/" target="_blank" rel="external">http://square.github.io/picasso/</a></p>
<p>github：<a href="https://github.com/square/picasso" target="_blank" rel="external">https://github.com/square/picasso</a></p>
<p>作者：square团队</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.picasso:picasso:2.5.2'</span></div></pre></td></tr></table></figure></p>
<h3 id="lottie-android"><a href="#lottie-android" class="headerlink" title="lottie-android"></a>lottie-android</h3><blockquote>
<p>一句话介绍：一款可以在Android端快速展示Adobe Afeter Effect（AE）工具所作动画的框架</p>
<p>上榜理由：动画类框架第一名，github上13.3k个star证明了他的优越性，利用json文件快速实现动画效果是它最大的便利，而这个json文件也是由Adobe提供的After Effects（AE）工具制作的，在AE中装一个Bodymovin的插件，使用这个插件最终将动画效果生成json文件，这个json文件即可由LottieAnimationView解析并生成绚丽的动画效果。而且它还支持跨平台哟。</p>
</blockquote>
<p>github：<a href="https://github.com/airbnb/lottie-android" target="_blank" rel="external">https://github.com/airbnb/lottie-android</a></p>
<p>作者：Airbnb 团队</p>
<h3 id="fresco"><a href="#fresco" class="headerlink" title="fresco"></a>fresco</h3><blockquote>
<p>一句话介绍：一款可以管理图片内存的框架</p>
<p>上榜理由:github上12.8k个star，图片类排行榜第四名，facebook的出身证明了它并非是重复造的轮子，在管理图片内存领域上有着它的一片天地，渐进式加载、加载gif都是它与前三位相比独有的特性</p>
</blockquote>
<p>官网地址： <a href="https://www.fresco-cn.org/" target="_blank" rel="external">https://www.fresco-cn.org/</a></p>
<p>github：<a href="https://github.com/facebook/fresco" target="_blank" rel="external">https://github.com/facebook/fresco</a></p>
<p>作者：facebook</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">  <span class="comment">// 其他依赖</span></div><div class="line">  <span class="keyword">compile</span> <span class="string">'com.facebook.fresco:fresco:0.12.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面的依赖需要根据需求添加：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">  <span class="comment">// 在 API &lt; 14 上的机器支持 WebP 时，需要添加</span></div><div class="line">  <span class="keyword">compile</span> <span class="string">'com.facebook.fresco:animated-base-support:0.12.0'</span></div><div class="line"></div><div class="line">  <span class="comment">// 支持 GIF 动图，需要添加</span></div><div class="line">  <span class="keyword">compile</span> <span class="string">'com.facebook.fresco:animated-gif:0.12.0'</span></div><div class="line"></div><div class="line">  <span class="comment">// 支持 WebP （静态图+动图），需要添加</span></div><div class="line">  <span class="keyword">compile</span> <span class="string">'com.facebook.fresco:animated-webp:0.12.0'</span></div><div class="line">  <span class="keyword">compile</span> <span class="string">'com.facebook.fresco:webpsupport:0.12.0'</span></div><div class="line"></div><div class="line">  <span class="comment">// 仅支持 WebP 静态图，需要添加</span></div><div class="line">  <span class="keyword">compile</span> <span class="string">'com.facebook.fresco:webpsupport:0.12.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="RxAndroid"><a href="#RxAndroid" class="headerlink" title="RxAndroid"></a>RxAndroid</h3><blockquote>
<p>一句话介绍：一款Android客户端组件间异步通信的框架</p>
<p>上榜理由：github上12.7k个star，位居组件通信框架的第二名，仅在EventBus之后，如果要问两者的区别，Eventbus是用来取代组件间繁琐的interface，RxAndroid是用来取代AnsyTask的，并不冲突；当然RxAndroid的优点并不仅限于此，更多优雅的实现，可以去官网查阅！</p>
</blockquote>
<p>github：<a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="external">https://github.com/ReactiveX/RxAndroid</a></p>
<p>作者：JakeWharton</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex.rxjava2:rxandroid:2.0.1'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex.rxjava2:rxjava:2.1.0'</span></div></pre></td></tr></table></figure></p>
<h3 id="SlidingMenu"><a href="#SlidingMenu" class="headerlink" title="SlidingMenu"></a>SlidingMenu</h3><blockquote>
<p>一句话介绍：侧滑菜单栏框架</p>
<p>上榜理由：与Userval-Image-loader 齐名的上古神器框架——为你的app提供侧滑菜单栏的功能；github闪更有10.5k个star，证明了它的经久不衰，即使在Google推出了NavigationDrawer，仍然没有减少开发者对SildingMenu的拥簇，经典总是经得起考验的，这个上古神兽已经四年没有更新了；有太多太多的app使用过它，这些都可以在软件的开源许可上看到！</p>
</blockquote>
<p>github：<a href="https://github.com/jfeinstein10/SlidingMenu" target="_blank" rel="external">https://github.com/jfeinstein10/SlidingMenu</a></p>
<p>作者：Jeremy Feinstein</p>
<p>使用：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在gihub上<span class="keyword">fork</span>源码，集成进项目中</div></pre></td></tr></table></figure></p>
<h3 id="PhotoView"><a href="#PhotoView" class="headerlink" title="PhotoView"></a>PhotoView</h3><blockquote>
<p>一句话介绍：一款ImageView展示框架，支持缩放，响应手势</p>
<p>上榜理由：10.3k的star数量，位于图片类框架排行榜第五位，PhotoView与前四位不同的是这次带来的是图片的展示能力，你一定好奇微信的头像点击放大是如何实现的，很多App的图片显示响应手势按压是如何实现的，了解PhotoView，你一定会开心的！（笔者也不会告诉你ImageView的点击放大效果在Android的sample也有）</p>
</blockquote>
<p>github：<a href="https://github.com/chrisbanes/PhotoView" target="_blank" rel="external">https://github.com/chrisbanes/PhotoView</a></p>
<p>作者：chrisbanes</p>
<p>使用：<br>在app根目录的build.gradle中加入：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section">allprojects</span> &#123;</div><div class="line">    <span class="section">repositories</span> &#123;</div><div class="line">        <span class="section">maven</span> &#123; <span class="attribute">url</span> <span class="string">"https://jitpack.io"</span> &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在app的module目录的build.gralde中加入：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.github.chrisbanes:PhotoView:latest.release.here'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;com.github.chrisbanes.photoview.PhotoView</div><div class="line">    android:<span class="built_in">id</span>=<span class="string">"@+id/photo_view"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span>/&gt;</div><div class="line"></div><div class="line"></div><div class="line">PhotoView photoView = (PhotoView) findViewById(R.<span class="built_in">id</span>.photo_view);</div><div class="line">photoView.setImageResource(R.drawable.image);</div></pre></td></tr></table></figure></p>
<h3 id="material-dialogs"><a href="#material-dialogs" class="headerlink" title="material-dialogs"></a>material-dialogs</h3><blockquote>
<p>一句话介绍：一款自定义dialog框架</p>
<p>上榜理由：9.9k个star，也是继PhotoView，SlidingMenu之后第三款自定义View框架，也许你还是自定义View的新人，对Dialog使用的还有点生疏，你可以通过它提升你的Dilaog使用能力</p>
</blockquote>
<p>github：<a href="https://github.com/afollestad/material-dialogs" target="_blank" rel="external">https://github.com/afollestad/material-dialogs</a></p>
<p>作者：Aidan Follestad</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="comment">// ... other dependencies here</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.afollestad.material-dialogs:core:0.9.4.5'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="droid-async-http"><a href="#droid-async-http" class="headerlink" title="droid-async-http"></a>droid-async-http</h3><blockquote>
<p>一句话介绍：一款基于Http协议的异步请求的网络框架，</p>
<p>上榜理由：虽然你有无数个使用retrofit+okhttp的理由，但9.8k个star，证明它仍然值得你深入学习。值得注意的是，它也已经有两年没更新了，你尽管拿去当你懒惰的理由！</p>
</blockquote>
<p>github：<a href="https://github.com/loopj/android-async-http" target="_blank" rel="external">https://github.com/loopj/android-async-http</a></p>
<p>作者：James Smith</p>
<p>使用：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="section">repositories</span> &#123;</div><div class="line">  <span class="section">maven</span> &#123;</div><div class="line">    <span class="attribute">url</span> <span class="string">'https://oss.sonatype.org/content/repositories/snapshots/'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">dependencies &#123;</div><div class="line">  <span class="attribute">compile</span> <span class="string">'com.loopj.android:android-async-http:1.5.0-SNAPSHOT'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="androidannotations"><a href="#androidannotations" class="headerlink" title="androidannotations"></a>androidannotations</h3><blockquote>
<p>一句话介绍：一款基于注解的快速开发框架</p>
<p>上榜理由：与Butterknife一样基于注解，利用注解快速完成view的初始化，不同的是androidannotations提供了更多的能力：简单的线程模型等；笔者只接触过Butterknife，无法更进一步叙述androidannotations的优势，如果你志在深入了解注解的妙用，可以尝试探索一下！</p>
</blockquote>
<p>官网地址：<a href="http://androidannotations.org/" target="_blank" rel="external">http://androidannotations.org/</a></p>
<p>github：<a href="https://github.com/androidannotations/androidannotations" target="_blank" rel="external">https://github.com/androidannotations/androidannotations</a></p>
<p>作者： WonderCsabo</p>
<h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><blockquote>
<p>一句话介绍:一款基于json解析、生成的框架</p>
<p>上榜理由：从它的名字不难看出，快速是它最大的特性，阿里巴巴的出身保证了代码的质量和优越，9.4k的star数量，也是榜单里第一个出现的中国开源框架，涉及网络的app都会用到json，fastjson值得作为你的首选！</p>
</blockquote>
<p>github：<a href="https://github.com/alibaba/fastjson" target="_blank" rel="external">https://github.com/alibaba/fastjson</a></p>
<p>作者：alibaba</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.alibaba:fastjson:1.1.58.android'</span></div></pre></td></tr></table></figure></p>
<h3 id="Material-Animations"><a href="#Material-Animations" class="headerlink" title="Material-Animations"></a>Material-Animations</h3><blockquote>
<p>一句话介绍：一款提供场景转换过渡能力的动画框架</p>
<p>上榜理由：Android动画框架排行榜第二名，9.3k个star数量，与动画框架榜单第一名lottie-android不同的是，Material-Animations提供的是场景切换的动画效果。Android 官网sample中已经提供了部分Transition （转场动画）的展示，作为初学者很难快速拓展到自己项目中，Material-Animations的示例出现为开发者省去了此类麻烦，直接照搬应用到自己的App中吧。</p>
</blockquote>
<p>github：<a href="https://github.com/lgvalle/Material-Animations" target="_blank" rel="external">https://github.com/lgvalle/Material-Animations</a></p>
<p>作者：Luis G. Valle</p>
<p>使用：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">down</span>源码，修改学习</div></pre></td></tr></table></figure></p>
<h3 id="tinker"><a href="#tinker" class="headerlink" title="tinker"></a>tinker</h3><blockquote>
<p>一句话介绍：它是微信官网的Android热补丁解决方案</p>
<p>上榜理由：9.1k个star，微信在用的热补丁方案，心动不如行动</p>
</blockquote>
<p>官网地址：<a href="http://www.tinkerpatch.com/Docs/intro" target="_blank" rel="external">http://www.tinkerpatch.com/Docs/intro</a></p>
<p>github：<a href="https://github.com/Tencent/tinker" target="_blank" rel="external">https://github.com/Tencent/tinker</a></p>
<p>作者：Tencent</p>
<h3 id="ViewPagerIndicator"><a href="#ViewPagerIndicator" class="headerlink" title="ViewPagerIndicator"></a>ViewPagerIndicator</h3><blockquote>
<p>一句话介绍：一款基于ViewPager的页面指示器开源框架</p>
<p>上榜理由：上古神器，尽管已经五年未更新了，但你仍然可以在淘宝等app中看到它的使用场景，8.9K的star量让它不愠不火的在矗立在榜单里</p>
</blockquote>
<p>官网地址：<a href="http://viewpagerindicator.com/" target="_blank" rel="external">http://viewpagerindicator.com/</a></p>
<p>github：<a href="https://github.com/JakeWharton/ViewPagerIndicator" target="_blank" rel="external">https://github.com/JakeWharton/ViewPagerIndicator</a></p>
<p>作者：JakeWharton </p>
<p>使用：</p>
<p>下载地址 <a href="https://github.com/JakeWharton/Android-ViewPagerIndicator/zipball/master" target="_blank" rel="external">JakeWharton-ViewPagerIndicator-2.4.1-0</a> </p>
<h3 id="Android-CleanArchitecture"><a href="#Android-CleanArchitecture" class="headerlink" title="Android-CleanArchitecture"></a>Android-CleanArchitecture</h3><blockquote>
<p>一句话介绍：一个讲解设计框架的demo</p>
<p>上榜理由：它不是框架，你可以把它当作一本书，它将教会你如何设计简洁的架构，工程里有一个sample app，配合图文讲解，你将对Android客户端的架构有更深一层的认识。8.8k的star数量，证明了它是一本“好书”哟。</p>
</blockquote>
<p>github：<a href="https://github.com/android10/Android-CleanArchitecture" target="_blank" rel="external">https://github.com/android10/Android-CleanArchitecture</a></p>
<p>作者：Fernando Cejas</p>
<h3 id="Android-PullToRefresh"><a href="#Android-PullToRefresh" class="headerlink" title="Android-PullToRefresh"></a>Android-PullToRefresh</h3><blockquote>
<p>一句话介绍：一款为普通视图提供刷新UI的视图框架</p>
<p>上榜理由：8.2K的star数量使它位居刷新类UI框架榜首，强大的兼容能力，该框架支持ListView，GrdiView，WebViewScrollView，ViewPager等众多View增加刷新的能力，如果你有增加上拉加载，下拉加载的需求，你应该考虑它了！</p>
</blockquote>
<p>github：<a href="https://github.com/chrisbanes/Android-PullToRefresh" target="_blank" rel="external">https://github.com/chrisbanes/Android-PullToRefresh</a></p>
<p>作者：Chris Banes</p>
<p>使用：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">github：<span class="keyword">fork</span>源码，集成到项目中</div></pre></td></tr></table></figure></p>
<h3 id="flexbox-layout"><a href="#flexbox-layout" class="headerlink" title="flexbox-layout"></a>flexbox-layout</h3><blockquote>
<p>一句话介绍：一款弹性伸缩布局</p>
<p>上榜理由：8.1k个star，前端H5开发者转Android开发的福音，FlexboxLayout作为LinearLayout和RelativeLayout的替代者，值得各位一试，与其一同推出的还有ConstraintLayout。</p>
</blockquote>
<p>github：<a href="https://github.com/google/flexbox-layout" target="_blank" rel="external">https://github.com/google/flexbox-layout</a></p>
<p>作者：Google</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.google.android:flexbox:0.3.0-alpha3'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="AndroidSwipeLayout"><a href="#AndroidSwipeLayout" class="headerlink" title="AndroidSwipeLayout"></a>AndroidSwipeLayout</h3><blockquote>
<p>一句话介绍：非常强大滑动式布局</p>
<p>上榜理由:滑动删除是国产app常见需求，商品详情的上下滑动需求作为开发者的我们也经常遇到，AndroidSwipeLayout在github上拥有8K个star，证明它经受住了检验，各位值得一试</p>
</blockquote>
<p>github：<a href="https://github.com/daimajia/AndroidSwipeLayout" target="_blank" rel="external">https://github.com/daimajia/AndroidSwipeLayout</a></p>
<p>作者：daimajia</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:recyclerview-v7:21.0.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.support:support-v4:20.+'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">"com.daimajia.swipelayout:library:1.2.0@aar"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>或下载 <a href="https://github.com/daimajia/AndroidSwipeLayout/releases/download/v1.1.8/AndroidSwipeLayout-v1.1.8.jar" target="_blank" rel="external">AndroidSwipeLayout-v1.1.8.jar</a></p>
<h3 id="realm-java"><a href="#realm-java" class="headerlink" title="realm-java"></a>realm-java</h3><blockquote>
<p>一句话介绍：Realm是一款移动端数据库框架</p>
<p>上榜理由：核心数据引擎C++打造，比普通的Sqlite型数据库快的多。笔者猜测正是如此，realm以7892个star数让它位于大名鼎鼎的数据库框架GreenDao（7877）之前</p>
</blockquote>
<p>官网地址：<a href="https://realm.io/cn/" target="_blank" rel="external">https://realm.io/cn/</a></p>
<p>github：<a href="https://github.com/realm/realm-java" target="_blank" rel="external">https://github.com/realm/realm-java</a></p>
<p>作者：Realm团队 </p>
<p>使用：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//</span>realm.io<span class="regexp">/docs/</span>java<span class="regexp">/latest/</span></div></pre></td></tr></table></figure></p>
<h3 id="greenDAO"><a href="#greenDAO" class="headerlink" title="greenDAO"></a>greenDAO</h3><blockquote>
<p>一句话介绍：greenDAO是一款高效、快速的SQLite型数据库</p>
<p>上榜理由：greenDAO的star数量与Realm不相上下，且与EventBus师出同门，也是由greenrobot团队开发维护的，质量有所保证，但若拷问笔者Realm与greenDao两者的优劣性，只能具体到实际使用当中，模拟线上的使用情形，进行高强度测试后才能下判断，故在此不能一言两语说完，深表遗憾</p>
</blockquote>
<p>官网地址：<a href="http://greenrobot.org/greendao/" target="_blank" rel="external">http://greenrobot.org/greendao/</a></p>
<p>github：<a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">https://github.com/greenrobot/greenDAO</a></p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">buildscript</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        jcenter()</div><div class="line">        mavenCentral() <span class="comment">// add repository</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">dependencies</span> &#123;</div><div class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:2.3.1'</span></div><div class="line">        <span class="keyword">classpath</span> <span class="string">'org.greenrobot:greendao-gradle-plugin:3.2.2'</span> <span class="comment">// add plugin</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">-----</div><div class="line"></div><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line">apply plugin: <span class="string">'org.greenrobot.greendao'</span> <span class="comment">// apply plugin</span></div><div class="line"> </div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'org.greenrobot:greendao:3.2.2'</span> <span class="comment">// add library</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="stetho"><a href="#stetho" class="headerlink" title="stetho"></a>stetho</h3><blockquote>
<p>一句话介绍：一款提供在Chrome开发者工具上调试Android app能力的开源框架</p>
<p>上榜理由：上古时期Android程序员要调试本地数据库，需要进入Android Device Monitor找到/data/data/com.xxx.xxx/databases里面的db文件，导出到PC端，用PC的数据工具查看，现在使用stetho省却了如此的麻烦；如今的Android程序员如果想调试网络请求响应过程中的报文段，需要在请求中加入Log语句，一个信息一个信息打印出来，相当繁琐，现在请使用stetho，省却诸如此类的麻烦把！7.8K个star数，广大Android开发者调试的福音，你值得拥有！</p>
</blockquote>
<p>作者：FaceBook</p>
<p>官网地址： <a href="http://facebook.github.io/stetho/" target="_blank" rel="external">http://facebook.github.io/stetho/</a></p>
<p>github：<a href="https://github.com/facebook/stetho" target="_blank" rel="external">https://github.com/facebook/stetho</a></p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.facebook.stetho:stetho:1.5.0'</span></div></pre></td></tr></table></figure></p>
<h3 id="BaseRecyclerViewAdapterHelper"><a href="#BaseRecyclerViewAdapterHelper" class="headerlink" title="BaseRecyclerViewAdapterHelper"></a>BaseRecyclerViewAdapterHelper</h3><blockquote>
<p>一句话介绍：强大、流畅的Recyvlerview通用适配器</p>
<p>上榜理由：如果你是RecyclerView的拥簇者，你一定要体验这款专门服务该view的适配器，7.7K个star，让这个家伙位于github上Android 适配器排行榜第一，还有很多惊喜等你去探寻！</p>
</blockquote>
<p>官网地址：<a href="http://www.recyclerview.org/" target="_blank" rel="external">http://www.recyclerview.org/</a></p>
<p>作者：陈宇明以及他的小伙伴</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">allprojects</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        ...</div><div class="line">        maven &#123; url <span class="string">"https://jitpack.io"</span> &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">        <span class="keyword">compile</span> <span class="string">'com.github.CymChad:BaseRecyclerViewAdapterHelper:VERSION_CODE'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="AndroidViewAnimations"><a href="#AndroidViewAnimations" class="headerlink" title="AndroidViewAnimations"></a>AndroidViewAnimations</h3><blockquote>
<p>一句话介绍：一款提供可爱动画集合的框架</p>
<p>上榜理由：正如作者所说，它囊括了开发需求过程中所有的动画效果，集成进了这个简洁可爱的动画框架。7.6K的star数，证明了它在动画框架领域的战斗力，让它仅仅位列lottie-android和Material-Animations两个动画框架霸主之后，屈居第三名</p>
</blockquote>
<p>github：<a href="https://github.com/daimajia/AndroidViewAnimations" target="_blank" rel="external">https://github.com/daimajia/AndroidViewAnimations</a></p>
<p>作者：daimajia</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">        <span class="keyword">compile</span> <span class="string">'com.android.support:support-compat:25.1.1'</span></div><div class="line">        <span class="keyword">compile</span> <span class="string">'com.daimajia.easing:library:2.0@aar'</span></div><div class="line">        <span class="keyword">compile</span> <span class="string">'com.daimajia.androidanimations:library:2.2@aar'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>sample：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">YoYo</span><span class="selector-class">.with</span>(<span class="selector-tag">Techniques</span><span class="selector-class">.Tada</span>)</div><div class="line">    <span class="selector-class">.duration</span>(700)</div><div class="line">    <span class="selector-class">.repeat</span>(5)</div><div class="line">    <span class="selector-class">.playOn</span>(<span class="selector-tag">findViewById</span>(<span class="selector-tag">R</span><span class="selector-class">.id</span><span class="selector-class">.edit_area</span>));</div></pre></td></tr></table></figure></p>
<h3 id="MaterialDrawer"><a href="#MaterialDrawer" class="headerlink" title="MaterialDrawer"></a>MaterialDrawer</h3><blockquote>
<p>一句话介绍：强大的塑料风格的抽屉框架</p>
<p>上榜理由：7.6K的star数量，作者的持续更新状态，如果你还在犹豫上手SlidingMenu遇到bug没人管的困境，那么你可以入手它作为你的抽屉布局 </p>
</blockquote>
<p>github：<a href="https://github.com/mikepenz/MaterialDrawer" target="_blank" rel="external">https://github.com/mikepenz/MaterialDrawer</a></p>
<p>作者：Mike Penz</p>
<p>使用:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span>(<span class="string">'com.mikepenz:materialdrawer:5.9.2@aar'</span>) &#123;</div><div class="line">    transitive = <span class="keyword">true</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"></div><div class="line"><span class="keyword">new</span> DrawerBuilder().withActivity(<span class="keyword">this</span>).build();</div></pre></td></tr></table></figure></p>
<h3 id="Android-ObservableScrollView"><a href="#Android-ObservableScrollView" class="headerlink" title="Android-ObservableScrollView"></a>Android-ObservableScrollView</h3><blockquote>
<p>一句话介绍：一款让视图滑动更具有视觉效果的滑动式框架</p>
<p>上榜理由：7.5K的star数量，证明了它曾经的价值，github上提供了12种滑动效果，你可以用它弥补其他框架的不足，提升你的App体验！</p>
</blockquote>
<p>github：<a href="https://github.com/ksoichiro/Android-ObservableScrollView" target="_blank" rel="external">https://github.com/ksoichiro/Android-ObservableScrollView</a></p>
<p>作者：Soichiro Kashima</p>
<p>使用：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">compile</span> <span class="selector-tag">com</span><span class="selector-class">.github</span><span class="selector-class">.ksoichiro</span><span class="selector-pseudo">:android-observablescrollview</span></div></pre></td></tr></table></figure></p>
<h3 id="CircleImageView"><a href="#CircleImageView" class="headerlink" title="CircleImageView"></a>CircleImageView</h3><blockquote>
<p>一句话介绍：圆角ImageView</p>
<p>上榜理由：也许你已经听说过无数种展示圆角图片的方法，但如果你不尝试尝试CircleImageView，那么你的知识库会因为少了它黯然失色，有的时候完成需求是开发者优先考虑的，不同实现方法牵扯到的性能差异更值得让人深思，如果你有心在图片性能上有所涉猎，那么CircleImageView绝对不会让你败兴而归。最后别忘了记得去看Romain Guy的建议哟。</p>
</blockquote>
<p>github：<a href="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="external">https://github.com/hdodenhof/CircleImageView</a></p>
<p>作者：Henning Dodenhof</p>
<p>使用：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile '<span class="keyword">de</span>.hdodenhof:circleimageview:2.1.0'</div><div class="line">&#125;</div><div class="line"> </div><div class="line"></div><div class="line"></div><div class="line">&lt;<span class="keyword">de</span>.hdodenhof.circleimageview.CircleImageView</div><div class="line">    xmlns:<span class="keyword">app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    android:id=<span class="string">"@+id/profile_image"</span></div><div class="line">    android:layout_width=<span class="string">"96dp"</span></div><div class="line">    android:layout_height=<span class="string">"96dp"</span></div><div class="line">    android:src=<span class="string">"@drawable/profile"</span></div><div class="line">    <span class="keyword">app</span>:civ_border_width=<span class="string">"2dp"</span></div><div class="line">    <span class="keyword">app</span>:civ_border_color=<span class="string">"#FF000000"</span>/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h3><blockquote>
<p>一句话介绍：一款让log日志优雅显示的框架</p>
<p>上榜理由：logger作为调试框架，并未给出很强大的能力，它最大的亮点是优雅的输出log信息，并且支持多种格式：线程、Json、Xml、List、Map等，如果你整日沉迷于汪洋大海般的log信息不能自拔，logger就是你的指路明灯！6.6k个star让他位列调试框架第二名，屈居facebook的stetho之后</p>
</blockquote>
<p>github：<a href="https://github.com/orhanobut/logger" target="_blank" rel="external">https://github.com/orhanobut/logger</a></p>
<p>作者：Orhan Obut</p>
<p>使用：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.orhanobut:logger:2.1.1'</span></div><div class="line"> </div><div class="line"></div><div class="line">Logger.d(<span class="built_in">MAP</span>);</div><div class="line">Logger.d(<span class="built_in">SET</span>);</div><div class="line">Logger.d(<span class="built_in">LIST</span>);</div><div class="line">Logger.d(<span class="built_in">ARRAY</span>);</div><div class="line">Logger.json(JSON_CONTENT);</div><div class="line">Logger.<span class="built_in">xml</span>(XML_CONTENT);</div></pre></td></tr></table></figure></p>
<h3 id="agera"><a href="#agera" class="headerlink" title="agera"></a>agera</h3><blockquote>
<p>一句话介绍:一款服务于Android平台的响应式编程框架</p>
<p>上榜理由：google专门推出一套响应式编程框架服务于Android开发者，相比于之响应式编程框架榜首的 RxJava RxAndroid，它更轻量，两者最大的不同点在于agera基于push event、pull data （VS Rx系列 push data）。</p>
</blockquote>
<p>github：<a href="https://github.com/google/agera" target="_blank" rel="external">https://github.com/google/agera</a></p>
<p>作者：Google</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.google.android.agera:agera:1.3.0'</span></div></pre></td></tr></table></figure></p>
<p>扩展能力<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.google.android.agera:content:1.3.0'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.google.android.agera:database:1.3.0'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.google.android.agera:net:1.3.0'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.google.android.agera:rvadapter:1.3.0'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.google.android.agera:rvdatabinding:1.3.0'</span></div></pre></td></tr></table></figure></p>
<h3 id="BottmBar"><a href="#BottmBar" class="headerlink" title="BottmBar"></a>BottmBar</h3><blockquote>
<p>一句话介绍：一款底部导航栏视图框架</p>
<p>上榜理由：底部栏里的王者框架，6.3K的star数量，证明了它的优秀，完全遵循材料设计规范，上手非常方便。如果说缺点，无法设置icon与titile的间距，无法自定义视图的大小等，但这些都可以通过修改源代码解决，笔者献丑也修改了一套符合国内开发者的底部导航框架，即将开源。</p>
</blockquote>
<p>github：<a href="https://github.com/roughike/BottomBar" target="_blank" rel="external">https://github.com/roughike/BottomBar</a></p>
<p>作者：Iiro Krankka</p>
<p>使用：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> 'com.roughike:bottom-<span class="built_in">bar</span>:<span class="number">2.3</span><span class="number">.1</span>'</div></pre></td></tr></table></figure></p>
<h3 id="Calligraphy"><a href="#Calligraphy" class="headerlink" title="Calligraphy"></a>Calligraphy</h3><blockquote>
<p>一句话介绍：一款自定义字体框架</p>
<p>上榜理由：如果你还在为一键修改App内所有字体样式而烦恼，6.3K个star的Calligraphy就值得你拥有，它可以同时修改整个整个项目的Textview字体，也可以单独 设置某个Textview的字体，还在等什么，快来试试吧！</p>
</blockquote>
<p>github：<a href="https://github.com/chrisjenx/Calligraphy" target="_blank" rel="external">https://github.com/chrisjenx/Calligraphy</a></p>
<p>作者：Christopher Jenkins</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'uk.co.chrisjenx:calligraphy:2.3.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="AndroidSlidingUpPanel"><a href="#AndroidSlidingUpPanel" class="headerlink" title="AndroidSlidingUpPanel"></a>AndroidSlidingUpPanel</h3><blockquote>
<p>一句话介绍：可拖动的滑动面板视图框架</p>
<p>上榜理由：如果你的项目需要一个可拖拽的滑动式面板（展示某些详情信息，播放音乐，地图信息等），那么推荐你使用它，6.3k个star，来自创业公司umano的作品，证明它是用心推出的杰作</p>
</blockquote>
<p>github：<a href="https://github.com/umano/AndroidSlidingUpPanel" target="_blank" rel="external">https://github.com/umano/AndroidSlidingUpPanel</a></p>
<p>作者：umano</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.sothree.slidinguppanel:library:3.3.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="AppIntro"><a href="#AppIntro" class="headerlink" title="AppIntro"></a>AppIntro</h3><blockquote>
<p>一句话介绍：一款提供快速制作欢迎页的框架</p>
<p>上榜理由：笔者从未把打算把欢迎页框架纳入排行榜当中，作为国内开发者，ViewPager开发App的欢迎页已经是手到擒来的需求，为何一个开源的欢迎页框架会在github上拥有6.3k个star？也许你会不屑一顾，是的，往往就在不屑一顾的瞬间，机遇就悄悄溜走了。</p>
</blockquote>
<p>github：<a href="https://github.com/apl-devs/AppIntro" target="_blank" rel="external">https://github.com/apl-devs/AppIntro</a></p>
<p>作者：Paolo Rotolo<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">allprojects</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        ...</div><div class="line">        maven &#123; url <span class="string">'https://jitpack.io'</span> &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">        <span class="keyword">compile</span> <span class="string">'com.github.apl-devs:appintro:v4.2.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="recyclerview-animators"><a href="#recyclerview-animators" class="headerlink" title="recyclerview-animators"></a>recyclerview-animators</h3><blockquote>
<p>一句话介绍：一款为Recyclerview提供扩展动画能力的框架</p>
<p>上榜理由：有一句老话：如果有天你失去对新事物的兴趣，那就说明你老了。recyclerview已经推出快三年了，还在用listview的人们，是否已经发掘自己渐渐变老；不要灰心，快为你的项目加入recyclerview-animators框架吧，为“自己”加入新鲜的血液和能量！（笔者备注：6.2K个star）</p>
</blockquote>
<p>github：<a href="https://github.com/wasabeef/recyclerview-animators" target="_blank" rel="external">https://github.com/wasabeef/recyclerview-animators</a></p>
<p>作者；<a href="https://github.com/wasabeef" target="_blank" rel="external">https://github.com/wasabeef</a></p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">  <span class="comment">// jCenter</span></div><div class="line">  <span class="keyword">compile</span> <span class="string">'jp.wasabeef:recyclerview-animators:2.2.6'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="dagger"><a href="#dagger" class="headerlink" title="dagger"></a>dagger</h3><blockquote>
<p>一句话介绍：一款通过依赖注入降低程序间耦合的开发框架</p>
<p>上榜理由：github：上dagger1版本 有6.2k个star ， dagger2版本有7.3k个；由square完成的dagger1版本，到如今google团队接手的dagger2版本，强力开发团队保证了代码在设计上的优越性；如果你想探究Android 领域的设计模式，这也是不错的选择。</p>
</blockquote>
<p>官网地址：<a href="https://google.github.io/dagger/" target="_blank" rel="external">https://google.github.io/dagger/</a></p>
<p>github：：<a href="https://github.com/google/dagger" target="_blank" rel="external">https://github.com/google/dagger</a></p>
<p>作者：google</p>
<p>使用：<br><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">  <span class="attribute">compile 'com.google.dagger</span>:dagger:2<span class="variable">.x</span>'</div><div class="line">  annotationProcessor 'com<span class="variable">.google</span><span class="variable">.dagger</span>:dagger-compiler:2<span class="variable">.x</span>'</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>If you’re using classes in dagger.android you’ll also want to include:<br><figure class="highlight sml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">compile <span class="symbol">'com</span>.google.dagger:dagger-android:<span class="number">2.</span>x'</div><div class="line">compile <span class="symbol">'com</span>.google.dagger:dagger-android-support:<span class="number">2.</span>x' </div><div class="line">annotationProcessor <span class="symbol">'com</span>.google.dagger:dagger-android-processor:<span class="number">2.</span>x'</div></pre></td></tr></table></figure></p>
<h3 id="Android-Bootstarp"><a href="#Android-Bootstarp" class="headerlink" title="Android-Bootstarp"></a>Android-Bootstarp</h3><blockquote>
<p>一句话介绍：一款提供在Android应用上实现Bootstrap（web框架）所作出效果的框架</p>
<p>上榜理由：榜单上第二款响应web技术的Android 端框架，还记得第一名是谁吗——flexbox-layout，作为Android开发者，你有必要去了解Web技术了。5.9k个star，证明它不容小觑</p>
</blockquote>
<p>github：<a href="https://github.com/Bearded-Hen/Android-Bootstrap" target="_blank" rel="external">https://github.com/Bearded-Hen/Android-Bootstrap</a></p>
<p>作者:Bearded-Hen团队</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">   <span class="keyword">compile</span> <span class="string">'com.beardedhen:androidbootstrap:&#123;X.X.X&#125;'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="RxBinding"><a href="#RxBinding" class="headerlink" title="RxBinding"></a>RxBinding</h3><blockquote>
<p>一句话介绍：一款提供UI组件事件响应能力的框架</p>
<p>上榜理由：如果你还未开始RxAndroid 之旅，RxBinding可以作为你的第一站，通过RXBinding，你将理解响应式编程的快乐，让项目里的事件流程更清晰。5.6K个star，RxAndroid作者亲自操刀，快来试用吧！</p>
</blockquote>
<p>github：<a href="https://github.com/JakeWharton/RxBinding" target="_blank" rel="external">https://github.com/JakeWharton/RxBinding</a></p>
<p>作者：JakeWharton</p>
<p>Platform bindings:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.jakewharton.rxbinding2:rxbinding:2.0.0'</span></div><div class="line"><span class="string">'support-v4'</span> library bindings:</div><div class="line"></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.jakewharton.rxbinding2:rxbinding-support-v4:2.0.0'</span></div><div class="line"><span class="string">'appcompat-v7'</span> library bindings:</div><div class="line"></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.jakewharton.rxbinding2:rxbinding-appcompat-v7:2.0.0'</span></div><div class="line"><span class="string">'design'</span> library bindings:</div><div class="line"></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.jakewharton.rxbinding2:rxbinding-design:2.0.0'</span></div><div class="line"><span class="string">'recyclerview-v7'</span> library bindings:</div><div class="line"></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.jakewharton.rxbinding2:rxbinding-recyclerview-v7:2.0.0'</span></div><div class="line"><span class="string">'leanback-v17'</span> library bindings:</div><div class="line"></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.jakewharton.rxbinding2:rxbinding-leanback-v17:2.0.0'</span></div></pre></td></tr></table></figure></p>
<h3 id="ListViewAnimations"><a href="#ListViewAnimations" class="headerlink" title="ListViewAnimations"></a>ListViewAnimations</h3><blockquote>
<p>一句话介绍：一款为ListView提供动展示画效果能力的框架</p>
<p>上榜理由：如果有一天我承认自己老了，我还会排排我的兄弟——ListView，证明我和它一起战斗过。ListViewAnimations的存在就是证明我们这些“老年人”仍有用武之地，也许你有说不出口的难处，无法体会到RecyclerView里动画的快乐，拥有ListViewAnimations，你一样可以骄傲的说，我的孩子（每个item）也有自己的动效啦。（笔者备注 5.6K个star）</p>
</blockquote>
<p>github：<a href="https://github.com/nhaarman/ListViewAnimations" target="_blank" rel="external">https://github.com/nhaarman/ListViewAnimations</a></p>
<p>作者：nhaarman</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">repositories</span> &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.nhaarman.listviewanimations:lib-core:3.1.0@aar'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.nhaarman.listviewanimations:lib-manipulation:3.1.0@aar'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.nhaarman.listviewanimations:lib-core-slh:3.1.0@aar'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="UItimateRecyclerView"><a href="#UItimateRecyclerView" class="headerlink" title="UItimateRecyclerView"></a>UItimateRecyclerView</h3><blockquote>
<p>一句话介绍：一款提供刷新、加载更多、动画特效等额外能力的RecyclerView框架</p>
<p>上榜理由：榜单上第三次出现RecyclerView的身影，足以证明RecyclerView的优异性，5.5K个star，框架里所提供众多的能力，如果你是个功利开发者，那么此框架会为你节省很多学习时间，它可以完成多item式布局的大多数需求，值得注意的是，这个项目也是在其他项目的思路上二次开发的。</p>
</blockquote>
<p>github：<a href="https://github.com/cymcsg/UltimateRecyclerView" target="_blank" rel="external">https://github.com/cymcsg/UltimateRecyclerView</a></p>
<p>作者：MarshalChen</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">repositories</span> &#123;</div><div class="line">    jcenter()</div><div class="line">    &#125;</div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.marshalchen.ultimaterecyclerview:library:0.7.2'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="uCrop"><a href="#uCrop" class="headerlink" title="uCrop"></a>uCrop</h3><blockquote>
<p>一句话介绍：一款优雅的图片裁剪框架</p>
<p>上榜理由：5.3K个star，图片编辑模块单独拎出来也是一款优雅的App。</p>
</blockquote>
<p>github：<a href="https://github.com/Yalantis/uCrop" target="_blank" rel="external">https://github.com/Yalantis/uCrop</a></p>
<p>作者：Yalantis</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">allprojects</span> &#123;</div><div class="line">   <span class="keyword">repositories</span> &#123;</div><div class="line">      jcenter()</div><div class="line">      maven &#123; url <span class="string">"https://jitpack.io"</span> &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.github.yalantis:ucrop:2.2.1'</span></div></pre></td></tr></table></figure></p>
<h3 id="RxJava-Android-Samples"><a href="#RxJava-Android-Samples" class="headerlink" title="RxJava-Android-Samples"></a>RxJava-Android-Samples</h3><blockquote>
<p>一句话介绍：一款介绍RxJava使用场景的app</p>
<p>上榜理由：榜单出现的第一个“仅仅为告诉你如何使用另一个项目”的开源项目，它可以说是RxJava的用例，你想得到的想不到的RxJava用法这里都有，这就是为什么它以5.2k个star矗立在这份榜单里的原因。遗憾自己没有创作这么一个受人追捧的demo？赶快动手写个其他的“XX项目用例吧”</p>
</blockquote>
<p>github：<a href="https://github.com/kaushikgopal/RxJava-Android-Samples" target="_blank" rel="external">https://github.com/kaushikgopal/RxJava-Android-Samples</a></p>
<p>作者：kaushikgopal</p>
<p>使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">clone</span>到本地慢慢探索吧</div></pre></td></tr></table></figure></p>
<h3 id="AndroidAutoLayout"><a href="#AndroidAutoLayout" class="headerlink" title="AndroidAutoLayout"></a>AndroidAutoLayout</h3><blockquote>
<p>一句话介绍：一个提供适配能力的框架</p>
<p>上榜理由：5.2K个star，鸿洋老弟的作品，适合小项目的开发团队，拿到设计MM的px像素设计稿是不是很头疼捏？这个框架一键式搞定你的问题，它有很多的不足，但在追求完美适配的路上，你值得探索和了解它！笔者并不推荐把它应用到已经成熟运行的项目中，毕竟市面上已经有太多的适配解决方案了，适配问题就像是个大杂烩，想炒一盘好菜，就得备好各种佐料（适配小方案），当你把各种小佐料用的炉火纯青的时候，你离美食大厨就不远了。</p>
</blockquote>
<p>github：<a href="https://github.com/hongyangAndroid/AndroidAutoLayout" target="_blank" rel="external">https://github.com/hongyangAndroid/AndroidAutoLayout</a></p>
<p>作者：张鸿洋</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.zhy:autolayout:1.4.5'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="EffectiveAndroidUI"><a href="#EffectiveAndroidUI" class="headerlink" title="EffectiveAndroidUI"></a>EffectiveAndroidUI</h3><blockquote>
<p>一句话介绍：一款讲解高效展示UI的教学型App</p>
<p>上榜理由：编程新手很难对MVC MVP,MVVM等模式有深刻的理解，如果有一个示例型app，那对初学者会有很大裨益，笔者在遇到它时也是相见恨晚。4.8K个star，证明了它经受了广大开发者的考验与审视，其中Effective UI的编程思想更是与Android官方课程里的Effective UI课程不谋而合，并且，此项目还包含了fragment、dagger、主题样式、Butterknife等众多小知识点，作为编程初学者的学习用例再适合不过了</p>
</blockquote>
<p>github：<a href="https://github.com/pedrovgs/EffectiveAndroidUI" target="_blank" rel="external">https://github.com/pedrovgs/EffectiveAndroidUI</a></p>
<p>作者：Pedro Vicente </p>
<p>使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">clone</span>项目到本地</div></pre></td></tr></table></figure></p>
<h3 id="Luban"><a href="#Luban" class="headerlink" title="Luban"></a>Luban</h3><blockquote>
<p>一句话介绍：最接近微信的图片压缩框架</p>
<p>上榜理由：好的思路总是可以让你大放异彩，Luban仅以图片压缩单一功能，俘获了4.8K个star，证明了它在图片压缩上的造诣，它可能不是最优秀的，但它是让你我最接近伟大的项目</p>
</blockquote>
<p>github：<a href="https://github.com/Curzibn/Luban" target="_blank" rel="external">https://github.com/Curzibn/Luban</a></p>
<p>作者：Curzibn</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'top.zibin:Luban:1.1.1'</span></div></pre></td></tr></table></figure></p>
<h3 id="DroidPlugin"><a href="#DroidPlugin" class="headerlink" title="DroidPlugin"></a>DroidPlugin</h3><blockquote>
<p>一句话介绍：一款热门的插件化开发框架</p>
<p>上榜理由：4.8K个star，插件化框架榜单第一名，，360团队出品，框架质量有保证，有成功案例——360手机助手，并且持续维护着<br>github：<a href="https://github.com/DroidPluginTeam/DroidPlugin/blob/master/readme_cn.md" target="_blank" rel="external">https://github.com/DroidPluginTeam/DroidPlugin/blob/master/readme_cn.md</a></p>
</blockquote>
<p>作者：Andy Zhang</p>
<p>使用:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">clone</span>项目到本地</div></pre></td></tr></table></figure></p>
<h3 id="otto"><a href="#otto" class="headerlink" title="otto"></a>otto</h3><blockquote>
<p>一句话介绍:一款老旧且强大的事件总线框架</p>
<p>上榜理由：4.8K个star，是square团队早先推出的事件响应型框架，淘宝app的事件驱动也是基于此框架封装的，如今square已经建议开发者采用RxJava RxAndroid来代替otto了。但otto仍有与EventBus横向对比的价值，纵向来说，otto与square自家开发的Rx系列框架的差异同样值得开发者们去探究。</p>
</blockquote>
<p>github：<a href="https://github.com/square/otto" target="_blank" rel="external">https://github.com/square/otto</a></p>
<p>作者：square</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">repositories</span> &#123;</div><div class="line">    mavenCentral()</div><div class="line">    maven &#123; url <span class="string">"https://oss.sonatype.org/content/repositories/snapshots/"</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.michaelpardo:activeandroid:3.1.0-SNAPSHOT'</span></div></pre></td></tr></table></figure></p>
<h3 id="u2020"><a href="#u2020" class="headerlink" title="u2020"></a>u2020</h3><blockquote>
<p>一句话介绍：一款提供Dagger的高级教学示例的app（额，名字是有点绕）</p>
<p>上榜理由：4.7K个star，JakeWharton牵头开发的教学类app，教你使用Dagger在其他高级框架的用法，它展示了Dagger与ButterKnife、Retrofit、Moshi、Picasso、Okhttp、RxJava、Timber、Madge、LeakCanar等众多优秀框架结合起来的高级用法，你也可以借鉴到自己的项目当中</p>
</blockquote>
<p>github：<a href="https://github.com/JakeWharton/u2020" target="_blank" rel="external">https://github.com/JakeWharton/u2020</a></p>
<p>作者：JakeWharton</p>
<h3 id="buck"><a href="#buck" class="headerlink" title="buck"></a>buck</h3><blockquote>
<p>一句话介绍：buck是一个快速构建系统</p>
<p>上榜理由：facebook+google出身的作者，对构建代码的出色理解，加上大型团队的维护，以及增量更新时的快速高效，让buck成为了微信Android团队构建项目的首选，构建大型项目时，它比gradle更快，然而中小公司并不适合此框架，但作为立志在框架设计领域有一番作为的人们，欢迎来一探究竟</p>
</blockquote>
<p>官网地址：<a href="https://buckbuild.com/" target="_blank" rel="external">https://buckbuild.com/</a></p>
<p>github：<a href="https://github.com/facebook/buck" target="_blank" rel="external">https://github.com/facebook/buck</a></p>
<p>作者：facebook</p>
<p>使用：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">linux <span class="keyword">or</span> mac <span class="keyword">system</span>  +docs</div></pre></td></tr></table></figure></p>
<h3 id="PermissionsDispatcher"><a href="#PermissionsDispatcher" class="headerlink" title="PermissionsDispatcher"></a>PermissionsDispatcher</h3><blockquote>
<p>一句话介绍：一款基于注解的提供解决运行时危险权限方案的框架</p>
<p>上榜理由：自Android6.0 Google提出危险权限一词起，用户安全性被提到一定的高度，一些运行时对用户较为危险的权限将不再自动被开发者获取，需要经过用户批准，开发者才可以继续使用该权限，如果你曾经被权限问题搞的抓耳挠腮，建议你试试这个框架，它足够解决你的问题</p>
</blockquote>
<p>官网地址：<a href="https://hotchemi.github.io/PermissionsDispatcher/" target="_blank" rel="external">https://hotchemi.github.io/PermissionsDispatcher/</a></p>
<p>github：<a href="https://github.com/hotchemi/PermissionsDispatcher" target="_blank" rel="external">https://github.com/hotchemi/PermissionsDispatcher</a></p>
<p>作者：Shintaro Katafuchi</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">  <span class="keyword">compile</span>(<span class="string">'com.github.hotchemi:permissionsdispatcher:$&#123;latest.version&#125;'</span>) &#123;</div><div class="line">      <span class="keyword">exclude</span> module: <span class="string">"support-v13"</span></div><div class="line">  &#125;</div><div class="line">  annotationProcessor <span class="string">'com.github.hotchemi:permissionsdispatcher-processor:$&#123;latest.version&#125;'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">repositories</span> &#123;</div><div class="line">  jcenter()</div><div class="line">  maven &#123; url <span class="string">'http://oss.jfrog.org/artifactory/oss-snapshot-local/'</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="android-gif-drawable"><a href="#android-gif-drawable" class="headerlink" title="android-gif-drawable"></a>android-gif-drawable</h3><blockquote>
<p>一句话介绍:一款提供展示GIF动画能力的视图框架</p>
<p>上榜理由：据我所查国内著名App——知乎使用了android-gif-drawable，因此证明了它的存在价值，尽管在榜单第十一位介绍了lottie-android直接应用AE动画的示例，但AE设计师不是每个公司都配备的，GIF的存在，就必然存在了展示GIF的需要，它值得你拥有！</p>
</blockquote>
<p>github：<a href="https://github.com/koral--/android-gif-drawable" target="_blank" rel="external">https://github.com/koral--/android-gif-drawable</a></p>
<p>作者：Karol Wrótniak</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">repositories</span> &#123;</div><div class="line">    mavenCentral()</div><div class="line">    maven &#123; url <span class="string">"https://oss.sonatype.org/content/repositories/snapshots"</span> &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'pl.droidsonroids.gif:android-gif-drawable:1.2.+'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Apktool"><a href="#Apktool" class="headerlink" title="Apktool"></a>Apktool</h3><blockquote>
<p>一句话介绍：一款反编译apk的工具</p>
<p>上榜理由：开源的反编译工具，对于志在了解apk逆向破解的诸位，值得拥有，4.5k个star，逆向破解apk神器！</p>
</blockquote>
<p>github：<a href="https://github.com/iBotPeaches/Apktool" target="_blank" rel="external">https://github.com/iBotPeaches/Apktool</a></p>
<p>官网地址：<a href="https://ibotpeaches.github.io/Apktool/" target="_blank" rel="external">https://ibotpeaches.github.io/Apktool/</a></p>
<p>作者：Connor Tumbleson</p>
<h3 id="dynamic-load-apk"><a href="#dynamic-load-apk" class="headerlink" title="dynamic-load-apk"></a>dynamic-load-apk</h3><blockquote>
<p>一句话介绍：插件化开发框架</p>
<p>上榜理由：4.5k个star，位于插件化开发框架第二名（第一名来自360团队），全面的文档介绍让你很快就能上手插件化开发，如果你喜欢大段文字讲解，那么这个项目一定适合你</p>
</blockquote>
<p>github：<a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">https://github.com/singwhatiwanna/dynamic-load-apk</a></p>
<p>作者：singwhatiwanna</p>
<p>使用：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">github上的文档配合作者博客更配哟</div></pre></td></tr></table></figure></p>
<h3 id="atlas"><a href="#atlas" class="headerlink" title="atlas"></a>atlas</h3><blockquote>
<p>一句话介绍：淘宝推出的组件化开发框架</p>
<p>上榜理由：淘宝团队所出的精品，atlas框架提供了解耦、组件、动态的开发能力，4.5k个star让他位列组件化开发框架第一名</p>
</blockquote>
<p>github：<a href="https://github.com/alibaba/atlas" target="_blank" rel="external">https://github.com/alibaba/atlas</a></p>
<p>作者：alibaba</p>
<h3 id="volley"><a href="#volley" class="headerlink" title="volley"></a>volley</h3><blockquote>
<p>一句话介绍：google推荐使用的Android端网络请求框架</p>
<p>上榜理由：4.4k个star，并不是他不够优秀，而是使用volley已经渐渐成为广大开发者的习惯</p>
</blockquote>
<p>github：<a href="https://github.com/google/volley（新版volley地址）" target="_blank" rel="external">https://github.com/google/volley（新版volley地址）</a></p>
<p>作者：google</p>
<p>使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">clone</span>源码到本地</div></pre></td></tr></table></figure></p>
<h3 id="androidmvp"><a href="#androidmvp" class="headerlink" title="androidmvp"></a>androidmvp</h3><blockquote>
<p>一句话介绍：一款展示Android端Mvp设计的demo</p>
<p>上榜理由：榜单里为数不多、仅凭展示某种设计模式就获得4.2K个star的项目，如果你有尝试mvp的打算，androidmvp可以作为你的前哨站<br>github：<a href="https://github.com/antoniolg/androidmvp" target="_blank" rel="external">https://github.com/antoniolg/androidmvp</a></p>
</blockquote>
<p>作者：Antonio Leiva</p>
<p>使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">clone</span>到本地</div></pre></td></tr></table></figure></p>
<h3 id="SwipeBackLayout"><a href="#SwipeBackLayout" class="headerlink" title="SwipeBackLayout"></a>SwipeBackLayout</h3><blockquote>
<p>一句话介绍:一款可以让你通过滑动手势关闭页面的的框架</p>
<p>上榜理由：仿微信滑动退出当前聊天界面的效果，提供了activity的滑动关闭能力，通过这种思路，实现fragment的滑动关闭轻而易举;笔者坚持建议诸位clone源码到本地探索一番；4.2k个star证明很多人都喜爱它</p>
</blockquote>
<p>github：<a href="https://github.com/ikew0ng/SwipeBackLayout" target="_blank" rel="external">https://github.com/ikew0ng/SwipeBackLayout</a></p>
<p>作者：ike_w0ng</p>
<p>使用:<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> 'me.imid.swipebacklayout.<span class="keyword">lib</span>:<span class="keyword">library</span>:<span class="number">1.0</span><span class="number">.0</span>'</div></pre></td></tr></table></figure></p>
<h3 id="FlycoTabLayout"><a href="#FlycoTabLayout" class="headerlink" title="FlycoTabLayout"></a>FlycoTabLayout</h3><blockquote>
<p>一句话介绍：一款可以让作出多种多样指示器效果的框架</p>
<p>上榜理由：尽管我们没有理由为了给app加入页面指示器功能就集成2.5M的依赖库，但是作为了解viewpager或swip views的指示器设计原理的优秀框架，你值得打开它试试，笔者建议单独拆分所需源码，加入到自己的项目中去。4.1K个star，二次开发的作品，仍然推荐！</p>
</blockquote>
<p>github：<a href="https://github.com/H07000223/FlycoTabLayout" target="_blank" rel="external">https://github.com/H07000223/FlycoTabLayout</a></p>
<p>作者：Flyco</p>
<h3 id="android-testing"><a href="#android-testing" class="headerlink" title="android-testing"></a>android-testing</h3><blockquote>
<p>一句话介绍：一款展示四大自动化测试框架用例的demo（Espresso，UiAutomator，AndroidJunitRunner，JUnit4）</p>
<p>上榜理由：学习者经常会陷入似懂非懂的境地，如果你有幸学习过Android Testing Support Library site的课程，那么你一定对android的四大测试框架迫不及待，这款demo非常适合你，快来学习这个4.1k个star的明星项目吧</p>
</blockquote>
<p>github：<a href="https://github.com/googlesamples/android-testing" target="_blank" rel="external">https://github.com/googlesamples/android-testing</a></p>
<p>作者：googlesampes团队</p>
<h3 id="FileDownloader"><a href="#FileDownloader" class="headerlink" title="FileDownloader"></a>FileDownloader</h3><blockquote>
<p>一句话介绍：一款高效、稳定、灵活、易用的文件下载引擎</p>
<p>上榜理由：4.1k证明了它有多受人喜爱，文件下载看似简单的背后暗藏了多少的坑坑点点，我知道你有能力自己实现文件下载功能，但优秀的框架可以提升你的设计编码能力，这款框架可以提升你的实力！</p>
</blockquote>
<p>github：<a href="https://github.com/lingochamp/FileDownloader" target="_blank" rel="external">https://github.com/lingochamp/FileDownloader</a></p>
<p>作者:LingoChamp团队</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.liulishuo.filedownloader:library:1.5.5'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="JieCaoVideoPlayer"><a href="#JieCaoVideoPlayer" class="headerlink" title="JieCaoVideoPlayer"></a>JieCaoVideoPlayer</h3><blockquote>
<p>一句话介绍：基于MediaPlayer api——VideoView 的多媒体播放框架</p>
<p>上榜理由：榜单里第三款多媒体播放框架，它以灵巧的身姿挤入本榜单，精巧是它最大的优点，不到100k，拥有它，你就可以快速开发类似今日头条那样的视频播放效果，4k个star，证明它值得一试</p>
</blockquote>
<p>github：<a href="https://github.com/lipangit/JieCaoVideoPlayer" target="_blank" rel="external">https://github.com/lipangit/JieCaoVideoPlayer</a></p>
<p>作者：Nathen</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'fm.jiecao:jiecaovideoplayer:5.5.4'</span></div></pre></td></tr></table></figure></p>
<h3 id="glide-transformations"><a href="#glide-transformations" class="headerlink" title="glide-transformations"></a>glide-transformations</h3><blockquote>
<p>一句话介绍：为众多著名图片加载框架提供图片形状变幻能力的框架</p>
<p>上榜理由：在榜单靠前的部分已经介绍过glide，Picasso，Fresco等图片加载框架，glide-transformations就是一款为他们提供图片变形能力的框架，使用起来非常简单，因此受到了大家的喜爱，github上有3.8K个star</p>
</blockquote>
<p>github：<a href="https://github.com/wasabeef/glide-transformations" target="_blank" rel="external">https://github.com/wasabeef/glide-transformations</a></p>
<p>作者：Daichi Furiya</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">repositories</span> &#123;</div><div class="line">    jcenter()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'jp.wasabeef:glide-transformations:2.0.2'</span></div><div class="line">    <span class="comment">// If you want to use the GPU Filters</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Glide里设置变幻效果<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Glide</span><span class="selector-class">.with</span>(<span class="selector-tag">this</span>)<span class="selector-class">.load</span>(<span class="selector-tag">R</span><span class="selector-class">.drawable</span><span class="selector-class">.demo</span>)</div><div class="line">        <span class="selector-class">.bitmapTransform</span>(<span class="selector-tag">new</span> <span class="selector-tag">BlurTransformation</span>(<span class="selector-tag">context</span>))</div><div class="line">        <span class="selector-class">.into</span>((<span class="selector-tag">ImageView</span>) <span class="selector-tag">findViewById</span>(<span class="selector-tag">R</span><span class="selector-class">.id</span><span class="selector-class">.image</span>));</div></pre></td></tr></table></figure></p>
<h3 id="android-gpuimage"><a href="#android-gpuimage" class="headerlink" title="android-gpuimage"></a>android-gpuimage</h3><blockquote>
<p>一句话介绍：一款基于OpenGL的图片渲染引擎</p>
<p>上榜理由：放下GpuImage在IOS平台的荣誉不谈，Android版的android-gpuimage就提供多达70多种图片渲染效果，你还在好奇美图秀秀是如何实现图片变幻的？有了它，一切都不是问题。如果你是美图工具类的工程师，此框架的建设思路也会对你大有裨益。笔者也是通过android-gpuimage仿造了美图App并俘获女友芳心的，再次为它的实力点赞。ios版+android版一共19k个star，已经证明了它的实力，还在等什么呢？</p>
</blockquote>
<p>github：<a href="https://github.com/CyberAgent/android-gpuimage" target="_blank" rel="external">https://github.com/CyberAgent/android-gpuimage</a></p>
<p>作者：CyberAgent 团队</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">repositories</span> &#123;</div><div class="line">    jcenter()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>更多的改造方法，还需要阅读Ios的编程文档，对于有毅力的小伙伴强力推荐！</p>
<h3 id="RxPermissions"><a href="#RxPermissions" class="headerlink" title="RxPermissions"></a>RxPermissions</h3><blockquote>
<p>一句话介绍：一款基于RxJava完成权限申请的框架</p>
<p>上榜理由：榜单里第二款提供权服务的框架，基于RxJava的设计，让你可以专心写业务，3.7K个star已经证明了它的实用价值</p>
</blockquote>
<p>github：<a href="https://github.com/tbruyelle/RxPermissions" target="_blank" rel="external">https://github.com/tbruyelle/RxPermissions</a></p>
<p>作者：Thomas Bruyelle</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">repositories</span> &#123;</div><div class="line">    jcenter() <span class="comment">// If not already there</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.tbruyelle.rxpermissions:rxpermissions:0.9.4@aar'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>优雅的使用：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">RxPermissions rxPermissions = <span class="keyword">new</span> <span class="type">RxPermissions</span>(<span class="built_in">this</span>); </div><div class="line"></div><div class="line">rxPermissions</div><div class="line">    .request(Manifest.permission.CAMERA)</div><div class="line">    .subscribe(granted -&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (granted) &#123; <span class="comment">// I can control the camera now</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="comment">// Oups permission denied</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="freeline"><a href="#freeline" class="headerlink" title="freeline"></a>freeline</h3><blockquote>
<p>一句话介绍：一款动态替换的编译构建框架</p>
<p>上榜理由：继Facebook的Buck，Androdi官方的InstRun之后，蚂蚁金服推出了Freeline编译框架，官网宣称Freeline与业内主流构建方式相比仍然有数倍的速度领先;排行有先后，编译速度并不在本榜单排序的考据因素中，因此freeline以3.7个star，暂列编译框架第二名</p>
</blockquote>
<p>官网地址：<a href="https://www.freelinebuild.com/" target="_blank" rel="external">https://www.freelinebuild.com/</a></p>
<p>github：<a href="https://github.com/alibaba/freeline" target="_blank" rel="external">https://github.com/alibaba/freeline</a></p>
<p>作者：alibaba</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">buildscript</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">dependencies</span> &#123;</div><div class="line">        <span class="keyword">classpath</span> <span class="string">'com.antfortune.freeline:gradle:0.8.7'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: <span class="string">'com.antfortune.freeline'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"><span class="keyword">File</span> → Settings... → Plugins → Browse <span class="keyword">repositories</span> →freeline.</div></pre></td></tr></table></figure></p>
<h3 id="RxLifecycle"><a href="#RxLifecycle" class="headerlink" title="RxLifecycle"></a>RxLifecycle</h3><blockquote>
<p>一句话介绍：一款提供在使用RxJava过程中管理Activity和Fragment生命周期能力的框架</p>
<p>上榜理由：在榜单靠前的部分，你已经了解RxJava和RxAndroid的强大之处，但部分粗心的开发者因为没有及时取消订阅而产生严重的内存泄漏，不要担心，RxLifecycle可以为你解决难题，在gtihub上拥有3.7K个star，国内知名软件——知乎和淘宝也都在使用它</p>
</blockquote>
<p>github：<a href="https://github.com/trello/RxLifecycle" target="_blank" rel="external">https://github.com/trello/RxLifecycle</a></p>
<p>作者：trello团队</p>
<p>使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">clone</span>源码到本地</div></pre></td></tr></table></figure></p>
<h3 id="classyshark"><a href="#classyshark" class="headerlink" title="classyshark"></a>classyshark</h3><blockquote>
<p>一句话介绍：一款可执行文件浏览器</p>
<p>上榜理由：榜单里继Apktool之后第二款apk逆向工具，如果你喜欢优雅的图形数据展示，那么你一定不能错过他，classyshark可以将破解的结果以图形化展示用户，方便分析，3.7K个star，让它暂列apk逆向工具第二位！</p>
</blockquote>
<p>github：<a href="https://github.com/google/android-classyshark" target="_blank" rel="external">https://github.com/google/android-classyshark</a></p>
<p>作者：google</p>
<p>使用：<br>下载地址 <a href="https://github.com/google/android-classyshark/releases" target="_blank" rel="external">https://github.com/google/android-classyshark/releases</a></p>
<h3 id="acra"><a href="#acra" class="headerlink" title="acra"></a>acra</h3><blockquote>
<p>一句话介绍：一款提供记录APP崩溃日志能力的框架</p>
<p>上榜理由：如果你面临着收集APP崩溃日志的需求，那么acra是个不错的选择。3.7K个star，让acra位列崩溃日志框架排行榜第一名，acra有足够的能力记录线上APP，并且发回服务端，acra也提供了相当棒的崩溃日志统计服务端框架Acralyzer，cralyzer工作在Apache CouchDB之上，所以除了CouchDB之外，没有必要安装任何额外的软件，移动端开发者也可以借此学习服务端的建设，一举两得！</p>
</blockquote>
<p>github：<a href="https://github.com/ACRA/acra" target="_blank" rel="external">https://github.com/ACRA/acra</a></p>
<p>服务端github：<a href="https://github.com/ACRA/acralyzer" target="_blank" rel="external">https://github.com/ACRA/acralyzer</a></p>
<p>作者：acra团队</p>
<p>使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">没有什么方法比<span class="built_in">clone</span>源码到本地更方便了</div></pre></td></tr></table></figure></p>
<h3 id="DiskLruCache"><a href="#DiskLruCache" class="headerlink" title="DiskLruCache"></a>DiskLruCache</h3><blockquote>
<p>一句话介绍：一款提供磁盘文件缓存管理能力的框架</p>
<p>上榜理由：3.7k个star并不足以说明DiskLruCache的优秀，仅仅以管理磁盘文件能力单独拎出来成为一个框架，作者需要很大的勇气，很幸运，作者做到了，并且也成为Google官网提倡的缓存  ；如还记得上次做“一键清除缓存”、“查看缓存文件大小”功能是什么时候吗？DiskLruCache一句话就可以搞定！</p>
</blockquote>
<p>github：<a href="https://github.com/JakeWharton/DiskLruCache" target="_blank" rel="external">https://github.com/JakeWharton/DiskLruCache</a></p>
<p>作者：JakeWharton</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.jakewharton:disklrucache:2.0.2'</span></div></pre></td></tr></table></figure></p>
<p>或者下载 <a href="https://search.maven.org/remote_content?g=com.jakewharton&amp;a=disklrucache&amp;v=LATEST" target="_blank" rel="external">latest.jar</a></p>
<h3 id="dexposed"><a href="#dexposed" class="headerlink" title="dexposed"></a>dexposed</h3><blockquote>
<p>一句话介绍：一款支撑阿里大部分App客户端热修复、线上调试能力的框架</p>
<p>上榜理由：榜单上再次出现热修复框架的身影，证明App热修复技术的火热，dexposed提供图形化的性能监控、在线热修复bug漏洞、支持AOP编程思想等，不论你是企业热修复技术的设计者还是打算在热修复领域一探究竟的新人，这款框架很适合你。3.5k个star，证明它作为一门技术框架的存在，是多么令人喜爱！</p>
</blockquote>
<p>github：<a href="https://github.com/alibaba/dexposed" target="_blank" rel="external">https://github.com/alibaba/dexposed</a></p>
<p>作者：alibaba</p>
<p>使用：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="section">dependencies</span> &#123;</div><div class="line">        <span class="attribute">compile</span> <span class="string">'com.taobao.android:dexposed:0.1.1<span class="variable">@aar</span>'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Litho"><a href="#Litho" class="headerlink" title="Litho"></a>Litho</h3><blockquote>
<p>一句话介绍：一款提供高效构建UI能力的框架 </p>
<p>上榜理由：作为一款专门构建UI的框架，Litho高效的地方在于：单独开辟了用于渲染和布局的线程，然后将创建好的组件传递给UI线程去完成最终的渲染，使用更少的视图层级，来提升界面的滚动速度，值得注意的是，它仅支持开发者作出不可改变的UI组件 ,3.5K个star，证明了它在构建UI领域的价值，更多的妙处，期待你亲自去发掘！</p>
</blockquote>
<p>github：<a href="https://github.com/facebook/litho" target="_blank" rel="external">https://github.com/facebook/litho</a></p>
<p>作者：facebook</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">ependencies &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="comment">// Litho</span></div><div class="line">  <span class="keyword">compile</span> <span class="string">'com.facebook.litho:litho-core:0.3.1'</span></div><div class="line">  <span class="keyword">compile</span> <span class="string">'com.facebook.litho:litho-widget:0.3.1'</span></div><div class="line">  provided <span class="string">'com.facebook.litho:litho-annotations:0.3.1'</span></div><div class="line"></div><div class="line">  annotationProcessor <span class="string">'com.facebook.litho:litho-processor:0.3.1'</span></div><div class="line"></div><div class="line">  <span class="comment">// SoLoader</span></div><div class="line">  <span class="keyword">compile</span> <span class="string">'com.facebook.soloader:soloader:0.2.0'</span></div><div class="line"></div><div class="line">  <span class="comment">// Optional</span></div><div class="line">  <span class="comment">// For debugging</span></div><div class="line">  debugCompile <span class="string">'com.facebook.litho:litho-stetho:0.3.1'</span></div><div class="line"></div><div class="line">  <span class="comment">// For integration with Fresco</span></div><div class="line">  <span class="keyword">compile</span> <span class="string">'com.facebook.litho:litho-fresco:0.3.1'</span></div><div class="line"></div><div class="line">  <span class="comment">// For testing</span></div><div class="line">  testCompile <span class="string">'com.facebook.litho:litho-testing:0.3.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="mosby"><a href="#mosby" class="headerlink" title="mosby"></a>mosby</h3><blockquote>
<p>一句话介绍：一款提供构建MVP项目能力的框架</p>
<p>上榜理由：榜单靠前的部分已经介绍了MVC,MVVM,MVP的框架项目，想必此时你在构建企业项目架构上，选择或者开发一款合适的MVP框架迫在眉睫，mosby可以作为你的第一步参考，你可以封装它，也可以照抄它，无论如何，3.4K个star，证明了它在框架设计上有多受开发者的喜爱</p>
</blockquote>
<p>github：<a href="https://github.com/sockeqwe/mosby" target="_blank" rel="external">https://github.com/sockeqwe/mosby</a></p>
<p>作者：Hannes Dorfmann</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line"></div><div class="line">  <span class="keyword">compile</span> <span class="string">'com.hannesdorfmann.mosby3:mvi:3.0.4'</span> <span class="comment">// Model-View-Intent</span></div><div class="line">  <span class="comment">// or</span></div><div class="line">  <span class="keyword">compile</span> <span class="string">'com.hannesdorfmann.mosby3:mvp:3.0.4'</span> <span class="comment">// Plain MVP</span></div><div class="line">  <span class="comment">// or</span></div><div class="line">  <span class="keyword">compile</span> <span class="string">'com.hannesdorfmann.mosby3:viewstate:3.0.4'</span> <span class="comment">// MVP + ViewState support</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">allprojects</span> &#123;</div><div class="line">  <span class="keyword">repositories</span> &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    maven &#123; url <span class="string">"https://oss.sonatype.org/content/repositories/snapshots/"</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="AndResGuard"><a href="#AndResGuard" class="headerlink" title="AndResGuard"></a>AndResGuard</h3><blockquote>
<p>一句话介绍：一款提供资源文件路径混淆 的工具</p>
<p>上榜理由：如果你是个对APK大小很敏感的人，那么AndResGuard一定适合你，它的原理类似Java Proguard，但是只针对资源。他会将原本冗长的资源路径变短，例如将res/drawable/wechat变为r/d/a，3.4K个star，证明了在优化APK道路上，你不是一个人在战斗！</p>
</blockquote>
<p>github：<a href="https://github.com/shwenzhang/AndResGuard" target="_blank" rel="external">https://github.com/shwenzhang/AndResGuard</a></p>
<p>作者：wechat team</p>
<p>使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">clone</span>项目到本地，其实也就是个三两句话的文档</div></pre></td></tr></table></figure></p>
<h3 id="StatusBarUtil"><a href="#StatusBarUtil" class="headerlink" title="StatusBarUtil"></a>StatusBarUtil</h3><blockquote>
<p>一句话介绍：一款提供设置沉浸式状态栏样式能力的框架</p>
<p>上榜理由：设计师MM总是抱怨系统状态栏不优雅？那就给她一个完美的沉浸式状态栏。StatusBarUtil可以随心所欲的设置状态栏样式，3.3K个star，足以说明它有多受设计MM的喜爱</p>
</blockquote>
<p>github：<a href="https://github.com/laobie/StatusBarUtil" target="_blank" rel="external">https://github.com/laobie/StatusBarUtil</a></p>
<p>作者：Jaeger</p>
<p>使用：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> 'com.jaeger.statusbarutil:<span class="keyword">library</span>:<span class="number">1.4</span><span class="number">.0</span>'</div></pre></td></tr></table></figure></p>
<h3 id="robolectric"><a href="#robolectric" class="headerlink" title="robolectric"></a>robolectric</h3><blockquote>
<p>一句话介绍：一款不依赖于Android设备的单元测试框架，</p>
<p>上榜理由：sample中列举了如何对Android四大组件和常见功能测试的用例，3.2K个star，值得充满好奇心的人尝试</p>
</blockquote>
<p>官网地址：<a href="http://robolectric.org/" target="_blank" rel="external">http://robolectric.org/</a></p>
<p>github：<a href="https://github.com/robolectric/robolectric" target="_blank" rel="external">https://github.com/robolectric/robolectric</a></p>
<p>作者：robolectric</p>
<p>使用：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">testCompile</span> "<span class="selector-tag">org</span><span class="selector-class">.robolectric</span><span class="selector-pseudo">:robolectric</span><span class="selector-pseudo">:3.3.2"</span></div></pre></td></tr></table></figure></p>
<h3 id="Fragmentation"><a href="#Fragmentation" class="headerlink" title="Fragmentation"></a>Fragmentation</h3><blockquote>
<p>一句话介绍:一款提供管理Fragmen嵌套t能力的框架</p>
<p>上榜理由：对于Activity和Fragment使用，你一定得心应手，但如果要做一套通用的Activity&amp;Fragment嵌套设计，想必你有点手足无措了，Fragmentation可以作为你设计Fragment管理上的第一步，3.2K个star，笔者认为有点名副其实了，项目介绍里说的是Fragment的管理能力，但并未提供Fragment&amp;Activity生命周期、任务栈的管理能力，因此很难直接应用到企业项目当中，但源码当中的设计思路，值得笔者与诸位借鉴，拾人牙慧留有余香！</p>
</blockquote>
<p>github：<a href="https://github.com/YoKeyword/Fragmentation" target="_blank" rel="external">https://github.com/YoKeyword/Fragmentation</a></p>
<p>作者：YoKey</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// appcompat v7包是必须的</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'me.yokeyword:fragmentation:0.10.7'</span></div><div class="line"><span class="comment">// 如果想使用SwipeBack 滑动边缘退出Fragment/Activity功能，请再添加下面的库</span></div><div class="line"><span class="comment">// compile 'me.yokeyword:fragmentation-swipeback:0.10.4'</span></div></pre></td></tr></table></figure></p>
<h3 id="Small"><a href="#Small" class="headerlink" title="Small"></a>Small</h3><blockquote>
<p>一句话介绍：轻巧的插件化框架</p>
<p>上榜理由：作为插件框架榜单的新成员，Small的优点是轻巧，适合作为小团队的插件开发方案，3.1K个star，让它获得了酷狗音乐等著名开发团队的青睐，如果你们的团队想逐步实施插件化开发，Small是个不错的选择！</p>
</blockquote>
<p>官网地址：<a href="http://code.wequick.net/Small/cn/cases" target="_blank" rel="external">http://code.wequick.net/Small/cn/cases</a></p>
<p>github：<a href="https://github.com/wequick/Small" target="_blank" rel="external">https://github.com/wequick/Small</a></p>
<p>作者：wequick 团队</p>
<p>使用：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="section">buildscript</span>  &#123;</div><div class="line">    <span class="section">dependencies</span> &#123;</div><div class="line">        <span class="attribute">classpath</span> <span class="string">'net.wequick.tools.build:gradle-small:1.2.0-alpha6'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: <span class="string">'net.wequick.small'</span></div><div class="line"></div><div class="line">small &#123;</div><div class="line">    <span class="attribute">aarVersion</span> = <span class="string">'1.2.0-alpha6'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="JsBridge"><a href="#JsBridge" class="headerlink" title="JsBridge"></a>JsBridge</h3><blockquote>
<p>一句话介绍：一款提供WebView和Javascript通信能力的框架</p>
<p>上榜理由：该框架提供给了允许H5页面调用通过JS调用App方法的能力；3.1K个star，简洁的通讯方式，值得每一个Web\Hybrid App开发者尝试</p>
</blockquote>
<p>gtihub <a href="https://github.com/lzyzsd/JsBridge" target="_blank" rel="external">https://github.com/lzyzsd/JsBridge</a></p>
<p>作者：hi大头鬼hi</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">repositories</span> &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    maven &#123; url <span class="string">"https://jitpack.io"</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.github.lzyzsd:jsbridge:1.0.4'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="richeditor-android"><a href="#richeditor-android" class="headerlink" title="richeditor-android"></a>richeditor-android</h3><blockquote>
<p>一句话介绍：一款强大的富文本编辑框架 </p>
<p>上榜理由：2.8k个star，榜单里第一个为TextView提供扩展能力的框架，你暂时不需要它，但不能不知道它</p>
</blockquote>
<p>github：<a href="https://github.com/wasabeef/richeditor-android" target="_blank" rel="external">https://github.com/wasabeef/richeditor-android</a></p>
<p>作者：Daichi Furiya</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">repositories</span> &#123;</div><div class="line">    jcenter()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'jp.wasabeef:richeditor-android:1.2.2'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Transitions-Everywhere"><a href="#Transitions-Everywhere" class="headerlink" title="Transitions-Everywhere"></a>Transitions-Everywhere</h3><blockquote>
<p>一句话介绍：一款教你正确使用Transitions API（Android 转场动画API）的教学型项目</p>
<p>上榜理由：你可能还未尝试过Android API的Transitions 框架，可能听过，但却无法做出优雅奇妙的动效——别担心，Transitions-Everywhere正如它的名字一样，它将带你全面体验Transitions 的强大之处</p>
</blockquote>
<p>github：<a href="https://github.com/andkulikov/Transitions-Everywhere" target="_blank" rel="external">https://github.com/andkulikov/Transitions-Everywhere</a></p>
<p>作者：Andrey Kulikov</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">"com.andkulikov:transitionseverywhere:1.7.4"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="android-viewbadger"><a href="#android-viewbadger" class="headerlink" title="android-viewbadger"></a>android-viewbadger</h3><blockquote>
<p>一句话介绍：能够快速的为Android 视图加入“勋章”能力的框架</p>
<p>上榜理由：如果说勋章一词听起来陌生，那么显示已读未读个数、小红点标记信息这一类词语你一定不太陌生，笔者相信在诸位实际开发中经常遇到为某些item加入小红点标记的需求，聪明的各位一定有着各种实现方案，为什么不能快速优雅的完成呢？android-viewbadger可以帮你实现，当然，在某些情况下，你需要具备修改源码的能力，以符合设计MM的需求！值得注意的是，这宽项目已经五年没有更新了！</p>
</blockquote>
<p>github：<a href="https://github.com/jgilfelt/android-viewbadger" target="_blank" rel="external">https://github.com/jgilfelt/android-viewbadger</a></p>
<p>作者：Jeff Gilfelt</p>
<p>使用：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">View target = findViewById(R.id.target_view)<span class="comment">;</span></div><div class="line"><span class="keyword">BadgeView </span><span class="keyword">badge </span>= new <span class="keyword">BadgeView(this, </span>target)<span class="comment">;</span></div><div class="line"><span class="keyword">badge.setText("1");</span></div><div class="line"><span class="keyword">badge.show();</span></div></pre></td></tr></table></figure></p>
<h3 id="AndroidWiFiADB"><a href="#AndroidWiFiADB" class="headerlink" title="AndroidWiFiADB"></a>AndroidWiFiADB</h3><blockquote>
<p>一句话介绍：一款不用数据线也可以让你调试手机设备APP的插件项目</p>
<p>上榜理由：你是否还在担心测试过程中高强度的拔插数据线对手机电池和USB端口造成终生难以弥补的损害？别担心，有wifi有AndroidWiFiADB，无须数据线也可以调试应用了，更有趣的是，在测试工程师一边拿着手机一边找你聊bug的时候，你已经偷偷在它的手机上修复了bug，深藏功与名！</p>
</blockquote>
<p>github：<a href="https://github.com/pedrovgs/AndroidWiFiADB" target="_blank" rel="external">https://github.com/pedrovgs/AndroidWiFiADB</a></p>
<p>作者：Pedro Vicente Gómez Sánchez</p>
<p>使用：<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">P<span class="function"><span class="title">references</span>/Settings-&gt;</span>P<span class="function"><span class="title">lugins</span>-&gt;</span>B<span class="function"><span class="title">rowse</span> Repositories-&gt;</span>serch AndroidWiFiADB</div></pre></td></tr></table></figure></p>
<h3 id="emojicon"><a href="#emojicon" class="headerlink" title="emojicon"></a>emojicon</h3><blockquote>
<p>一句话介绍：一款提供在TextView、EdiText展示表情包能力的框架</p>
<p>上榜理由：2.7k个star，,榜单第二款增强TextView显示能力的框架，这款专为表情包设计，如果你曾经好奇微信、QQ的表情显示是如何做到的？这款框架一定能满足你的求知欲。</p>
</blockquote>
<h3 id="packer-ng-plugin"><a href="#packer-ng-plugin" class="headerlink" title="packer-ng-plugin"></a>packer-ng-plugin</h3><blockquote>
<p>一句话介绍：一款打爆工具插件</p>
<p>上榜理由：笔者尽力维护榜单涉及范围的全面性，因此引入此插件项目——项目号称完成100个渠道包只需要10秒钟，在市面上各种各样多渠道打包方案的今天，选择一款适合自己团队的，才是上上选择</p>
</blockquote>
<p>github：<a href="https://github.com/mcxiaoke/packer-ng-plugin" target="_blank" rel="external">https://github.com/mcxiaoke/packer-ng-plugin</a></p>
<p>作者：Xiaoke Zhang</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">buildscript</span> &#123;</div><div class="line">    ......</div><div class="line">    <span class="keyword">dependencies</span>&#123;</div><div class="line">    <span class="comment">// add packer-ng</span></div><div class="line">        <span class="keyword">classpath</span> <span class="string">'com.mcxiaoke.gradle:packer-ng:1.0.9'</span></div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line"></div><div class="line">apply plugin: <span class="string">'packer'</span> </div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.mcxiaoke.gradle:packer-helper:1.0.9'</span></div><div class="line">&#125; </div><div class="line"></div><div class="line">android &#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">    signingConfigs &#123;</div><div class="line">      release &#123;</div><div class="line">          <span class="comment">// 满足下面两个条件时需要此配置</span></div><div class="line">          <span class="comment">// 1. Gradle版本 &gt;= 2.14.1</span></div><div class="line">          <span class="comment">// 2. Android Gradle Plugin 版本 &gt;= 2.2.0</span></div><div class="line">          <span class="comment">// 作用是只使用旧版签名，禁用V2版签名模式</span></div><div class="line">        v2SigningEnabled <span class="keyword">false</span> </div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="android-priority-jobqueue"><a href="#android-priority-jobqueue" class="headerlink" title="android-priority-jobqueue"></a>android-priority-jobqueue</h3><blockquote>
<p>一句话介绍：一款提供后台任务管理能力的框架</p>
<p>上榜理由：如果你是个志在深入研究多线程操作的开发者，这个项目一定不要错过，不论是Activity重新加载、Service使用线程池时的任务优先级和并发问题，都不要担心，Job Manage会照顾优先级，持久性，负载平衡，延迟，网络控制，分组，2.4K个star，优秀的多线程管理能力，况且它依赖的第三方框架很少，值得你一试</p>
</blockquote>
<p>github：<a href="https://github.com/yigit/android-priority-jobqueue" target="_blank" rel="external">https://github.com/yigit/android-priority-jobqueue</a></p>
<p>作者：Yigit Boyar</p>
<h3 id="Android-Debug-Database"><a href="#Android-Debug-Database" class="headerlink" title="Android-Debug-Database"></a>Android-Debug-Database</h3><blockquote>
<p>一句话介绍：一款提供测试App内部数据库能力的框架</p>
<p>上榜理由：榜单里第二款针对调试数据库的框架，一行代码集成，直接在浏览器增删改查App的数据库，2.3k个star，心动不如行动！</p>
</blockquote>
<p>github：<a href="https://github.com/amitshekhariitbhu/Android-Debug-Database" target="_blank" rel="external">https://github.com/amitshekhariitbhu/Android-Debug-Database</a></p>
<p>作者：AMIT SHEKHAR</p>
<p>使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">debugCompile <span class="string">'com.amitshekhar.android:debug-db:1.0.0'</span></div><div class="line"></div><div class="line">浏览器键入</div><div class="line"></div><div class="line">http:<span class="comment">//XXX.XXX.X.<span class="doctag">XXX:</span>8080</span></div></pre></td></tr></table></figure></p>
<h3 id="conceal"><a href="#conceal" class="headerlink" title="conceal"></a>conceal</h3><blockquote>
<p>一句话介绍：一款facebook提供的加密本地大文件的框架</p>
<p>上榜理由：如果还在担心App内的图片的隐私问题，这款facebook提供的文件加密框架足以解决你的问题，facebook客户端的图片和数据都是使用conceal加密的</p>
</blockquote>
<p>官网地址：<a href="http://facebook.github.io/conceal/" target="_blank" rel="external">http://facebook.github.io/conceal/</a></p>
<p>github：<a href="https://github.com/facebook/conceal" target="_blank" rel="external">https://github.com/facebook/conceal</a></p>
<p>作者：facebook</p>
<p>使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">clone</span>项目到本地/官网下载jar</div></pre></td></tr></table></figure></p>
<h3 id="ARouter"><a href="#ARouter" class="headerlink" title="ARouter"></a>ARouter</h3><blockquote>
<p>一句话介绍：一款提供服务、页面跳转路由的框架</p>
<p>上榜理由：正如作者宣称的那样，该框架提供：从外部URL映射到内部页面、跨模块的页面跳转（页面解耦）、拦截跳转过程等能力，还有更多功能等你去发掘，2.1K个star，值得为企业级的框架喝彩</p>
</blockquote>
<p>github：<a href="https://github.com/alibaba/ARouter" target="_blank" rel="external">https://github.com/alibaba/ARouter</a></p>
<p>作者：alibaba </p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    defaultConfig &#123;</div><div class="line">        ...</div><div class="line">        javaCompileOptions &#123;</div><div class="line">            annotationProcessorOptions &#123;</div><div class="line">            arguments = [ moduleName : <span class="keyword">project</span>.getName() ]</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="comment">// 替换成最新版本, 需要注意的是api</span></div><div class="line">    <span class="comment">// 要与compiler匹配使用，均使用最新版可以保证兼容</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.alibaba:arouter-api:x.x.x'</span></div><div class="line">    annotationProcessor <span class="string">'com.alibaba:arouter-compiler:x.x.x'</span></div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"><span class="comment">// 旧版本gradle插件(&lt; 2.2)，可以使用apt插件，配置方法见文末'其他#4'</span></div><div class="line"><span class="comment">// Kotlin配置参考文末'其他#5'</span></div></pre></td></tr></table></figure></p>
<h3 id="MagicaSakura"><a href="#MagicaSakura" class="headerlink" title="MagicaSakura"></a>MagicaSakura</h3><blockquote>
<p>一句话介绍：一款提供多主题切换能力的框架</p>
<p>上榜理由：框架所提供的能力，一直是本榜单所看重的，这款由bilibili提供的多主题框架，作为榜单所涉及范围能补充，1.9个star，感谢bilibili团队所作出的贡献！</p>
</blockquote>
<p>github：<a href="https://github.com/Bilibili/MagicaSakura" target="_blank" rel="external">https://github.com/Bilibili/MagicaSakura</a></p>
<p>作者:Bilibili</p>
<p>使用：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">compile</span> <span class="string">'com.bilibili:magicasakura:0.1.6<span class="variable">@aar</span>'</span></div></pre></td></tr></table></figure></p>
<h3 id="CustomActivityOnCrash"><a href="#CustomActivityOnCrash" class="headerlink" title="CustomActivityOnCrash"></a>CustomActivityOnCrash</h3><blockquote>
<p>一句话介绍：一款当APP crash的时候自动载入某个Activity的框架（而不是显示Unfortunately, X has stopped）</p>
<p>上榜理由：新奇的创意是榜单所需要的，所以它赢得了1.8K个star；作为开发者应该拥有考虑到各种潜伏的bug的能力，但我们不能总是面面俱到，其他系统端的同事也可能造成程序的意外crash，因此，如何让程序优雅的crash-&gt;重启值得我们思考，这款框架就提供了这种能力</p>
</blockquote>
<p>github：<a href="https://github.com/Ereza/CustomActivityOnCrash" target="_blank" rel="external">https://github.com/Ereza/CustomActivityOnCrash</a></p>
<p>作者：Eduard Ereza Martínez</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'cat.ereza:customactivityoncrash:2.1.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>添加到 Application class:<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line"><span class="keyword">public</span> void onCreate() &#123;</div><div class="line">    <span class="built_in">super</span>.onCreate();</div><div class="line"></div><div class="line">    CaocConfig.Builder.create()</div><div class="line">        .backgroundMode(CaocConfig.BACKGROUND_MODE_SILENT) </div><div class="line">        .enabled(<span class="literal">false</span>) //<span class="keyword">default</span>: <span class="literal">true</span></div><div class="line">        .showErrorDetails(<span class="literal">false</span>) //<span class="keyword">default</span>: <span class="literal">true</span></div><div class="line">        .showRestartButton(<span class="literal">false</span>) //<span class="keyword">default</span>: <span class="literal">true</span></div><div class="line">        .trackActivities(<span class="literal">true</span>) //<span class="keyword">default</span>: <span class="literal">false</span></div><div class="line">        .minTimeBetweenCrashesMs(<span class="number">2000</span>) //<span class="keyword">default</span>: <span class="number">3000</span></div><div class="line">        .errorDrawable(R.drawable.ic_custom_drawable) //<span class="keyword">default</span>: bug image</div><div class="line">        .restartActivity(YourCustomActivity.class) //<span class="keyword">default</span>: <span class="literal">null</span> (your app<span class="comment">'s launch activity)</span></div><div class="line">        .errorActivity(YourCustomErrorActivity.class) //<span class="keyword">default</span>: <span class="literal">null</span> (<span class="keyword">default</span> <span class="built_in">error</span> activity)</div><div class="line">        .eventListener(<span class="keyword">new</span> YourCustomEventListener()) //<span class="keyword">default</span>: <span class="literal">null</span></div><div class="line">        .apply();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="XhsEmoticonsKeyboard"><a href="#XhsEmoticonsKeyboard" class="headerlink" title="XhsEmoticonsKeyboard"></a>XhsEmoticonsKeyboard</h3><blockquote>
<p>一句话介绍：最开心的开源表情解决方案</p>
<p>上榜理由：如果你还在发愁如何为你的APP自制键盘，那么此框架非常适合你，而且还提供表情包展示能力，1.7个star证明了它的独特。此外作者还附赠了高仿微信键盘，QQ键盘的demo，分享给诸位</p>
</blockquote>
<p>github：<a href="https://github.com/w446108264/XhsEmoticonsKeyboard" target="_blank" rel="external">https://github.com/w446108264/XhsEmoticonsKeyboard</a></p>
<p>作者：zhongdaxia</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">allprojects</span> &#123;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        jcenter()</div><div class="line">        maven &#123; url <span class="string">"https://jitpack.io"</span> &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123; </div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.github.w446108264:XhsEmoticonsKeyboard:2.0.4'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="完整项目"><a href="#完整项目" class="headerlink" title="完整项目"></a>完整项目</h2><h3 id="iosche"><a href="#iosche" class="headerlink" title="iosche"></a>iosche</h3><blockquote>
<p>一句话介绍：谷歌2016开发者大会的展示项目</p>
<p>上榜理由：github上有13.4k个star，位居企业级项目排行榜第一位，牛逼的开发者，权威的设计模式，标准的项目写法，值得一试；笔者建议初学者down下源码，找到app入口，每个页面走一通，配合设计模式的概念加深理解。</p>
</blockquote>
<p>github：<a href="https://github.com/google/iosched" target="_blank" rel="external">https://github.com/google/iosched</a></p>
<p>作者： Google</p>
<h3 id="Plaid"><a href="#Plaid" class="headerlink" title="Plaid"></a>Plaid</h3><blockquote>
<p>一句话介绍：提供设计新闻和灵感的开源app</p>
<p>上榜理由：标准的material design设计，新闻类app，github上9k的star量值得你摒弃市面上参差不齐的新闻app，快点下手研究它吧！</p>
</blockquote>
<p>github：<a href="https://github.com/nickbutcher/plaid" target="_blank" rel="external">https://github.com/nickbutcher/plaid</a></p>
<p>作者： Nick Butcher</p>
<p>###PocketHub</p>
<blockquote>
<p>一句话介绍：Github的Android版</p>
<p>上榜理由：8.7K的star数量，Github的亲生儿子，开放的源码值得各位一探究竟</p>
</blockquote>
<p>github：<a href="https://github.com/pockethub/PocketHub" target="_blank" rel="external">https://github.com/pockethub/PocketHub</a></p>
<p>作者：Fadil Sutomo</p>
<h3 id="Signal-Android"><a href="#Signal-Android" class="headerlink" title="Signal Android"></a>Signal Android</h3><blockquote>
<p>一句话介绍：Signal是一款安全通讯的短信类app，</p>
<p>上榜理由：7.9K的star数量，工具类app的标签属性，让它在排行榜中独一无二，如果你对短信app有兴趣，可以深入探究一番</p>
</blockquote>
<p>github：<a href="https://github.com/WhisperSystems/Signal-Android" target="_blank" rel="external">https://github.com/WhisperSystems/Signal-Android</a></p>
<p>作者：WhisperSystems</p>
<h3 id="android-UniversalMusicPlayer"><a href="#android-UniversalMusicPlayer" class="headerlink" title="android-UniversalMusicPlayer"></a>android-UniversalMusicPlayer</h3><blockquote>
<p>一句话介绍：一款跨设备运行的多媒体app</p>
<p>上榜理由：googlesamples良心推荐，github拥有7.9k个star，可以在Android手机，汽车，平板，穿戴设备上使用，对于仅仅体验过Android手机开发的程序员，会不会很新奇呢？你值得一试！</p>
</blockquote>
<p>github：<a href="https://github.com/googlesamples/android-UniversalMusicPlayer" target="_blank" rel="external">https://github.com/googlesamples/android-UniversalMusicPlayer</a></p>
<p>作者：Google</p>
<h3 id="HomeMirror"><a href="#HomeMirror" class="headerlink" title="HomeMirror"></a>HomeMirror</h3><blockquote>
<p>一句话介绍：如果你是个爱美的家伙那么你一定需要这面镜子！</p>
<p>上榜理由：工具类App很难再github上有一席之地，除非它提供特别新奇的功能，比如HomeMirror，github上有用7599个star，仅仅因为它提供了镜子的功能。从现在起，Android 手机、pad，都将成为你旅游居家神器，值得拥有！</p>
</blockquote>
<p>github：<a href="https://github.com/HannahMitt/HomeMirror" target="_blank" rel="external">https://github.com/HannahMitt/HomeMirror</a></p>
<p>作者：Hannah Mittens </p>
<p>HomeMirror初体验：<br><img src="http://ondlsj2sn.bkt.clouddn.com/FiiUDY6BeK1y7xkiXJQnY8jV8dM8.png" alt=""></p>
<h3 id="ExoPlayer"><a href="#ExoPlayer" class="headerlink" title="ExoPlayer"></a>ExoPlayer</h3><blockquote>
<p>一句话介绍：一款 替代Android原生MediaPlayer的媒体播放器</p>
<p>上榜理由：也许是Google对自家MediaPlayer API不甚满意，所以诞生了ExoPlayer，ExoPlayer提供了强大的扩展API，使用它来制作多媒体播放器更快捷，更容易扩展，对多媒体播放器感兴趣的同仁们可以用它来大展身手了！6.9K个star，证明它有多受开发者们喜爱，更难能可贵的是，google还在更新维护着！</p>
</blockquote>
<p>官网地址：<a href="https://google.github.io/ExoPlayer/" target="_blank" rel="external">https://google.github.io/ExoPlayer/</a></p>
<p>github：<a href="https://github.com/google/ExoPlayer" target="_blank" rel="external">https://github.com/google/ExoPlayer</a></p>
<p>作者：google</p>
<p>使用：<br><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">repositories &#123;</div><div class="line">    <span class="attribute">jcenter()</span></div><div class="line">&#125;</div><div class="line">compile 'com.google.android.exoplayer:exoplayer:r2<span class="variable">.X</span><span class="variable">.X</span>'</div><div class="line"></div><div class="line">compile 'com<span class="variable">.google</span><span class="variable">.android</span><span class="variable">.exoplayer</span>:exoplayer-core:r2<span class="variable">.X</span><span class="variable">.X</span>'</div><div class="line">compile 'com<span class="variable">.google</span><span class="variable">.android</span><span class="variable">.exoplayer</span>:exoplayer-dash:r2<span class="variable">.X</span><span class="variable">.X</span>'</div><div class="line">compile 'com<span class="variable">.google</span><span class="variable">.android</span><span class="variable">.exoplayer</span>:exoplayer-ui:r2<span class="variable">.X</span><span class="variable">.X</span>'</div></pre></td></tr></table></figure></p>
<h3 id="cheesesquare"><a href="#cheesesquare" class="headerlink" title="cheesesquare"></a>cheesesquare</h3><blockquote>
<p>一句话介绍：Android 材料设计的展示性项目</p>
<p>上榜理由:作者被称为是Android Support Lib背后的男人，他写出的展示性项目，怎能不推荐上榜？材料设计已经炒了好几年了，但作为最权威的展示项目，你一定需要它，6.7个star证明了它是多么的受欢迎。</p>
</blockquote>
<p>github：<a href="https://github.com/chrisbanes/cheesesquare" target="_blank" rel="external">https://github.com/chrisbanes/cheesesquare</a></p>
<p>作者：Chris Banes</p>
<h3 id="DanmakuFlameMaster"><a href="#DanmakuFlameMaster" class="headerlink" title="DanmakuFlameMaster"></a>DanmakuFlameMaster</h3><blockquote>
<p>一句话介绍：android端开源弹幕引擎</p>
<p>上榜理由：bilibili出品，保证了它的纯种品质，并且ndk源码也一并开源，可谓业界良心，该弹幕引擎的开源节省了很多视频直播小伙伴的开发成本，笔者强力推荐！</p>
</blockquote>
<p>github：<a href="https://github.com/Bilibili/DanmakuFlameMaster" target="_blank" rel="external">https://github.com/Bilibili/DanmakuFlameMaster</a></p>
<p>作者：bilibili</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">repositories</span> &#123;</div><div class="line">    jcenter()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.github.ctiao:DanmakuFlameMaster:0.8.3'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.github.ctiao:ndkbitmap-armv7a:0.8.3'</span></div><div class="line"></div><div class="line">    # Other ABIs: optional</div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.github.ctiao:ndkbitmap-armv5:0.8.3'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.github.ctiao:ndkbitmap-x86:0.8.3'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="facebook-android-sdk"><a href="#facebook-android-sdk" class="headerlink" title="facebook-android-sdk"></a>facebook-android-sdk</h3><blockquote>
<p>一句话介绍：一款提供接入facebook平台能力的框架</p>
<p>上榜理由：无论是你有接入facebook的需求，还是有学习自制sdk的需求，这都是很棒的途径；如何开发一套企业级sdk，是进阶优秀开发工程师的必须之路，4.1k个star，facebook持久更新质量保证，你值得拥有！</p>
</blockquote>
<p>github：<a href="https://github.com/facebook/facebook-android-sdk" target="_blank" rel="external">https://github.com/facebook/facebook-android-sdk</a></p>
<p>作者：facebook</p>
<p>使用：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//</span>developers.facebook.com<span class="regexp">/docs/</span>android</div></pre></td></tr></table></figure></p>
<h3 id="android-oss"><a href="#android-oss" class="headerlink" title="android-oss"></a>android-oss</h3><blockquote>
<p>一句话介绍：国外创意社区Kickstarter 开源的Android版客户端</p>
<p>上榜理由：精致的企业级APP，每个页面处理得都很棒，如果你志在成为一个优雅工程师，这款开源项目一定适合你，3.8k个star证明了它不俗的生命力</p>
</blockquote>
<p>github：<a href="https://github.com/kickstarter/android-oss" target="_blank" rel="external">https://github.com/kickstarter/android-oss</a></p>
<p>作者：kickstarter</p>
<h3 id="k-9"><a href="#k-9" class="headerlink" title="k-9"></a>k-9</h3><blockquote>
<p>一句话介绍：Android端客户端邮件App</p>
<p>上榜理由：还记得张小龙的成名作——FoxMail吗？如果你想做一款移动端Email App，k-9具有很好的借鉴价值，此外对于应用层协议你也会有更深的认识</p>
</blockquote>
<p>官网地址： <a href="https://k9mail.github.io/" target="_blank" rel="external">https://k9mail.github.io/</a></p>
<p>github：<a href="https://github.com/k9mail/k-9" target="_blank" rel="external">https://github.com/k9mail/k-9</a></p>
<h3 id="Timber"><a href="#Timber" class="headerlink" title="Timber"></a>Timber</h3><blockquote>
<p>一句话介绍：一款音乐播放器类App</p>
<p>上榜理由：3K个star，完全按照材料设计规范，提供十几种播放特性，而且还提供App的通用设置能力，这一点做的同样优秀，对于志在提升开发技术的同学值得一试</p>
</blockquote>
<p>github：<a href="https://github.com/naman14/Timber" target="_blank" rel="external">https://github.com/naman14/Timber</a></p>
<p>作者：Naman Dwivedi</p>
<h3 id="remusic"><a href="#remusic" class="headerlink" title="remusic"></a>remusic</h3><blockquote>
<p>一句话介绍：仿网易云音乐Android版App</p>
<p>上榜理由：学习完Timer，是否还不太满足你的胃口？remusic可以满足你的胃口——它甚至可以拿去直接当上线项目了！2.9K个star，基于Timber的设计（入手的前提是先搞懂Timber）值得入手；有一个问题：如果由你重构，你会如何做呢？</p>
</blockquote>
<p>github：<a href="https://github.com/aa112901/remusic" target="_blank" rel="external">https://github.com/aa112901/remusic</a></p>
<p>作者：MW</p>
<h3 id="Douya"><a href="#Douya" class="headerlink" title="Douya"></a>Douya</h3><blockquote>
<p>一句话介绍：开源豆瓣客户端</p>
<p>上榜理由：一款功能全面、架构设计不俗的开源APP；仅仅是对豆瓣APP设计思路不满而进行的重构项目，可见作者对产品的痴迷和热爱，2.9K个star，证明该项目并不是头脑发热一时兴起的作品，如果每一个idea都能实现，那我们的世界将会多么美妙！</p>
</blockquote>
<p>github：<a href="https://github.com/DreaminginCodeZH/Douya" target="_blank" rel="external">https://github.com/DreaminginCodeZH/Douya</a></p>
<p>作者：Zhang Hai</p>
<h3 id="BookReader"><a href="#BookReader" class="headerlink" title="BookReader"></a>BookReader</h3><blockquote>
<p>一句话介绍：开源小说阅读器</p>
<p>上榜理由：2.7K个star，榜单里第一款阅读器APP，具有很高的学习价值（针对有兴趣往阅读工具类方向发展的同学）</p>
</blockquote>
<p>github：<a href="https://github.com/JustWayward/BookReader" target="_blank" rel="external">https://github.com/JustWayward/BookReader</a></p>
<p>作者：JustWayward 团队</p>
<h3 id="bilibili-android-client"><a href="#bilibili-android-client" class="headerlink" title="bilibili-android-client"></a>bilibili-android-client</h3><blockquote>
<p>一句话介绍:高仿bilibili的Android客户端</p>
<p>上榜理由：2.5K个star，榜单里第一款视频直播开源App；适合对视频直播、社区互动感兴趣的同学；bilibili-android-client里使用了很多大型框架，此项目并不适合基础薄弱的同学，不要灰心，学习页面的布局设计也是值得的！</p>
</blockquote>
<p>github：<a href="https://github.com/HotBitmapGG/bilibili-android-client" target="_blank" rel="external">https://github.com/HotBitmapGG/bilibili-android-client</a></p>
<p>作者：Hcc</p>
<h3 id="AndroidChromium"><a href="#AndroidChromium" class="headerlink" title="AndroidChromium"></a>AndroidChromium</h3><blockquote>
<p>一句话介绍：Android版chrome浏览器</p>
<p>上榜理由：正如作者宣称的那样:</p>
<ul>
<li>谷歌浏览器安卓版源码项目</li>
<li>世界级的安卓架构</li>
<li>理清本项目业务逻辑完全可以胜任国内一线公司工程师</li>
</ul>
</blockquote>
<p>github：<a href="https://github.com/JackyAndroid/AndroidChromium" target="_blank" rel="external">https://github.com/JackyAndroid/AndroidChromium</a></p>
<p>作者：JackYAndroid</p>
<h2 id="开发框架：（排名无先后、只按类型划分）"><a href="#开发框架：（排名无先后、只按类型划分）" class="headerlink" title="开发框架：（排名无先后、只按类型划分）"></a>开发框架：（排名无先后、只按类型划分）</h2><h3 id="libgdx"><a href="#libgdx" class="headerlink" title="libgdx"></a>libgdx</h3><blockquote>
<p>一句话介绍：一款跨平台的android端游戏开发框架</p>
<p>上榜理由：android端开发框架类第一名，11.7K的star量，游戏框架是它的专属标签，更重要的是它是跨平台的</p>
</blockquote>
<p>官网地址：<a href="http://libgdx.badlogicgames.com/" target="_blank" rel="external">http://libgdx.badlogicgames.com/</a></p>
<p>github：<a href="https://github.com/libgdx/libgdx" target="_blank" rel="external">https://github.com/libgdx/libgdx</a></p>
<h3 id="xUtils"><a href="#xUtils" class="headerlink" title="xUtils"></a>xUtils</h3><blockquote>
<p>一句话介绍：老牌企业级开发框架</p>
<p>上榜理由：4.9K个star，xUtils作为上古时期程序员备受推崇的开发框架，最大的原因——省事。xUtls包含四大模块，与之而来的是提供四大操作能力：数据操作、UI操作、Http协议操作、图片操作。xUtils作为笔者初学Android框架设计的导师型项目，在笔者多年经验中，看到xUtils作为众多中小银行Android端框架方案首选，足以证明它的受欢迎程度。该框架现在已经更新到了xUtils3，如果你对Android框架涉及有一定的想法，可以从xUtils入手，进阶为框架大师行列。虽然框架中很多引擎已经过时，各个模块的做法都可以用其他框架替代，但xUtils作为国内开发者的骄傲，上古时期的框架宠儿，值得你拥有！</p>
</blockquote>
<p>github：<a href="https://github.com/wyouflf/xUtils" target="_blank" rel="external">https://github.com/wyouflf/xUtils</a></p>
<p>作者：wyouflf</p>
<p>使用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'org.xutils:xutils:3.5.0'</span></div></pre></td></tr></table></figure></p>
<h3 id="android-common"><a href="#android-common" class="headerlink" title="android-common"></a>android-common</h3><blockquote>
<p>一句话介绍： 一款android快速开发框架</p>
<p>上榜理由：滴滴资深级Android工程师出品，历经多年开发者的检验，以4.3K屹立于快速开发框架榜第三名，该框架提供了图片缓存、Http缓存、DropDownListView、下载模块、开发常用工具类等，作为上古时期程序员最早的总结性开发框架，它是一代人智慧的结晶，值得我们为作者Trinea鼓掌喝彩</p>
</blockquote>
<p>github：<a href="https://github.com/Trinea/android-common" target="_blank" rel="external">https://github.com/Trinea/android-common</a></p>
<p>作者：Trinea</p>
<h3 id="Vitamio"><a href="#Vitamio" class="headerlink" title="Vitamio"></a>Vitamio</h3><blockquote>
<p>一句话介绍：一款支持跨平台的Android多媒体开发框架</p>
<p>上榜理由：如果之前提到的exoplayer不能满足你开发多媒体的需求，那我保证vitamio值得你一试</p>
</blockquote>
<p>官网地址：<a href="https://www.vitamio.org/" target="_blank" rel="external">https://www.vitamio.org/</a></p>
<p>github：<a href="https://github.com/yixia/VitamioBundle" target="_blank" rel="external">https://github.com/yixia/VitamioBundle</a></p>
<p>作者：yixia团队</p>
<h3 id="Weex"><a href="#Weex" class="headerlink" title="Weex"></a>Weex</h3><blockquote>
<p>一句话介绍：移动端跨平台开发的解决方案</p>
<p>上榜理由：14.4K个star，有成熟应用案例的企业级混合开发框架，阿里巴巴出品，为什么不试试呢？</p>
</blockquote>
<p>官网地址：<a href="https://weex.apache.org/cn/" target="_blank" rel="external">https://weex.apache.org/cn/</a></p>
<p>github：<a href="https://github.com/alibaba/weex" target="_blank" rel="external">https://github.com/alibaba/weex</a></p>
<p>作者：alibaba</p>
<h3 id="cordova-android（Hybrid-开发框架、WebApp开发框架）"><a href="#cordova-android（Hybrid-开发框架、WebApp开发框架）" class="headerlink" title="cordova-android（Hybrid 开发框架、WebApp开发框架）"></a>cordova-android（Hybrid 开发框架、WebApp开发框架）</h3><blockquote>
<p>一句话介绍：跨平台的开发框架</p>
<p>上榜理由：cordova有足够的能力完成混合开发、WebApp开发的需求：不论你是Web开发者，或者是Native开发者，使用cordova都可以作出跨平台的App </p>
</blockquote>
<p>官网地址：<a href="http://cordova.axuer.com/docs/zh-cn/latest/guide/overview/index.html" target="_blank" rel="external">http://cordova.axuer.com/docs/zh-cn/latest/guide/overview/index.html</a></p>
<p>github：<a href="https://github.com/apache/cordova-android" target="_blank" rel="external">https://github.com/apache/cordova-android</a></p>
<h3 id="react-native"><a href="#react-native" class="headerlink" title="react-native"></a>react-native</h3><blockquote>
<p>一句话介绍：一款以Javascript的语言来操作多个系统语言（Ios、Android）的框架</p>
<p>上榜理由：很难讲react-native属于什么类别，它适合前端工程师开发移动端App，也适合Native开发者进行跨平台的开发，但对于Navitve开发者来说陡峭的学习曲线会吓走一大批“框架爱好者”；前端界有一句名言：Web代表着未来，Native代表着现在，而我们处在现在与未来的道路上；49K个star，似乎让我们离未来更进一步</p>
</blockquote>
<p>官网地址： <a href="http://facebook.github.io/react-native/docs/getting-started.html" target="_blank" rel="external">http://facebook.github.io/react-native/docs/getting-started.html</a></p>
<p>github：<a href="https://github.com/facebook/react-native" target="_blank" rel="external">https://github.com/facebook/react-native</a></p>
<p>作者：facebook </p>
<h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2><h3 id="AndroidUtilCode"><a href="#AndroidUtilCode" class="headerlink" title="AndroidUtilCode"></a>AndroidUtilCode</h3><blockquote>
<p>一句话介绍：提供了数量庞大的工具类</p>
<p>上榜理由：10.8K的star个数，足以证明它是多么受欢迎，欢迎你提供常用的工具类壮大它！</p>
</blockquote>
<p>github：<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/README-CN.md" target="_blank" rel="external">https://github.com/Blankj/AndroidUtilCode/blob/master/README-CN.md</a></p>
<p>使用：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">File → Settings... → Plugins → Browse repositories...</div></pre></td></tr></table></figure></p>
<p>and search for <code>freeline</code>.</p>
<h3 id="kotiln"><a href="#kotiln" class="headerlink" title="kotiln"></a>kotiln</h3><blockquote>
<p>一句话介绍：Google推出的Android编程语言</p>
<p>上榜理由：就像AndroidStudio取代Eclipse那样，Goolg将kotiln作为Android的官网语言，也许是为了避免同Oracle的专利诉讼，但kotlin 100%兼容java，大幅精简java代码量，以及函数式编程的思想这些优异的特性同意值得我们注意，还记得在榜单之前说过的吗？未来是kotlin的，当下是java的，但我们处在当下通往未来的道路上——学习未来的编程语言，提升自己的工作效率，早点下班打豆豆，何乐而不为？</p>
</blockquote>
<p>官网地址：<a href="http://kotlinlang.org/" target="_blank" rel="external">http://kotlinlang.org/</a></p>
<p>github：<a href="https://github.com/JetBrains/kotlin" target="_blank" rel="external">https://github.com/JetBrains/kotlin</a></p>
<p>使用：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span>//kotlinlang<span class="meta">.org</span>/docs/reference/   提供了 api-android用例-书籍等资源</div></pre></td></tr></table></figure></p>
<h2 id="书籍类项目（排序无先后）"><a href="#书籍类项目（排序无先后）" class="headerlink" title="书籍类项目（排序无先后）"></a>书籍类项目（排序无先后）</h2><h3 id="Android-developer中国官网培训课程"><a href="#Android-developer中国官网培训课程" class="headerlink" title="Android developer中国官网培训课程"></a>Android developer中国官网培训课程</h3><blockquote>
<p>一句话介绍：符合中国国情的Google开发者官网的子产品——Android开发者官网</p>
<p>上榜理由：这里有培训课程、API用例课程、Sample用例、依赖库介绍、AndroidStudio官网…等等一系列公开免费的课程，尽管大部分内容还是英文讲解，可是你肯靠着英语词典一篇一篇啃完，相信我，你的Android知识水平将秒杀国内市面上大部分的Android书籍</p>
</blockquote>
<p>官网地址：<a href="https://developer.android.google.cn/training/index.html" target="_blank" rel="external">https://developer.android.google.cn/training/index.html</a></p>
<p>作者：google</p>
<h3 id="android-architecture"><a href="#android-architecture" class="headerlink" title="android-architecture"></a>android-architecture</h3><blockquote>
<p>一句话介绍：google提供的Android当下各种基本框架</p>
<p>上榜理由：看完它，mvp，mvvm都将入切瓜砍菜，秋风扫落叶一般…</p>
</blockquote>
<p>github：<a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">https://github.com/googlesamples/android-architecture</a></p>
<p>作者：google</p>
<h3 id="andorid-open-project"><a href="#andorid-open-project" class="headerlink" title="andorid-open-project"></a>andorid-open-project</h3><blockquote>
<p>一句话介绍：囊括Android几乎所有的开源项目的导航类目录</p>
<p>上榜理由：23k个star的导航类目录，与其盛名不符的是，该项目的导航、浏览阅读体验做的非常差，建议消遣之余阅读；推荐理由——中国人做的最全的Android 开源项目导航目录</p>
</blockquote>
<p>github：<a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">https://github.com/Trinea/android-open-project</a></p>
<p>作者：Trinea</p>
<h3 id="awesome-android-ui"><a href="#awesome-android-ui" class="headerlink" title="awesome-android-ui"></a>awesome-android-ui</h3><blockquote>
<p>一句话介绍：Android的开源项目目录</p>
<p>上榜理由：国外的一款导航目录，23k个star</p>
</blockquote>
<p>github：<a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">https://github.com/wasabeef/awesome-android-ui</a></p>
<!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=songid&auto=1&height=66"></iframe> -->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;排行榜包括四大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单一框架：仅提供路由、网络层、UI层、通信层或其他单一功能的框架&lt;/li&gt;
&lt;li&gt;混合开发框架：提供开发hybrid app、h5与webview结合能力、web app能力的框架。&lt;/li&gt;
&lt;li&gt;企业级开源项目：可以独立运行的app，有极高的学习价值、思路借鉴意义&lt;/li&gt;
&lt;li&gt;书籍类开源项目：类似Open-sourc-project这样的导航类项目，大型公司的Android课程的学习目录&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android庶系" scheme="http://dinson.win/categories/Android%E5%BA%B6%E7%B3%BB/"/>
    
    
      <category term="排行榜" scheme="http://dinson.win/tags/%E6%8E%92%E8%A1%8C%E6%A6%9C/"/>
    
  </entry>
  
  <entry>
    <title>模仿手机QQ底部导航栏Icon拖拽效果</title>
    <link href="http://dinson.win/2017/06/20/17-06-20/"/>
    <id>http://dinson.win/2017/06/20/17-06-20/</id>
    <published>2017-06-20T01:54:00.000Z</published>
    <updated>2017-07-12T15:14:12.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>实现的方式有很多，我说一下我的思路：我的思路比较简单，无非就是上下两层图片可拖动的范围和速度不一样呗（大图标拖动范围和速度小于小图标拖动范围和速度）。</p>
</blockquote>
<p>PS（以第一个消息图标为例）：大图标指的是外面的气泡图标，小图标指的是气泡里面的眼睛和嘴巴图标。切图时将一张整体图片切成了这两个图标。具体可下载Demo参考里面的图片资源。<br>自定义属性</p>
<a id="more"></a>
<!-- 这是　　缩进--> 
<h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">resources</span>&gt;  </div><div class="line">    &lt;declare-styleable <span class="built_in">name</span>=<span class="string">"QQNaviView"</span>&gt;  </div><div class="line">        &lt;attr <span class="built_in">name</span>=<span class="string">"bigIconSrc"</span> <span class="built_in">format</span>=<span class="string">"reference"</span>/&gt;  </div><div class="line">        &lt;attr <span class="built_in">name</span>=<span class="string">"smallIconSrc"</span> <span class="built_in">format</span>=<span class="string">"reference"</span>/&gt;  </div><div class="line">        &lt;attr <span class="built_in">name</span>=<span class="string">"iconWidth"</span> <span class="built_in">format</span>=<span class="string">"dimension"</span>/&gt;  </div><div class="line">        &lt;attr <span class="built_in">name</span>=<span class="string">"iconHeight"</span> <span class="built_in">format</span>=<span class="string">"dimension"</span>/&gt;  </div><div class="line">        &lt;attr <span class="built_in">name</span>=<span class="string">"range"</span> <span class="built_in">format</span>=<span class="string">"float"</span>/&gt;  </div><div class="line">    &lt;/declare-styleable&gt;  </div><div class="line">&lt;/<span class="built_in">resources</span>&gt;</div></pre></td></tr></table></figure>
<p> 其中range为可拖动的范围（其实是倍数），默认值是1，不宜设置过大。</p>
<h2 id="主要的拖动代码"><a href="#主要的拖动代码" class="headerlink" title="主要的拖动代码"></a>主要的拖动代码</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">@<span class="function">Override  </span></div><div class="line"><span class="keyword">public</span> boolean <span class="title">onTouchEvent</span>(<span class="params">MotionEvent <span class="keyword">event</span></span>) &#123;  </div><div class="line">    <span class="keyword">float</span> x = <span class="keyword">event</span>.getX();  </div><div class="line">    <span class="keyword">float</span> y = <span class="keyword">event</span>.getY();  </div><div class="line">    <span class="keyword">switch</span> (<span class="keyword">event</span>.getAction())&#123;  </div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:  </div><div class="line">            lastX = x;  </div><div class="line">            lastY = y;  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_MOVE:  </div><div class="line">            <span class="keyword">float</span> deltaX = x - lastX;  </div><div class="line">            <span class="keyword">float</span> deltaY = y - lastY;  </div><div class="line"></div><div class="line">            moveEvent(mBigIcon, deltaX, deltaY, mSmallRadius);  </div><div class="line">            <span class="comment">//因为可拖动大半径是小半径的1.5倍， 因此这里x,y也相应乘1.5  </span></div><div class="line">            moveEvent(mSmallIcon, <span class="number">1.5</span>f * deltaX, <span class="number">1.5</span>f * deltaY, mBigRadius);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_UP:  </div><div class="line">            <span class="comment">//抬起时复位  </span></div><div class="line">            mBigIcon.setX(<span class="number">0</span>);  </div><div class="line">            mBigIcon.setY(<span class="number">0</span>);  </div><div class="line">            mSmallIcon.setX(<span class="number">0</span>);  </div><div class="line">            mSmallIcon.setY(<span class="number">0</span>);  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> super.onTouchEvent(<span class="keyword">event</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里先得到X轴拖动的距离deltaX和Y轴拖动的距离deltaY，大图标对应小半径，小图标对应大半径。然后看moveEvent方法：</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">private void moveEvent(View <span class="built_in">view</span>, <span class="built_in">float</span> deltaX, <span class="built_in">float</span> deltaY, <span class="built_in">float</span> <span class="built_in">radius</span>)&#123;  </div><div class="line">  </div><div class="line">    //先计算拖动距离  </div><div class="line">    <span class="built_in">float</span> distance = getDistance(deltaX, deltaY);  </div><div class="line"></div><div class="line">    //拖动的方位角，<span class="built_in">atan2</span>出来的角度是带正负号的  </div><div class="line">    double degree = Math.<span class="built_in">atan2</span>(deltaY, deltaX);  </div><div class="line"></div><div class="line">    //如果大于临界半径就不能再往外拖了  </div><div class="line">    <span class="keyword">if</span> (distance &gt; <span class="built_in">radius</span>)&#123;  </div><div class="line">        <span class="built_in">view</span>.setX(<span class="built_in">view</span>.getLeft() + (<span class="built_in">float</span>) (<span class="built_in">radius</span> * Math.<span class="built_in">cos</span>(degree)));  </div><div class="line">        <span class="built_in">view</span>.setY(<span class="built_in">view</span>.getTop() + (<span class="built_in">float</span>) (<span class="built_in">radius</span> * Math.<span class="built_in">sin</span>(degree)));  </div><div class="line">    &#125;<span class="keyword">else</span> &#123;  </div><div class="line">        <span class="built_in">view</span>.setX(<span class="built_in">view</span>.getLeft() + deltaX);  </div><div class="line">        <span class="built_in">view</span>.setY(<span class="built_in">view</span>.getTop() + deltaY);  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法很简单，注释结合这张图就一目了然了，主要是注意在抬起时图标复位就好了。</p>
<p><img src="http://ondlsj2sn.bkt.clouddn.com/FnR-HX50f9CT6__4u2VooWRtZLSN.png" alt=""></p>
<h2 id="简单看一下初始化"><a href="#简单看一下初始化" class="headerlink" title="简单看一下初始化"></a>简单看一下初始化</h2><blockquote>
<p>由于图标下面一般会带文字，因此直接继承了LinearLayout，并且默认设置成了垂直排列。</p>
</blockquote>
<figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public QQNaviView(@NonNull Context <span class="keyword">context</span>, @Nullable AttributeSet attrs, @AttrRes <span class="keyword">int</span> defStyleAttr) &#123;  </div><div class="line">    <span class="keyword">super</span>(<span class="keyword">context</span>, attrs, defStyleAttr);  </div><div class="line">  </div><div class="line">    mContext = <span class="keyword">context</span>;  </div><div class="line">  </div><div class="line">    TypedArray ta = <span class="keyword">context</span><span class="variable">.obtainStyledAttributes</span>(attrs, R<span class="variable">.styleable</span><span class="variable">.QQNaviView</span>, defStyleAttr, <span class="number">0</span>);  </div><div class="line">    mBigIconSrc = ta<span class="variable">.getResourceId</span>(R<span class="variable">.styleable</span><span class="variable">.QQNaviView_bigIconSrc</span>, R<span class="variable">.drawable</span><span class="variable">.big</span>);  </div><div class="line">    mSmallIconSrc = ta<span class="variable">.getResourceId</span>(R<span class="variable">.styleable</span><span class="variable">.QQNaviView_smallIconSrc</span>, R<span class="variable">.drawable</span><span class="variable">.small</span>);  </div><div class="line">    mIconWidth = ta<span class="variable">.getDimension</span>(R<span class="variable">.styleable</span><span class="variable">.QQNaviView_iconWidth</span>, dp2px(<span class="keyword">context</span>, <span class="number">60</span>));  </div><div class="line">    mIconHeight = ta<span class="variable">.getDimension</span>(R<span class="variable">.styleable</span><span class="variable">.QQNaviView_iconHeight</span>, dp2px(<span class="keyword">context</span>, <span class="number">60</span>));  </div><div class="line">    mRange = ta<span class="variable">.getFloat</span>(R<span class="variable">.styleable</span><span class="variable">.QQNaviView_range</span>, <span class="number">1</span>);  </div><div class="line">    ta<span class="variable">.recycle</span>();  </div><div class="line">  </div><div class="line">    <span class="comment">//默认垂直排列  </span></div><div class="line">    setOrientation(LinearLayout<span class="variable">.VERTICAL</span>);  </div><div class="line">  </div><div class="line">    init(<span class="keyword">context</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在init方法中进行了布局文件的绑定，并且让该view水平居中。</p>
</blockquote>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">private void init(<span class="built_in">Context</span> <span class="built_in">context</span>) &#123;  </div><div class="line">    mView = inflate(<span class="built_in">context</span>, R.layout.view_icon, null)<span class="comment">;  </span></div><div class="line">    mBigIcon = (ImageView) mView.findViewById(R.id.iv_big)<span class="comment">;  </span></div><div class="line">    mSmallIcon = (ImageView) mView.findViewById(R.id.iv_small)<span class="comment">;  </span></div><div class="line">  </div><div class="line">    mBigIcon.setImageResource(mBigIconSrc)<span class="comment">;  </span></div><div class="line">    mSmallIcon.setImageResource(mSmallIconSrc)<span class="comment">;  </span></div><div class="line">  </div><div class="line">    setWidthAndHeight(mBigIcon)<span class="comment">;  </span></div><div class="line">    setWidthAndHeight(mSmallIcon)<span class="comment">;  </span></div><div class="line">  </div><div class="line">    LayoutParams lp = new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT)<span class="comment">;  </span></div><div class="line">    lp.gravity = Gravity.CENTER_HORIZONTAL<span class="comment">;  </span></div><div class="line">    mView.setLayoutParams(lp)<span class="comment">;  </span></div><div class="line">    <span class="keyword">addView(mView); </span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里值得注意的是onMeasure方法。由于图标可以往外拖动，所以要给ImageView一个默认的padding，不然拖动时最外面部分会消失。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@<span class="function">Override  </span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> &#123;  </div><div class="line">        setupView();  </div><div class="line">        measureDimension(widthMeasureSpec, heightMeasureSpec);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 确定view以及拖动相关参数 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupView</span><span class="params">()</span> </span>&#123;  </div><div class="line">  </div><div class="line">        <span class="comment">//根据view的宽高确定可拖动半径的大小  </span></div><div class="line">        mSmallRadius = <span class="number">0.1f</span> * Math.min(mView.getWidth(), mView.getHeight()) * mRange;  </div><div class="line">        mBigRadius = <span class="number">1.5f</span> * mSmallRadius;  </div><div class="line">  </div><div class="line">        <span class="comment">//设置imageview的padding，不然拖动时图片边缘部分会消失  </span></div><div class="line">        <span class="keyword">int</span> padding = (<span class="keyword">int</span>) mBigRadius;  </div><div class="line">        mBigIcon.setPadding(padding, padding, padding, padding);  </div><div class="line">        mSmallIcon.setPadding(padding, padding, padding, padding);  </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>然后就没啥好说了，直接看源码吧。</p>
<h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQNaviView</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"QQNaviView"</span>;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> Context mContext;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 主view */</span>  </div><div class="line">    <span class="keyword">private</span> View mView;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 外层icon/拖动幅度较小icon */</span>  </div><div class="line">    <span class="keyword">private</span> ImageView mBigIcon;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 里层icon/拖动幅度较大icon */</span>  </div><div class="line">    <span class="keyword">private</span> ImageView mSmallIcon;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 外层icon资源 */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBigIconSrc;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 里面icon资源 */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSmallIconSrc;  </div><div class="line">  </div><div class="line">    <span class="comment">/* icon宽度 */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mIconWidth;  </div><div class="line">  </div><div class="line">    <span class="comment">/* icon高度 */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mIconHeight;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 拖动幅度较大半径 */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mBigRadius;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 拖动幅度小半径 */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mSmallRadius;  </div><div class="line">  </div><div class="line">    <span class="comment">/* 拖动范围 可调 */</span>  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mRange;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> lastX;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> lastY;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QQNaviView</span><span class="params">(@NonNull Context context)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QQNaviView</span><span class="params">(@NonNull Context context, @Nullable AttributeSet attrs)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QQNaviView</span><span class="params">(@NonNull Context context, @Nullable AttributeSet attrs, @AttrRes <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);  </div><div class="line">  </div><div class="line">        mContext = context;  </div><div class="line">  </div><div class="line">        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.QQNaviView, defStyleAttr, <span class="number">0</span>);  </div><div class="line">        mBigIconSrc = ta.getResourceId(R.styleable.QQNaviView_bigIconSrc, R.drawable.big);  </div><div class="line">        mSmallIconSrc = ta.getResourceId(R.styleable.QQNaviView_smallIconSrc, R.drawable.small);  </div><div class="line">        mIconWidth = ta.getDimension(R.styleable.QQNaviView_iconWidth, dp2px(context, <span class="number">60</span>));  </div><div class="line">        mIconHeight = ta.getDimension(R.styleable.QQNaviView_iconHeight, dp2px(context, <span class="number">60</span>));  </div><div class="line">        mRange = ta.getFloat(R.styleable.QQNaviView_range, <span class="number">1</span>);  </div><div class="line">        ta.recycle();  </div><div class="line">  </div><div class="line">        <span class="comment">//默认垂直排列  </span></div><div class="line">        setOrientation(LinearLayout.VERTICAL);  </div><div class="line">  </div><div class="line">        init(context);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;  </div><div class="line">        mView = inflate(context, R.layout.view_icon, <span class="keyword">null</span>);  </div><div class="line">        mBigIcon = (ImageView) mView.findViewById(R.id.iv_big);  </div><div class="line">        mSmallIcon = (ImageView) mView.findViewById(R.id.iv_small);  </div><div class="line">  </div><div class="line">        mBigIcon.setImageResource(mBigIconSrc);  </div><div class="line">        mSmallIcon.setImageResource(mSmallIconSrc);  </div><div class="line">  </div><div class="line">        setWidthAndHeight(mBigIcon);  </div><div class="line">        setWidthAndHeight(mSmallIcon);  </div><div class="line">  </div><div class="line">        LayoutParams lp = <span class="keyword">new</span> LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);  </div><div class="line">        lp.gravity = Gravity.CENTER_HORIZONTAL;  </div><div class="line">        mView.setLayoutParams(lp);  </div><div class="line">        addView(mView);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 设置icon宽高 </div><div class="line">     * <span class="doctag">@param</span> view </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setWidthAndHeight</span><span class="params">(View view)</span></span>&#123;  </div><div class="line">        FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) view.getLayoutParams();  </div><div class="line">        lp.width = (<span class="keyword">int</span>) mIconWidth;  </div><div class="line">        lp.height = (<span class="keyword">int</span>) mIconHeight;  </div><div class="line">        view.setLayoutParams(lp);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;  </div><div class="line">        setupView();  </div><div class="line">        measureDimension(widthMeasureSpec, heightMeasureSpec);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 确定view以及拖动相关参数 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setupView</span><span class="params">()</span> </span>&#123;  </div><div class="line">  </div><div class="line">        <span class="comment">//根据view的宽高确定可拖动半径的大小  </span></div><div class="line">        mSmallRadius = <span class="number">0.1f</span> * Math.min(mView.getWidth(), mView.getHeight()) * mRange;  </div><div class="line">        mBigRadius = <span class="number">1.5f</span> * mSmallRadius;  </div><div class="line">  </div><div class="line">        <span class="comment">//设置imageview的padding，不然拖动时图片边缘部分会消失  </span></div><div class="line">        <span class="keyword">int</span> padding = (<span class="keyword">int</span>) mBigRadius;  </div><div class="line">        mBigIcon.setPadding(padding, padding, padding, padding);  </div><div class="line">        mSmallIcon.setPadding(padding, padding, padding, padding);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">measureDimension</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;  </div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> sizeWidth = MeasureSpec.getSize(widthMeasureSpec);  </div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> sizeHeight = MeasureSpec.getSize(heightMeasureSpec);  </div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> modeWidth = MeasureSpec.getMode(widthMeasureSpec);  </div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> modeHeight = MeasureSpec.getMode(heightMeasureSpec);  </div><div class="line">        <span class="keyword">int</span> width = <span class="number">0</span>;  </div><div class="line">        <span class="keyword">int</span> height = <span class="number">0</span>;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getChildCount(); i++)&#123;  </div><div class="line">            <span class="keyword">final</span> View child = getChildAt(i);  </div><div class="line">            <span class="keyword">if</span> (child.getVisibility() != GONE)&#123;  </div><div class="line">                measureChild(child, widthMeasureSpec, heightMeasureSpec);  </div><div class="line">                LayoutParams lp = (LayoutParams) child.getLayoutParams();  </div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childWidth = child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;  </div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childHeight = child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;  </div><div class="line">                width += childWidth;  </div><div class="line">                height += childHeight;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        setMeasuredDimension((modeWidth == MeasureSpec.EXACTLY) ? sizeWidth : width,  </div><div class="line">                (modeHeight == MeasureSpec.EXACTLY) ? sizeHeight : height);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> childLeft;  </div><div class="line">        <span class="keyword">int</span> childTop = <span class="number">0</span>;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getChildCount(); i ++)&#123;  </div><div class="line">            <span class="keyword">final</span> View child = getChildAt(i);  </div><div class="line">            LayoutParams lp = (LayoutParams) child.getLayoutParams();  </div><div class="line">            <span class="keyword">if</span> (child.getVisibility() != GONE)&#123;  </div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childWidth = child.getMeasuredWidth();  </div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> childHeight = child.getMeasuredHeight();  </div><div class="line">                <span class="comment">//水平居中显示  </span></div><div class="line">                childLeft = (getWidth() - childWidth) / <span class="number">2</span>;  </div><div class="line">                <span class="comment">//当前子view的top  </span></div><div class="line">                childTop += lp.topMargin;  </div><div class="line">                child.layout(childLeft, childTop, childLeft + childWidth, childTop + childHeight);  </div><div class="line">                <span class="comment">//下一个view的top是当前子view的top + height + bottomMargin  </span></div><div class="line">                childTop += childHeight + lp.bottomMargin;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;  </div><div class="line">        <span class="keyword">float</span> x = event.getX();  </div><div class="line">        <span class="keyword">float</span> y = event.getY();  </div><div class="line">        <span class="keyword">switch</span> (event.getAction())&#123;  </div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:  </div><div class="line">                lastX = x;  </div><div class="line">                lastY = y;  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:  </div><div class="line">                <span class="keyword">float</span> deltaX = x - lastX;  </div><div class="line">                <span class="keyword">float</span> deltaY = y - lastY;  </div><div class="line">  </div><div class="line">                moveEvent(mBigIcon, deltaX, deltaY, mSmallRadius);  </div><div class="line">                <span class="comment">//因为可拖动大半径是小半径的1.5倍， 因此这里x,y也相应乘1.5  </span></div><div class="line">                moveEvent(mSmallIcon, <span class="number">1.5f</span> * deltaX, <span class="number">1.5f</span> * deltaY, mBigRadius);  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:  </div><div class="line">                <span class="comment">//抬起时复位  </span></div><div class="line">                mBigIcon.setX(<span class="number">0</span>);  </div><div class="line">                mBigIcon.setY(<span class="number">0</span>);  </div><div class="line">                mSmallIcon.setX(<span class="number">0</span>);  </div><div class="line">                mSmallIcon.setY(<span class="number">0</span>);  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 拖动事件 </div><div class="line">     * <span class="doctag">@param</span> view </div><div class="line">     * <span class="doctag">@param</span> deltaX </div><div class="line">     * <span class="doctag">@param</span> deltaY </div><div class="line">     * <span class="doctag">@param</span> radius </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveEvent</span><span class="params">(View view, <span class="keyword">float</span> deltaX, <span class="keyword">float</span> deltaY, <span class="keyword">float</span> radius)</span></span>&#123;  </div><div class="line">  </div><div class="line">        <span class="comment">//先计算拖动距离  </span></div><div class="line">        <span class="keyword">float</span> distance = getDistance(deltaX, deltaY);  </div><div class="line">  </div><div class="line">        <span class="comment">//拖动的方位角，atan2出来的角度是带正负号的  </span></div><div class="line">        <span class="keyword">double</span> degree = Math.atan2(deltaY, deltaX);  </div><div class="line">  </div><div class="line">        <span class="comment">//如果大于临界半径就不能再往外拖了  </span></div><div class="line">        <span class="keyword">if</span> (distance &gt; radius)&#123;  </div><div class="line">            view.setX(view.getLeft() + (<span class="keyword">float</span>) (radius * Math.cos(degree)));  </div><div class="line">            view.setY(view.getTop() + (<span class="keyword">float</span>) (radius * Math.sin(degree)));  </div><div class="line">        &#125;<span class="keyword">else</span> &#123;  </div><div class="line">            view.setX(view.getLeft() + deltaX);  </div><div class="line">            view.setY(view.getTop() + deltaY);  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dp2px</span><span class="params">(Context context, <span class="keyword">float</span> dpVal)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,  </div><div class="line">                dpVal, context.getResources().getDisplayMetrics());  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">getDistance</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">float</span> y)</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> (<span class="keyword">float</span>) Math.sqrt(x * x + y * y);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBigIcon</span><span class="params">(<span class="keyword">int</span> res)</span></span>&#123;  </div><div class="line">        mBigIcon.setImageResource(res);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSmallIcon</span><span class="params">(<span class="keyword">int</span> res)</span></span>&#123;  </div><div class="line">        mSmallIcon.setImageResource(res);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIconWidthAndHeight</span><span class="params">(<span class="keyword">float</span> width, <span class="keyword">float</span> height)</span></span>&#123;  </div><div class="line">        mIconWidth = dp2px(mContext, width);  </div><div class="line">        mIconHeight = dp2px(mContext, height);  </div><div class="line">        setWidthAndHeight(mBigIcon);  </div><div class="line">        setWidthAndHeight(mSmallIcon);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRange</span><span class="params">(<span class="keyword">float</span> range)</span></span>&#123;  </div><div class="line">        mRange = range;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>bigIconSrc</td>
<td>大图标资源</td>
</tr>
<tr>
<td>smallIconSrc</td>
<td>小图标资源</td>
</tr>
<tr>
<td>iconWidth</td>
<td>图标宽度</td>
</tr>
<tr>
<td>iconHeight</td>
<td>图标高度</td>
</tr>
<tr>
<td>range</td>
<td>可拖动范围</td>
</tr>
</tbody>
</table>
<!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=songid&auto=1&height=66"></iframe> -->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;实现的方式有很多，我说一下我的思路：我的思路比较简单，无非就是上下两层图片可拖动的范围和速度不一样呗（大图标拖动范围和速度小于小图标拖动范围和速度）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PS（以第一个消息图标为例）：大图标指的是外面的气泡图标，小图标指的是气泡里面的眼睛和嘴巴图标。切图时将一张整体图片切成了这两个图标。具体可下载Demo参考里面的图片资源。&lt;br&gt;自定义属性&lt;/p&gt;
    
    </summary>
    
      <category term="Android嫡系" scheme="http://dinson.win/categories/Android%E5%AB%A1%E7%B3%BB/"/>
    
    
      <category term="自定义VIEW" scheme="http://dinson.win/tags/%E8%87%AA%E5%AE%9A%E4%B9%89VIEW/"/>
    
  </entry>
  
  <entry>
    <title>Splash 页面三秒跳转和动态下载最新背景图</title>
    <link href="http://dinson.win/2017/06/18/17-06-18/"/>
    <id>http://dinson.win/2017/06/18/17-06-18/</id>
    <published>2017-06-18T01:16:45.000Z</published>
    <updated>2017-07-12T15:14:12.833Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>最近公司产品大大说我们需要一个动态替换的闪屏页面，like 某猫，某东一样，可以动态替换。<br>产品大大就是厉害，说一句话我们就需要实现好几个功能：</p>
<ol>
<li>创建一个冷启动后的闪屏页面（Splash 页面）</li>
<li>这个页面默认 3s 倒计时，点击倒计时按钮可以跳转并结束倒计时</li>
<li>点击图片如果有外链，则跳转应用的 web 页面用来作为活动页面（没错这点和某猫很像）</li>
<li>动态替换厉害了，我们需要在进入这个页面后去后台请求一下是否有新的图片，如果是新的图片则下载到本地，替换掉原来的图片，下次用户在进入 Splash 就会看到一个崭新的图片。</li>
</ol>
</blockquote>
<p><img src="http://ondlsj2sn.bkt.clouddn.com/FvIf_0HDYO6ORF0G4pp-wLu1Fghp.png" alt=""></p>
<a id="more"></a>
<!-- 这是　　缩进-->
<h2 id="布局实现"><a href="#布局实现" class="headerlink" title="布局实现"></a>布局实现</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">             <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">             <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/sp_bg"</span></div><div class="line">        <span class="attr">android:src</span>=<span class="string">"@mipmap/icon_splash"</span></div><div class="line">        <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:visibility</span>=<span class="string">"invisible"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"10sp"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"@color/white"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/sp_jump_btn"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/btn_splash_shape"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"60dp"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"30dp"</span></div><div class="line">        <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"20dp"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>布局文件文件相对来说还是比较简单，就需要一个 ImageView 和 Button 即可，Button 的背景是一个自定义的 shape，透明度颜色啥的,根据UI妹砸说的算就好了。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="built_in">shape</span> xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">       android:<span class="built_in">shape</span>=<span class="string">"rectangle"</span>&gt;</div><div class="line">    &lt;solid android:<span class="built_in">color</span>=<span class="string">"#99c4c4c4"</span>/&gt;</div><div class="line">    &lt;corners android:radius=<span class="string">"20dp"</span>/&gt;</div><div class="line">    &lt;<span class="built_in">stroke</span></div><div class="line">        android:<span class="built_in">width</span>=<span class="string">"0.7dp"</span></div><div class="line">        android:<span class="built_in">color</span>=<span class="string">"#7fffffff"</span>/&gt;</div><div class="line">&lt;/<span class="built_in">shape</span>&gt;</div></pre></td></tr></table></figure></p>
<h2 id="倒计时功能实现"><a href="#倒计时功能实现" class="headerlink" title="倒计时功能实现"></a>倒计时功能实现</h2><p>实现倒计时的功能方法有很多，最基本的你可以使用 Handler 来实现吧，还可以是用 Timer 吧。</p>
<p>但是由于之前写验证码倒计时的时候发现 android.os 中有一个神奇的类叫 <a href="https://developer.android.com/reference/android/os/CountDownTimer.html" target="_blank" rel="external"><code>CountDownTimer</code></a> 的类，此类神奇之处就在于你完全不需要理会那些线程交互他都给你处理好了，你只管在回调中处理时间设置跳转逻辑就好了。</p>
<p>但是有一个不足的地方就它的第一秒的倒计时有时候会不可见，所以我们将倒计时总时间设置为 3200ms 。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> CountDownTimer countDownTimer = <span class="keyword">new</span> CountDownTimer(<span class="number">3200</span>, <span class="number">1000</span>) &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onTick</span><span class="params">(<span class="keyword">long</span> millisUntilFinished)</span> </span>&#123;</div><div class="line">        mSpJumpBtn.setText(<span class="string">"跳过("</span> + millisUntilFinished / <span class="number">1000</span> + <span class="string">"s)"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onFinish</span><span class="params">()</span> </span>&#123;</div><div class="line">        mSpJumpBtn.setText(<span class="string">"跳过("</span> + <span class="number">0</span> + <span class="string">"s)"</span>);</div><div class="line">        gotoLoginOrMainActivity();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>最后需要在有闪屏页面的情况下，进入开启倒计时：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startClock</span><span class="params">()</span> </span>&#123;</div><div class="line">    mSpJumpBtn.setVisibility(View.VISIBLE);</div><div class="line">    countDownTimer.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="下载功能实现点击跳转功能实现"><a href="#下载功能实现点击跳转功能实现" class="headerlink" title="下载功能实现点击跳转功能实现"></a>下载功能实现点击跳转功能实现</h2><p>上边说了我们 APP 点击图片需要可以跳转，下面代码给出了背景点击跳转的逻辑：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_splash);</div><div class="line">    ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">    checkSDCardPermission();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@OnClick</span>(&#123;R.id.sp_bg, R.id.sp_jump_btn&#125;)</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onViewClicked</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">        <span class="keyword">case</span> R.id.sp_bg:</div><div class="line">            gotoWebActivity();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> R.id.sp_jump_btn:</div><div class="line">            gotoLoginOrMainActivity();</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跳转逻辑可以根据实际的项目需求来规定，下面的代码中 Splash 为本地序列化的 model 用来存储网络下载的闪屏页面信息，稍后会有详细的序列化过程，此刻我们只需要关注跳转逻辑：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Splash mSplash;</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">gotoWebActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mSplash != <span class="keyword">null</span> &amp;&amp; mSplash.click_url != <span class="keyword">null</span>) &#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, BannerActivity.class);</div><div class="line">        intent.putExtra(<span class="string">"url"</span>, mSplash.click_url);</div><div class="line">        intent.putExtra(<span class="string">"title"</span>, mSplash.title);</div><div class="line">        intent.putExtra(<span class="string">"fromSplash"</span>, <span class="keyword">true</span>);</div><div class="line">        intent.putExtra(<span class="string">"needShare"</span>, <span class="keyword">false</span>);</div><div class="line">        startActivity(intent);</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>机智的你可能看出来我们并没有在离开页面的时候结束掉 timer，其实我们是复写了 onDestroy 方法。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    <span class="keyword">if</span> (countDownTimer != <span class="keyword">null</span>)</div><div class="line">        countDownTimer.cancel();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其实跳转以后还有一个坑就是，从 web 页面返回的时候，因为闪屏页面是你应用的第一个页面，而跳转到 web 页面的是你 finish 掉了该页面，那么从 web 页返回的时候不做处理，用户就直接退出了 app 这样当然是不允许的。</p>
<p>所以请在 web 页面中添加以下逻辑：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//此方法是toolbar 的返回事件调用的方法 mFromSplash 为启动页面传递过来的参数</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onLeftClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mFromSplash) &#123;</div><div class="line">        gotoLoginOrMainActivity();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">super</span>.onLeftClick(view);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 此方法为系统返回键的监听</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mWebView.canGoBack()) &#123;</div><div class="line">        mWebView.goBack();</div><div class="line">    &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(mFromSplash)</span> </span>&#123;</div><div class="line">        gotoLoginOrMainActivity();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">super</span>.onBackPressed();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> <span class="comment">// 下面是跳转逻辑 </span></div><div class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">gotoLoginOrMainActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (UserCenter.getInstance().getToken() == <span class="keyword">null</span>) &#123;</div><div class="line">        gotoLoginActivity();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        gotoMainActivity();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.... gotoLoginActivity，gotoMainActivity 太长了，不给了自己写 (*^__^*) 嘻嘻……</div></pre></td></tr></table></figure></p>
<h2 id="下载网络图片以及序列化本地"><a href="#下载网络图片以及序列化本地" class="headerlink" title="下载网络图片以及序列化本地"></a>下载网络图片以及序列化本地</h2><p>上边说了我们有这样一个需求，就是如果后台的接口返回的图片与本地序列化的图片不同，我们需要将新的图片下载到本地，然后下次进入 Splash 的时候就展示的新的图片了。</p>
<p>这里你需要知道知识有下边几个：</p>
<blockquote>
<ol>
<li>java bean 序列化与反序列化的知识</li>
<li>IntentService 服务的知识</li>
<li>AsycTask 的使用</li>
<li>6.0 以上权限申请 EasyPermissions 的使用。<br>以上不熟悉的同学，看到下边的代码可能会引起适量身体不适</li>
</ol>
<p>其实这里更好的操作，我们可以将图片下载到内存中，这样并不需要申请sdk权限。这里当时实现的时候有点欠考虑了。如果您们保存图片的地址在内存中，就可以跳过这一步。</p>
</blockquote>
<h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><p>首先我们注意到已进入 Splash 页面我们就进行权限检查，因为我们需要下载最新的闪屏到本地，并取出序列化的对象，来展示对应的内容。</p>
<p>其中 checkSDCardPermission 涉及到 6.0 以上下载最新图片的逻辑，这里采用的是 官方的 EasyPermissions 来处理，关于 EasyPermissions 的使用这里就不多说了，需要了解的请移步 <a href="https://github.com/googlesamples/easypermissions" target="_blank" rel="external">EasyPermissions</a>；<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RC_PERMISSION = <span class="number">123</span>;</div><div class="line"></div><div class="line"><span class="meta">@TargetApi</span>(Build.VERSION_CODES.JELLY_BEAN)</div><div class="line"><span class="meta">@AfterPermissionGranted</span>(RC_PERMISSION)</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">checkSDCardPermission</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (EasyPermissions.hasPermissions(<span class="keyword">this</span>, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE)) &#123;</div><div class="line">        initSplashImage();</div><div class="line">        startImageDownLoad();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        EasyPermissions.requestPermissions(<span class="keyword">this</span>, <span class="string">"需要您提供【**】App 读写内存卡权限来确保应用更好的运行"</span>, RC_PERMISSION, Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>简单来说在 <code>EasyPermissions.hasPermissions</code> 的回调中我们就可以正确的做我们下载图片的工作了。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initSplashImage</span><span class="params">()</span> </span>&#123;</div><div class="line">    mSplash = getLocalSplash();  </div><div class="line">    <span class="comment">//如果取出本地序列化的对象成功 则进行图片加载和倒计时</span></div><div class="line">    <span class="keyword">if</span> (mSplash != <span class="keyword">null</span> &amp;&amp; !TextUtils.isEmpty(mSplash.savePath)) &#123;</div><div class="line">        Logcat.d(<span class="string">"SplashActivity 获取本地序列化成功"</span> + mSplash);</div><div class="line">        Glide.with(<span class="keyword">this</span>).load(mSplash.savePath).dontAnimate().into(mSpBgImage);</div><div class="line">        startClock();<span class="comment">//加载成功 开启倒计时</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 如果本地没有 直接跳转</span></div><div class="line">        mSpJumpBtn.setVisibility(View.INVISIBLE);</div><div class="line">        mSpJumpBtn.postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                gotoLoginOrMainActivity();</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="number">400</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 取出本地序列化的 Splash </span></div><div class="line"><span class="keyword">private</span> <span class="function">Splash <span class="title">getLocalSplash</span><span class="params">()</span> </span>&#123;</div><div class="line">    Splash splash = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        File serializableFile = SerializableUtils.getSerializableFile(Constants.SPLASH_PATH, Constants.SPLASH_FILE_NAME);</div><div class="line">        splash = (Splash) SerializableUtils.readObject(serializableFile);</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        Logcat.e(<span class="string">"SplashActivity 获取本地序列化闪屏失败"</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> splash;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="创建本地序列化对象-Splash-Entity"><a href="#创建本地序列化对象-Splash-Entity" class="headerlink" title="创建本地序列化对象 Splash Entity"></a>创建本地序列化对象 Splash Entity</h3><p>Splash 内容如下：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> Splash <span class="keyword">implements</span> Serializable &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final long serialVersionUID = <span class="number">7382351359868556980</span>L;<span class="comment">//这里需要写死 序列化Id</span></div><div class="line">    <span class="keyword">public</span> int id;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">String</span> burl;<span class="comment">//大图 url</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">String</span> surl;<span class="comment">//小图url</span></div><div class="line">    <span class="keyword">public</span> int <span class="keyword">type</span>;<span class="comment">//图片类型 Android 1 IOS 2</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">String</span> click_url; <span class="comment">// 点击跳转 URl</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">String</span> savePath;<span class="comment">//图片的存储地址</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">String</span> title;<span class="comment">//图片的存储地址</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> Splash(<span class="built_in">String</span> burl, <span class="built_in">String</span> surl, <span class="built_in">String</span> click_url, <span class="built_in">String</span> savePath) &#123;</div><div class="line">        <span class="keyword">this</span>.burl = burl;</div><div class="line">        <span class="keyword">this</span>.surl = surl;</div><div class="line">        <span class="keyword">this</span>.click_url = click_url;</div><div class="line">        <span class="keyword">this</span>.savePath = savePath;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">String</span> toString() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Splash&#123;"</span> +</div><div class="line">                <span class="string">"id="</span> + id +</div><div class="line">                <span class="string">", burl='"</span> + burl + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", surl='"</span> + surl + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", type="</span> + <span class="keyword">type</span> +</div><div class="line">                <span class="string">", click_url='"</span> + click_url + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", savePath='"</span> + savePath + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="序列化反序列话的工具类-SerializableUtils"><a href="#序列化反序列话的工具类-SerializableUtils" class="headerlink" title="序列化反序列话的工具类 SerializableUtils"></a>序列化反序列话的工具类 SerializableUtils</h3><p>由于项目用到序列化地方还有挺多的，所以这里封装了一个序列化工具类<code>SerializableUtils</code>：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> SerializableUtils &#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> Serializable&gt; Object readObject(<span class="keyword">File</span> <span class="keyword">file</span>) &#123;</div><div class="line">        ObjectInputStream in = <span class="keyword">null</span>;</div><div class="line">        T t = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">file</span>));</div><div class="line">            t = (T) in.readObject();</div><div class="line">        &#125; <span class="keyword">catch</span> (EOFException e) &#123;</div><div class="line">            <span class="comment">// ... this is fine</span></div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            Logcat.e(<span class="string">"e "</span> + e.getMessage());</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (in != <span class="keyword">null</span>) in.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> Serializable&gt; <span class="keyword">boolean</span> writeObject(T t, String fileName) &#123;</div><div class="line">        ObjectOutputStream out = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(fileName));</div><div class="line">            out.writeObject(t);</div><div class="line">            Logcat.d(<span class="string">"序列化成功 "</span> + t.toString());</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            Logcat.d(<span class="string">"序列化失败 "</span> + e.getMessage());</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (out != <span class="keyword">null</span>) out.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">File</span> getSerializableFile(String rootPath, String fileName) <span class="keyword">throws</span> IOException &#123;</div><div class="line">        <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(rootPath);</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">file</span>.exists()) <span class="keyword">file</span>.mkdirs();</div><div class="line">        <span class="keyword">File</span> serializable = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="keyword">file</span>, fileName);</div><div class="line">        <span class="keyword">if</span> (!serializable.exists()) serializable.createNewFile();</div><div class="line">        <span class="keyword">return</span> serializable;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>经过上边的努力我们已经完成了从本地反序列化内容，然后加载图片的工作了，剩下的需要做的就是下载最新图片的工作。</p>
<h3 id="请求接口下载最新的闪屏信息和图片"><a href="#请求接口下载最新的闪屏信息和图片" class="headerlink" title="请求接口下载最新的闪屏信息和图片"></a>请求接口下载最新的闪屏信息和图片</h3><blockquote>
<p>这里经过考虑，我决定采用服务去下载，因为这样可以少很多麻烦，也不影响程序的正常运行。但是绝不是你们要采用这样的方法，你们也可以单独写个工具类内部去开线程做这件事。</p>
<p>项目中使用开启 IntentServie 来下载图片，关于这中服务的最大的好处就是，我们不需要关注服务是否执行完任务，当他执行完<br>onHandleIntent 方法后他就自己挑用 stop 方法了。我们只需要关注下载逻辑和序列化逻辑就好。</p>
</blockquote>
<p><code>checkSDCardPermission</code> 中调用的 <code>startImageDownLoad（）</code> 方法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startImageDownLoad</span><span class="params">()</span> </span>&#123;</div><div class="line">SplashDownLoadService.startDownLoadSplashImage(<span class="keyword">this</span>, Constants.DOWNLOAD_SPLASH);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>SplashDownLoadService 内容，IntentService 在调用了 startService 后会执行 <code>onHandleIntent</code> 方法，在这方法中我们去请求服务器最新的数据即 <code>loadSplashNetDate</code>：<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> SplashDownLoadService() &#123;</div><div class="line">    super(<span class="string">"SplashDownLoad"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> static void startDownLoadSplashImage(Context context, String <span class="keyword">action</span>) &#123;</div><div class="line">    <span class="keyword">Intent</span> <span class="keyword">intent</span> = new <span class="keyword">Intent</span>(context, SplashDownLoadService.<span class="keyword">class</span>);</div><div class="line">    <span class="keyword">intent</span>.putExtra(Constants.EXTRA_DOWNLOAD, <span class="keyword">action</span>);</div><div class="line">    context.startService(<span class="keyword">intent</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line"><span class="keyword">protected</span> void onHandleIntent(@Nullable <span class="keyword">Intent</span> <span class="keyword">intent</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">intent</span> <span class="comment">!= null) &#123;</span></div><div class="line">        String <span class="keyword">action</span> = <span class="keyword">intent</span>.getStringExtra(Constants.EXTRA_DOWNLOAD);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">action</span>.equals(Constants.DOWNLOAD_SPLASH)) &#123;</div><div class="line">            loadSplashNetDate();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于是公司项目，请求方法就不给出了，但是需要讲下请求数据后如何判断是否需要执行下载任务：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attr">mScreen</span> = common.attachment.flashScreen;</div><div class="line">Splash <span class="attr">splashLocal</span> = getSplashLocal();</div><div class="line"><span class="keyword">if</span> (mScreen != <span class="literal">null</span>) &#123;</div><div class="line">   <span class="keyword">if</span> (<span class="attr">splashLocal</span> == <span class="literal">null</span>) &#123;</div><div class="line">      Logcat.d(<span class="string">"splashLocal 为空导致下载"</span>);</div><div class="line">      startDownLoadSplash(Constants.SPLASH_PATH, mScreen.burl);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isNeedDownLoad(splashLocal.savePath, mScreen.burl)) &#123;</div><div class="line">          Logcat.d(<span class="string">"isNeedDownLoad 导致下载"</span>);</div><div class="line">          startDownLoadSplash(Constants.SPLASH_PATH, mScreen.burl);</div><div class="line">   &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;//由于活动是一段时间，等活动结束后我们并不需要在进入闪屏页面，这个时候我们就需要将本地文件删除，下次在进来，本地文件为空，就会直接 finish 掉 Splash 页面，进入主页面。</div><div class="line">  <span class="keyword">if</span> (splashLocal != <span class="literal">null</span>) &#123;</div><div class="line">        File <span class="attr">splashFile</span> = SerializableUtils.getSerializableFile(Constants.SPLASH_PATH, SPLASH_FILE_NAME);</div><div class="line">         <span class="keyword">if</span> (splashFile.exists()) &#123;</div><div class="line">                 splashFile.delete();</div><div class="line">                 Logcat.d(<span class="string">"mScreen为空删除本地文件"</span>);</div><div class="line">           &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于活动是一段时间，等活动结束后我们并不需要在进入闪屏页面，这个时候我们就需要将本地文件删除，下次在进来，本地文件为空，就会直接 finish 掉 Splash 页面，进入主页面。</p>
<p><code>getSplashLocal</code> 方法即反序列话本地存储的 Splash Entity 的过程，上边已经给出这里就不细说，主要讲一下判断逻辑 <code>isNeedDownLoad</code>：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param path 本地存储的图片绝对路径</div><div class="line"> * @param url  网络获取url</div><div class="line"> * @return 比较储存的 图片名称的哈希值与 网络获取的哈希值是否相同</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isNeedDownLoad(String path, String url) &#123;</div><div class="line">    <span class="comment">// 如果本地存储的内容为空则进行下载</span></div><div class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(path)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果本地文件不存在则进行下载，这里主要防止用户误删操作</span></div><div class="line">    <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(path);</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">file</span>.exists()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果两者都存在则判断图片名称的 hashCode 是否相同，不相同则下载</span></div><div class="line">    <span class="keyword">if</span> (getImageName(path).hashCode() != getImageName(url).hashCode()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>分隔 uri 取图片名称的方法：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">String</span> getImageName(<span class="keyword">String</span> url) &#123;</div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(url)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">String</span>[] <span class="built_in">split</span> = url.<span class="built_in">split</span>(<span class="string">"/"</span>);</div><div class="line">        <span class="keyword">String</span> nameWith_ = <span class="built_in">split</span>[<span class="built_in">split</span>.length - <span class="number">1</span>];</div><div class="line">        <span class="keyword">String</span>[] split1 = nameWith_.<span class="built_in">split</span>(<span class="string">"\\."</span>);</div><div class="line">        <span class="keyword">return</span> split1[<span class="number">0</span>];</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>满足下载条件后则调用 DownLoadTask 下载。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class DownLoadUtils &#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> interface DownLoadInterFace &#123;</div><div class="line">        <span class="keyword">void</span> afterDownLoad(ArrayList&lt;<span class="keyword">String</span>&gt; savePaths);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> downLoad(<span class="keyword">String</span> savePath, DownLoadInterFace downLoadInterFace, <span class="keyword">String</span>... download) &#123;</div><div class="line">        <span class="keyword">new</span> DownLoadTask(savePath, downLoadInterFace).execute(download);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> class DownLoadTask extends AsyncTask&lt;<span class="keyword">String</span>, Integer, ArrayList&lt;<span class="keyword">String</span>&gt;&gt; &#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">String</span> mSavePath;</div><div class="line">        <span class="keyword">private</span> DownLoadInterFace mDownLoadInterFace;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> DownLoadTask(<span class="keyword">String</span> savePath, DownLoadInterFace downLoadTask) &#123;</div><div class="line">            <span class="keyword">this</span>.mSavePath = savePath;</div><div class="line">            <span class="keyword">this</span>.mDownLoadInterFace = downLoadTask;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        <span class="keyword">protected</span> ArrayList&lt;<span class="keyword">String</span>&gt; doInBackground(<span class="keyword">String</span>... params) &#123;</div><div class="line">            ArrayList&lt;<span class="keyword">String</span>&gt; names = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            <span class="built_in">for</span> (<span class="keyword">String</span> url : params) &#123;</div><div class="line">                <span class="built_in">if</span> (!TextUtils.isEmpty(url)) &#123;</div><div class="line">                    <span class="built_in">if</span> (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) &#123;</div><div class="line">                        <span class="comment">// 获得存储卡的路径</span></div><div class="line">                        FileOutputStream fos = null;</div><div class="line">                        InputStream is = null;</div><div class="line">                        <span class="built_in">try</span> &#123;</div><div class="line">                            URL downUrl = <span class="keyword">new</span> URL(url);</div><div class="line">                            <span class="comment">// 创建连接</span></div><div class="line">                            HttpURLConnection conn = (HttpURLConnection) downUrl.openConnection();</div><div class="line">                            conn.<span class="built_in">connect</span>();</div><div class="line">                            <span class="comment">// 创建输入流</span></div><div class="line">                            is = conn.getInputStream();</div><div class="line">                            <span class="built_in">File</span> file = <span class="keyword">new</span> <span class="built_in">File</span>(mSavePath);</div><div class="line">                            <span class="comment">// 判断文件目录是否存在</span></div><div class="line">                            <span class="built_in">if</span> (!file.<span class="built_in">exists</span>()) &#123;</div><div class="line">                                file.mkdirs();</div><div class="line">                            &#125;</div><div class="line"></div><div class="line">                            <span class="keyword">String</span>[] split = url.split(<span class="string">"/"</span>);</div><div class="line">                            <span class="keyword">String</span> fileName = split[split.length - <span class="number">1</span>];</div><div class="line">                            <span class="built_in">File</span> mApkFile = <span class="keyword">new</span> <span class="built_in">File</span>(mSavePath, fileName);</div><div class="line">                            names.add(mApkFile.getAbsolutePath());</div><div class="line">                            fos = <span class="keyword">new</span> FileOutputStream(mApkFile, false);</div><div class="line">                            <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">                            <span class="comment">// 缓存</span></div><div class="line">                            <span class="keyword">byte</span> buf[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">                            <span class="built_in">while</span> (true) &#123;</div><div class="line">                                <span class="keyword">int</span> <span class="built_in">read</span> = is.<span class="built_in">read</span>(buf);</div><div class="line">                                <span class="built_in">if</span> (<span class="built_in">read</span> == <span class="number">-1</span>) &#123;</div><div class="line">                                    <span class="built_in">break</span>;</div><div class="line">                                &#125;</div><div class="line">                                fos.<span class="built_in">write</span>(buf, <span class="number">0</span>, <span class="built_in">read</span>);</div><div class="line">                                count += <span class="built_in">read</span>;</div><div class="line">                                publishProgress(count);</div><div class="line">                            &#125;</div><div class="line">                            fos.<span class="built_in">flush</span>();</div><div class="line"></div><div class="line">                        &#125; <span class="built_in">catch</span> (Exception e) &#123;</div><div class="line">                            Logcat.e(e.getMessage());</div><div class="line">                        &#125; finally &#123;</div><div class="line">                            <span class="built_in">try</span> &#123;</div><div class="line">                                <span class="built_in">if</span> (is != null) &#123;</div><div class="line">                                    is.<span class="built_in">close</span>();</div><div class="line">                                &#125;</div><div class="line">                                <span class="built_in">if</span> (fos != null) &#123;</div><div class="line">                                    fos.<span class="built_in">close</span>();</div><div class="line">                                &#125;</div><div class="line">                            &#125; <span class="built_in">catch</span> (IOException e1) &#123;</div><div class="line">                                e1.printStackTrace();</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">return</span> names;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> onPostExecute(ArrayList&lt;<span class="keyword">String</span>&gt; strings) &#123;</div><div class="line">            super.onPostExecute(strings);</div><div class="line">            <span class="built_in">if</span> (mDownLoadInterFace != null) &#123;</div><div class="line">                mDownLoadInterFace.afterDownLoad(strings);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于下载完成后需要拿到文件存储地址这里写了一个 mDownLoadInterFace.afterDownLoad 的回调在 service 拿到回调后：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> afterDownLoad(ArrayList&lt;<span class="keyword">String</span>&gt; savePaths) &#123;</div><div class="line">                <span class="keyword">if</span> (savePaths.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</div><div class="line">                    Logcat.d(<span class="string">"闪屏页面下载完成"</span> + savePaths);</div><div class="line">                    <span class="keyword">if</span> (mScreen != <span class="keyword">null</span>) &#123;</div><div class="line">                        mScreen.savePath = savePaths.<span class="built_in">get</span>(<span class="number">0</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// 序列化 Splash 到本地</span></div><div class="line">                    SerializableUtils.writeObject(mScreen, Constants.SPLASH_PATH + <span class="string">"/"</span> + SPLASH_FILE_NAME);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    Logcat.d(<span class="string">"闪屏页面下载失败"</span> + savePaths);</div><div class="line">                &#125;</div><div class="line">            &#125;</div></pre></td></tr></table></figure></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>上边 bb 这么多，我们可以看出产品一句话，我们程序员可能就需要工作一天了，所以我们需要将这个常见的功能记录下，下个公司产品再说实现一个闪屏功能，然后我们就可以说 这功能可能需要 1天时间，然后等他答应了，copy 一下，其他的时间你就可以学习下 Rxjava2 ，kotlin， js 之类的了。哈哈哈哈 我真tm机智。</p>
<!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=songid&auto=1&height=66"></iframe> -->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近公司产品大大说我们需要一个动态替换的闪屏页面，like 某猫，某东一样，可以动态替换。&lt;br&gt;产品大大就是厉害，说一句话我们就需要实现好几个功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个冷启动后的闪屏页面（Splash 页面）&lt;/li&gt;
&lt;li&gt;这个页面默认 3s 倒计时，点击倒计时按钮可以跳转并结束倒计时&lt;/li&gt;
&lt;li&gt;点击图片如果有外链，则跳转应用的 web 页面用来作为活动页面（没错这点和某猫很像）&lt;/li&gt;
&lt;li&gt;动态替换厉害了，我们需要在进入这个页面后去后台请求一下是否有新的图片，如果是新的图片则下载到本地，替换掉原来的图片，下次用户在进入 Splash 就会看到一个崭新的图片。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ondlsj2sn.bkt.clouddn.com/FvIf_0HDYO6ORF0G4pp-wLu1Fghp.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android嫡系" scheme="http://dinson.win/categories/Android%E5%AB%A1%E7%B3%BB/"/>
    
    
      <category term="Splash" scheme="http://dinson.win/tags/Splash/"/>
    
  </entry>
  
  <entry>
    <title>Android中高德地图与百度地图坐标转换</title>
    <link href="http://dinson.win/2017/06/14/17-06-14/"/>
    <id>http://dinson.win/2017/06/14/17-06-14/</id>
    <published>2017-06-14T06:36:03.000Z</published>
    <updated>2017-07-12T15:14:12.833Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>项目中实验数据点取自高德地图，它是火星坐标系统（下面会有解释），而现在希望用百度地图的SDK进行开发，两套不同的规范自然需要进行转换。如何解决这个问题呢？参考了网上很多人的博客和资料。<br>最终解决此问题用到的仍然是百度的<a href="http://lbsyun.baidu.com/index.php?title=androidsdk/guide/tool#.E5.9D.90.E6.A0.87.E8.BD.AC.E6.8D.A2" target="_blank" rel="external">官方文档</a>有关于坐标转换的部分：</p>
</blockquote>
<a id="more"></a>
<!-- 这是　　缩进-->
<h2 id="坐标转换"><a href="#坐标转换" class="headerlink" title="坐标转换"></a>坐标转换</h2><blockquote>
<p>百度地图SDK采用的是百度自有的地理坐标系（bdll09），因此开发者在做位置标注的时候，需要将其他类型的坐标转换为百度坐标。相应的接口和转换方式如下：</p>
</blockquote>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将google地图、soso地图、aliyun地图、mapabc地图和amap地图// 所用坐标转换成百度坐标  </span></div><div class="line"><span class="type">CoordinateConverter</span> converter  = <span class="function"><span class="keyword">new</span> <span class="title">CoordinateConverter</span>();  </span></div><div class="line"><span class="title">converter</span>.<span class="title">from</span>(<span class="type">CoordType</span>.<span class="type">COMMON</span>);  </div><div class="line"><span class="comment">// sourceLatLng待转换坐标  </span></div><div class="line"><span class="title">converter</span>.<span class="title">coord</span>(sourceLatLng);  </div><div class="line"><span class="title">LatLng</span> <span class="title">desLatLng</span> = <span class="title">converter</span>.<span class="title">convert</span>();  </div><div class="line"> </div><div class="line"><span class="comment">// 将GPS设备采集的原始GPS坐标转换成百度坐标  </span></div><div class="line"><span class="title">CoordinateConverter</span> <span class="title">converter</span>  = <span class="title">new</span> <span class="title">CoordinateConverter</span>();  </div><div class="line"><span class="title">converter</span>.<span class="title">from</span>(<span class="type">CoordType</span>.<span class="type">GPS</span>);  </div><div class="line"><span class="comment">// sourceLatLng待转换坐标  </span></div><div class="line"><span class="title">converter</span>.<span class="title">coord</span>(sourceLatLng);  </div><div class="line"><span class="title">LatLng</span> <span class="title">desLatLng</span> = <span class="title">converter</span>.<span class="title">convert</span>();</div></pre></td></tr></table></figure>
<p>使用上面的代码就能很好地进行坐标的转化。</p>
<p>下面列举其他牛人的一些内容：</p>
<blockquote>
<p>大家都知道，美国GPS使用的是WGS84的坐标系统，以经纬度的形式来表示地球平面上的某一个位置，这应该是国际共识。但在我国，出于国家安全考虑，国内所有导航电子地图必须使用国家测绘局制定的加密坐标系统，即将一个真实的经纬度坐标加密成一个不正确的经纬度坐标，我们在业内将前者称之为地球坐标，后者称之为火星坐标，具体的说明可以参看百度百科中关于<a href="http://baike.baidu.com/item/%E7%81%AB%E6%98%9F%E5%9D%90%E6%A0%87%E7%B3%BB%E7%BB%9F" target="_blank" rel="external">火星坐标系统的解释</a>。</p>
</blockquote>
<h2 id="国内各地图API坐标系统比较"><a href="#国内各地图API坐标系统比较" class="headerlink" title="国内各地图API坐标系统比较"></a>国内各地图API坐标系统比较</h2><table>
<thead>
<tr>
<th>API</th>
<th>坐标系</th>
</tr>
</thead>
<tbody>
<tr>
<td>百度地图API</td>
<td>百度坐标</td>
</tr>
<tr>
<td>腾讯搜搜地图API</td>
<td>火星坐标</td>
</tr>
<tr>
<td>搜狐搜狗地图API</td>
<td>搜狗坐标</td>
</tr>
<tr>
<td>阿里云地图API</td>
<td>火星坐标</td>
</tr>
<tr>
<td>图吧MapBar地图API</td>
<td>图吧坐标</td>
</tr>
<tr>
<td>高德MapABC地图API</td>
<td>火星坐标</td>
</tr>
<tr>
<td>灵图51ditu地图API</td>
<td>火星坐标</td>
</tr>
</tbody>
</table>
<h2 id="下面是百度官方对百度坐标为何有偏移的解释"><a href="#下面是百度官方对百度坐标为何有偏移的解释" class="headerlink" title="下面是百度官方对百度坐标为何有偏移的解释"></a>下面是百度官方对百度坐标为何有偏移的解释</h2><blockquote>
<p>国际经纬度坐标标准为WGS-84,国内必须至少使用国测局制定的GCJ-02,对地理位置进行首次加密。百度坐标在此基础上，进行了BD-09二次加密措施,更加保护了个人隐私。百度对外接口的坐标系并不是GPS采集的真实经纬度，需要通过坐标转换接口进行转换。</p>
</blockquote>
<h2 id="火星坐标系-GCJ-02-与百度坐标系-BD-09-的转换算法"><a href="#火星坐标系-GCJ-02-与百度坐标系-BD-09-的转换算法" class="headerlink" title="火星坐标系 (GCJ-02) 与百度坐标系 (BD-09) 的转换算法"></a>火星坐标系 (GCJ-02) 与百度坐标系 (BD-09) 的转换算法</h2><p>GCJ-02(火星坐标)和BD-09（百度坐标）<br>算法代码如下，其中bd_encrypt将 GCJ-02坐标转换成 BD-09坐标， bd_decrypt反之。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bd_encrypt</span><span class="params">(<span class="keyword">double</span> gg_lat, <span class="keyword">double</span> gg_lon, <span class="keyword">double</span> &amp;bd_lat, <span class="keyword">double</span> &amp;bd_lon)</span> </span>&#123;  </div><div class="line">    <span class="keyword">double</span> x = gg_lon, y = gg_lat;  </div><div class="line">    <span class="keyword">double</span> z = <span class="built_in">sqrt</span>(x * x + y * y) + <span class="number">0.00002</span> * <span class="built_in">sin</span>(y * x_pi);  </div><div class="line">    <span class="keyword">double</span> theta = <span class="built_in">atan2</span>(y, x) + <span class="number">0.000003</span> * <span class="built_in">cos</span>(x * x_pi);  </div><div class="line">    bd_lon = z * <span class="built_in">cos</span>(theta) + <span class="number">0.0065</span>;  </div><div class="line">    bd_lat = z * <span class="built_in">sin</span>(theta) + <span class="number">0.006</span>;  </div><div class="line">&#125;  </div><div class="line">       </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bd_decrypt</span><span class="params">(<span class="keyword">double</span> bd_lat, <span class="keyword">double</span> bd_lon, <span class="keyword">double</span> &amp;gg_lat, <span class="keyword">double</span> &amp;gg_lon)</span> </span>&#123;  </div><div class="line">    <span class="keyword">double</span> x = bd_lon - <span class="number">0.0065</span>, y = bd_lat - <span class="number">0.006</span>;  </div><div class="line">    <span class="keyword">double</span> z = <span class="built_in">sqrt</span>(x * x + y * y) - <span class="number">0.00002</span> * <span class="built_in">sin</span>(y * x_pi);  </div><div class="line">    <span class="keyword">double</span> theta = <span class="built_in">atan2</span>(y, x) - <span class="number">0.000003</span> * <span class="built_in">cos</span>(x * x_pi);  </div><div class="line">    gg_lon = z * <span class="built_in">cos</span>(theta);  </div><div class="line">    gg_lat = z * <span class="built_in">sin</span>(theta);  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="地球坐标系-WGS-84-到火星坐标系-GCJ-02-的转换算法"><a href="#地球坐标系-WGS-84-到火星坐标系-GCJ-02-的转换算法" class="headerlink" title="地球坐标系 (WGS-84) 到火星坐标系 (GCJ-02) 的转换算法"></a>地球坐标系 (WGS-84) 到火星坐标系 (GCJ-02) 的转换算法</h2><p>  WGS-84到GCJ-02的转换（即GPS加偏算法是一个普通青年轻易无法接触到的“公开”的秘密。这个算法的代码在互联网上是公开的，详情请使用Google搜索”<code>wgtochina_lb</code>“ 。<br>  整理后的算法代码请参考<a href="https://on4wp7.codeplex.com/SourceControl/changeset/view/21483#353936" target="_blank" rel="external"> https://on4wp7.codeplex.com/SourceControl/changeset/view/21483#353936 </a>。知道了这个算法之后，就可以离线进行Google地图偏移校正，不必像之前那么麻烦。<br>至于GCJ-02到WGS-84的转换（即GPS纠偏），可以使用二分法。</p>
<!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=songid&auto=1&height=66"></iframe> -->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;项目中实验数据点取自高德地图，它是火星坐标系统（下面会有解释），而现在希望用百度地图的SDK进行开发，两套不同的规范自然需要进行转换。如何解决这个问题呢？参考了网上很多人的博客和资料。&lt;br&gt;最终解决此问题用到的仍然是百度的&lt;a href=&quot;http://lbsyun.baidu.com/index.php?title=androidsdk/guide/tool#.E5.9D.90.E6.A0.87.E8.BD.AC.E6.8D.A2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;有关于坐标转换的部分：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>FontMetrics以及自定义ImageSpan实现TextView图文混排时文图的居中对齐</title>
    <link href="http://dinson.win/2017/06/10/17-06-10/"/>
    <id>http://dinson.win/2017/06/10/17-06-10/</id>
    <published>2017-06-10T01:52:56.000Z</published>
    <updated>2017-07-12T15:14:12.833Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ondlsj2sn.bkt.clouddn.com/FqRj0Yf7Vco8-6vAOnkTT1NSWyJp.png" alt=""></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>在上图中整体实现的时候使用的是popUpWindow。该popupWindow整体使用相对布局，里面再用一个相对布局布局嵌套了三个TextView：”啊哦。。。。pass” 用一个TextView，中间灰色的上传头像的提示用了一个TextView，底部“我知道了” 也是一个TextView。上面的左划示意图使用above 放在 包含TextView的相对布局上方，并通过负的margin值将它下移并覆盖在包含TextView相对布局上。</p>
</blockquote>
<p>这个界面并没有什么难度，这里重点说的是第一个TextView中的图文混排，并让图片的横向中间线与该行文字的横向中间线对齐，也就是说，让文字与那个💔 图片的中间在水平方向对齐。</p>
<a id="more"></a>
<!-- 这是　　缩进-->
<h2 id="图文混排的方式有哪些？"><a href="#图文混排的方式有哪些？" class="headerlink" title="图文混排的方式有哪些？"></a>图文混排的方式有哪些？</h2><p>通常我们向TextView中插入图片实现图文混排有如下方式：</p>
<ol>
<li>使用drawableLeft等属性设置，这种方式对应的java方法是 setCompoundDrawablesWithIntrinsicBounds(leftDrawble,topDrawable,rightDrawable,bottomDrawable);</li>
<li>使用 SpannableString ,先将图片转成ImageSpan对象，然后通过setSpan插入到SpannableString 中，最后再将SpannableString通过setText设置给TextView。（SpannableString 继承自CharSquence）</li>
<li>此外，还有一种利用Html.ImageGetter格式化图片的方式。（截止目前为止，我没用过这种方式，如果想了解的话，可以参考<a href="http://wangleyiang.iteye.com/blog/1771439中的第二点）" target="_blank" rel="external">http://wangleyiang.iteye.com/blog/1771439中的第二点）</a></li>
</ol>
<h2 id="使用SpannableString-ImageSpan怎么实现图文混排？"><a href="#使用SpannableString-ImageSpan怎么实现图文混排？" class="headerlink" title="使用SpannableString+ImageSpan怎么实现图文混排？"></a>使用SpannableString+ImageSpan怎么实现图文混排？</h2><p>(1). 基本实现方式<br>效果图如下：<br><img src="http://ondlsj2sn.bkt.clouddn.com/FkIGaIysmg-9PW07xdUttjrP4k4t.png" alt=""><br>实现方式很简单，我们只需要在xml布局文件中定义一个TextView，然后在代码中获取该TextView并创建一个含有图片的SpannableString,并将该SpannableString通过setText( )设置给TextView即可。代码如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SpannableStringAndImageSpanActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_spannbalestring_imagespan);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> void init() &#123;</div><div class="line"></div><div class="line">        <span class="type">TextView</span> tv_test = (<span class="type">TextView</span>) findViewById(<span class="type">R</span>.id.tv_test);</div><div class="line">        <span class="type">SpannableString</span> spannableString = <span class="keyword">new</span> <span class="type">SpannableString</span>(<span class="string">"点击 按钮有惊喜"</span>);</div><div class="line"></div><div class="line">        <span class="type">ImageSpan</span> imageSpan = <span class="keyword">new</span> <span class="type">ImageSpan</span>(<span class="keyword">this</span>, <span class="type">R</span>.mipmap.ic_launcher);</div><div class="line"></div><div class="line">        <span class="comment">//setSpan插入内容的时候，起始位置不替换，会替换起始位置到终止位置间的内容，含终止位置。</span></div><div class="line">        <span class="comment">//Spanned.SPAN_EXCLUSIVE_EXCLUSIVE模式用来控制是否同步设置新插入的内容与start/end 位置的字体样式，此处没设置具体字体，所以可以随意设置</span></div><div class="line">        spannableString.setSpan(imageSpan, <span class="number">2</span>, <span class="number">3</span>, <span class="type">Spanned</span>.<span class="type">SPAN_INCLUSIVE_EXCLUSIVE</span>);</div><div class="line">        tv_test.setText(spannableString);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>xml布局文件中只给了一个普通的TextView，代码省略。</p>
<blockquote>
<ol>
<li><p>在上面的代码中，我们通过ImageSpan的构造方法得到了一个ImageSpan对象。该构造方法中传入的两个参数分别是上下文和图片的id。（imageSpan的构造方法还有很多）</p>
</li>
<li><p>SpannbaleString的setSpan方法中，传入的四个参数分别是 ImageSpan对象、将ImageSpan插入到的起始位置(start)、将ImageSpan插入到的终点位置(end)、是否应用字体样式。具体将ImageSpan对象插入到哪个位置，由第二个和第三个参数确定，插入的时候会覆盖从 start 位置开始（不包含该位置）到终止位置间的内容（包含该位置）。第四个参数是在你插入文本的时候使用的，用来控制新插入的文本与已有文本内容的字体样式是否一致的如果你插入的是图片，这里就可以随便选择一种模式。</p>
</li>
</ol>
</blockquote>
<p>经过上面虽然实现了图文混排，但是，细心的你可能发现了，这时候的文字和图片是基于底部对齐的（由于图片的原因，图片底部与边框有一点点的间距）。那么如果我想更改对齐方式怎么办呢？</p>
<p>(2). 更改图片与文本的对齐方式–ALIGN_BASELINE对齐</p>
<p>设置对齐方式的方法很简单，在构造ImageSpan对象的时候，传入第三个参数ALIGN_BASELINE 即可，代码如下：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ImageSpan imageSpan = <span class="keyword">new</span> <span class="type">ImageSpan</span>(<span class="built_in">this</span>, R.mipmap.ic_launcher, DynamicDrawableSpan.ALIGN_BASELINE);</div></pre></td></tr></table></figure></p>
<p>设置对齐方式为ALIGN_BASELINE后的效果图：<br><img src="http://ondlsj2sn.bkt.clouddn.com/Fi_w7QCAL-zoRiNVTE2d8zHqgeJV.png" alt=""><br>咦，看着跟上面的图没啥区别啊？那么我再把上面没设置对齐方式的图拉下来看下：<br><img src="http://ondlsj2sn.bkt.clouddn.com/FkIGaIysmg-9PW07xdUttjrP4k4t.png" alt=""><br>仔细对比下，我们发现，设置对齐方式之后，图往上跑了一点点。</p>
<blockquote>
<p><strong>其实，在ImageSpan 中，官方只给出了两中对齐方式：</strong></p>
<ol>
<li>一种是 ALIGN_BOTTOM , 表示与文字内容的底部对齐，如果在构造ImageSpan时没有传入对齐方式，那么默认就是这种底部对齐。</li>
<li>另一中就是 ALIGN_BASELINE, 表示与文字内容的基线对齐。那么，你可能会问我基线是啥？请继续往下看：</li>
</ol>
</blockquote>
<h2 id="Paint-FontMetrics-是啥？"><a href="#Paint-FontMetrics-是啥？" class="headerlink" title="Paint.FontMetrics 是啥？"></a>Paint.FontMetrics 是啥？</h2><p>(1). Paint.FontMetrics基本介绍<br>要说基线呢，我们先了解这个Paint.FontMetircs, 官方对该类的解释是：<code>Class that describes the various metrics for a font at a given text size.</code>, 意思是说，这玩意儿是绘制文本内容时存储该文本内容位置信息的一个类。这个类中有如下五个字段：<br><img src="http://ondlsj2sn.bkt.clouddn.com/Fv3daCrXBC7dgBY8PHz0xL3gKbWL.png" alt=""></p>
<p>(2). BaseLine 基线到底是啥？<br>上图中这5个字段除了leading 外，其他四个都是相对于 基线BaseLine来确定的，那么，到底啥是基线？？先来看一张图：<br><img src="http://ondlsj2sn.bkt.clouddn.com/Fm1DOwbK_ENlyHRHqkMVT0gv40k-.png" alt=""><br>如上图，<strong>标准的英文书写是基于四线三格，其中，我们书写英文的时候，都是以第三条线为基准，也就是说，基线就是这个四线三格中的第三条线！！</strong></p>
<p>(3). Paint.FontMetrics中字段的含义及示意图<br>官方文档中对这几个字段的解释很简单，但理解起来挺费劲，直接上图，<strong>图中的标注都是跑代码之后确定的，如果有不准确的地方，欢迎指正：</strong><br><img src="http://ondlsj2sn.bkt.clouddn.com/FngzbBPGHMEfeySioy3dzCoV19em.png" alt=""><br>根据上图可知：</p>
<ul>
<li><p>ascent<br>文字内容的顶部到基线的距离。即 ascent=文字内容顶部Y坐标 - 基线Y坐标。由于android中坐标系是 右下为正，所以得到的ascent实际是一个负数。 </p>
</li>
<li><p>descent<br>文字内容的底部到基线的距离。即 descent=文字内容底部Y坐标 - 基线Y坐标。</p>
</li>
<li><p>基线<br>在图中，基线的坐标用Y表示，在ImageSpan父类的 draw( ) 中，会传入一个 float Y ,就是这个基线的坐标。实际上，基线的Y坐标=文字内容中间线Y坐标+1/2 （文字内容高度）</p>
</li>
<li><p>top<br>对应图中 文字所在行的top 坐标</p>
</li>
<li><p>bottom<br>对应图中 文字所在行的bottom 坐标<br>需要注意：如果设置了行间距，且文本内容产生了换行，那么这个bottom 也会将行间距包裹。所以， 图中蓝色的文字内容中间线的Y轴坐标并不一定等于 (bottom+top)/2</p>
</li>
</ul>
<h2 id="自定义ImageSpan实现文字与图片居中对齐"><a href="#自定义ImageSpan实现文字与图片居中对齐" class="headerlink" title="自定义ImageSpan实现文字与图片居中对齐"></a>自定义ImageSpan实现文字与图片居中对齐</h2><p>好了，前面说了那么多，终于进入正题了。。。<br>在上面的2 SpannableString+ImageSpan实现图文混排中，我们已经知道官方并没有给出文字与图片居中对齐的模式,所以需要我们自定义。</p>
<p>关于自定义ImageSpan的分析，此处不再赘述，请参考<a href="http://dinson.win/2017/06/08/17-06-08/">http://dinson.win/2017/06/08/17-06-08/</a>。但是，按照该文章中的代码实现的时候，有个问题就是：如果给TextView设置了行间距，且文本产生了换行，那么就无法对齐了！！</p>
<p>那么，设置了行间距之后，该如何实现文本和图片的居中对齐呢？请看：<a href="http://dinson.win/2017/06/09/17-06-09/">http://dinson.win/2017/06/09/17-06-09/</a>, 但是，这篇文章中的实现方式没有重写 getSize( ) 方法，所以也有一个问题：文本和图片并不是在TextView的居中位置，而且如果图片高于文本的话，图片会显示不全！！如下图：<br><img src="http://ondlsj2sn.bkt.clouddn.com/FhKYKIaBNh4DkMbY0kENHb7aQ2vL.png" alt=""></p>
<h2 id="终极方案"><a href="#终极方案" class="headerlink" title="终极方案"></a>终极方案</h2><p>其实我们自定义的时候，需要做的事情是 获取文本内容的中间线以及图片的中间线，然后获取两者差值，然后在draw方法中绘制图片时将差值作为canvas.translate(x, transY) 中的transY；同时要重写 getSize( )。这样最终实现的效果是，不论是否设置行间距，不论图片大于文本还是文本大于图片，都能实现文本和图片的居中对齐！</p>
<p>看最终效果图：<br><img src="http://ondlsj2sn.bkt.clouddn.com/FgZ8DSaHUmakjUgG-EKhKTDfYlY0.png" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpannableStringAndImageSpanActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_spannbalestring_imagespan);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        TextView tv_test = (TextView) findViewById(R.id.tv_test);</div><div class="line">        SpannableString spannableString = <span class="keyword">new</span> SpannableString(<span class="string">"点击 按钮有惊喜"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//调用自定义的imageSpan,实现文字与图片的横向居中对齐</span></div><div class="line">        CustomImageSpan imageSpan = <span class="keyword">new</span> CustomImageSpan(<span class="keyword">this</span>, R.mipmap.ic_launcher, <span class="number">2</span>);</div><div class="line"></div><div class="line">        <span class="comment">//setSpan插入内容的时候，起始位置不替换，会替换起始位置到终止位置间的内容，含终止位置。</span></div><div class="line">        <span class="comment">//Spanned.SPAN_EXCLUSIVE_EXCLUSIVE模式用来控制是否同步设置新插入的内容与start/end 位置的字体样式，此处没设置具体字体，所以可以随意设置</span></div><div class="line">        spannableString.setSpan(imageSpan, <span class="number">2</span>, <span class="number">3</span>, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">        tv_test.setText(spannableString);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 自定义imageSpan实现图片与文字的居中对齐</div><div class="line">     */</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CustomImageSpan</span> <span class="keyword">extends</span> <span class="title">ImageSpan</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//自定义对齐方式--与文字中间线对齐</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> ALIGN_FONTCENTER = <span class="number">2</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CustomImageSpan</span><span class="params">(Context context, <span class="keyword">int</span> resourceId)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(context, resourceId);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CustomImageSpan</span><span class="params">(Context context, <span class="keyword">int</span> resourceId, <span class="keyword">int</span> verticalAlignment)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(context, resourceId, verticalAlignment);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">float</span> x, <span class="keyword">int</span> top, <span class="keyword">int</span> y, <span class="keyword">int</span> bottom,</span></span></div><div class="line">                         Paint paint) &#123;</div><div class="line"></div><div class="line">            <span class="comment">//draw 方法是重写的ImageSpan父类 DynamicDrawableSpan中的方法，在DynamicDrawableSpan类中，虽有getCachedDrawable()，</span></div><div class="line">            <span class="comment">// 但是私有的，不能被调用，所以调用ImageSpan中的getrawable()方法，该方法中 会根据传入的drawable ID ，获取该id对应的</span></div><div class="line">            <span class="comment">// drawable的流对象，并最终获取drawable对象</span></div><div class="line">            Drawable drawable = getDrawable(); <span class="comment">//调用imageSpan中的方法获取drawable对象</span></div><div class="line">            canvas.save();</div><div class="line"></div><div class="line">            <span class="comment">//获取画笔的文字绘制时的具体测量数据</span></div><div class="line">            Paint.FontMetricsInt fm = paint.getFontMetricsInt();</div><div class="line"></div><div class="line">            <span class="comment">//系统原有方法，默认是Bottom模式)</span></div><div class="line">            <span class="keyword">int</span> transY = bottom - drawable.getBounds().bottom;</div><div class="line">            <span class="keyword">if</span> (mVerticalAlignment == ALIGN_BASELINE) &#123;</div><div class="line">                transY -= fm.descent;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mVerticalAlignment == ALIGN_FONTCENTER) &#123;    <span class="comment">//此处加入判断， 如果是自定义的居中对齐</span></div><div class="line">                <span class="comment">//与文字的中间线对齐（这种方式不论是否设置行间距都能保障文字的中间线和图片的中间线是对齐的）</span></div><div class="line">                <span class="comment">// y+ascent得到文字内容的顶部坐标，y+descent得到文字的底部坐标，（顶部坐标+底部坐标）/2=文字内容中间线坐标</span></div><div class="line">                transY = ((y + fm.descent) + (y + fm.ascent)) / <span class="number">2</span> - drawable.getBounds().bottom / <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            canvas.translate(x, transY);</div><div class="line">            drawable.draw(canvas);</div><div class="line">            canvas.restore();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 重写getSize方法，只有重写该方法后，才能保证不论是图片大于文字还是文字大于图片，都能实现中间对齐</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(Paint paint, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end, Paint.FontMetricsInt fm)</span> </span>&#123;</div><div class="line">            Drawable d = getDrawable();</div><div class="line">            Rect rect = d.getBounds();</div><div class="line">            <span class="keyword">if</span> (fm != <span class="keyword">null</span>) &#123;</div><div class="line">                Paint.FontMetricsInt fmPaint = paint.getFontMetricsInt();</div><div class="line">                <span class="keyword">int</span> fontHeight = fmPaint.bottom - fmPaint.top;</div><div class="line">                <span class="keyword">int</span> drHeight = rect.bottom - rect.top;</div><div class="line"></div><div class="line">                <span class="keyword">int</span> top = drHeight / <span class="number">2</span> - fontHeight / <span class="number">4</span>;</div><div class="line">                <span class="keyword">int</span> bottom = drHeight / <span class="number">2</span> + fontHeight / <span class="number">4</span>;</div><div class="line"></div><div class="line">                fm.ascent = -bottom;</div><div class="line">                fm.top = -bottom;</div><div class="line">                fm.bottom = top;</div><div class="line">                fm.descent = top;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> rect.right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>xml布局文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_test"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"#fffaa3"</span></div><div class="line">        <span class="attr">android:lineSpacingExtra</span>=<span class="string">"@dimen/dp100"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"16sp"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=songid&auto=1&height=66"></iframe> -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ondlsj2sn.bkt.clouddn.com/FqRj0Yf7Vco8-6vAOnkTT1NSWyJp.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在上图中整体实现的时候使用的是popUpWindow。该popupWindow整体使用相对布局，里面再用一个相对布局布局嵌套了三个TextView：”啊哦。。。。pass” 用一个TextView，中间灰色的上传头像的提示用了一个TextView，底部“我知道了” 也是一个TextView。上面的左划示意图使用above 放在 包含TextView的相对布局上方，并通过负的margin值将它下移并覆盖在包含TextView相对布局上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个界面并没有什么难度，这里重点说的是第一个TextView中的图文混排，并让图片的横向中间线与该行文字的横向中间线对齐，也就是说，让文字与那个💔 图片的中间在水平方向对齐。&lt;/p&gt;
    
    </summary>
    
      <category term="Android嫡系" scheme="http://dinson.win/categories/Android%E5%AB%A1%E7%B3%BB/"/>
    
    
      <category term="ImageSpan" scheme="http://dinson.win/tags/ImageSpan/"/>
    
  </entry>
  
  <entry>
    <title>Android ImageSpan与TextView中的text居中对齐问题解决</title>
    <link href="http://dinson.win/2017/06/09/17-06-09/"/>
    <id>http://dinson.win/2017/06/09/17-06-09/</id>
    <published>2017-06-09T06:23:22.000Z</published>
    <updated>2017-07-12T15:14:12.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>先解释一个类：Paint.FontMetrics，它表示绘制字体时的度量标准。google的官方api文档对它的字段说明如下：</p>
</blockquote>
<p><img src="http://ondlsj2sn.bkt.clouddn.com/FmOSFSft1d6GF-jBifSop_HJ9AK5.png" alt=""><br><a id="more"></a><br><!-- 这是　　缩进--><br>ascent: 字体最上端到基线的距离，为负值。<br>descent：字体最下端到基线的距离，为正值。<br><img src="http://ondlsj2sn.bkt.clouddn.com/Frd9IRmhf317jlVEciITR76cJ7di.png" alt=""><br>中间那条线就是基线，基线到上面那条线的距离就是ascent，基线到下面那条线的距离就是descent。</p>
<p>回到主题，我们要让imagespan与text对齐，只需把imagespan放到descent线和ascent线之间的中间位置就可以了。实现方式为重写ImageSpan类的draw方法。最终实现方法如下：<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void draw(@NonNull Canvas <span class="keyword">canvas</span>, CharSequence <span class="keyword">text</span>,</div><div class="line">                 <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">float</span> x,</div><div class="line">                 <span class="keyword">int</span> top, <span class="keyword">int</span> y, <span class="keyword">int</span> bottom, @NonNull Paint paint) &#123;</div><div class="line">     <span class="comment">// image to draw</span></div><div class="line">    Drawable b = getDrawable();</div><div class="line">    <span class="comment">// font metrics of text to be replaced</span></div><div class="line">    Paint.FontMetricsInt fm = paint.getFontMetricsInt();</div><div class="line">    <span class="keyword">int</span> transY = (y + fm.descent + y + fm.ascent) / <span class="number">2</span> </div><div class="line">            - b.getBounds().bottom / <span class="number">2</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">canvas</span>.save();</div><div class="line">    <span class="keyword">canvas</span>.translate(x, transY);</div><div class="line">    b.draw(<span class="keyword">canvas</span>);</div><div class="line">    <span class="keyword">canvas</span>.restore();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>解释下形参：</p>
<ul>
<li>x，要绘制的image的左边框到textview左边框的距离。</li>
<li>y，要替换的文字的基线坐标，即基线到textview上边框的距离。</li>
<li>top，替换行的最顶部位置。</li>
<li>bottom，替换行的最底部位置。注意，textview中两行之间的行间距是属于上一行的，所以这里bottom是指行间隔的底部位置。</li>
<li>paint，画笔，包含了要绘制字体的度量信息。</li>
</ul>
<p>这几个参数含义在代码中找不到说明，写了个demo测出来的。top和bottom参数只是解释下，函数里面用不上。<br>然后解释下代码逻辑：</p>
<ul>
<li>getDrawable获取要绘制的image，getBounds是获取包裹image的矩形框尺寸；</li>
<li>y + fm.descent得到字体的descent线坐标；</li>
<li>y + fm.ascent得到字体的ascent线坐标；</li>
<li>两者相加除以2就是两条线中线的坐标；</li>
<li>b.getBounds().bottom是image的高度（试想把image放到原点），除以2即高度一半；</li>
<li>前面得到的中线坐标减image高度的一半就是image顶部要绘制的目标位置；</li>
<li>最后把目标坐标传递给canvas.translate函数就可以了，至于这个函数的理解先不管了。</li>
</ul>
<p>原理上大致就这样了，最后提供本文提出问题的最终解决方案，使用自定义的ImageSpan类，只需重写它的draw函数，代码如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CenteredImageSpan</span> <span class="keyword">extends</span> <span class="title">ImageSpan</span> &#123;</span></div><div class="line">    </div><div class="line">    <span class="keyword">public</span> CenteredImageSpan(Context context, <span class="keyword">final</span> <span class="keyword">int</span> drawableRes) &#123;</div><div class="line">        <span class="keyword">super</span>(context, drawableRes);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> draw(<span class="meta">@NonNull</span> Canvas canvas, CharSequence text,</div><div class="line">                     <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">float</span> x,</div><div class="line">                     <span class="keyword">int</span> top, <span class="keyword">int</span> y, <span class="keyword">int</span> bottom, <span class="meta">@NonNull</span> Paint paint) &#123;</div><div class="line">        <span class="comment">// image to draw</span></div><div class="line">        Drawable b = getDrawable();</div><div class="line">        <span class="comment">// font metrics of text to be replaced</span></div><div class="line">        Paint.FontMetricsInt fm = paint.getFontMetricsInt();</div><div class="line">        <span class="keyword">int</span> transY = (y + fm.descent + y + fm.ascent) / <span class="number">2</span></div><div class="line">                - b.getBounds().bottom / <span class="number">2</span>;</div><div class="line"></div><div class="line">        canvas.save();</div><div class="line">        canvas.translate(x, transY);</div><div class="line">        b.draw(canvas);</div><div class="line">        canvas.restore();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后看一下效果图：<br><img src="http://ondlsj2sn.bkt.clouddn.com/Fsat39vjbr9rrVeNeaj0vU-zXiiu.png" alt=""></p>
<!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=songid&auto=1&height=66"></iframe> -->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;先解释一个类：Paint.FontMetrics，它表示绘制字体时的度量标准。google的官方api文档对它的字段说明如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ondlsj2sn.bkt.clouddn.com/FmOSFSft1d6GF-jBifSop_HJ9AK5.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android嫡系" scheme="http://dinson.win/categories/Android%E5%AB%A1%E7%B3%BB/"/>
    
    
      <category term="ImageSpan" scheme="http://dinson.win/tags/ImageSpan/"/>
    
  </entry>
  
  <entry>
    <title>Android ImageSpan的图文居中对齐</title>
    <link href="http://dinson.win/2017/06/08/17-06-08/"/>
    <id>http://dinson.win/2017/06/08/17-06-08/</id>
    <published>2017-06-08T04:52:56.000Z</published>
    <updated>2017-07-12T15:14:12.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>ImageSpan类为TextView提供了图文混排的形式，在ImageSpan的构造函数中提供了一个参数 int verticalAlignment，表示垂直对齐方式，有两个参数 ALIGN_BASELINE、ALIGN_BOTTOM 分别为顶部、底部对齐，但是没有居中对齐的参数（其实会找到这篇文章的人应该知道这点了。。）<br>下面说说我的实现思路及方法</p>
</blockquote>
<a id="more"></a>
<!-- 这是　　缩进-->
<ul>
<li>根据构造函数verticalAlignment参数找到影响对齐方式的代码<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public ImageSpan(<span class="built_in">Context</span> <span class="built_in">context</span>, int resourceId, int verticalAlignment) &#123;  </div><div class="line">    super(verticalAlignment)<span class="comment">;  </span></div><div class="line">    mContext = <span class="built_in">context</span><span class="comment">;  </span></div><div class="line">    mResourceId = resourceId<span class="comment">;  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>查看源码可知对齐参数是在ImageSpan的父类DynamicDrawableSpan中设置的</p>
<ul>
<li>查看DynamicDrawableSpan类源码找出对齐方式的代码，在源码中能看到两个方法getSize与draw</li>
<li><p>getSize方法，返回一个Int含义为图片的宽度，但是我们看源码发现里面干的事情不仅是返回宽度还设置了文字的ascent、descent的位置</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> getSize(Paint paint, CharSequence <span class="built_in">text</span>, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>, Paint.FontMetricsInt fm) &#123;  </div><div class="line">    Drawable d = getCachedDrawable();  </div><div class="line">    Rect <span class="built_in">rect</span> = d.getBounds();  </div><div class="line">  </div><div class="line">    <span class="built_in">if</span> (fm != null) &#123;  </div><div class="line"> fm.ascent = -<span class="built_in">rect</span>.bottom;   </div><div class="line">        fm.descent = <span class="number">0</span>;   </div><div class="line">  </div><div class="line">        fm.top = fm.ascent;  </div><div class="line">        fm.bottom = <span class="number">0</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="built_in">return</span> <span class="built_in">rect</span>.right;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>draw方法，根据对齐参数绘制图片。所以第一步就是修改draw方法来实现居中</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span>(Canvas canvas, CharSequence <span class="built_in">text</span>, <span class="built_in">int</span> start, <span class="built_in">int</span> end, <span class="built_in">float</span> x, <span class="built_in">int</span> top, <span class="built_in">int</span> y, <span class="built_in">int</span> bottom, Paint paint) &#123;  </div><div class="line">    Drawable b = getCachedDrawable();  </div><div class="line">    canvas.<span class="built_in">save</span>();  </div><div class="line">      </div><div class="line">    <span class="built_in">int</span> transY = bottom - b.getBounds().bottom;  </div><div class="line">    <span class="keyword">if</span> (mVerticalAlignment == ALIGN_BASELINE) &#123;  </div><div class="line">        transY -= paint.getFontMetricsInt().descent;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    canvas.<span class="built_in">translate</span>(x, transY);  </div><div class="line">    b.<span class="title">draw</span>(canvas);  </div><div class="line">    canvas.restore();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>修改draw方法</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span>(Canvas canvas, CharSequence <span class="built_in">text</span>, <span class="built_in">int</span> start, <span class="built_in">int</span> end,  </div><div class="line">        <span class="built_in">float</span> x, <span class="built_in">int</span> top, <span class="built_in">int</span> y, <span class="built_in">int</span> bottom, Paint paint) &#123;  </div><div class="line">       Drawable b = getDrawable();  </div><div class="line">       canvas.<span class="built_in">save</span>();  </div><div class="line">       <span class="built_in">int</span> transY = <span class="number">0</span>;  </div><div class="line">       <span class="comment">//获得将要显示的文本高度-图片高度除2等居中位置+top(换行情况)  </span></div><div class="line">       transY = ((bottom-top) - b.getBounds().bottom)/<span class="number">2</span>+top;  </div><div class="line">       <span class="comment">//偏移画布后开始绘制  </span></div><div class="line">       canvas.<span class="built_in">translate</span>(x, transY);  </div><div class="line">       b.<span class="title">draw</span>(canvas);  </div><div class="line">       canvas.restore();  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>这时候如果运行调试的话会发现完全没效果。。为啥呢，别急还有一个重要方法没修改，那就是getSize方法，我们还需要修过getSize方法中对文字ascent、descent等参数的设置才行</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> getSize(Paint paint, CharSequence <span class="built_in">text</span>, <span class="keyword">int</span> start, <span class="keyword">int</span> <span class="built_in">end</span>,  </div><div class="line">        FontMetricsInt fm) &#123;  </div><div class="line">       Drawable d = getDrawable();  </div><div class="line">       Rect <span class="built_in">rect</span> = d.getBounds();  </div><div class="line">       <span class="built_in">if</span> (fm != null) &#123;  </div><div class="line">        FontMetricsInt fmPaint=paint.getFontMetricsInt();  </div><div class="line">               <span class="comment">//获得文字、图片高度  </span></div><div class="line">        <span class="keyword">int</span> fontHeight = fmPaint.bottom - fmPaint.top;  </div><div class="line">        <span class="keyword">int</span> drHeight=<span class="built_in">rect</span>.bottom-<span class="built_in">rect</span>.top;  </div><div class="line">        <span class="comment">//对于这段算法LZ表示也不解，正常逻辑应该同draw中的计算一样但是显示的结果不居中，经过几次调试之后才发现这么算才会居中  </span></div><div class="line">        <span class="keyword">int</span> top= drHeight/<span class="number">2</span> - fontHeight/<span class="number">4</span>;  </div><div class="line">        <span class="keyword">int</span> bottom=drHeight/<span class="number">2</span> + fontHeight/<span class="number">4</span>;  </div><div class="line">          </div><div class="line">        fm.ascent=-bottom;  </div><div class="line">        fm.top=-bottom;  </div><div class="line">        fm.bottom=top;  </div><div class="line">        fm.descent=top;  </div><div class="line">       &#125;  </div><div class="line">       <span class="built_in">return</span> <span class="built_in">rect</span>.right;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>到这就完成了图文居中的功能，效果图<br><img src="http://ondlsj2sn.bkt.clouddn.com/FkstESEnsZgNDbNxPiT5-pPeoYYO.png" alt=""></p>
</li>
</ul>
<h2 id="完整源码"><a href="#完整源码" class="headerlink" title="完整源码"></a>完整源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;  </div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;  </div><div class="line"><span class="keyword">import</span> android.graphics.Paint;  </div><div class="line"><span class="keyword">import</span> android.graphics.Paint.FontMetricsInt;  </div><div class="line"><span class="keyword">import</span> android.graphics.Rect;  </div><div class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;  </div><div class="line"><span class="keyword">import</span> android.os.Bundle;  </div><div class="line"><span class="keyword">import</span> android.support.v7.app.ActionBarActivity;  </div><div class="line"><span class="keyword">import</span> android.text.SpannableString;  </div><div class="line"><span class="keyword">import</span> android.text.Spanned;  </div><div class="line"><span class="keyword">import</span> android.text.style.ImageSpan;  </div><div class="line"><span class="keyword">import</span> android.widget.TextView;  </div><div class="line">  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">ActionBarActivity</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        TextView textView=<span class="keyword">new</span> TextView(<span class="keyword">this</span>);  </div><div class="line">        setContentView(textView);  </div><div class="line">        SpannableString showString = <span class="keyword">new</span> SpannableString(<span class="string">"1234533333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333336"</span>);  </div><div class="line">        MyIm imageSpan=<span class="keyword">new</span> MyIm(<span class="keyword">this</span>, R.drawable.ic_launcher);  </div><div class="line">        MyIm imageSpan2=<span class="keyword">new</span> MyIm(<span class="keyword">this</span>, R.drawable.ic_launcher);  </div><div class="line">        MyIm imageSpan21=<span class="keyword">new</span> MyIm(<span class="keyword">this</span>, R.drawable.ic_launcher);  </div><div class="line">        showString.setSpan(imageSpan, <span class="number">2</span>, <span class="number">3</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  </div><div class="line">        showString.setSpan(imageSpan2, <span class="number">27</span>, <span class="number">30</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  </div><div class="line">        showString.setSpan(imageSpan21, <span class="number">77</span>, <span class="number">78</span>, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  </div><div class="line">        textView.setText(showString);  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIm</span> <span class="keyword">extends</span> <span class="title">ImageSpan</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyIm</span><span class="params">(Context arg0,<span class="keyword">int</span> arg1)</span> </span>&#123;  </div><div class="line">            <span class="keyword">super</span>(arg0, arg1);  </div><div class="line">        &#125;  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(Paint paint, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end,  </span></span></div><div class="line">                FontMetricsInt fm) &#123;  </div><div class="line">            Drawable d = getDrawable();  </div><div class="line">            Rect rect = d.getBounds();  </div><div class="line">            <span class="keyword">if</span> (fm != <span class="keyword">null</span>) &#123;  </div><div class="line">                FontMetricsInt fmPaint=paint.getFontMetricsInt();  </div><div class="line">                <span class="keyword">int</span> fontHeight = fmPaint.bottom - fmPaint.top;  </div><div class="line">                <span class="keyword">int</span> drHeight=rect.bottom-rect.top;  </div><div class="line">                  </div><div class="line">                <span class="keyword">int</span> top= drHeight/<span class="number">2</span> - fontHeight/<span class="number">4</span>;  </div><div class="line">                <span class="keyword">int</span> bottom=drHeight/<span class="number">2</span> + fontHeight/<span class="number">4</span>;  </div><div class="line">                  </div><div class="line">                fm.ascent=-bottom;  </div><div class="line">                fm.top=-bottom;  </div><div class="line">                fm.bottom=top;  </div><div class="line">                fm.descent=top;  </div><div class="line">            &#125;  </div><div class="line">            <span class="keyword">return</span> rect.right;  </div><div class="line">        &#125;  </div><div class="line">          </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> end,  </span></span></div><div class="line">                <span class="keyword">float</span> x, <span class="keyword">int</span> top, <span class="keyword">int</span> y, <span class="keyword">int</span> bottom, Paint paint) &#123;  </div><div class="line">            Drawable b = getDrawable();  </div><div class="line">            canvas.save();  </div><div class="line">            <span class="keyword">int</span> transY = <span class="number">0</span>;  </div><div class="line">            transY = ((bottom-top) - b.getBounds().bottom)/<span class="number">2</span>+top;  </div><div class="line">            canvas.translate(x, transY);  </div><div class="line">            b.draw(canvas);  </div><div class="line">            canvas.restore();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=songid&auto=1&height=66"></iframe> -->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ImageSpan类为TextView提供了图文混排的形式，在ImageSpan的构造函数中提供了一个参数 int verticalAlignment，表示垂直对齐方式，有两个参数 ALIGN_BASELINE、ALIGN_BOTTOM 分别为顶部、底部对齐，但是没有居中对齐的参数（其实会找到这篇文章的人应该知道这点了。。）&lt;br&gt;下面说说我的实现思路及方法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android嫡系" scheme="http://dinson.win/categories/Android%E5%AB%A1%E7%B3%BB/"/>
    
    
      <category term="ImageSpan" scheme="http://dinson.win/tags/ImageSpan/"/>
    
  </entry>
  
  <entry>
    <title>ViewPager系列--仿掌上英雄联盟皮肤浏览效果</title>
    <link href="http://dinson.win/2017/06/05/17-06-05/"/>
    <id>http://dinson.win/2017/06/05/17-06-05/</id>
    <published>2017-06-05T02:52:22.000Z</published>
    <updated>2017-07-12T15:14:12.830Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ondlsj2sn.bkt.clouddn.com/FmjGWAiWMMiAjxY_Vm62n0eG1YHV.png" alt=""></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>这几天英雄联盟搞活动，抽到一个安妮限定皮肤，可把我乐坏了，于是马上就登陆掌盟客户端查看皮肤。进入皮肤浏览界面之后，觉得这个皮肤浏览的效果还真不错，如下图：</p>
</blockquote>
<a id="more"></a>
<!-- 这是　　缩进-->
<p><img src="http://ondlsj2sn.bkt.clouddn.com/FjjJDYCF8cKiXXWmFMl3f9DOBimg.png" alt=""></p>
<h2 id="思路与分析"><a href="#思路与分析" class="headerlink" title="思路与分析"></a>思路与分析</h2><p>在开始写代码之前，我们还是来分析一下界面元素，和该用什么技术来实现各个部分。</p>
<ol>
<li>首先是整个界面的滑动，我们肯定一眼就能看出来，用ViewPager 实现。</li>
<li>ViewPager 滑动时有放大缩小的动画，用ViewPager.Transfoemer 轻松搞定。</li>
<li>ViewPager 显示多页（展示前后页面的部分）。</li>
<li>界面图片的形状，旋转90度的等腰梯形。这个只能用自定义View来实现了。</li>
<li>整个界面的背景为当前显示图片的高斯模糊图。</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>上面分析了界面的构成元素，那么现在我们就来看一下具体的实现。</p>
<h3 id="1-ViewPager-展示多页"><a href="#1-ViewPager-展示多页" class="headerlink" title="1. ViewPager 展示多页"></a>1. ViewPager 展示多页</h3><p>这个问题在我们前一篇文章已经讲过，这里不再重复，就是用ViewGroup 的 clipChildren 属性，值为false。也就是在整个布局的跟节点添加下面一行代码：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">android:</span>clipChildren=<span class="string">"false"</span></div></pre></td></tr></table></figure></p>
<p>然后，ViewPager需要设置左右Margin,也就是前后页显示的位置<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;android<span class="selector-class">.support</span><span class="selector-class">.v4</span><span class="selector-class">.view</span><span class="selector-class">.ViewPager</span></div><div class="line">           android:id=<span class="string">"@+id/my_viewpager"</span></div><div class="line">           android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">           android:layout_height=<span class="string">"300dp"</span></div><div class="line">           android:clipChildren=<span class="string">"false"</span></div><div class="line">           android:layout_marginLeft=<span class="string">"50dp"</span></div><div class="line">           android:layout_marginRight=<span class="string">"50dp"</span></div><div class="line">           android:layout_centerInParent=<span class="string">"true"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>从上面的效果图可以看到，当前页和前后页的部分是有间距的，我们只需要在Item布局中左右添加margin属性：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">android:</span>layout_marginLeft=<span class="string">"30dp"</span></div><div class="line"><span class="symbol">android:</span>layout_marginRight=<span class="string">"30dp"</span></div></pre></td></tr></table></figure></p>
<p>好了，这样ViewPager就能显示多页，并且当前页和前后页之间还有一定的间距。</p>
<h3 id="2-ViewPager-切换时的动画"><a href="#2-ViewPager-切换时的动画" class="headerlink" title="2. ViewPager 切换时的动画"></a>2. ViewPager 切换时的动画</h3><p>ViewPager 切换时的自定义动画用<code>ViewPager.PageTransformer</code>, 这个在上一篇文章也讲过，没看过的倒回去看一下。这里不细讲了，直接上代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomViewPagerTransformer</span> <span class="keyword">implements</span> <span class="title">ViewPager</span>.<span class="title">PageTransformer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxTranslateOffsetX;</div><div class="line">    <span class="keyword">private</span> ViewPager viewPager;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_SCALE = <span class="number">0.75f</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomViewPagerTransformer</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.maxTranslateOffsetX = dp2px(context, <span class="number">160</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transformPage</span><span class="params">(View view, <span class="keyword">float</span> position)</span> </span>&#123;</div><div class="line">        <span class="comment">// position的可能性的值有，其实从官方示例的注释就能看出：</span></div><div class="line">        <span class="comment">//[-Infinity,-1)  已经看不到了</span></div><div class="line">        <span class="comment">// (1,+Infinity] 已经看不到了</span></div><div class="line">        <span class="comment">// [-1,1]</span></div><div class="line">        <span class="comment">// 而我们从写PageTransformer，操作View动画的重点区间就在[-1,1]</span></div><div class="line">        <span class="keyword">if</span> (viewPager == <span class="keyword">null</span>) &#123;</div><div class="line">            viewPager = (ViewPager) view.getParent();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> leftInScreen = view.getLeft() - viewPager.getScrollX();</div><div class="line">        <span class="keyword">int</span> centerXInViewPager = leftInScreen + view.getMeasuredWidth() / <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> offsetX = centerXInViewPager - viewPager.getMeasuredWidth() / <span class="number">2</span>;</div><div class="line">        <span class="keyword">float</span> offsetRate = (<span class="keyword">float</span>) offsetX * <span class="number">0.38f</span> / viewPager.getMeasuredWidth();</div><div class="line">        <span class="keyword">float</span> scaleFactor = <span class="number">1</span> - Math.abs(offsetRate);</div><div class="line">        <span class="keyword">if</span> (scaleFactor &gt; <span class="number">0</span>) &#123;</div><div class="line">            view.setScaleX(scaleFactor);</div><div class="line">            view.setScaleY(scaleFactor);</div><div class="line">            view.setTranslationX(-maxTranslateOffsetX * offsetRate);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * dp和像素转换</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dp2px</span><span class="params">(Context context, <span class="keyword">float</span> dipValue)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> m = context.getResources().getDisplayMetrics().density;</div><div class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (dipValue * m + <span class="number">0.5f</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-自定义多边形ImageView"><a href="#3-自定义多边形ImageView" class="headerlink" title="3. 自定义多边形ImageView"></a>3. 自定义多边形ImageView</h3><p>多边形ImageView，我们通过自定义的方式实现，继承ImageView, 然后重写onDraw()方法。这里实现这种不规则的多边形View有两种方法。</p>
<ul>
<li>使用PorterDuffXfermode，这种方法需要你给一个蒙板图片，在onDraw 方法中，先绘制蒙板图片，然后设置Paint的setXfermode 为PorterDuff.Mode.SRC_IN,再绘制要显示的图片，这样就能把显示的图片裁剪成蒙板的形状。</li>
<li>使用canvas的clipPath() 方法，我们用Path 来绘制多边形，然后clipPath() 将画布裁剪成绘制的形状，然后在绘制要显示的图片。</li>
</ul>
<p>关于PorterDuffXfermode 的更多用法，有兴趣的可以去google 一下，网上有很多相关的文章。<strong>这里我用的是两种方法的结合，先用clipPath得到一个需要形状的bitmap，然后使用PorterDuffXfermode。</strong>自定义View代码如下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolygonView</span> <span class="keyword">extends</span> <span class="title">AppCompatImageView</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHeight = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Paint mPaint;</div><div class="line">    <span class="keyword">private</span> Paint mBorderPaint;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> PorterDuffXfermode mXfermode;</div><div class="line">    <span class="keyword">private</span> Bitmap mBitmap;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBorderWidth;</div><div class="line">    <span class="keyword">private</span> Bitmap mMaskBitmap;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PolygonView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PolygonView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PolygonView</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">        mBorderWidth = DisplayUtils.dpToPx(<span class="number">4</span>);</div><div class="line">        setLayerType(View.LAYER_TYPE_SOFTWARE, <span class="keyword">null</span>);<span class="comment">// 关闭硬件加速加速</span></div><div class="line">        mPaint = <span class="keyword">new</span> Paint();</div><div class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mPaint.setDither(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        mBorderPaint = <span class="keyword">new</span> Paint();</div><div class="line">        mBorderPaint.setColor(Color.WHITE);</div><div class="line">        mBorderPaint.setStyle(Paint.Style.FILL_AND_STROKE);</div><div class="line">        mBorderPaint.setAntiAlias(<span class="keyword">true</span>);<span class="comment">//抗锯齿</span></div><div class="line">        mBorderPaint.setDither(<span class="keyword">true</span>);<span class="comment">//防抖动</span></div><div class="line"></div><div class="line">        mXfermode = <span class="keyword">new</span> PorterDuffXfermode(PorterDuff.Mode.SRC_IN);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        mWidth = getMeasuredWidth();</div><div class="line">        mHeight = getMeasuredHeight();</div><div class="line"></div><div class="line">        mMaskBitmap = getMaskBitmap();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setImageResource</span><span class="params">(@DrawableRes <span class="keyword">int</span> resId)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setImageResource(resId);</div><div class="line">        mBitmap = BitmapFactory.decodeResource(getResources(),resId);</div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line"></div><div class="line">        canvas.save();</div><div class="line"></div><div class="line">        canvas.drawBitmap(mMaskBitmap,<span class="number">0</span>,<span class="number">0</span>,mBorderPaint);</div><div class="line">        mPaint.setXfermode(mXfermode);</div><div class="line"></div><div class="line">        Bitmap bitmap = getCenterCropBitmap(mBitmap,mWidth,mHeight);</div><div class="line">        canvas.drawBitmap(bitmap,<span class="number">0</span>,<span class="number">0</span>,mPaint);</div><div class="line">        mPaint.setXfermode(<span class="keyword">null</span>);</div><div class="line">        canvas.restore();</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function">Bitmap <span class="title">getMaskBitmap</span><span class="params">()</span></span>&#123;</div><div class="line">        Bitmap bm = Bitmap.createBitmap(mWidth, mHeight, Bitmap.Config.ARGB_8888);</div><div class="line">        Canvas c = <span class="keyword">new</span> Canvas(bm);</div><div class="line"></div><div class="line">        Point point1 = <span class="keyword">new</span> Point(<span class="number">0</span>,<span class="number">30</span>);</div><div class="line">        Point point2 = <span class="keyword">new</span> Point(mWidth,<span class="number">0</span>);</div><div class="line">        Point point3 = <span class="keyword">new</span> Point(mWidth,mHeight);</div><div class="line">        Point point4 = <span class="keyword">new</span> Point(<span class="number">0</span>,mHeight - <span class="number">30</span>);</div><div class="line"></div><div class="line">        Path path = <span class="keyword">new</span> Path();</div><div class="line">        path.moveTo(point1.x,point1.y);</div><div class="line">        path.lineTo(point2.x,point2.y);</div><div class="line">        path.lineTo(point3.x,point3.y);</div><div class="line">        path.lineTo(point4.x,point4.y);</div><div class="line">        path.close();</div><div class="line"></div><div class="line">        c.drawPath(path,mBorderPaint);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> bm;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 对原图进行等比裁剪</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="function">Bitmap <span class="title">scaleImage</span><span class="params">(Bitmap bitmap)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(bitmap!=<span class="keyword">null</span>)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> widht=bitmap.getWidth();</div><div class="line">            <span class="keyword">int</span> height=bitmap.getHeight();</div><div class="line"></div><div class="line">            <span class="keyword">int</span> new_width=<span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> new_height=<span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(widht!=height)&#123;</div><div class="line">                <span class="keyword">if</span>(widht&gt;height)&#123;</div><div class="line">                    new_height=mHeight;</div><div class="line">                    new_width=widht*new_height/height;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    new_width=mWidth;</div><div class="line">                    new_height=height*new_width/widht;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                new_width=mWidth;</div><div class="line">                new_height=mHeight;</div><div class="line">            &#125;</div><div class="line">            <span class="function"><span class="keyword">return</span> Bitmap.<span class="title">createScaledBitmap</span><span class="params">(bitmap, new_width, new_height, <span class="keyword">true</span>)</span></span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function">Bitmap <span class="title">getCenterCropBitmap</span><span class="params">(Bitmap src, <span class="keyword">float</span> rectWidth, <span class="keyword">float</span> rectHeight)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">float</span> srcRatio = ((<span class="keyword">float</span>) src.getWidth()) / src.getHeight();</div><div class="line">        <span class="keyword">float</span> rectRadio = rectWidth / rectHeight;</div><div class="line">        <span class="keyword">if</span> (srcRatio &lt; rectRadio) &#123;</div><div class="line">            <span class="keyword">return</span> Bitmap.createScaledBitmap(src, (<span class="keyword">int</span>)rectWidth, (<span class="keyword">int</span>)((rectWidth / src.getWidth()) * src.getHeight()), <span class="keyword">false</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> Bitmap.createScaledBitmap(src, (<span class="keyword">int</span>)((rectHeight / src.getHeight()) * src.getWidth()), (<span class="keyword">int</span>)rectHeight, <span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>建议：这里使用clipPath方法的时候，会出现很多锯齿，即使Paint 设置了抗锯齿也没啥用，所以建议使用PorterDuffXfermode 方法。要实现类似的效果，最好是找设计师要一张蒙板形状图。在用PorterDuffXfermode实现，简单效果好。</p>
</blockquote>
<p>通过上面的3步，其实整个 界面的效果差不多已经出来了，最后我们需要做的就是高斯模糊背景图。</p>
<h3 id="4-背景图高斯模"><a href="#4-背景图高斯模" class="headerlink" title="4. 背景图高斯模"></a>4. 背景图高斯模</h3><p>背景的高斯模糊就很简单了，前面我也有写过关于几种高斯模糊方法的对比（Android 图片高斯模糊解决方案），最后封装了一个方便的库(<a href="https://github.com/pinguo-zhouwei/EasyBlur)，只需要简单几行代码就行。我们在ViewPager的onPageSelect方法中，获取显示的图片，进行高斯模糊处理。" target="_blank" rel="external">https://github.com/pinguo-zhouwei/EasyBlur)，只需要简单几行代码就行。我们在ViewPager的onPageSelect方法中，获取显示的图片，进行高斯模糊处理。</a><br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onPageSelected(int position) &#123;</div><div class="line">    <span class="keyword">Bitmap </span>source = <span class="keyword">BitmapFactory.decodeResource(getResources(),VPAdapter.RES[position]);</span></div><div class="line">    <span class="keyword">Bitmap </span><span class="keyword">bitmap </span>= EasyBlur.with(getApplicationContext())</div><div class="line">            .<span class="keyword">bitmap(source)</span></div><div class="line">            .radius(<span class="number">20</span>)</div><div class="line">            .<span class="keyword">blur();</span></div><div class="line">    mImageBg.setImageBitmap(<span class="keyword">bitmap);</span></div><div class="line"></div><div class="line">    mDesc.setText(mVPAdapter.getPageTitle(position))<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="完整的布局文件和Activity代码"><a href="#完整的布局文件和Activity代码" class="headerlink" title="完整的布局文件和Activity代码"></a>完整的布局文件和Activity代码</h3><p>activity布局文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">                <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">                <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">                <span class="attr">android:clipChildren</span>=<span class="string">"false"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">       <span class="comment">&lt;!-- 高斯模糊背景--&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">           <span class="attr">android:id</span>=<span class="string">"@+id/activity_bg"</span></div><div class="line">           <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">           <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">           <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span>/&gt;</div><div class="line"></div><div class="line">       <span class="comment">&lt;!-- Toolbar--&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">           <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">           <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">           <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span>&gt;</div><div class="line"></div><div class="line">              <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                  <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                  <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                  <span class="attr">android:src</span>=<span class="string">"@drawable/navigation_back_white"</span></div><div class="line">                  <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">                  <span class="attr">android:layout_marginLeft</span>=<span class="string">"15dp"</span>/&gt;</div><div class="line"></div><div class="line">              <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">                  <span class="attr">android:id</span>=<span class="string">"@+id/title_name"</span></div><div class="line">                  <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                  <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                  <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">                  <span class="attr">android:textSize</span>=<span class="string">"18sp"</span></div><div class="line">                  <span class="attr">android:textColor</span>=<span class="string">"@android:color/white"</span>/&gt;</div><div class="line">       <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line">       <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">           <span class="attr">android:id</span>=<span class="string">"@+id/my_viewpager"</span></div><div class="line">           <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">           <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span></div><div class="line">           <span class="attr">android:clipChildren</span>=<span class="string">"false"</span></div><div class="line">           <span class="attr">android:layout_marginLeft</span>=<span class="string">"50dp"</span></div><div class="line">           <span class="attr">android:layout_marginRight</span>=<span class="string">"50dp"</span></div><div class="line">           <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span>/&gt;</div><div class="line"></div><div class="line">       <span class="tag">&lt;<span class="name">com.zhouwei.indicatorview.CircleIndicatorView</span></span></div><div class="line">           <span class="attr">android:id</span>=<span class="string">"@+id/indicatorView"</span></div><div class="line">           <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">           <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">           <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">           <span class="attr">android:layout_marginBottom</span>=<span class="string">"60dp"</span></div><div class="line">           <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">           <span class="attr">app:indicatorSelectColor</span>=<span class="string">"#C79EFE"</span></div><div class="line">           <span class="attr">app:indicatorSpace</span>=<span class="string">"5dp"</span></div><div class="line">           <span class="attr">app:indicatorRadius</span>=<span class="string">"8dp"</span></div><div class="line">           <span class="attr">app:enableIndicatorSwitch</span>=<span class="string">"false"</span></div><div class="line">           <span class="attr">app:indicatorTextColor</span>=<span class="string">"@android:color/white"</span></div><div class="line">           <span class="attr">app:fill_mode</span>=<span class="string">"number"</span></div><div class="line">           <span class="attr">app:indicatorColor</span>=<span class="string">"#C79EFE"</span>/&gt;</div><div class="line"></div><div class="line">       <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">           <span class="attr">android:id</span>=<span class="string">"@+id/skin_desc"</span></div><div class="line">           <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">           <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">           <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">           <span class="attr">android:layout_below</span>=<span class="string">"@+id/my_viewpager"</span></div><div class="line">           <span class="attr">android:layout_marginTop</span>=<span class="string">"20dp"</span></div><div class="line">           <span class="attr">android:textColor</span>=<span class="string">"@android:color/white"</span></div><div class="line">           <span class="attr">android:textSize</span>=<span class="string">"18sp"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Activity代码：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPagerActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ViewPager mViewPager;</div><div class="line">    <span class="keyword">private</span> VPAdapter mVPAdapter;</div><div class="line">    <span class="keyword">private</span> ImageView mImageBg;</div><div class="line">    <span class="keyword">private</span> CircleIndicatorView mCircleIndicatorView;</div><div class="line">    <span class="keyword">private</span> TextView mTitle,mDesc;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.viewpager_transform_layout);</div><div class="line">        View view = findViewById(R.id.toolbar);</div><div class="line">        StatusBarUtils.setTranslucentImageHeader(<span class="keyword">this</span>, <span class="number">0</span>,view);</div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        mViewPager = (ViewPager) findViewById(R.id.my_viewpager);</div><div class="line">        mImageBg = (ImageView) findViewById(R.id.activity_bg);</div><div class="line">        mCircleIndicatorView = (CircleIndicatorView) findViewById(R.id.indicatorView);</div><div class="line">        mTitle = (TextView) findViewById(R.id.title_name);</div><div class="line">        mDesc = (TextView) findViewById(R.id.skin_desc);</div><div class="line"></div><div class="line">        mTitle.setText(<span class="string">"黑暗之女"</span>);</div><div class="line">        mViewPager.setPageTransformer(<span class="keyword">false</span>,<span class="keyword">new</span> CustomViewPagerTransformer(<span class="keyword">this</span>));</div><div class="line">        <span class="comment">// 添加监听器</span></div><div class="line">        mViewPager.addOnPageChangeListener(onPageChangeListener);</div><div class="line">        mVPAdapter = <span class="keyword">new</span> VPAdapter(getSupportFragmentManager());</div><div class="line">        mViewPager.setAdapter(mVPAdapter);</div><div class="line">        mViewPager.setOffscreenPageLimit(<span class="number">3</span>);</div><div class="line">        <span class="comment">//  Indicator 和ViewPager 建立关联</span></div><div class="line">        mCircleIndicatorView.setUpWithViewPager(mViewPager);</div><div class="line">        <span class="comment">// 首次进入展示第二页</span></div><div class="line">        mViewPager.setCurrentItem(<span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> mViewPager.<span class="title">onTouchEvent</span><span class="params">(event)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ViewPager.OnPageChangeListener onPageChangeListener = <span class="keyword">new</span> ViewPager.OnPageChangeListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            Bitmap source = BitmapFactory.decodeResource(getResources(),VPAdapter.RES[position]);</div><div class="line">            Bitmap bitmap = EasyBlur.with(getApplicationContext())</div><div class="line">                    .bitmap(source)</div><div class="line">                    .radius(<span class="number">20</span>)</div><div class="line">                    .blur();</div><div class="line">            mImageBg.setImageBitmap(bitmap);</div><div class="line"></div><div class="line">            mDesc.setText(mVPAdapter.getPageTitle(position));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ViewPager的每一个页面用Fragment 来展示的，Fragment代码如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ItemFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="type">PolygonView</span> mPolygonView;</div><div class="line">    public static <span class="type">ItemFragment</span> newInstance(int resId)&#123;</div><div class="line">        <span class="type">ItemFragment</span> itemFragment = <span class="keyword">new</span> <span class="type">ItemFragment</span>();</div><div class="line">        <span class="type">Bundle</span> bundle = <span class="keyword">new</span> <span class="type">Bundle</span>();</div><div class="line">        bundle.putInt(<span class="string">"resId"</span>,resId);</div><div class="line">        itemFragment.setArguments(bundle);</div><div class="line">        <span class="keyword">return</span> itemFragment;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public <span class="type">View</span> onCreateView(<span class="type">LayoutInflater</span> inflater, <span class="meta">@Nullable</span> <span class="type">ViewGroup</span> container, <span class="meta">@Nullable</span> <span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="type">View</span> view = inflater.inflate(<span class="type">R</span>.layout.view_pager_muti_layout,<span class="literal">null</span>);</div><div class="line">        mPolygonView = (<span class="type">PolygonView</span>) view.findViewById(<span class="type">R</span>.id.item_image);</div><div class="line">        <span class="comment">// 做一个属性动画</span></div><div class="line">        <span class="type">ObjectAnimator</span> animator = <span class="type">ObjectAnimator</span>.ofFloat(mPolygonView,<span class="string">"rotation"</span>,<span class="number">0</span>f,<span class="number">10</span>f);</div><div class="line">        animator.setDuration(<span class="number">10</span>);</div><div class="line">        animator.start();</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void onViewCreated(<span class="type">View</span> view, <span class="meta">@Nullable</span> <span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);</div><div class="line">        int resId = getArguments().getInt(<span class="string">"resId"</span>);</div><div class="line">        mPolygonView.setImageResource(resId);<span class="comment">// 设置图片</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>说明：在Fragment中对PolygonView做了一个旋转的动画，是因为PolygonView 是一个竖着的等腰梯形，但是看效果图，其实不是，还有一个小幅度的旋转，如果将这个旋转放在PolygonView 里面做的话，发现每次ViewPager 切换的时候，都有一个旋转动画，效果不好，因此将动画放在这里。应该还有其他更优雅一点的方法，有兴趣的可以去试一下。</p>
</blockquote>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><blockquote>
<p>本篇文章是ViewPager 系列的第三篇文章，也是这个系列的最后一些文章，这三篇文章总结了ViewPager 的一些常用方法，如Banner 、切换动画等等。还讲了如何封装一个扩展性强，比较通用的ViewPager。这也是对自己以前用过的这些知识点的一个总结和沉淀。</p>
</blockquote>
<!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=songid&auto=1&height=66"></iframe> -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ondlsj2sn.bkt.clouddn.com/FmjGWAiWMMiAjxY_Vm62n0eG1YHV.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这几天英雄联盟搞活动，抽到一个安妮限定皮肤，可把我乐坏了，于是马上就登陆掌盟客户端查看皮肤。进入皮肤浏览界面之后，觉得这个皮肤浏览的效果还真不错，如下图：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android嫡系" scheme="http://dinson.win/categories/Android%E5%AB%A1%E7%B3%BB/"/>
    
    
      <category term="ViewPager系列" scheme="http://dinson.win/tags/ViewPager%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>ViewPager系列--仿魅族应用的广告BannerView</title>
    <link href="http://dinson.win/2017/06/04/17-06-04/"/>
    <id>http://dinson.win/2017/06/04/17-06-04/</id>
    <published>2017-06-04T01:52:22.000Z</published>
    <updated>2017-06-15T11:55:57.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>Banner广告位是APP 中的一个非常重要的位置，为什么呢？因为它能带来money。是一个公司很重要的一个营收点。像那种用户数基数特别大的产品，如facebook、twitter、QQ、微信等等。Banner广告位日营收估计得上千万美刀（猜的,不知道具体数据）。一个漂亮的Banner往往能够吸引用户的眼球，引导用户点击，从而提高转化率。遗憾的是现在的大多数产品的Banner都是千篇一律的，没有什么亮点可言。但是前几天在魅族手机上发现了一个效果不错的Banner，魅族所有自家的APP所用的Banner 引起了我的注意。效果是这样子的：</p>
</blockquote>
<p><img src="http://ondlsj2sn.bkt.clouddn.com/Fttnl93cLxhrr5tGpwIB0UCkAQd7.png" alt=""></p>
<a id="more"></a>
<!-- 这是　　缩进-->
<p>看到这个Banner 第一眼就吸引了我，随后就反复的体验了几次了，感觉这种Banner的效果还不错。最后想着高仿一个和这种效果差不多的BannerView 。那么本文就讲一下如何实现这样一个BannerView。最终实现的效果如下：<br><img src="http://ondlsj2sn.bkt.clouddn.com/FuCyfbpuGyHRcvgxpo3gqUwb7rrL.png" alt=""></p>
<h2 id="仿魅族Banner-效果"><a href="#仿魅族Banner-效果" class="headerlink" title="仿魅族Banner 效果"></a>仿魅族Banner 效果</h2><p>在开始实现魅族Banner效果之前，我们先来整理一下实现一个BannerView的思路，首先需要用ViewPager，其次让ViewPager无限轮播。其实BannerView就是一个无限轮播的ViewPager，然后做一些封装处理，让使用更加简单就ok。</p>
<p>现在我们在来看一下魅族的这个Banner。他与普通的banner的区别是当前页显示了前一页和后一页的部分内容。<br><img src="http://ondlsj2sn.bkt.clouddn.com/FueAFj7emV2N7kqhC6yYc7Bv5dYa.png" alt=""></p>
<p>抛开切换时的动画先不说，要实现这个效果的第一步就是要让ViewPager在一个页面显示多页的内容（当前页＋前后页部分）。</p>
<h2 id="ViewPager展示多页"><a href="#ViewPager展示多页" class="headerlink" title="ViewPager展示多页"></a>ViewPager展示多页</h2><p>要让ViewPager页面展示多页的内容，就要用到ViewGroup的一个强大的属性。这个属性虽然强大，但是也不常用，可能有些小伙伴不知道(之前我也没用过…)，那就是<code>clipChildren</code>属性。这个属性有什么作用呢，我们看一下它的文档介绍：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * By default, children are clipped <span class="keyword">to</span> their bounds <span class="keyword">before</span> drawing. This</div><div class="line"> * allows view groups <span class="keyword">to</span> override this behavior <span class="keyword">for</span> animations, etc.</div><div class="line"> *</div><div class="line"> * @param clipChildren <span class="literal">true</span> <span class="keyword">to</span> clip children <span class="keyword">to</span> their bounds,</div><div class="line"> *        <span class="literal">false</span> otherwise</div><div class="line"> * @attr <span class="keyword">ref</span> android.R.styleable<span class="comment">#ViewGroup_clipChildren</span></div><div class="line"> */</div></pre></td></tr></table></figure></p>
<p><strong>clipChildren: </strong>默认值为true, 子View 的大小只能在父View规定的范围之内，比如父View的高为50，子View的高为60 ,那么多处的部分就会被裁剪。如果我们设置这个值为false的话，那么多处的部分就不会被裁剪了。</p>
<p>这里我们就可以利用这个属性来实现了这个效果了，我们设置ViewPager的父布局的clipChildren为false。然后设置ViewPager 左右一定的边距，那么左右就空出了一定的区域，利用<code>clipChildren</code>属性，就能让前后页面的部分显示在当前页了。布局如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:clipChildren</span>=<span class="string">"false"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">    &gt;</div><div class="line"></div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">       <span class="attr">android:id</span>=<span class="string">"@+id/view_pager"</span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></div><div class="line">       <span class="attr">android:layout_marginLeft</span>=<span class="string">"30dp"</span></div><div class="line">       <span class="attr">android:layout_marginRight</span>=<span class="string">"30dp"</span></div><div class="line">       /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样就能实现ViewPager 展示前后页面的部分内容。</p>
<h2 id="自定义ViewPager-PageTransformer动画"><a href="#自定义ViewPager-PageTransformer动画" class="headerlink" title="自定义ViewPager.PageTransformer动画"></a>自定义ViewPager.PageTransformer动画</h2><p>上面实现了ViewPager当前页面显示前后页的部分内容，但是从最开始魅族的Banner效果我们可以看出，滑动的时候是有 一个放大缩小的动画的。左右显示的部分有一定比例的缩小。这就要用到ViewPager.PageTransformer了。</p>
<p>ViewPager.PageTransformer 干什么的呢？ViewPager.PageTransformer 是用来做ViewPager切换动画的，它是一个接口，里面只有一个方法<code>transformPage</code>。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public interface PageTransformer &#123;</div><div class="line">    /**</div><div class="line">     * Apply a <span class="keyword">property</span> transformation <span class="keyword">to</span> <span class="keyword">the</span> <span class="keyword">given</span> page.</div><div class="line">     *</div><div class="line">     * @param page Apply <span class="keyword">the</span> transformation <span class="keyword">to</span> this page</div><div class="line">     * @param position Position <span class="keyword">of</span> page relative <span class="keyword">to</span> <span class="keyword">the</span> current <span class="keyword">front</span>-<span class="keyword">and</span>-center</div><div class="line">     *                 position <span class="keyword">of</span> <span class="keyword">the</span> pager. <span class="number">0</span> <span class="keyword">is</span> <span class="keyword">front</span> <span class="keyword">and</span> center. <span class="number">1</span> <span class="keyword">is</span> one full</div><div class="line">     *                 page position <span class="keyword">to</span> <span class="keyword">the</span> right, <span class="keyword">and</span> <span class="number">-1</span> <span class="keyword">is</span> one page position <span class="keyword">to</span> <span class="keyword">the</span> left.</div><div class="line">     */</div><div class="line">    void transformPage(View page, float position);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>虽然只有一个方法，但是它很强大，它能反映出在ViewPager滑动过程中，各个View的位置变化。我们拿到了这些位置变化，就能在这个过程中对View做各种各样的动画了。</p>
<p>要自定义动画，我们就来需要知道positon这个值的变化区间。从官方给的ViewPager的两个示例我们知道，position的变换有三个区间［－Infinity，－1），［－1，1］，（1.Infinity）。</p>
<ul>
<li>［－Infinity，－1）：已经在屏幕之外，看不到了</li>
<li>（1.Infinity）： 已经在屏幕之外，看不到了。</li>
<li>［－1，1］： 这个区间是我门操作View动画的重点区间。</li>
</ul>
<p>我们来看一下官方对于position的解释：</p>
<blockquote>
<p><strong>官方的解释：</strong>The position parameter indicates where a given page is located relative to the center of the screen. It is a dynamic property that changes as the user scrolls through the pages. When a page fills the screen, its position value is 0. When a page is drawn just off the right side of the screen, its position value is 1. If the user scrolls halfway between pages one and two, page one has a position of -0.5 and page two has a position of 0.5.</p>
</blockquote>
<p><strong>根据解释，也就是说当前停留的页面的位置为 0，右边屏幕之外绘制的这个页面位置为 1。那么，A 页面滑到 B 页面有 2 种情况：第一种：左边划出屏幕，那么 A：0 －&gt; －1,B :1 -&gt; 0。第二种：右边划出屏幕，A：0-&gt;1, B :-1-&gt; 0</strong></p>
<p>了解了这个方法的变化后，我们就来自定义我们的切换动画,这里很简单，我们只需要一个scale动画。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTransformer</span> <span class="keyword">implements</span> <span class="title">ViewPager</span>.<span class="title">PageTransformer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_SCALE = <span class="number">0.9F</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transformPage</span><span class="params">(View page, <span class="keyword">float</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(position &lt; -<span class="number">1</span>)&#123;</div><div class="line">            page.setScaleY(MIN_SCALE);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(position&lt;= <span class="number">1</span>)&#123;</div><div class="line">            <span class="comment">//</span></div><div class="line">            <span class="keyword">float</span> scale = Math.max(MIN_SCALE,<span class="number">1</span> - Math.abs(position));</div><div class="line">            page.setScaleY(scale);</div><div class="line">            <span class="comment">/*page.setScaleX(scale);</span></div><div class="line"></div><div class="line">            if(position&lt;0)&#123;</div><div class="line">                page.setTranslationX(width * (1 - scale) /2);</div><div class="line">            &#125;else&#123;</div><div class="line">                page.setTranslationX(-width * (1 - scale) /2);</div><div class="line">            &#125;*/</div><div class="line"></div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            page.setScaleY(MIN_SCALE);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://ondlsj2sn.bkt.clouddn.com/FkipOvMPS9j8n8KIul1r3Sao59CW.png" alt=""><br>到此，我们仿魅族Banner的静态效果就实现了。接下来我们就要让Banner动起来，实现无限轮播效果。</p>
<h2 id="图片轮播"><a href="#图片轮播" class="headerlink" title="图片轮播"></a>图片轮播</h2><p>上面我们已经实现了Bannerd的静态展示和切换动画，那么我们现在就需要让Banner动起来，实现无限轮播。</p>
<p>ViewPager实现Banner无效轮播效果有2种方案,第一种是：在列表的最前面插入最后一条数据，在列表末尾插入第一个数据，造成循环的假象。第二种方案是：采用getCount 返回 Integer.MAX_VALUE。结下来分别看一下这两种方案。</p>
<ol>
<li>在列表的最前面插入最后一条数据，在列表末尾插入第一个数据，造成循环的假象。<br>这种方法是怎么做的呢？，是这样的：假如我们的列表有3条数据，用三个页面展示，分别编号为1，2，3。我们再创建一个新的列表，长度为真实列表的长度＋2，也就是5。在最前面插入最后一条数据，然后在末尾插入第一条数据。新列表就变成了这样了，3－1－2－3－1。如果当前滑到的是0位置（页面3）,那就通过ViewPager的setCurrentItem(int item, boolean smoothScroll)方法神不知鬼不觉的切换到3位置（页面3），当滑到4的位置时(页面1),也用这个方法滑到1位置（页面1）。这样给我们的感觉就是无限轮播了。来一张图辅助理解一下。<br><img src="http://ondlsj2sn.bkt.clouddn.com/Fll56ELZOT9sVMQm6QO1cSp-vNRJ.png" alt=""></li>
<li>采用getCount 返回 Integer.MAX_VALUE<br>让ViewPager 的Adapter getCount 方法返回一个很大的数（这里用Integer.MAX_VALUE），理论上可以无限滑动。当显示完一个真实列表的周期后，又从真实列表的0位置显示数据，造成无限循环轮播的假象。开始时调用 mViewPager.setCurrentItem(Integer.MAX_VALUE /2)设置选中中间位置，这样最开始就可以向左滑动。关键代码：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> currentItem = getStartSelectItem();</div><div class="line"></div><div class="line"><span class="comment">//设置当前选中的Item</span></div><div class="line"> mViewPager.setCurrentItem(currentItem);</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getStartSelectItem</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">// 我们设置当前选中的位置为Integer.MAX_VALUE / 2,这样开始就能往左滑动</span></div><div class="line">        <span class="comment">// 但是要保证这个值与getRealPosition 的 余数为0，因为要从第一页开始显示</span></div><div class="line">        <span class="keyword">int</span> currentItem = Integer.MAX_VALUE / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span>(currentItem % getRealCount()  ==<span class="number">0</span> )&#123;</div><div class="line">            <span class="keyword">return</span> currentItem;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 直到找到从0开始的位置</span></div><div class="line">        <span class="keyword">while</span> (currentItem % getRealCount()  != <span class="number">0</span>)&#123;</div><div class="line">            currentItem++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> currentItem;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>3 . 两种方案选哪一种？<br>两种方案我都试了一下，都可以实现轮播，但是第一种 方案在有切换动画的时候是有问题的，因为上面我们说了滑动到最后一页切换到第一页时，用的是ViewPager的setCurrentItem(int item, boolean smoothScroll)方法，smoothScroll 的值为false,这样界面就感觉不到我们偷偷的切换。但是这样切换就没有了动画。这样每次切换就会很生硬，因此就抛弃这种方法。选择第二种方案。<br>轮播我们采用Hanlder的postDelayed方法，关键代码如下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Runnable mLoopRunnable = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(mIsAutoPlay)&#123;</div><div class="line">            mCurrentItem = mViewPager.getCurrentItem();</div><div class="line">            mCurrentItem++;</div><div class="line">            <span class="keyword">if</span>(mCurrentItem == mAdapter.getCount() - <span class="number">1</span>)&#123;</div><div class="line">                mCurrentItem = <span class="number">0</span>;</div><div class="line">                mViewPager.setCurrentItem(mCurrentItem,<span class="keyword">false</span>);</div><div class="line">                mHandler.postDelayed(<span class="keyword">this</span>,mDelayedTime);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                mViewPager.setCurrentItem(mCurrentItem);</div><div class="line">                mHandler.postDelayed(<span class="keyword">this</span>,mDelayedTime);</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            mHandler.postDelayed(<span class="keyword">this</span>,mDelayedTime);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>在Adapter instantiateItem(ViewGroup container, final int position) 中，现在的这个position是一个很大的数字，我们需要将它转换成一个真实的position，否则会越界报错。<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="built_in">int</span> realPosition = <span class="keyword">position</span> % getRealCount();</div></pre></td></tr></table></figure></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取真实的Count</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">int</span> <span class="title">getRealCount</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span>  mDatas==<span class="keyword">null</span> ? <span class="number">0</span>:mDatas.size();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过以上就实现了仿魅族的BannerView，但是这还没完，虽然功能实现了，要想在任何地方拿来就可以使用，简单方便，我们还需要进一步的封装。</p>
<h2 id="封装轮子：MZBannerView"><a href="#封装轮子：MZBannerView" class="headerlink" title="封装轮子：MZBannerView"></a>封装轮子：MZBannerView</h2><p>通过上面几步就可以实现仿魅族的BannerView,但是为了使用方便，我们将它封装成一个库，前面一篇文章讲了，如何封装一个通用的ViewPager（文章地址：ViewPager系列之 打造一个通用的ViewPager）。既然要想Banner使用方便，我们也需要封装得通用，可扩展。因为我们的Banner也是用ViewPager 实现的，因此，我们可用上一篇文章的方法，封装一个通用的BannerView。</p>
<p>MZBannerView 有以下功能：</p>
<ol>
<li>仿魅族BannerView 效果。</li>
<li>当普通Banner 使用</li>
<li>当普通ViewPager 使用。</li>
<li>当普通ViewPager使用(有魅族Banner效果)</li>
</ol>
<h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><table>
<thead>
<tr>
<th>属性名</th>
<th>属性意义</th>
<th>取值</th>
</tr>
</thead>
<tbody>
<tr>
<td>open_mz_mode</td>
<td>是否开启魅族模式</td>
<td>true 为魅族Banner效果，false 则普通Banner效果</td>
</tr>
<tr>
<td>canLoop</td>
<td>是否轮播</td>
<td>true 轮播，false 则为普通ViewPager</td>
</tr>
<tr>
<td>indicatorPaddingLeft</td>
<td>设置指示器距离左侧的距离</td>
<td>单位为 dp 的值</td>
</tr>
<tr>
<td>indicatorPaddingRight</td>
<td>设置指示器距离右侧的距离</td>
<td>单位为 dp 的值</td>
</tr>
<tr>
<td>indicatorAlign</td>
<td>设置指示器的位置</td>
<td>有三个取值：left 左边，center 剧中显示，right 右侧显示</td>
</tr>
</tbody>
</table>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>xml 布局文件<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;com.example.dinson.MZBannerView</div><div class="line">      android:id=<span class="string">"@+id/banner"</span></div><div class="line">      android:layout_width=<span class="string">"match_parent"</span></div><div class="line">      android:layout_height=<span class="string">"200dp"</span></div><div class="line">      android:layout_marginTop=<span class="string">"10dp"</span></div><div class="line">      <span class="keyword">app</span>:open_mz_mode=<span class="string">"true"</span></div><div class="line">      <span class="keyword">app</span>:canLoop=<span class="string">"true"</span></div><div class="line">      <span class="keyword">app</span>:indicatorAlign=<span class="string">"center"</span></div><div class="line">      <span class="keyword">app</span>:indicatorPaddingLeft=<span class="string">"10dp"</span></div><div class="line">      /&gt;</div></pre></td></tr></table></figure></p>
<p>activity中代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"> mMZBanner = (MZBannerView) view.findViewById(R.id.banner);</div><div class="line"> <span class="comment">// 设置页面点击事件</span></div><div class="line"> mMZBanner.setBannerPageClickListener(<span class="keyword">new</span> MZBannerView.BannerPageClickListener() &#123;</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">         Toast.makeText(getContext(),<span class="string">"click page:"</span>+position,Toast.LENGTH_LONG).show();</div><div class="line">     &#125;</div><div class="line"> &#125;);</div><div class="line"></div><div class="line"> List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;RES.length;i++)&#123;</div><div class="line">     list.add(RES[i]);</div><div class="line"> &#125;</div><div class="line"><span class="comment">// 设置数据</span></div><div class="line"> mMZBanner.setPages(list, <span class="keyword">new</span> MZHolderCreator&lt;BannerViewHolder&gt;() &#123;</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> BannerViewHolder <span class="title">createViewHolder</span><span class="params">()</span> </span>&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">new</span> BannerViewHolder();</div><div class="line">     &#125;</div><div class="line"> &#125;);</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BannerViewHolder</span> <span class="keyword">implements</span> <span class="title">MZViewHolder</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">     <span class="keyword">private</span> ImageView mImageView;</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> View <span class="title">createView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">         <span class="comment">// 返回页面布局文件</span></div><div class="line">         View view = LayoutInflater.from(context).inflate(R.layout.banner_item,<span class="keyword">null</span>);</div><div class="line">         mImageView = (ImageView) view.findViewById(R.id.banner_image);</div><div class="line">         <span class="keyword">return</span> view;</div><div class="line">     &#125;</div><div class="line">    </div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBind</span><span class="params">(Context context, <span class="keyword">int</span> position, Integer data)</span> </span>&#123;</div><div class="line">         <span class="comment">// 数据绑定</span></div><div class="line">         mImageView.setImageResource(data);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>如果是当Banner使用，注意在onResume 中调用start()方法，在onPause中调用 pause() 方法。如果当普通ViewPager使用，则不需要。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onPause();</div><div class="line">    mMZBanner.pause();<span class="comment">//暂停轮播</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onResume();</div><div class="line">    mMZBanner.start();<span class="comment">//开始轮播</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其他对外API<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>**/</span></span></div><div class="line"><span class="comment"><span class="markdown">/<span class="strong">**                             对外API                                                               **</span>/</span></span></div><div class="line"><span class="comment"><span class="markdown">/<span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>**/</span></span></div><div class="line"><span class="comment">//开始轮播</span></div><div class="line"> start()</div><div class="line"><span class="comment">//停止轮播</span></div><div class="line"> pause()</div><div class="line"></div><div class="line"><span class="comment">//设置BannerView 的切换时间间隔</span></div><div class="line"> setDelayedTime(<span class="built_in">int</span> delayedTime)</div><div class="line"><span class="comment">// 设置页面改变监听器</span></div><div class="line">addPageChangeLisnter(ViewPager.OnPageChangeListener onPageChangeListener)</div><div class="line"></div><div class="line"><span class="comment">//添加Page点击事件</span></div><div class="line"> setBannerPageClickListener(BannerPageClickListener bannerPageClickListener)</div><div class="line"><span class="comment">//设置是否显示Indicator</span></div><div class="line">setIndicatorVisible(boolean visible)</div><div class="line"><span class="comment">// 获取ViewPager</span></div><div class="line">ViewPager getViewPager()</div><div class="line"><span class="comment">// 设置 Indicator资源</span></div><div class="line">setIndicatorRes(<span class="built_in">int</span> unSelectRes,<span class="built_in">int</span> selectRes)</div><div class="line"><span class="comment">//设置页面数据</span></div><div class="line">setPages(<span class="built_in">List</span>&lt;T&gt; datas,MZHolderCreator mzHolderCreator)</div><div class="line"><span class="comment">//设置指示器显示位置</span></div><div class="line">setIndicatorAlign(IndicatorAlign indicatorAlign)</div><div class="line"><span class="comment">//设置ViewPager（Banner）切换速度</span></div><div class="line">setDuration(<span class="built_in">int</span> duration)</div></pre></td></tr></table></figure></p>
<p>因为是对ViewPager的包装，所有要设置某些ViewPager的属性，可以通过getViewPager 获取到ViewPager再设置对应属性</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文讲了如何实现一个仿魅族Banner效果。其中讲了一些关键的点和关键代码。其实普通的BannerView 是一样的，只是少了动画而已。最后，将这些功能封装成了一个通用的BannerView 控件。这个控件既有仿魅族Banner的效果，又可以当普通Banner使用。而且还可以当作一个普通的ViewPager使用。</p>
<!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=songid&auto=1&height=66"></iframe> -->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Banner广告位是APP 中的一个非常重要的位置，为什么呢？因为它能带来money。是一个公司很重要的一个营收点。像那种用户数基数特别大的产品，如facebook、twitter、QQ、微信等等。Banner广告位日营收估计得上千万美刀（猜的,不知道具体数据）。一个漂亮的Banner往往能够吸引用户的眼球，引导用户点击，从而提高转化率。遗憾的是现在的大多数产品的Banner都是千篇一律的，没有什么亮点可言。但是前几天在魅族手机上发现了一个效果不错的Banner，魅族所有自家的APP所用的Banner 引起了我的注意。效果是这样子的：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ondlsj2sn.bkt.clouddn.com/Fttnl93cLxhrr5tGpwIB0UCkAQd7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android嫡系" scheme="http://dinson.win/categories/Android%E5%AB%A1%E7%B3%BB/"/>
    
    
      <category term="ViewPager系列" scheme="http://dinson.win/tags/ViewPager%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>ViewPager系列--打造一个通用的ViewPager</title>
    <link href="http://dinson.win/2017/06/03/17-06-03/"/>
    <id>http://dinson.win/2017/06/03/17-06-03/</id>
    <published>2017-06-03T01:21:22.000Z</published>
    <updated>2017-07-12T15:14:12.829Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ondlsj2sn.bkt.clouddn.com/Fp12BE__fI69mJ45l7jGBc-Ktk5K.png" alt=""></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>ViewPager是Android开发者比较常用的一个控件了，由于它允许数据页从左到右或者从右到左翻页，因此这种交互也备受设计师的青睐。在APP中的很多场景都用得到，比如第一次安装APP时的用户引导页、图片浏览时左右翻页、广告Banner页等等都会用到ViewPager。ViewPager 的使用和RecyclerView的使用方式很相似，熟悉RecyclerView的朋友都知道，我们要使用RecyclerView，就得给RecyclerView提供一个Adapter来提供布局和装载数据。但是有一个比较麻烦的事情是，我们每次使用RecyclerView都要给他提供一个Adapter,并且这些Adapter中的一些方法和代码都是相同的，这使得我们写了很多重复的代码，降低了我们的开发效率，因此github有各种个样的对RecyclerView 的再度封装，目的就是减少这些重复的代码，尽量代码复用，使开发更简单。那么ViewPager的使用和RecyclerView 是非常相似的，我们同样也是给ViewPager提供一个Adapter来提供布局和装载数据。写Adapter的时候同样会写很多重复代码，那么我们是否能像RecyclerView一样，也对Viewpager来做一个再次封装，达到复用和简单的效果呢？答案是肯定的，因此这篇文章就一起来封装一个通用的ViewPager。</p>
</blockquote>
<a id="more"></a>
<!-- 这是　　缩进-->
<h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>看过一些技术博客，对于普通的ViewPager使用封装的比较少，大多数的封装只是在用作Banner 的时候，也就是ViewPager 每页只显示一张图片。对外提供一个接口，传递一个imageUrl 数组就直接展示，不用再写其他的Adapter之类的。但是这样封装其实还是有一些局限性的。</p>
<ol>
<li>每个项目用的图片加载框架是不一样的，Picasso、Glide、ImageLoader等等各不相同，那么我们还需要在显示图片的时候换成自己用的图片加载框架才行。</li>
<li>并不是所有的Banner 都只是显示一张图片,还有各种个样的文案展示等等，因此不能个性化定制，这是比较致命的。</li>
</ol>
<blockquote>
<p>看看上面的局限性，是什么造成了这些局限性呢？<strong>答案是我们没有主动权，主动权在Adapter手中，他控制了布局，控制了数据绑定，所以它说怎样展示就怎样展示，它说展示什么就展示什么。</strong>那么现在问题的关键来了，我们又不想写Adapter,又想按照我们的指示展示布局和数据，怎么办呢？那就要从Adapter中夺回主动权，我们想ViewPager展示成什么样子我们自己说了算。Adapter只需要把我们提供给他的东西按照我们的指示展示就行了。具体的布局和数据绑定都我们自己控制。因此，<strong>有了主动权，展示什么布局我们能控制，用什么框架加载图片我们同样能控制。用什么方式来告诉Adapter 做页面展示呢？就用万能的接口啦。</strong></p>
</blockquote>
<h2 id="封装通用的ViewPager"><a href="#封装通用的ViewPager" class="headerlink" title="封装通用的ViewPager"></a>封装通用的ViewPager</h2><p>通过上面现状的分析，我们知道了，要封装一个比较通用的ViewPager,首先就是要从Adapter那里夺回主动权，因为它控制了布局和数据绑定。有了主动权之后，我们提供布局给Adapter，然后我们自己控制数据绑定。其中有2个关键的点：<strong>1，提供布局 。 2，数据绑定。</strong> 看到这两个点是不是觉得很熟悉？当然很熟悉，这不就是<code>RecyclerView</code>的<code>ViewHolder</code>干的事情嘛。既然是这样我们就借鉴一下 RecyclerView的ViewHolder呗。</p>
<h3 id="第一步：定义一个ViewHolder接口来提供布局和绑定数据：ViewPagerHolder代码如下："><a href="#第一步：定义一个ViewHolder接口来提供布局和绑定数据：ViewPagerHolder代码如下：" class="headerlink" title="第一步：定义一个ViewHolder接口来提供布局和绑定数据：ViewPagerHolder代码如下："></a>第一步：定义一个ViewHolder接口来提供布局和绑定数据：ViewPagerHolder代码如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ViewPagerHolder</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  创建View</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">View <span class="title">createView</span><span class="params">(Context context)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绑定数据</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     * <span class="doctag">@param</span> position</div><div class="line">     * <span class="doctag">@param</span> data</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onBind</span><span class="params">(Context context,<span class="keyword">int</span> position,T data)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ViewPagerHolder</code>接收一个泛型T,这是绑定数据要用的实体类。其中有2个方法，一个提供给Adapter布局，另一个则用于绑定数据。</p>
<h3 id="第二步：-创建一个ViewHolder生成器，用来生成各种ViewHolder"><a href="#第二步：-创建一个ViewHolder生成器，用来生成各种ViewHolder" class="headerlink" title="第二步： 创建一个ViewHolder生成器，用来生成各种ViewHolder:"></a>第二步： 创建一个ViewHolder生成器，用来生成各种ViewHolder:</h3><p><code>ViewPagerHolderCreator</code> 代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ViewPagerHolderCreator</span>&lt;<span class="title">VH</span> <span class="keyword">extends</span> <span class="title">ViewPagerHolder</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建ViewHolder</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> VH <span class="title">createViewHolder</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该类接受一个 泛型，但是必须得是ViewPagerHolder 的子类，一个方法createViewHolder，返回ViewHolder实例。</p>
<h3 id="第三步：-重写-ViewPager-的Adapter："><a href="#第三步：-重写-ViewPager-的Adapter：" class="headerlink" title="第三步： 重写 ViewPager 的Adapter："></a>第三步： 重写 ViewPager 的Adapter：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonViewPagerAdapter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">PagerAdapter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;T&gt; mDatas;</div><div class="line">    <span class="keyword">private</span> ViewPagerHolderCreator mCreator;<span class="comment">//ViewHolder生成器</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonViewPagerAdapter</span><span class="params">(List&lt;T&gt; datas, ViewPagerHolderCreator creator)</span> </span>&#123;</div><div class="line">        mDatas = datas;</div><div class="line">        mCreator = creator;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mDatas == <span class="keyword">null</span> ? <span class="number">0</span>:mDatas.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> view == object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="comment">//重点就在这儿了，不再是把布局写死，而是用接口提供的布局</span></div><div class="line">        <span class="comment">// 也不在这里绑定数据，数据绑定交给Api调用者。</span></div><div class="line">        View view = getView(position,<span class="keyword">null</span>,container);</div><div class="line">        container.addView(view);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">        container.removeView((View) object);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取viewPager 页面展示View</div><div class="line">     * <span class="doctag">@param</span> position</div><div class="line">     * <span class="doctag">@param</span> view</div><div class="line">     * <span class="doctag">@param</span> container</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position,View view ,ViewGroup container)</span></span>&#123;</div><div class="line"></div><div class="line">        ViewPagerHolder holder =<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(view == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="comment">//创建Holder</span></div><div class="line">            holder = mCreator.createViewHolder();</div><div class="line">            view = holder.createView(container.getContext());</div><div class="line">            view.setTag(R.id.common_view_pager_item_tag,holder);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            holder = (ViewPagerHolder) view.getTag(R.id.common_view_pager_item_tag);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(holder!=<span class="keyword">null</span> &amp;&amp; mDatas!=<span class="keyword">null</span> &amp;&amp; mDatas.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="comment">// 数据绑定</span></div><div class="line">            holder.onBind(container.getContext(),position,mDatas.get(position));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这个类比较重要，因为以前我们的布局提供和数据绑定都是在Adapter中的，因此现在我们就将这两项工作交给我们的ViewHolder。CommonViewPagerAdapter 的构造方法需要展示的数据集合和ViewPagerHolderCreator 生成器。其他代码都有注释一看便明白。</p>
</blockquote>
<h3 id="第四部：包装ViewPager"><a href="#第四部：包装ViewPager" class="headerlink" title="第四部：包装ViewPager"></a>第四部：包装ViewPager</h3><p>Adapter和ViewHolder都有了，现在我们只需要一个ViewPager 就大功告成了。我们采用自定义View 组合的方式来写这个ViewPager.<br>1 . 提供ViewPager 布局：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">                <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">                <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">     <span class="comment">&lt;!-- ViewPager--&gt;</span></div><div class="line"></div><div class="line">     <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></div><div class="line">         <span class="attr">android:id</span>=<span class="string">"@+id/common_view_pager"</span></div><div class="line">         <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">         <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</div><div class="line"></div><div class="line">     <span class="comment">&lt;!-- 指示器 indicatorView--&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">com.zhouwei.indicatorview.CircleIndicatorView</span></span></div><div class="line">         <span class="attr">android:id</span>=<span class="string">"@+id/common_view_pager_indicator_view"</span></div><div class="line">         <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">         <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">         <span class="attr">android:layout_alignParentBottom</span>=<span class="string">"true"</span></div><div class="line">         <span class="attr">android:layout_marginBottom</span>=<span class="string">"10dp"</span></div><div class="line">         <span class="attr">app:indicatorSelectColor</span>=<span class="string">"@android:color/white"</span></div><div class="line">         <span class="attr">app:indicatorColor</span>=<span class="string">"@android:color/darker_gray"</span></div><div class="line">         <span class="attr">app:fill_mode</span>=<span class="string">"none"</span></div><div class="line">         <span class="attr">app:indicatorSpace</span>=<span class="string">"5dp"</span></div><div class="line">         <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>布局中一个ViewPager 和一个指示器View, IndicatorView 用的是前面分享的CircleIndicatorView 。博客地址：<a href="http://dinson.win/2017/06/02/17-06-02/">ViewPager系列–实现一个多功能的IndicatorView</a>。</p>
<p>2 . CommonViewPager ，代码如下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonViewPager</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ViewPager mViewPager;</div><div class="line">    <span class="keyword">private</span> CommonViewPagerAdapter mAdapter;</div><div class="line">    <span class="keyword">private</span> CircleIndicatorView mCircleIndicatorView;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonViewPager</span><span class="params">(@NonNull Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonViewPager</span><span class="params">(@NonNull Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonViewPager</span><span class="params">(@NonNull Context context, @Nullable AttributeSet attrs, @AttrRes <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.LOLLIPOP)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonViewPager</span><span class="params">(@NonNull Context context, @Nullable AttributeSet attrs, @AttrRes <span class="keyword">int</span> defStyleAttr, @StyleRes <span class="keyword">int</span> defStyleRes)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr, defStyleRes);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">        View view = LayoutInflater.from(getContext()).inflate(R.layout.common_view_pager_layout,<span class="keyword">this</span>,<span class="keyword">true</span>);</div><div class="line">        mViewPager = (ViewPager) view.findViewById(R.id.common_view_pager);</div><div class="line">        mCircleIndicatorView = (CircleIndicatorView) view.findViewById(R.id.common_view_pager_indicator_view);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置数据</div><div class="line">     * <span class="doctag">@param</span> data</div><div class="line">     * <span class="doctag">@param</span> creator</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setPages</span><span class="params">(List&lt;T&gt; data, ViewPagerHolderCreator creator)</span></span>&#123;</div><div class="line">        mAdapter = <span class="keyword">new</span> CommonViewPagerAdapter(data,creator);</div><div class="line">        mViewPager.setAdapter(mAdapter);</div><div class="line">        mAdapter.notifyDataSetChanged();</div><div class="line">        mCircleIndicatorView.setUpWithViewPager(mViewPager);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setCurrentItem</span><span class="params">(<span class="keyword">int</span> currentItem)</span></span>&#123;</div><div class="line">        mViewPager.setCurrentItem(currentItem);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCurrentItem</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> mViewPager.<span class="title">getCurrentItem</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setOffscreenPageLimit</span><span class="params">(<span class="keyword">int</span> limit)</span></span>&#123;</div><div class="line">        mViewPager.setOffscreenPageLimit(limit);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置切换动画，see &#123;<span class="doctag">@link</span> ViewPager#setPageTransformer(boolean, ViewPager.PageTransformer)&#125;</div><div class="line">     * <span class="doctag">@param</span> reverseDrawingOrder</div><div class="line">     * <span class="doctag">@param</span> transformer</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setPageTransformer</span><span class="params">(<span class="keyword">boolean</span> reverseDrawingOrder, ViewPager.PageTransformer transformer)</span></span>&#123;</div><div class="line">        mViewPager.setPageTransformer(reverseDrawingOrder,transformer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * see &#123;<span class="doctag">@link</span> ViewPager#setPageTransformer(boolean, ViewPager.PageTransformer)&#125;</div><div class="line">     * <span class="doctag">@param</span> reverseDrawingOrder</div><div class="line">     * <span class="doctag">@param</span> transformer</div><div class="line">     * <span class="doctag">@param</span> pageLayerType</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setPageTransformer</span><span class="params">(<span class="keyword">boolean</span> reverseDrawingOrder, ViewPager.PageTransformer transformer,</span></span></div><div class="line">                                   <span class="keyword">int</span> pageLayerType) &#123;</div><div class="line">        mViewPager.setPageTransformer(reverseDrawingOrder,transformer,pageLayerType);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * see &#123;<span class="doctag">@link</span> ViewPager#addOnPageChangeListener(ViewPager.OnPageChangeListener)&#125;</div><div class="line">     * <span class="doctag">@param</span> listener</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addOnPageChangeListener</span><span class="params">(ViewPager.OnPageChangeListener listener)</span></span>&#123;</div><div class="line">        mViewPager.addOnPageChangeListener(listener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置是否显示Indicator</div><div class="line">     * <span class="doctag">@param</span> visible</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">setIndicatorVisible</span><span class="params">(<span class="keyword">boolean</span> visible)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(visible)&#123;</div><div class="line">            mCircleIndicatorView.setVisibility(VISIBLE);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            mCircleIndicatorView.setVisibility(GONE);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function">ViewPager <span class="title">getViewPager</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mViewPager;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>CommonViewPager 是对ViewPager的包装，提供了一些ViewPager的常用方法。 其中有一个非常重要的方法public void setPages(List<t> data, ViewPagerHolderCreator creator),提供数据和ViewHolder。其他的基本上都是ViewPager的方法。也可以通过getViewPager 获取到ViewPager 再调用ViewPager的方法。</t></p>
</blockquote>
<p>到此封装也就全部完成了。</p>
<h2 id="CommonViewPager-简便使用"><a href="#CommonViewPager-简便使用" class="headerlink" title="CommonViewPager 简便使用"></a>CommonViewPager 简便使用</h2><p>啰嗦了这么久的封装，那么用起来方便不呢？看一下就知道。<br>1.activity 布局文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.zhouwei.commonviewpager.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">com.zhouwei.viewpagerlib.CommonViewPager</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/activity_common_view_pager"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>ViewPager Item 的布局文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">       <span class="attr">android:id</span>=<span class="string">"@+id/viewPager_item_image"</span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span>/&gt;</div><div class="line"></div><div class="line">   <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">       <span class="attr">android:id</span>=<span class="string">"@+id/item_desc"</span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">       <span class="attr">android:textSize</span>=<span class="string">"15sp"</span></div><div class="line">       <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">       <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></div><div class="line">       <span class="attr">android:textColor</span>=<span class="string">"@android:color/white"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Activity 代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">    mCommonViewPager = (CommonViewPager) findViewById(R.id.activity_common_view_pager);</div><div class="line">    <span class="comment">// 设置数据</span></div><div class="line">    mCommonViewPager.setPages(mockData(), <span class="keyword">new</span> ViewPagerHolderCreator&lt;ViewImageHolder&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> ViewImageHolder <span class="title">createViewHolder</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// 返回ViewPagerHolder</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ViewImageHolder();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 提供ViewPager展示的ViewHolder</div><div class="line"> * &lt;P&gt;用于提供布局和绑定数据&lt;/P&gt;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewImageHolder</span> <span class="keyword">implements</span> <span class="title">ViewPagerHolder</span>&lt;<span class="title">DataEntry</span>&gt;</span>&#123;</div><div class="line">    <span class="keyword">private</span> ImageView mImageView;</div><div class="line">    <span class="keyword">private</span> TextView mTextView;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">createView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="comment">// 返回ViewPager 页面展示的布局</span></div><div class="line">        View view = LayoutInflater.from(context).inflate(R.layout.view_pager_item,<span class="keyword">null</span>);</div><div class="line">        mImageView = (ImageView) view.findViewById(R.id.viewPager_item_image);</div><div class="line">        mTextView = (TextView) view.findViewById(R.id.item_desc);</div><div class="line">        <span class="keyword">return</span> view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBind</span><span class="params">(Context context, <span class="keyword">int</span> position, DataEntry data)</span> </span>&#123;</div><div class="line">       <span class="comment">// 数据绑定</span></div><div class="line">       <span class="comment">// 自己绑定数据，灵活度很大 </span></div><div class="line">       mImageView.setImageResource(data.imageResId);</div><div class="line">       mTextView.setText(data.desc);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码逻辑很清晰，也很简单，只需要提供一个ViewHolder,ViewHolder 自己实现，然后调用<code>setPages</code>方法绑定数据就好了。最后上一张效果图：<br><img src="http://ondlsj2sn.bkt.clouddn.com/FtljxRS8tjZbq3ILOL39_xBwmt3s.gif" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇文章的这种封装思想不仅仅对于ViewPager,对于其他的展示集合数据的控件同样实用。其实整个封装还是蛮简单的，但是我觉得这种方法值得推广，以后像我们自己写一个扩展性比较强的控件时，就可以用这种方式。如果把这些一个个控件做成独立的通用的组件，那么我们开发的效率要提高很多。</p>
<!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=100% height=86 src="//music.163.com/outchain/player?type=2&id=songid&auto=1&height=66"></iframe> -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ondlsj2sn.bkt.clouddn.com/Fp12BE__fI69mJ45l7jGBc-Ktk5K.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ViewPager是Android开发者比较常用的一个控件了，由于它允许数据页从左到右或者从右到左翻页，因此这种交互也备受设计师的青睐。在APP中的很多场景都用得到，比如第一次安装APP时的用户引导页、图片浏览时左右翻页、广告Banner页等等都会用到ViewPager。ViewPager 的使用和RecyclerView的使用方式很相似，熟悉RecyclerView的朋友都知道，我们要使用RecyclerView，就得给RecyclerView提供一个Adapter来提供布局和装载数据。但是有一个比较麻烦的事情是，我们每次使用RecyclerView都要给他提供一个Adapter,并且这些Adapter中的一些方法和代码都是相同的，这使得我们写了很多重复的代码，降低了我们的开发效率，因此github有各种个样的对RecyclerView 的再度封装，目的就是减少这些重复的代码，尽量代码复用，使开发更简单。那么ViewPager的使用和RecyclerView 是非常相似的，我们同样也是给ViewPager提供一个Adapter来提供布局和装载数据。写Adapter的时候同样会写很多重复代码，那么我们是否能像RecyclerView一样，也对Viewpager来做一个再次封装，达到复用和简单的效果呢？答案是肯定的，因此这篇文章就一起来封装一个通用的ViewPager。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android嫡系" scheme="http://dinson.win/categories/Android%E5%AB%A1%E7%B3%BB/"/>
    
    
      <category term="ViewPager系列" scheme="http://dinson.win/tags/ViewPager%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>ViewPager系列--实现一个多功能的IndicatorView</title>
    <link href="http://dinson.win/2017/06/02/17-06-02/"/>
    <id>http://dinson.win/2017/06/02/17-06-02/</id>
    <published>2017-06-02T01:04:12.000Z</published>
    <updated>2017-07-12T15:14:12.829Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ondlsj2sn.bkt.clouddn.com/FjKXDufC34xZG2jcO9vhp-aIJPUH.png" alt=""></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>Indicator (指示器) 可能大家都见的比较多了，在一个APP中，有很多场景都会用到Indicator，比如第一次安装APP 时的引导页，首页上面的广告Banner ，又或者是Tab下面的Indicator。Indicator 一般配合ViewPager 使用，它能很直观的反应出ViewPager 中一共有多少页，当前选中的是哪一页，用户能够很容易的看出是否还可以滑动，用户体验较好。那么本篇文章就讲一下如何通过自定义View来实现一个漂亮简洁的IndicatorView。</p>
</blockquote>
<a id="more"></a>
<!-- 这是　　缩进-->
<p>Indicator的展示形式</p>
<p>我们使用Indicator时,常见的有三种形式，第一种是根据ViewPager 的总页数展示一排小圆点，选中和未选中分别标为不同的颜色。这也是普遍的使用Indicator的效果，效果如下：</p>
<p><img src="http://ondlsj2sn.bkt.clouddn.com/FqkeU8jK8cJlXCZ0XDU4nxFafKBE.png" alt=""></p>
<p>第二种形式是根据ViewPager 的总页数展示一排圆点，并且用数字标出其顺序（1，2，3，4 …），大概效果如下：</p>
<p><img src="http://ondlsj2sn.bkt.clouddn.com/FrrcSoSWlXMrD2FZCbB7WTt51bjS.png" alt=""></p>
<p>image.png<br>第三种形式和第二种形式差不多，同样根据ViewPager总页数展示一片圆点，但是用字母标出顺序(A,B,C,D ….), 比如 ：魅族手机屏幕的切换的Indicator。效果如下：<br><img src="http://ondlsj2sn.bkt.clouddn.com/FlpGT6-Tt0Piq7rZ2nPmbnCuAt1d.png" alt=""><br>本篇文章就通过自定义View来实现这三种IndicatorView。</p>
<h2 id="通过自定义View-实现多功能的CircleIndicatorView"><a href="#通过自定义View-实现多功能的CircleIndicatorView" class="headerlink" title="通过自定义View 实现多功能的CircleIndicatorView"></a>通过自定义View 实现多功能的CircleIndicatorView</h2><p>首先整理一下思路，CircleIndicatorView ,它是由一组圆 组成的，只不过圆有多种状态，选中、未选中、显示字母、显示数字等等。看着有这么多中状态，感觉挺复杂，但是其实不复杂，只是用不同的变量来控制不同的状态即可。其他的先不考虑，我们只要先把这一排圆画出来，剩下的就比较容易了。<strong>要确定一个圆的，需要知道圆的半径和圆心，半径是我们可以配置的,那么，其实核心就是计算这一排的圆点的圆心位置。圆心 y 的位置是固定的（View 高的一般），因此我们只需要计算每个圆的圆心x的位置，看下图，其实很容易就能找到规律，规律如下： 第一个圆的x 就等于圆的半径，从第二个圆开始，当前圆的圆心x 坐标为 上一个圆的x 坐标 + (radius * 2 + mSpace)。</strong> 其中mSpace 是圆之间的间距。<br><img src="http://ondlsj2sn.bkt.clouddn.com/FvsVDtj-3Ylb6cE8_4aiVzHDdDVD.png" alt=""></p>
<p>有了上面的规律，我们只需要一个循环就能找出所有圆的圆心位置。代码如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 测量每个圆点的位置</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">measureIndicator</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    mIndicators.clear();</div><div class="line">    <span class="keyword">float</span> cx = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mCount;i++)&#123;</div><div class="line">        Indicator indicator = <span class="keyword">new</span> Indicator();</div><div class="line">        <span class="keyword">if</span>( i== <span class="number">0</span>)&#123;</div><div class="line">            cx = mRadius + mStrokeWidth;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            cx += (mRadius + mStrokeWidth) * <span class="number">2</span> +mSpace;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        indicator.cx = cx;</div><div class="line">        indicator.cy = getMeasuredHeight() / <span class="number">2</span>;</div><div class="line"></div><div class="line">        mIndicators.<span class="keyword">add</span>(indicator);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们用Indicator类记录了每个圆的圆心位置，并且保存在一个列表里面，现在有了所有圆的数据，我们就可以绘制了。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line"><span class="keyword">protected</span> <span class="keyword">void</span> onDraw(Canvas canvas) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;mIndicators.<span class="built_in">size</span>();i++)&#123;</div><div class="line"></div><div class="line">        Indicator indicator = mIndicators.<span class="built_in">get</span>(i);</div><div class="line">        <span class="built_in">float</span> x = indicator.cx;</div><div class="line"></div><div class="line">        <span class="built_in">float</span> y = indicator.cy;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(mSelectPosition == i)&#123;</div><div class="line">            mCirclePaint.setStyle(Paint.Style.FILL);</div><div class="line">            mCirclePaint.setColor(mSelectColor);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            mCirclePaint.setColor(mDotNormalColor);</div><div class="line">            <span class="keyword">if</span>(mFillMode != FillMode.NONE)&#123;</div><div class="line">                mCirclePaint.setStyle(Paint.Style.STROKE);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                mCirclePaint.setStyle(Paint.Style.FILL);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        canvas.drawCircle(x,y, mRadius, mCirclePaint);</div><div class="line"></div><div class="line">        <span class="comment">// 绘制小圆点中的内容</span></div><div class="line">        <span class="keyword">if</span>(mFillMode != FillMode.NONE)&#123;</div><div class="line">            <span class="keyword">String</span> <span class="built_in">text</span> = <span class="string">""</span>;</div><div class="line">            <span class="keyword">if</span>(mFillMode == FillMode.LETTER)&#123;</div><div class="line">                <span class="keyword">if</span>(i &gt;= <span class="number">0</span> &amp;&amp; i&lt;LETTER.length)&#123;</div><div class="line">                    <span class="built_in">text</span> = LETTER[i];</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="built_in">text</span> = <span class="keyword">String</span>.valueOf(i+<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            Rect bound = <span class="keyword">new</span> Rect();</div><div class="line">            mTextPaint.getTextBounds(<span class="built_in">text</span>,<span class="number">0</span>,<span class="built_in">text</span>.length(),bound);</div><div class="line">            <span class="built_in">int</span> <span class="built_in">textWidth</span> = bound.<span class="built_in">width</span>();</div><div class="line">            <span class="built_in">int</span> textHeight = bound.<span class="built_in">height</span>();</div><div class="line"></div><div class="line">            <span class="built_in">float</span> textStartX = x - <span class="built_in">textWidth</span> / <span class="number">2</span>;</div><div class="line">            <span class="built_in">float</span> textStartY = y + textHeight / <span class="number">2</span>;</div><div class="line">            canvas.drawText(<span class="built_in">text</span>,textStartX,textStartY, mTextPaint);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>绘制的代码很简单，无非就是循环我们保存的列表，拿出每一个Indicator，然后绘制圆就行了，除此之外就是一些状态的判断，比如，是否绘制数字、字母和选中状态等等 。</p>
<p>到此，我们的CircleIndicatorView 的绘制工作算是完成了，并且也能够显示在界面上了，但是它现在还是一个单独的View。我们前面说过，IndicatorView 一般是配合ViewPager使用的，它是随着Viewpager的切换而改变的，因此我们需要将IndicatorView 与ViewPager 进行关联。</p>
<p>要让CircleIndicatorView 与ViewPager 关联，首先需要 CircleIndicatorView 实现<code>ViewPager.OnPageChangeListener</code>接口。然后在<code>onPageSelected</code>方法中记录当前页的位置。代码如下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    mSelectPosition = position;</div><div class="line">    invalidate();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第二步，向外提供一个API ,设置CircleIndicatorView 与 ViewPager 关联。<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *  与ViewPager 关联</div><div class="line"> * @param viewPager</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> setUpWithViewPager(ViewPager viewPager)&#123;</div><div class="line">    releaseViewPager();</div><div class="line">    <span class="keyword">if</span>(viewPager == <span class="keyword">null</span>)&#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    mViewPager = viewPager;</div><div class="line">    mViewPager.addOnPageChangeListener(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">int</span> <span class="keyword">count</span> = mViewPager.getAdapter().getCount();</div><div class="line">    setCount(<span class="keyword">count</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过如上两步，就建立了CircleIndicatorView 与ViewPager的关联，只需要调用方法<code>setUpWithViewPager</code>就OK。</p>
<p>到此就完了吗？当然还没有完，<strong>其实还有一个小细节，那就是IndicatorView 因该是可以点击的，点击Indicator小圆点就能切换ViewPager 到对应的页面（如 Iphone 和 魅族手机的 屏幕切换，点击indicator小圆点就可以切换 ,以前没有注意的现在可以去试一下 ），那么我们也来实现这样一个功能，其实很简单,重写onTouchEvent方法 ，监听ACTION_DOWN 事件，然后获取点击屏幕的坐标，与所绘制的圆位置比较,如果点击区域在圆的范围内，就点击了该Indicator。点击之后，切换Viewpager到对应页面。</strong>代码如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">@<span class="function">Override</span></div><div class="line"><span class="keyword">public</span> boolean <span class="title">onTouchEvent</span>(<span class="params">MotionEvent <span class="keyword">event</span></span>) &#123;</div><div class="line">    <span class="keyword">float</span> xPoint = <span class="number">0</span>;</div><div class="line">    <span class="keyword">float</span> yPoint = <span class="number">0</span>;</div><div class="line">    <span class="keyword">switch</span> (<span class="keyword">event</span>.getAction())&#123;</div><div class="line">        <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">            xPoint = <span class="keyword">event</span>.getX();</div><div class="line">            yPoint = <span class="keyword">event</span>.getY();</div><div class="line">            handleActionDown(xPoint,yPoint);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> super.onTouchEvent(<span class="keyword">event</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleActionDown</span>(<span class="params"><span class="keyword">float</span> xDis,<span class="keyword">float</span> yDis</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mIndicators.size();i++)&#123;</div><div class="line">        Indicator indicator = mIndicators.<span class="keyword">get</span>(i);</div><div class="line">        <span class="keyword">if</span>(xDis &lt; (indicator.cx + mRadius+mStrokeWidth)</div><div class="line">                &amp;&amp; xDis &gt;=(indicator.cx - (mRadius + mStrokeWidth))</div><div class="line">                &amp;&amp; yDis &gt;= (yDis - (indicator.cy+mStrokeWidth))</div><div class="line">                &amp;&amp; yDis &lt;(indicator.cy+mRadius+mStrokeWidth))&#123;</div><div class="line">             <span class="comment">// 找到了点击的Indicator</span></div><div class="line">            <span class="comment">// 切换ViewPager</span></div><div class="line">             mViewPager.setCurrentItem(i,<span class="literal">false</span>);</div><div class="line">             <span class="comment">// 回调</span></div><div class="line">            <span class="keyword">if</span>(mOnIndicatorClickListener!=<span class="literal">null</span>)&#123;</div><div class="line">                mOnIndicatorClickListener.onSelected(i);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到此，我们自定义IndicatorView 的工作就差不多完成了，但是现在的IndicatorView 还不是很灵活，我们要让它的可配置性更强，就应该提供更多的API 来让IndicatorView 使用更加灵活方便，因此，最后一步，加上一些自定义属性来提高它的灵活性。自定义了如下一些属性：</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>属性意义</th>
<th>取值</th>
</tr>
</thead>
<tbody>
<tr>
<td>indicatorRadius</td>
<td>设置指示器圆点的半径</td>
<td>单位为 dp 的值</td>
</tr>
<tr>
<td>indicatorBorderWidth</td>
<td>设置指示器的border</td>
<td>单位为 dp 的值</td>
</tr>
<tr>
<td>indicatorSpace</td>
<td>设置指示器之间的距离</td>
<td>单位为 dp 的值</td>
</tr>
<tr>
<td>indicatorTextColor</td>
<td>设置指示器中间的文字颜色</td>
<td>颜色值，如：＃FFFFFF</td>
</tr>
<tr>
<td>indicatorColor</td>
<td>设置指示器圆点的颜色</td>
<td>颜色值</td>
</tr>
<tr>
<td>indicatorSelectColor</td>
<td>设置指示器选中的颜色</td>
<td>颜色值</td>
</tr>
<tr>
<td>fill_mode</td>
<td>设置指示器的模式</td>
<td>枚举值：有三种，分别是letter,number和none</td>
</tr>
</tbody>
</table>
<p>自定义属性文件如下：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable <span class="built_in">name</span>=<span class="string">"CircleIndicatorView"</span>&gt;</div><div class="line">    &lt;attr <span class="built_in">name</span>=<span class="string">"indicatorRadius"</span> <span class="built_in">format</span>=<span class="string">"dimension"</span>/&gt;</div><div class="line">    &lt;attr <span class="built_in">name</span>=<span class="string">"indicatorBorderWidth"</span> <span class="built_in">format</span>=<span class="string">"dimension"</span>/&gt;</div><div class="line">    &lt;attr <span class="built_in">name</span>=<span class="string">"indicatorSpace"</span> <span class="built_in">format</span>=<span class="string">"dimension"</span>/&gt;</div><div class="line">    &lt;attr <span class="built_in">name</span>=<span class="string">"indicatorTextColor"</span> <span class="built_in">format</span>=<span class="string">"color"</span>/&gt;</div><div class="line">    &lt;attr <span class="built_in">name</span>=<span class="string">"indicatorColor"</span> <span class="built_in">format</span>=<span class="string">"color"</span>/&gt;</div><div class="line">    &lt;attr <span class="built_in">name</span>=<span class="string">"indicatorSelectColor"</span> <span class="built_in">format</span>=<span class="string">"color"</span>/&gt;</div><div class="line">    &lt;attr <span class="built_in">name</span>=<span class="string">"fill_mode"</span>&gt;</div><div class="line">        &lt;enum <span class="built_in">name</span>=<span class="string">"letter"</span> value=<span class="string">"0"</span>/&gt;</div><div class="line">        &lt;enum <span class="built_in">name</span>=<span class="string">"number"</span> value=<span class="string">"1"</span>/&gt;</div><div class="line">        &lt;enum <span class="built_in">name</span>=<span class="string">"none"</span> value=<span class="string">"2"</span>/&gt;</div><div class="line">    &lt;/attr&gt;</div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure></p>
<p>通过上面这些属性，我们就可以很好的定制IndicaotorView 了，比如，自定义圆的大小，颜色，border，文字的颜色，选中的颜色和展示的模式等等。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=26069686&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ondlsj2sn.bkt.clouddn.com/FjKXDufC34xZG2jcO9vhp-aIJPUH.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Indicator (指示器) 可能大家都见的比较多了，在一个APP中，有很多场景都会用到Indicator，比如第一次安装APP 时的引导页，首页上面的广告Banner ，又或者是Tab下面的Indicator。Indicator 一般配合ViewPager 使用，它能很直观的反应出ViewPager 中一共有多少页，当前选中的是哪一页，用户能够很容易的看出是否还可以滑动，用户体验较好。那么本篇文章就讲一下如何通过自定义View来实现一个漂亮简洁的IndicatorView。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android嫡系" scheme="http://dinson.win/categories/Android%E5%AB%A1%E7%B3%BB/"/>
    
    
      <category term="ViewPager系列" scheme="http://dinson.win/tags/ViewPager%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>关于python中如何导入pygame模块</title>
    <link href="http://dinson.win/2017/05/31/17-05-31/"/>
    <id>http://dinson.win/2017/05/31/17-05-31/</id>
    <published>2017-05-31T07:58:33.000Z</published>
    <updated>2017-07-12T15:14:12.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>在这里用python3.6和pygame (1.9.3)为例，请找自己相应匹配的版本。</p>
</blockquote>
<a id="more"></a>
<!-- 这是　　缩进-->
<h2 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h2><ol>
<li><p>下载python3.6.1<br><a href="https://www.Python.org/downloads/" target="_blank" rel="external">https://www.Python.org/downloads/</a></p>
</li>
<li><p>下载pip的wheel包<br><a href="https://pypi.python.org/pypi/pip" target="_blank" rel="external">https://pypi.python.org/pypi/pip</a></p>
</li>
<li><p>下载windows的easy installer<br><a href="https://pypi.python.org/pypi/setuptools" target="_blank" rel="external">https://pypi.python.org/pypi/setuptools</a></p>
</li>
<li><p>下载Pygame所需的wheel安装包<br><a href="https://pypi.python.org/pypi/Pygame" target="_blank" rel="external">https://pypi.python.org/pypi/Pygame</a><br><img src="http://ondlsj2sn.bkt.clouddn.com/FkpaiiHZ3KdqJCsRs70Sal8r5N_C.png" alt=""></p>
<blockquote>
<p><strong>注意版本的选择</strong></p>
</blockquote>
</li>
</ol>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><ol>
<li>安装python3.6.1</li>
<li>安装ez_setup.py 双击即可</li>
<li>安装pip的wheel安装包</li>
</ol>
<p>　　安装pip的wheel安装包需要进入DOS</p>
<p>　　　　（1）按win+R,输入cmd，进入DOS</p>
<p>　　　　（2）输入pip install wheel</p>
<p>　　　　（3）输入pip list，验证是否安装成功</p>
<p>4.安装pygame的wheel安装包<br>切换路径：切换到安装包所在的盘区，比如我的pygame的wheel是放到E盘去的</p>
<p>输入cd\<br>输入E：<br>现在我们进入我们要进的盘区了。<br>再输pip install pygame-1.9.2a0-cp35-none-win32.whl</p>
<p>至此我们已经安装成功。</p>
<p>最后就是import pygame</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在这里用python3.6和pygame (1.9.3)为例，请找自己相应匹配的版本。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python从入门到放弃" scheme="http://dinson.win/categories/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
  </entry>
  
  <entry>
    <title>CoordinatorLayout 自定义Behavior并不难，由简到难手把手带你飞 (未完...)</title>
    <link href="http://dinson.win/2017/05/29/17-05-29/"/>
    <id>http://dinson.win/2017/05/29/17-05-29/</id>
    <published>2017-05-29T07:58:33.000Z</published>
    <updated>2017-06-15T11:55:57.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>其实Behavior就是一个应用于View的观察者模式，一个View跟随者另一个View的变化而变化，或者说一个View监听另一个View。<br>在Behavior中，被观察View 也就是事件源被称为denpendcy，而观察View，则被称为child。</p>
</blockquote>
<a id="more"></a>
<!-- 这是　　缩进-->
<h2 id="难度1-Button与TextView"><a href="#难度1-Button与TextView" class="headerlink" title="难度1 Button与TextView"></a>难度1 Button与TextView</h2><p>首先在布局文件中跟布局设置为CoordinatorLayout，里面放一个Button和一个TextView。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</div><div class="line">   </div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">".EasyBehavior"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"观察者View child"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"被观察View dependency"</span>/&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里我们在Activity中做一些手脚，让Button动起来(不要在意坐标这些细节)<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">findViewById(R.id.btn).setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</div><div class="line">            @<span class="function">Override</span></div><div class="line">            <span class="keyword">public</span> boolean <span class="title">onTouch</span>(<span class="params">View v, MotionEvent <span class="keyword">event</span></span>) &#123;</div><div class="line">                <span class="keyword">switch</span> (<span class="keyword">event</span>.getAction()) &#123;</div><div class="line">                    <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                        v.setX(<span class="keyword">event</span>.getRawX() - v.getWidth() / <span class="number">2</span>);</div><div class="line">                        v.setY(<span class="keyword">event</span>.getRawY() - v.getHeight() / <span class="number">2</span>);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>此时，Button已经可以跟随手指移动了。</p>
<p>现在去自定义一个Behavior让TextView跟随Button一起动！</p>
<p>创建一个EasyBehavior类，继承于Behavior<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EasyBehavior</span> <span class="keyword">extends</span> <span class="title">CoordinatorLayout</span>.<span class="title">Behavior</span>&lt;<span class="title">TextView</span>&gt; </span>&#123;<span class="comment">//这里的泛型是child的类型，也就是观察者View</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EasyBehavior</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent, TextView child, View dependency)</span> </span>&#123;</div><div class="line">        <span class="comment">//告知监听的dependency是Button</span></div><div class="line">        <span class="keyword">return</span> dependency <span class="keyword">instanceof</span> Button;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">//当 dependency(Button)变化的时候，可以对child(TextView)进行操作</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, TextView child, View dependency)</span> </span>&#123;</div><div class="line">        child.setX(dependency.getX() + <span class="number">200</span>);</div><div class="line">        child.setY(dependency.getY() + <span class="number">200</span>);</div><div class="line">        child.setText(dependency.getX() + <span class="string">","</span> + dependency.getY());</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意两个方法<br><code>layoutDependsOn()</code> 代表寻找被观察View<br><code>onDependentViewChanged()</code> 被观察View变化的时候回调用的方法</p>
<blockquote>
<p>在onDependentViewChanged中，我们让TextView跟随Button的移动而移动。代码比较简单，一看就懂。</p>
<p>必须重写带双参的构造器，因为从xml反射需要调用。</p>
</blockquote>
<p>接下来，在xml中，给TextView设置我们的Behavior。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">        app:layout_behavior=<span class="string">".EasyBehavior"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:<span class="built_in">text</span>=<span class="string">"观察者View child"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>运行效果如下：<br><img src="http://ondlsj2sn.bkt.clouddn.com/Fhg96Q7qaGwhEwMXBh6NtL2IfZFz.gif" alt=""><br>这样一个最简单的behavior就做好了。</p>
<h2 id="难度2-仿UC折叠Behavior"><a href="#难度2-仿UC折叠Behavior" class="headerlink" title="难度2 仿UC折叠Behavior"></a>难度2 仿UC折叠Behavior</h2><p>这个效果布局嵌套比上一个例子些许复杂，如果看起来吃力，务必去补习CoordinatorLayout！！！！</p>
<p>先定义xml如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:ignore</span>=<span class="string">"RtlHardcoded"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></div><div class="line">        <span class="attr">app:elevation</span>=<span class="string">"0dp"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed|snap"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span></div><div class="line">                <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">                <span class="attr">android:src</span>=<span class="string">"@drawable/bg_1920_1080"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span></div><div class="line">                <span class="attr">app:layout_collapseParallaxMultiplier</span>=<span class="string">"0.9"</span>/&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">FrameLayout</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/frameLayout"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></div><div class="line">                <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|center_horizontal"</span></div><div class="line">                <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">                <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span></div><div class="line">                <span class="attr">app:layout_collapseParallaxMultiplier</span>=<span class="string">"0.3"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v4.widget.NestedScrollView</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:scrollbars</span>=<span class="string">"none"</span></div><div class="line">        <span class="attr">app:behavior_overlapTop</span>=<span class="string">"30dp"</span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/layout_uc_content"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/main.toolbar"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/colorPrimaryDark"</span></div><div class="line">        <span class="attr">app:layout_anchor</span>=<span class="string">"@id/frameLayout"</span></div><div class="line">        <span class="attr">app:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_title"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/colorPrimaryDark"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"头条"</span></div><div class="line">        <span class="attr">android:textColor</span>=<span class="string">"#fff"</span></div><div class="line">        <span class="attr">android:textSize</span>=<span class="string">"18sp"</span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">".DrawerBehavior"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>有一点值得注意的是，app:layout_anchor=”@id/frameLayout”这个属性，是附着的意思，这里我用作给了toolbar，代表toolbar附着在了frameLayout之上。会跟随frameLayout的scroll而变化Y的值。</p>
<p><strong>思路分析</strong><br>如何实现折叠呢，下半部分不用管了，AppBarLayout已经帮我们做好了，我们只要标注相应的scrollflags即可，所以，如上的布局，不做任何处理的话，作为标题的TextView是一直显示的，于是只要让TextView跟随Toolbar变化而变化就可以了。 接下来就创建一个Behavior类！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawerBehavior</span> <span class="keyword">extends</span> <span class="title">CoordinatorLayout</span>.<span class="title">Behavior</span>&lt;<span class="title">TextView</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mFrameMaxHeight = <span class="number">100</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mStartY;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent, TextView child, View dependency)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dependency <span class="keyword">instanceof</span> Toolbar;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DrawerBehavior</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, TextView child, View dependency)</span> </span>&#123;</div><div class="line">        <span class="comment">//记录开始的Y坐标  也就是toolbar起始Y坐标</span></div><div class="line">        <span class="keyword">if</span>(mStartY == <span class="number">0</span>) &#123;</div><div class="line">            mStartY = (<span class="keyword">int</span>) dependency.getY();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//计算toolbar从开始移动到最后的百分比</span></div><div class="line">        <span class="keyword">float</span> percent = dependency.getY()/mStartY;</div><div class="line"></div><div class="line">        <span class="comment">//改变child的坐标(从消失，到可见)</span></div><div class="line">        child.setY(child.getHeight()*(<span class="number">1</span>-percent) - child.getHeight());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>里面监听了Toolbar的Y坐标变化，然后让TextView的Y坐标也跟着变化。达到如预览图效果。</p>
<p>22418581</p>
<p><a href="http://music.163.com/#/m/song?id=&amp;userid=472025302" target="_blank" rel="external">http://music.163.com/#/m/song?id=&amp;userid=472025302</a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=18949977&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;其实Behavior就是一个应用于View的观察者模式，一个View跟随者另一个View的变化而变化，或者说一个View监听另一个View。&lt;br&gt;在Behavior中，被观察View 也就是事件源被称为denpendcy，而观察View，则被称为child。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android嫡系" scheme="http://dinson.win/categories/Android%E5%AB%A1%E7%B3%BB/"/>
    
    
      <category term="MaterialDesign" scheme="http://dinson.win/tags/MaterialDesign/"/>
    
  </entry>
  
  <entry>
    <title>Python从入门到放弃（8）-- Socket</title>
    <link href="http://dinson.win/2017/05/28/17-05-28/"/>
    <id>http://dinson.win/2017/05/28/17-05-28/</id>
    <published>2017-05-28T06:29:37.000Z</published>
    <updated>2017-06-15T11:55:57.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>socket通常也称作”套接字”，用于描述IP地址和端口，是一个通信链的句柄，应用程序通常通过”套接字”向网络发出请求或者应答网络请求。</p>
<p>socket起源于Unix，而Unix/Linux基本哲学之一就是“一切皆文件”，对于文件用【打开】【读写】【关闭】模式来操作。socket就是该模式的一个实现，socket即是一种特殊的文件，一些socket函数就是对其进行的操作（读/写IO、打开、关闭）</p>
</blockquote>
<p>socket和file的区别：</p>
<ul>
<li>file模块是针对某个指定文件进行【打开】【读写】【关闭】</li>
<li>socket模块是针对 服务器端 和 客户端Socket 进行【打开】【读写】【关闭】</li>
</ul>
<a id="more"></a>
<!-- 这是　　缩进-->
<p><img src="http://ondlsj2sn.bkt.clouddn.com/Fo5Iac4x_-S14ZoClUX1d6DJ8JOg.png" alt=""></p>
<p><img src="http://ondlsj2sn.bkt.clouddn.com/FhHICNMLup6VgDnb1nJ6md2ktNOH.png" alt=""></p>
<p>socket server:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line">ip_port = (<span class="string">'127.0.0.1'</span>,<span class="number">9999</span>)</div><div class="line"></div><div class="line">sk = socket.socket()</div><div class="line">sk.bind(ip_port)</div><div class="line">sk.<span class="built_in">listen</span>(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="built_in">while</span> True:</div><div class="line">    <span class="built_in">print</span> <span class="string">'server waiting...'</span></div><div class="line">    conn,addr = sk.accept()</div><div class="line"></div><div class="line">    client_data = conn.recv(<span class="number">1024</span>)</div><div class="line">    <span class="built_in">print</span> client_data</div><div class="line">    conn.sendall(<span class="string">'不要回答,不要回答,不要回答'</span>)</div><div class="line"></div><div class="line">    conn.<span class="built_in">close</span>()</div></pre></td></tr></table></figure></p>
<p>socket client:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> socket</div><div class="line">ip_port = (<span class="string">'127.0.0.1'</span>,<span class="number">9999</span>)</div><div class="line"></div><div class="line">sk = socket.socket()</div><div class="line">sk.<span class="built_in">connect</span>(ip_port)</div><div class="line"></div><div class="line">sk.sendall(<span class="string">'请求占领地球'</span>)</div><div class="line"></div><div class="line">server_reply = sk.recv(<span class="number">1024</span>)</div><div class="line"><span class="built_in">print</span> server_reply</div><div class="line"></div><div class="line">sk.<span class="built_in">close</span>()</div></pre></td></tr></table></figure></p>
<p>WEB服务应用：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import <span class="built_in">socket</span></div><div class="line"> </div><div class="line">def handle_request(client):</div><div class="line">    buf = client.recv(<span class="number">1024</span>)</div><div class="line">    client.<span class="built_in">send</span>(<span class="string">"HTTP/1.1 200 OK\r\n\r\n"</span>)</div><div class="line">    client.<span class="built_in">send</span>(<span class="string">"Hello, World"</span>)</div><div class="line"> </div><div class="line">def main():</div><div class="line">    sock = <span class="built_in">socket</span>.<span class="built_in">socket</span>(<span class="built_in">socket</span>.AF_INET, <span class="built_in">socket</span>.SOCK_STREAM)</div><div class="line">    sock.bind((<span class="string">'localhost'</span>,<span class="number">8080</span>))</div><div class="line">    sock.listen(<span class="number">5</span>)</div><div class="line"> </div><div class="line">    <span class="keyword">while</span> True:</div><div class="line">        connection, address = sock.accept()</div><div class="line">        handle_request(connection)</div><div class="line">        connection.<span class="built_in">close</span>()</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">  main()</div></pre></td></tr></table></figure></p>
<h2 id="Socket-参数介绍"><a href="#Socket-参数介绍" class="headerlink" title="Socket 参数介绍"></a>Socket 参数介绍</h2><p><code>sk = socket.socket(socket.AF_INET,socket.SOCK_STREAM,0)</code></p>
<ul>
<li><p>参数一：地址簇<br>　　<code>socket.AF_INET</code> IPv4（默认）<br>　　<code>socket.AF_INET6</code> IPv6<br>　　<code>socket.AF_UNIX</code> 只能够用于单一的Unix系统进程间通信</p>
</li>
<li><p>参数二：类型<br>　　<code>socket.SOCK_STREAM</code>　　流式socket , for TCP （默认）<br>　　<code>socket.SOCK_DGRAM</code>　　 数据报式socket , for UDP<br>　　<code>socket.SOCK_RAW</code> 原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以；其次，SOCK_RAW也可以处理特殊的IPv4报文；此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头。<br>　　<code>socket.SOCK_RDM</code> 是一种可靠的UDP形式，即保证交付数据报但不保证顺序。SOCK_RAM用来提供对原始协议的低级访问，在需要执行某些特殊操作时使用，如发送ICMP报文。SOCK_RAM通常仅限于高级用户或管理员运行的程序使用。<br>　　<code>socket.SOCK_SEQPACKET</code> 可靠的连续数据包服务</p>
</li>
<li><p>参数三：协议<br>　　<code>0</code>　　（默认）与特定的地址家族相关的协议,如果是 0 ，则系统就会根据地址格式和套接类别,自动选择一个合适的协议</p>
</li>
</ul>
<p><code>sk.bind(address)</code><br>　　s.bind(address) 将套接字绑定到地址。address地址的格式取决于地址族。在AF_INET下，以元组（host,port）的形式表示地址。</p>
<p><code>sk.listen(backlog)</code><br>　　开始监听传入连接。backlog指定在拒绝连接之前，可以挂起的最大连接数量。<br>　　backlog等于5，表示内核已经接到了连接请求，但服务器还没有调用accept进行处理的连接个数最大为5这个值不能无限大，因为要在内核中维护连接队列</p>
<p><code>sk.setblocking(bool)</code><br>　　是否阻塞（默认True），如果设置False，那么accept和recv时一旦无数据，则报错。</p>
<p><code>sk.accept()</code><br>　　接受连接并返回（conn,address）,其中conn是新的套接字对象，可以用来接收和发送数据。address是连接客户端的地址。<br>　　接收TCP 客户的连接（阻塞式）等待连接的到来</p>
<p><code>sk.connect(address)</code><br>　　连接到address处的套接字。一般，address的格式为元组（hostname,port）,如果连接出错，返回socket.error错误。</p>
<p><code>sk.connect_ex(address)</code><br>　　同上，只不过会有返回值，连接成功时返回 0 ，连接失败时候返回编码，例如：10061</p>
<p><code>sk.close()</code><br>　　关闭套接字</p>
<p><code>sk.recv(bufsize[,flag])</code><br>　　接受套接字的数据。数据以字符串形式返回，bufsize指定最多可以接收的数量。flag提供有关消息的其他信息，通常可以忽略。</p>
<p><code>sk.recvfrom(bufsize[.flag])</code><br>　　与recv()类似，但返回值是（data,address）。其中data是包含接收数据的字符串，address是发送数据的套接字地址。</p>
<p><code>sk.send(string[,flag])</code><br>　　将string中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于string的字节大小。即：可能未将指定内容全部发送。</p>
<p><code>sk.sendall(string[,flag])</code><br>　　将string中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回None，失败则抛出异常。<br>　　内部通过递归调用send，将所有内容发送出去。</p>
<p><code>sk.sendto(string[,flag],address)</code><br>　　将数据发送到套接字，address是形式为（ipaddr，port）的元组，指定远程地址。返回值是发送的字节数。该函数主要用于UDP协议。</p>
<p><code>sk.settimeout(timeout)</code><br>　　设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如 client 连接最多等待5s ）</p>
<p><code>sk.getpeername()</code><br>　　返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）。</p>
<p><code>sk.getsockname()</code><br>　　返回套接字自己的地址。通常是一个元组(ipaddr,port)</p>
<p><code>sk.fileno()</code><br>　　套接字的文件描述符</p>
<h2 id="实例：智能机器人"><a href="#实例：智能机器人" class="headerlink" title="实例：智能机器人"></a>实例：智能机器人</h2><p>服务端:<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line">ip_port = (<span class="string">'127.0.0.1'</span>,<span class="number">8888</span>)</div><div class="line">sk = socket.socket()</div><div class="line">sk.bind(ip_port)</div><div class="line">sk.listen(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="literal">True</span>:</div><div class="line">    conn,address =  sk.accept()</div><div class="line">    conn.sendall(<span class="string">'欢迎致电 10086，请输入1xxx,0转人工服务.'</span>)</div><div class="line">    Flag = <span class="literal">True</span></div><div class="line">    <span class="keyword">while</span> Flag:</div><div class="line">        <span class="built_in">data</span> = conn.recv(<span class="number">1024</span>)</div><div class="line">        <span class="keyword">if</span> <span class="built_in">data</span> == <span class="string">'exit'</span>:</div><div class="line">            Flag = <span class="literal">False</span></div><div class="line">        elif <span class="built_in">data</span> == <span class="string">'0'</span>:</div><div class="line">            conn.sendall(<span class="string">'通过可能会被录音.balabala一大推'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            conn.sendall(<span class="string">'请重新输入.'</span>)</div><div class="line">    conn.close()</div></pre></td></tr></table></figure></p>
<p>客户端:<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line">ip_port = (<span class="string">'127.0.0.1'</span>,<span class="number">8005</span>)</div><div class="line">sk = socket.socket()</div><div class="line">sk.<span class="built_in">connect</span>(ip_port)</div><div class="line">sk.settimeout(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="built_in">while</span> True:</div><div class="line">    data = sk.recv(<span class="number">1024</span>)</div><div class="line">    <span class="built_in">print</span> <span class="string">'receive:'</span>,data</div><div class="line">    inp = raw_input(<span class="string">'please input:'</span>)</div><div class="line">    sk.sendall(inp)</div><div class="line">    <span class="built_in">if</span> inp == <span class="string">'exit'</span>:</div><div class="line">        <span class="built_in">break</span></div><div class="line"></div><div class="line">sk.<span class="built_in">close</span>()</div></pre></td></tr></table></figure></p>
<h2 id="SocketServer模块"><a href="#SocketServer模块" class="headerlink" title="SocketServer模块"></a>SocketServer模块</h2><blockquote>
<p>SocketServer内部使用 IO多路复用 以及 “多线程” 和 “多进程” ，从而实现并发处理多个客户端请求的Socket服务端。即：每个客户端请求连接到服务器时，Socket服务端都会在服务器是创建一个“线程”或者“进程” 专门负责处理当前客户端的所有请求。</p>
</blockquote>
<p><img src="http://ondlsj2sn.bkt.clouddn.com/FuemAEvM1JPr0JK8a8gAeeaXOdr8.png" alt=""></p>
<p>让你的socketserver并发起来， 必须选择使用以下一个多并发的类<br><strong>class socketserver.ForkingTCPServer</strong><br><strong>class socketserver.ForkingUDPServer</strong><br><strong>class socketserver.ThreadingTCPServer</strong><br><strong>class socketserver.ThreadingUDPServer</strong></p>
<h2 id="ThreadingTCPServer"><a href="#ThreadingTCPServer" class="headerlink" title="ThreadingTCPServer"></a>ThreadingTCPServer</h2><blockquote>
<p>ThreadingTCPServer实现的Soket服务器内部会为每个client创建一个 “<code>线程</code>”，该线程用来和客户端进行交互。</p>
</blockquote>
<h3 id="ThreadingTCPServer基础"><a href="#ThreadingTCPServer基础" class="headerlink" title="ThreadingTCPServer基础"></a>ThreadingTCPServer基础</h3><p>使用ThreadingTCPServer:</p>
<ul>
<li>创建一个继承自 SocketServer.BaseRequestHandler 的类</li>
<li>类中必须定义一个名称为 handle 的方法</li>
<li>启动ThreadingTCPServer</li>
</ul>
<h3 id="ThreadingTCPServer源码剖析"><a href="#ThreadingTCPServer源码剖析" class="headerlink" title="ThreadingTCPServer源码剖析"></a>ThreadingTCPServer源码剖析</h3><p>ThreadingTCPServer的类图关系如下：<br><img src="http://ondlsj2sn.bkt.clouddn.com/Fmp-X1BHrn_A3vo68eGw6izBVHfs.png" alt=""></p>
<p>内部调用流程为：</p>
<ul>
<li>启动服务端程序</li>
<li>执行 TCPServer.<strong>init</strong> 方法，创建服务端Socket对象并绑定 IP 和 端口</li>
<li>执行 BaseServer.<strong>init</strong> 方法，将自定义的继承自SocketServer.BaseRequestHandler 的类 MyRequestHandle赋值给self.RequestHandlerClass</li>
<li>执行 BaseServer.server_forever 方法，While 循环一直监听是否有客户端请求到达 …<br>当客户端连接到达服务器</li>
<li>执行 ThreadingMixIn.process_request 方法，创建一个 “线程” 用来处理请求</li>
<li>执行 ThreadingMixIn.process_request_thread 方法</li>
<li>执行 BaseServer.finish_request 方法，执行 self.RequestHandlerClass()  即：执行 自定义 MyRequestHandler 的构造方法（自动调用基类BaseRequestHandler的构造方法，在该构造方法中又会调用 MyRequestHandler的handle方法）</li>
</ul>
<h3 id="精简代码"><a href="#精简代码" class="headerlink" title="精简代码"></a>精简代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> select</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(request, client_address)</span>:</span></div><div class="line">    <span class="keyword">print</span> request,client_address</div><div class="line">    conn = request</div><div class="line">    conn.sendall(<span class="string">'欢迎致电 10086，请输入1xxx,0转人工服务.'</span>)</div><div class="line">    flag = <span class="keyword">True</span></div><div class="line">    <span class="keyword">while</span> flag:</div><div class="line">        data = conn.recv(<span class="number">1024</span>)</div><div class="line">        <span class="keyword">if</span> data == <span class="string">'exit'</span>:</div><div class="line">            flag = <span class="keyword">False</span></div><div class="line">        <span class="keyword">elif</span> data == <span class="string">'0'</span>:</div><div class="line">            conn.sendall(<span class="string">'通过可能会被录音.balabala一大推'</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            conn.sendall(<span class="string">'请重新输入.'</span>)</div><div class="line"></div><div class="line">sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">sk.bind((<span class="string">'127.0.0.1'</span>,<span class="number">8002</span>))</div><div class="line">sk.listen(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    r, w, e = select.select([sk,],[],[],<span class="number">1</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">'looping'</span></div><div class="line">    <span class="keyword">if</span> sk <span class="keyword">in</span> r:</div><div class="line">        <span class="keyword">print</span> <span class="string">'get request'</span></div><div class="line">        request, client_address = sk.accept()</div><div class="line">        t = threading.Thread(target=process, args=(request, client_address))</div><div class="line">        t.daemon = <span class="keyword">False</span></div><div class="line">        t.start()</div><div class="line"></div><div class="line">sk.close()</div></pre></td></tr></table></figure>
<p>如精简代码可以看出，SocketServer的ThreadingTCPServer之所以可以同时处理请求得益于 select 和 Threading 两个东西，其实本质上就是在服务器端为每一个客户端创建一个线程，当前线程用来处理对应客户端的请求，所以，可以支持同时n个客户端链接（长连接）。</p>
<h2 id="ForkingTCPServer"><a href="#ForkingTCPServer" class="headerlink" title="ForkingTCPServer"></a>ForkingTCPServer</h2><blockquote>
<p>ForkingTCPServer和ThreadingTCPServer的使用和执行流程基本一致，只不过在内部分别为请求者建立 “线程”  和 “进程”。</p>
</blockquote>
<p>服务端:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> SocketServer</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyServer</span><span class="params">(SocketServer.BaseRequestHandler)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># print self.request,self.client_address,self.server</span></div><div class="line">        conn = self.request</div><div class="line">        conn.sendall(<span class="string">'欢迎致电 10086，请输入1xxx,0转人工服务.'</span>)</div><div class="line">        Flag = <span class="keyword">True</span></div><div class="line">        <span class="keyword">while</span> Flag:</div><div class="line">            data = conn.recv(<span class="number">1024</span>)</div><div class="line">            <span class="keyword">if</span> data == <span class="string">'exit'</span>:</div><div class="line">                Flag = <span class="keyword">False</span></div><div class="line">            <span class="keyword">elif</span> data == <span class="string">'0'</span>:</div><div class="line">                conn.sendall(<span class="string">'通过可能会被录音.balabala一大推'</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                conn.sendall(<span class="string">'请重新输入.'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    server = SocketServer.ForkingTCPServer((<span class="string">'127.0.0.1'</span>,<span class="number">8009</span>),MyServer)</div><div class="line">    server.serve_forever()</div></pre></td></tr></table></figure></p>
<p>客户端<br><figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line">import <span class="keyword">socket</span></div><div class="line"></div><div class="line"></div><div class="line">ip_port = (<span class="string">'127.0.0.1'</span>,<span class="number">8009</span>)</div><div class="line">sk = <span class="keyword">socket</span>.<span class="keyword">socket</span>()</div><div class="line">sk.connect(ip_port)</div><div class="line">sk.settimeout(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="keyword">while</span> True:</div><div class="line">    data = sk.recv(<span class="number">1024</span>)</div><div class="line">    print <span class="string">'receive:'</span>,data</div><div class="line">    inp = raw_input(<span class="string">'please input:'</span>)</div><div class="line">    sk.sendall(inp)</div><div class="line">    <span class="keyword">if</span> inp == <span class="string">'exit'</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line">sk.<span class="keyword">close</span>()</div></pre></td></tr></table></figure></p>
<p>以上ForkingTCPServer只是将 ThreadingTCPServer 实例中的代码：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server = SocketServer.ThreadingTCPServer(('<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>',<span class="number">8009</span>),MyRequestHandler)</div></pre></td></tr></table></figure></p>
<p>变更为：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server = SocketServer.ForkingTCPServer(('<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>',<span class="number">8009</span>),MyRequestHandler)</div></pre></td></tr></table></figure></p>
<p>SocketServer的ThreadingTCPServer之所以可以同时处理请求得益于 select 和 os.fork 两个东西，其实本质上就是在服务器端为每一个客户端创建一个进程，当前新创建的进程用来处理对应客户端的请求，所以，可以支持同时n个客户端链接（长连接）。</p>
<h2 id="Twisted"><a href="#Twisted" class="headerlink" title="Twisted"></a>Twisted</h2><blockquote>
<p>Twisted是一个事件驱动的网络框架，其中包含了诸多功能，例如：网络协议、线程、数据库管理、网络操作、电子邮件等。</p>
</blockquote>
<p><img src="http://ondlsj2sn.bkt.clouddn.com/FiTgejJLUMWQUgOBhOrcmE9XBth0.png" alt=""></p>
<h3 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h3><p>简而言之，事件驱动分为二个部分：第一，注册事件；第二，触发事件。</p>
<p>自定义事件驱动框架，命名为：“弑君者”：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># event_drive.py</div><div class="line"></div><div class="line">event_list = []</div><div class="line"></div><div class="line"></div><div class="line">def run():</div><div class="line">    for event in event_list:</div><div class="line">        obj = event()</div><div class="line">        obj.execute()</div><div class="line"></div><div class="line"></div><div class="line">class BaseHandler(object):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    用户必须继承该类，从而规范所有类的方法（类似于接口的功能）</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    def execute(self):</div><div class="line">        raise Exception(&apos;you must overwrite execute&apos;)</div></pre></td></tr></table></figure></p>
<p>程序员使用“弑君者框架”：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> source <span class="keyword">import</span> event_drive</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span><span class="params">(event_drive.BaseHandler)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'event-drive execute MyHandler'</span></div><div class="line"></div><div class="line">event_drive.event_list.append(MyHandler)</div><div class="line">event_drive.run()</div></pre></td></tr></table></figure></p>
<p>如上述代码，事件驱动只不过是框架规定了执行顺序，程序员在使用框架时，可以向原执行顺序中注册“事件”，从而在框架执行时可以出发已注册的“事件”。</p>
<h3 id="基于事件驱动Socket"><a href="#基于事件驱动Socket" class="headerlink" title="基于事件驱动Socket"></a>基于事件驱动Socket</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> protocol</div><div class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Echo</span><span class="params">(protocol.Protocol)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dataReceived</span><span class="params">(self, data)</span>:</span></div><div class="line">        self.transport.write(data)</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    factory = protocol.ServerFactory()</div><div class="line">    factory.protocol = Echo</div><div class="line"> </div><div class="line">    reactor.listenTCP(<span class="number">8000</span>,factory)</div><div class="line">    reactor.run()</div><div class="line"> </div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<p><img src="http://ondlsj2sn.bkt.clouddn.com/FnxqehwDO753xD7SpFAFZwDgdIyM.png" alt=""></p>
<p>程序执行流程：</p>
<ul>
<li>运行服务端程序</li>
<li>创建Protocol的派生类Echo</li>
<li>创建ServerFactory对象，并将Echo类封装到其protocol字段中</li>
<li>执行reactor的 listenTCP 方法，内部使用 tcp.Port 创建socket server对象，并将该对象添加到了 reactor的set类型的字段 _read 中</li>
<li>执行reactor的 run 方法，内部执行 while 循环，并通过 select 来监视 _read 中文件描述符是否有变化，循环中…</li>
<li>客户端请求到达</li>
<li>执行reactor的 _doReadOrWrite 方法，其内部通过反射调用 tcp.Port 类的 doRead 方法，内部 accept 客户端连接并创建Server对象实例（用于封装客户端socket信息）和 创建 Echo 对象实例（用于处理请求） ，然后调用 Echo 对象实例的 makeConnection 方法，创建连接。</li>
<li>执行 tcp.Server 类的 doRead 方法，读取数据，</li>
<li>执行 tcp.Server 类的 _dataReceived 方法，如果读取数据内容为空（关闭链接），否则，出发 Echo 的 dataReceived 方法</li>
<li>执行 Echo 的 dataReceived 方法 </li>
</ul>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=18836229&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;socket通常也称作”套接字”，用于描述IP地址和端口，是一个通信链的句柄，应用程序通常通过”套接字”向网络发出请求或者应答网络请求。&lt;/p&gt;
&lt;p&gt;socket起源于Unix，而Unix/Linux基本哲学之一就是“一切皆文件”，对于文件用【打开】【读写】【关闭】模式来操作。socket就是该模式的一个实现，socket即是一种特殊的文件，一些socket函数就是对其进行的操作（读/写IO、打开、关闭）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;socket和file的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;file模块是针对某个指定文件进行【打开】【读写】【关闭】&lt;/li&gt;
&lt;li&gt;socket模块是针对 服务器端 和 客户端Socket 进行【打开】【读写】【关闭】&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python从入门到放弃" scheme="http://dinson.win/categories/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
  </entry>
  
  <entry>
    <title>Python从入门到放弃（7）-- 面向对象编程进阶</title>
    <link href="http://dinson.win/2017/05/27/17-05-27/"/>
    <id>http://dinson.win/2017/05/27/17-05-27/</id>
    <published>2017-05-27T03:38:12.000Z</published>
    <updated>2017-05-31T11:44:12.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<ul>
<li>面向对象高级语法部分<br>　- 经典类vs新式类　　<br>　- 静态方法、类方法、属性方法<br>　- 类的特殊方法<br>　- 反射</li>
<li>异常处理</li>
</ul>
</blockquote>
<a id="more"></a>
<!-- 这是　　缩进-->
<h2 id="经典类vs新式类"><a href="#经典类vs新式类" class="headerlink" title="经典类vs新式类"></a>经典类vs新式类</h2><p>把下面代码用python2 和python3都执行一下<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        <span class="keyword">self</span>.n = <span class="string">'A'</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="title">A</span>):</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        <span class="keyword">self</span>.n = <span class="string">'B'</span></div><div class="line">    pass</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="title">A</span>):</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        <span class="keyword">self</span>.n = <span class="string">'C'</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>(<span class="title">B</span>,<span class="title">C</span>):</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        <span class="keyword">self</span>.n = <span class="string">'D'</span></div><div class="line">    pass</div><div class="line"> </div><div class="line">obj = D()</div><div class="line"> </div><div class="line">print(obj.n)</div></pre></td></tr></table></figure></p>
<p>小结:<br>经典类：深度优先<br>新式类：广度优先<br>super()用法</p>
<h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>通过<strong>@staticmethod</strong>装饰器即可把其装饰的方法变为一个静态方法，什么是静态方法呢？其实不难理解，普通的方法，可以在实例化后直接调用，并且在方法里可以通过self.调用实例变量或类变量，但静态方法是不可以访问实例变量或类变量的，一个不能访问实例变量和类变量的方法，其实相当于跟类本身已经没什么关系了，它与类唯一的关联就是需要通过类名来调用这个方法<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="title">object</span>):</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name)</span></span>:</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line"> </div><div class="line">    @staticmethod <span class="comment">#把eat方法变为静态方法</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        print(<span class="string">"%s is eating"</span> % <span class="keyword">self</span>.name)</div><div class="line"> </div><div class="line">d = Dog(<span class="string">"ChenRonghua"</span>)</div><div class="line">d.eat()</div></pre></td></tr></table></figure></p>
<p>上面的调用会出以下错误，说是eat需要一个self参数，但调用时却没有传递，没错，当eat变成静态方法后，再通过实例调用时就不会自动把实例本身当作一个参数传给self了。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">TypeError:</span> eat() missing <span class="number">1</span> required positional <span class="string">argument:</span> <span class="string">'self'</span></div></pre></td></tr></table></figure></p>
<p>想让上面的代码可以正常工作有两种办法</p>
<ol>
<li>调用时主动传递实例本身给eat方法，即d.eat(d) </li>
<li>在eat方法中去掉self参数，但这也意味着，在eat中不能通过self.调用实例中的其它变量了<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="title">object</span>):</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name)</span></span>:</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line"></div><div class="line">    @staticmethod</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">()</span></span>:</div><div class="line">        print(<span class="string">" is eating"</span>)</div><div class="line"></div><div class="line">d = Dog(<span class="string">"ChenRonghua"</span>)</div><div class="line">d.eat()</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法　"></a>类方法　</h2><p>类方法通过<strong>@classmethod</strong>装饰器实现，类方法和普通方法的区别是， 类方法只能访问类变量，不能访问实例变量<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="title">object</span>):</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name)</span></span>:</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line"> </div><div class="line">    @classmethod</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        print(<span class="string">"%s is eating"</span> % <span class="keyword">self</span>.name)</div><div class="line"> </div><div class="line">d = Dog(<span class="string">"ChenRonghua"</span>)</div><div class="line">d.eat()</div></pre></td></tr></table></figure></p>
<p>执行报错如下，说Dog没有name属性，因为name是个实例变量，类方法是不能访问实例变量的<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AttributeError: <span class="built_in">type</span> object <span class="string">'Dog'</span> <span class="built_in">has</span> <span class="keyword">no</span> attribute <span class="string">'name'</span></div></pre></td></tr></table></figure></p>
<p>此时可以定义一个类变量，也叫name,看下执行效果<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="title">object</span>):</span></div><div class="line">    name = <span class="string">"我是类变量"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name)</span></span>:</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line"> </div><div class="line">    @classmethod</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        print(<span class="string">"%s is eating"</span> % <span class="keyword">self</span>.name)</div><div class="line"> </div><div class="line">d = Dog(<span class="string">"ChenRonghua"</span>)</div><div class="line">d.eat()</div><div class="line"> </div><div class="line"><span class="comment">#执行结果</span></div><div class="line"> </div><div class="line">我是类变量 is eating</div></pre></td></tr></table></figure></p>
<h2 id="属性方法"><a href="#属性方法" class="headerlink" title="属性方法　　"></a>属性方法　　</h2><p>属性方法的作用就是通过<strong>@property</strong>把一个方法变成一个静态属性<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="title">object</span>):</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name)</span></span>:</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line"> </div><div class="line">    @property</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        print(<span class="string">" %s is eating"</span> %<span class="keyword">self</span>.name)</div><div class="line"> </div><div class="line">d = Dog(<span class="string">"ChenRonghua"</span>)</div><div class="line">d.eat()</div></pre></td></tr></table></figure></p>
<p>调用会出以下错误， 说NoneType is not callable, 因为eat此时已经变成一个静态属性了， 不是方法了， 想调用已经不需要加()号了，直接d.eat就可以了<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TypeError: <span class="string">'NoneType'</span> <span class="keyword">object</span> <span class="keyword">is</span> <span class="keyword">not</span> callable</div></pre></td></tr></table></figure></p>
<p>正常调用如下<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">d = Dog(<span class="string">"nick"</span>)</div><div class="line">d.eat</div><div class="line"> </div><div class="line">输出</div><div class="line">nick is eating</div></pre></td></tr></table></figure></p>
<p>好吧，把一个方法变成静态属性有什么卵用呢？既然想要静态变量，那直接定义成一个静态变量不就得了么？well, 以后你会需到很多场景是不能简单通过 定义 静态属性来实现的， 比如 ，你想知道一个航班当前的状态，是到达了、延迟了、取消了、还是已经飞走了， 想知道这种状态你必须经历以下几步:</p>
<ol>
<li>连接航空公司API查询</li>
<li>对查询结果进行解析 </li>
<li>返回结果给你的用户</li>
</ol>
<p>因此这个status属性的值是一系列动作后才得到的结果，所以你每次调用时，其实它都要经过一系列的动作才返回你结果，但这些动作过程不需要用户关心， 用户只需要调用这个属性就可以，明白了么？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></div><div class="line">        self.flight_name = name</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checking_status</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">"checking flight %s status "</span> % self.flight_name)</div><div class="line">        <span class="keyword">return</span>  <span class="number">1</span></div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flight_status</span><span class="params">(self)</span>:</span></div><div class="line">        status = self.checking_status()</div><div class="line">        <span class="keyword">if</span> status == <span class="number">0</span> :</div><div class="line">            print(<span class="string">"flight got canceled..."</span>)</div><div class="line">        <span class="keyword">elif</span> status == <span class="number">1</span> :</div><div class="line">            print(<span class="string">"flight is arrived..."</span>)</div><div class="line">        <span class="keyword">elif</span> status == <span class="number">2</span>:</div><div class="line">            print(<span class="string">"flight has departured already..."</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"cannot confirm the flight status...,please check later"</span>)</div><div class="line"></div><div class="line">f = Flight(<span class="string">"CA980"</span>)</div><div class="line">f.flight_status</div></pre></td></tr></table></figure></p>
<p>cool , 那现在我只能查询航班状态， 既然这个flight_status已经是个属性了， 那我能否给它赋值呢？试试吧<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">f = Flight(<span class="string">"CA980"</span>)</div><div class="line">f<span class="selector-class">.flight_status</span></div><div class="line">f<span class="selector-class">.flight_status</span> = <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>输出， 说不能更改这个属性，我擦。。。。，怎么办怎么办。。。 </p>
<p>当然可以改， 不过需要通过@proerty.setter装饰器再装饰一下，此时 你需要写一个新方法， 对这个flight_status进行更改。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span>(<span class="title">object</span>):</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name)</span></span>:</div><div class="line">        <span class="keyword">self</span>.flight_name = name</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checking_status</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        print(<span class="string">"checking flight %s status "</span> % <span class="keyword">self</span>.flight_name)</div><div class="line">        <span class="keyword">return</span>  <span class="number">1</span></div><div class="line"></div><div class="line">    @property</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flight_status</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        status = <span class="keyword">self</span>.checking_status()</div><div class="line">        <span class="keyword">if</span> status == <span class="number">0</span> :</div><div class="line">            print(<span class="string">"flight got canceled..."</span>)</div><div class="line">        elif status == <span class="number">1</span> :</div><div class="line">            print(<span class="string">"flight is arrived..."</span>)</div><div class="line">        elif status == <span class="number">2</span>:</div><div class="line">            print(<span class="string">"flight has departured already..."</span>)</div><div class="line">        <span class="symbol">else:</span></div><div class="line">            print(<span class="string">"cannot confirm the flight status...,please check later"</span>)</div><div class="line">    </div><div class="line">    @flight_status.setter <span class="comment">#修改</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flight_status</span><span class="params">(<span class="keyword">self</span>,status)</span></span>:</div><div class="line">        status_dic = &#123;</div><div class="line">            <span class="number">0</span> : <span class="string">"canceled"</span>,</div><div class="line">            <span class="number">1</span> <span class="symbol">:<span class="string">"arrived"</span></span>,</div><div class="line">            <span class="number">2</span> : <span class="string">"departured"</span></div><div class="line">        &#125;</div><div class="line">        print(<span class="string">"\033[31;1mHas changed the flight status to \033[0m"</span>,status_dic.get(status) )</div><div class="line"></div><div class="line">    @flight_status.deleter  <span class="comment">#删除</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flight_status</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">        print(<span class="string">"status got removed..."</span>)</div><div class="line"></div><div class="line">f = Flight(<span class="string">"CA980"</span>)</div><div class="line">f.flight_status</div><div class="line">f.flight_status =  <span class="number">2</span> <span class="comment">#触发<span class="doctag">@flight</span>_status.setter </span></div><div class="line">del f.flight_status <span class="comment">#触发<span class="doctag">@flight</span>_status.deleter</span></div></pre></td></tr></table></figure></p>
<p>注意以上代码里还写了一个@flight_status.deleter, 是允许可以将这个属性删除 </p>
<h2 id="类的特殊成员方法"><a href="#类的特殊成员方法" class="headerlink" title="类的特殊成员方法"></a>类的特殊成员方法</h2><ul>
<li><p><strong>doc</strong>　　表示类的描述信息</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></div><div class="line">    <span class="string">""" 描述类信息，这是用于看片的神奇 """</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"> </div><div class="line"><span class="keyword">print</span> Foo.__doc__</div><div class="line"><span class="comment">#输出：描述类信息，这是用于看片的神奇</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>__module__</code>    表示当前操作的对象在那个模块</p>
</li>
<li><code>__class__</code>     表示当前操作的对象的类是什么</li>
<li><code>__init__</code>        构造方法，通过类创建对象时，自动触发执行。</li>
<li><code>__del__</code>        析构方法，当对象在内存中被释放时，自动触发执行。<br>注：此方法一般无须定义，因为Python是一门高级语言，程序员在使用时无需关心内存的分配和释放，因为此工作都是交给Python解释器来执行，所以，析构函数的调用是由解释器在进行垃圾回收时自动触发执行的</li>
<li><code>__call__</code> 对象后面加括号，触发执行。<br>注：构造方法的执行是由创建对象触发的，即：对象 = 类名() ；而对于 <strong>call</strong> 方法的执行是由对象后加括号触发的，即：对象() 或者 类()()</li>
<li><code>__dict__</code> 查看类或对象中的所有成员</li>
<li><code>__str__</code> 如果一个类中定义了<strong>str</strong>方法，那么在打印 对象 时，默认输出该方法的返回值。</li>
<li><code>__getitem__</code>、<code>__setitem__</code>、<code>__delitem__</code>    用于索引操作，如字典。以上分别表示获取、设置、删除数据</li>
<li><code>__new__</code> \ <code>__metaclass__</code><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="title">class</span> <span class="type">Foo</span>(object):</div><div class="line"> </div><div class="line">    def __init__(self,name):</div><div class="line">        self.name = name</div><div class="line"> </div><div class="line"><span class="title">f</span> = <span class="type">Foo</span>(<span class="string">"alex"</span>)</div><div class="line"></div><div class="line"><span class="title">print</span> <span class="keyword">type</span>(f) # 输出：&lt;class '__main__.<span class="type">Foo'</span>&gt;     表示，obj 对象由<span class="type">Foo</span>类创建</div><div class="line"><span class="title">print</span> <span class="keyword">type</span>(<span class="type">Foo</span>) # 输出：&lt;<span class="keyword">type</span> '<span class="keyword">type</span>'&gt;              表示，<span class="type">Foo</span>类对象由 <span class="keyword">type</span> 类创建</div></pre></td></tr></table></figure>
</li>
</ul>
<p>　　上述代码中，obj 是通过 Foo 类实例化的对象，其实，不仅 obj 是一个对象，Foo类本身也是一个对象，因为在Python中一切事物都是对象。</p>
<p>　　如果按照一切事物都是对象的理论：obj对象是通过执行Foo类的构造方法创建，那么Foo类对象应该也是通过执行某个类的 构造方法 创建。</p>
<p>　　所以，<strong>f对象是Foo类的一个实例，Foo类对象是 type 类的一个实例</strong>，即：Foo类对象 是通过type类的构造方法创建。<br>　　那么，创建类就可以有两种方式：</p>
<ul>
<li><p>普通方式</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'hello dinson'</span></div></pre></td></tr></table></figure>
</li>
<li><p>特殊方式</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">def <span class="function"><span class="keyword">func</span><span class="params">(self)</span>:</span></div><div class="line">    print <span class="string">'hello dinson'</span></div><div class="line">  </div><div class="line">Foo = type(<span class="string">'Foo'</span>,(object,), &#123;<span class="string">'func'</span>: <span class="function"><span class="keyword">func</span> &#125;)</span></div><div class="line"><span class="meta">#type第一个参数：类名</span></div><div class="line"><span class="meta">#type第二个参数：当前类的基类</span></div><div class="line"><span class="meta">#type第三个参数：类的成员</span></div></pre></td></tr></table></figure>
</li>
<li><p>加上构造方法</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(<span class="keyword">self</span>)</span></span>:</div><div class="line">    print(<span class="string">"hello %s"</span>%<span class="keyword">self</span>.name)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,name,age)</span></span>:</div><div class="line">    <span class="keyword">self</span>.name = name</div><div class="line">    <span class="keyword">self</span>.age = age</div><div class="line">Foo = type(<span class="string">'Foo'</span>,(object,),&#123;<span class="string">'func'</span><span class="symbol">:func</span>,<span class="string">'__init__'</span><span class="symbol">:__init__</span>&#125;)</div><div class="line"></div><div class="line">f = Foo(<span class="string">"jack"</span>,<span class="number">22</span>)</div><div class="line">f.func()</div></pre></td></tr></table></figure>
</li>
</ul>
<p>So记住，类是由 type 类实例化产生</p>
<p>那么问题来了，类默认是由 type 类实例化产生，type类中如何实现的创建类？类又是如何创建对象？</p>
<p>答：类中有一个属性 <strong>metaclass</strong>，其用来表示该类由 谁 来实例化创建，所以，我们可以为 <strong>metaclass</strong> 设置一个type类的派生类，从而查看 类 创建的过程。<br><img src="http://ondlsj2sn.bkt.clouddn.com/FnZLN1spIQxHZFs_1qzkIXwmpw7w.png" alt=""></p>
<p>类的生成 调用 顺序依次是 <strong>new</strong> –&gt; <strong>init</strong> –&gt; <strong>call</strong></p>
<p>metaclass 详解文章：<a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python" target="_blank" rel="external">http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python</a> 得票最高那个答案写的非常好</p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>通过字符串映射或修改程序运行时的状态、属性、方法, 有以下4个方法</p>
<ul>
<li>getattr(object, name, default=None)</li>
<li>hasattr(object,name)</li>
<li>setattr(x, y, v)</li>
<li>delattr(x, y)</li>
</ul>
<p>反射代码示例<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Foo(object):</div><div class="line"> </div><div class="line">    def __init__(self):</div><div class="line">        self.name = <span class="string">'wupeiqi'</span></div><div class="line"> </div><div class="line">    def func(self):</div><div class="line">        return <span class="string">'func'</span></div><div class="line"> </div><div class="line">obj = Foo()</div><div class="line"> </div><div class="line"># #### 检查是否含有成员 ####</div><div class="line">hasattr(obj, <span class="string">'name'</span>)</div><div class="line">hasattr(obj, <span class="string">'func'</span>)</div><div class="line"> </div><div class="line"># #### 获取成员 ####</div><div class="line">getattr(obj, <span class="string">'name'</span>)</div><div class="line">getattr(obj, <span class="string">'func'</span>)</div><div class="line"> </div><div class="line"># #### 设置成员 ####</div><div class="line">setattr(obj, <span class="string">'age'</span>, <span class="number">18</span>)</div><div class="line">setattr(obj, <span class="string">'show'</span>, lambda num: num + <span class="number">1</span>)</div><div class="line"> </div><div class="line"># #### 删除成员 ####</div><div class="line">delattr(obj, <span class="string">'name'</span>)</div><div class="line">delattr(obj, <span class="string">'func'</span>)</div></pre></td></tr></table></figure></p>
<p>动态导入模块<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> importlib</div><div class="line"> </div><div class="line">__import__(<span class="string">'import_lib.metaclass'</span>) #这是解释器自己内部用的</div><div class="line">#importlib.import_module(<span class="string">'import_lib.metaclass'</span>) #与上面这句效果一样，官方建议用这个</div></pre></td></tr></table></figure></p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="常用异常"><a href="#常用异常" class="headerlink" title="常用异常"></a>常用异常</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">AttributeError 试图访问一个对象没有的树形，比如foo.<span class="keyword">x</span>，但是foo没有属性<span class="keyword">x</span></div><div class="line">IOError 输入/输出异常；基本上是无法打开文件</div><div class="line">ImportError 无法引入模块或包；基本上是路径问题或名称错误</div><div class="line">IndentationError 语法错误（的子类） ；代码没有正确对齐</div><div class="line">IndexError 下标索引超出序列边界，比如当<span class="keyword">x</span>只有三个元素，却试图访问<span class="keyword">x</span>[<span class="number">5</span>]</div><div class="line">KeyError 试图访问字典里不存在的键</div><div class="line">KeyboardInterrupt Ctrl+C被按下</div><div class="line">NameError 使用一个还未被赋予对象的变量</div><div class="line">SyntaxError Python代码非法，代码不能编译(个人认为这是语法错误，写错了）</div><div class="line">TypeError 传入对象类型与要求的不符合</div><div class="line">UnboundLocalError 试图访问一个还未被设置的局部变量，基本上是由于另有一个同名的全局变量，</div><div class="line">导致你以为正在访问它</div><div class="line">ValueError 传入一个调用者不期望的值，即使值的类型是正确的</div></pre></td></tr></table></figure>
<h3 id="更多异常"><a href="#更多异常" class="headerlink" title="更多异常"></a>更多异常</h3><figure class="highlight julia"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">ArithmeticError</div><div class="line"><span class="built_in">AssertionError</span></div><div class="line">AttributeError</div><div class="line">BaseException</div><div class="line">BufferError</div><div class="line">BytesWarning</div><div class="line">DeprecationWarning</div><div class="line">EnvironmentError</div><div class="line"><span class="built_in">EOFError</span></div><div class="line"><span class="built_in">Exception</span></div><div class="line">FloatingPointError</div><div class="line">FutureWarning</div><div class="line">GeneratorExit</div><div class="line">ImportError</div><div class="line">ImportWarning</div><div class="line">IndentationError</div><div class="line">IndexError</div><div class="line">IOError</div><div class="line">KeyboardInterrupt</div><div class="line"><span class="built_in">KeyError</span></div><div class="line">LookupError</div><div class="line"><span class="built_in">MemoryError</span></div><div class="line">NameError</div><div class="line">NotImplementedError</div><div class="line">OSError</div><div class="line"><span class="built_in">OverflowError</span></div><div class="line">PendingDeprecationWarning</div><div class="line">ReferenceError</div><div class="line">RuntimeError</div><div class="line">RuntimeWarning</div><div class="line">StandardError</div><div class="line">StopIteration</div><div class="line">SyntaxError</div><div class="line">SyntaxWarning</div><div class="line"><span class="built_in">SystemError</span></div><div class="line">SystemExit</div><div class="line">TabError</div><div class="line"><span class="built_in">TypeError</span></div><div class="line">UnboundLocalError</div><div class="line">UnicodeDecodeError</div><div class="line">UnicodeEncodeError</div><div class="line"><span class="built_in">UnicodeError</span></div><div class="line">UnicodeTranslateError</div><div class="line">UnicodeWarning</div><div class="line">UserWarning</div><div class="line">ValueError</div><div class="line">Warning</div><div class="line">ZeroDivisionError</div></pre></td></tr></table></figure>
<h3 id="异常其他结构"><a href="#异常其他结构" class="headerlink" title="异常其他结构"></a>异常其他结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="comment"># 主代码块</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">except</span> KeyError,e:</div><div class="line">    <span class="comment"># 异常时，执行该块</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="comment"># 主代码块执行完，执行该块</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    <span class="comment"># 无论异常与否，最终执行该块</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure>
<h3 id="主动触发异常"><a href="#主动触发异常" class="headerlink" title="主动触发异常"></a>主动触发异常</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    raise <span class="keyword">Exception</span>(<span class="string">'错误了。。。'</span>)</div><div class="line">except <span class="keyword">Exception</span>,e:</div><div class="line">    <span class="keyword">print</span> e</div></pre></td></tr></table></figure>
<h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WupeiqiException</span><span class="params">(Exception)</span>:</span></div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, msg)</span>:</span></div><div class="line">        self.message = msg</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.message</div><div class="line"> </div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">raise</span> WupeiqiException(<span class="string">'我的异常'</span>)</div><div class="line"><span class="keyword">except</span> WupeiqiException,e:</div><div class="line">    <span class="keyword">print</span> e</div></pre></td></tr></table></figure>
<h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># <span class="built_in">assert</span> 条件</div><div class="line"><span class="built_in">assert</span> <span class="number">1</span> == <span class="number">1</span></div></pre></td></tr></table></figure>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=26402531&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;面向对象高级语法部分&lt;br&gt;　- 经典类vs新式类　　&lt;br&gt;　- 静态方法、类方法、属性方法&lt;br&gt;　- 类的特殊方法&lt;br&gt;　- 反射&lt;/li&gt;
&lt;li&gt;异常处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python从入门到放弃" scheme="http://dinson.win/categories/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
  </entry>
  
  <entry>
    <title>Python从入门到放弃（6）-- 常用模块学习</title>
    <link href="http://dinson.win/2017/05/26/17-05-26/"/>
    <id>http://dinson.win/2017/05/26/17-05-26/</id>
    <published>2017-05-26T06:09:51.000Z</published>
    <updated>2017-05-31T11:44:12.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<ol>
<li>模块介绍</li>
<li>time &amp;datetime模块</li>
<li>random模块</li>
<li>os模块</li>
<li>sys模块</li>
<li>shutil模块</li>
<li>json &amp; picle模块</li>
<li>shelve模块</li>
<li>xml处理模块</li>
<li>yaml处理模块</li>
<li>configparser模块</li>
<li>hashlib模块</li>
<li>subprocess模块</li>
<li>logging模块</li>
<li>re正则表达式模块</li>
</ol>
</blockquote>
<a id="more"></a>
<!-- 这是　　缩进-->
<h2 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h2><p><strong>模块，用一砣代码实现了某个功能的代码集合。</strong> </p>
<p>类似于函数式编程和面向过程编程，函数式编程则完成一个功能，其他代码用来调用即可，提供了代码的重用性和代码间的耦合。而对于一个复杂的功能来，可能需要多个函数才能完成（函数又可以在不同的.py文件中），n个 .py 文件组成的代码集合就称为模块。</p>
<p>如：os 是系统相关的模块；file是文件操作相关的模块</p>
<p>模块分为三种：</p>
<ol>
<li>自定义模块</li>
<li>开源模块</li>
<li>内置标准模块（又称标准库）</li>
</ol>
<h3 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h3><ol>
<li>定义模块<br>　　情景一：<br>　　<img src="http://ondlsj2sn.bkt.clouddn.com/FhjkC7doWKqBzRjAiQ0iL61BEas0.png" alt=""><br>　　情景二：<br>　　<img src="http://ondlsj2sn.bkt.clouddn.com/Fg9-5hbS_Pz62AYrHGReSSEnvcvB.png" alt=""><br>　　情景三：<br>　　<img src="http://ondlsj2sn.bkt.clouddn.com/Fhf-jo1LpUbK65vKh3LWJW-LJ0AY.png" alt=""></li>
<li>导入模块<br>Python之所以应用越来越广泛，在一定程度上也依赖于其为程序员提供了大量的模块以供使用，如果想要使用模块，则需要导入。导入模块有一下几种方法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="built_in">module</span></div><div class="line"><span class="keyword">from</span> <span class="built_in">module</span>.xx.xx <span class="keyword">import</span> xx</div><div class="line"><span class="keyword">from</span> <span class="built_in">module</span>.xx.xx <span class="keyword">import</span> xx <span class="keyword">as</span> rename  </div><div class="line"><span class="keyword">from</span> <span class="built_in">module</span>.xx.xx <span class="keyword">import</span> *</div></pre></td></tr></table></figure>
</li>
</ol>
<p>导入模块其实就是告诉Python解释器去解释那个py文件</p>
<ul>
<li>导入一个py文件，解释器解释该py文件</li>
<li>导入一个包，解释器解释该包下的 <strong>init</strong>.py 文件<br>那么问题来了，导入模块时是根据那个路径作为基准来进行的呢？即：sys.path</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(sys.path)</span></span></div></pre></td></tr></table></figure>
<p>如果sys.path路径列表没有你想要的路径，可以通过 sys.path.append(‘路径’) 添加。<br>通过os模块可以获取各种目录，例如：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">import os</div><div class="line"></div><div class="line">pre_path = os<span class="selector-class">.path</span><span class="selector-class">.abspath</span>(<span class="string">'../'</span>)</div><div class="line">sys<span class="selector-class">.path</span><span class="selector-class">.append</span>(pre_path)</div></pre></td></tr></table></figure></p>
<h3 id="开源模块"><a href="#开源模块" class="headerlink" title="开源模块"></a>开源模块</h3><p><strong>下载安装</strong>有两种方式：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum </div><div class="line">pip</div><div class="line">apt-<span class="keyword">get</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">下载源码</div><div class="line">解压源码</div><div class="line">进入目录</div><div class="line">编译源码    python setup<span class="selector-class">.py</span> build</div><div class="line">安装源码    python setup<span class="selector-class">.py</span> install</div></pre></td></tr></table></figure>
<p>注：在使用源码安装时，需要使用到gcc编译和python开发环境，所以，需要先执行：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum <span class="keyword">install</span> gcc</div><div class="line">yum <span class="keyword">install</span> python-devel</div><div class="line">或</div><div class="line">apt-<span class="keyword">get</span> python-dev</div></pre></td></tr></table></figure></p>
<p>安装成功后，模块会自动安装到 sys.path 中的某个目录中，如：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="class"><span class="keyword">lib</span>/<span class="title">python2</span>.7/<span class="title">site</span>-<span class="title">packages</span>/</span></div></pre></td></tr></table></figure></p>
<p><strong>导入模块</strong><br>　　同自定义模块中导入的方式</p>
<p><strong>模块 paramiko</strong><br>paramiko是一个用于做远程控制的模块，使用该模块可以对远程服务器进行命令或文件操作，值得一说的是，fabric和ansible内部的远程管理就是使用的paramiko来现实</p>
<ol>
<li>下载安装</li>
</ol>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip3 <span class="keyword">install</span> paramiko</div></pre></td></tr></table></figure>
<p>或<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># pycrypto，由于 paramiko 模块内部依赖pycrypto，所以先下载安装pycrypto</div><div class="line"> </div><div class="line"># 下载安装 pycrypto</div><div class="line">wget http://<span class="keyword">files</span>.cnblogs.<span class="keyword">com</span>/<span class="keyword">files</span>/wupeiqi/pycrypto-<span class="number">2.6</span>.<span class="number">1</span>.tar.gz</div><div class="line">tar -xvf pycrypto-<span class="number">2.6</span>.<span class="number">1</span>.tar.gz</div><div class="line"><span class="keyword">cd</span> pycrypto-<span class="number">2.6</span>.<span class="number">1</span></div><div class="line"><span class="keyword">python</span> setup.<span class="keyword">py</span> build</div><div class="line"><span class="keyword">python</span> setup.<span class="keyword">py</span> install</div><div class="line"> </div><div class="line"># 进入<span class="keyword">python</span>环境，导入Crypto检查是否安装成功</div><div class="line"> </div><div class="line"># 下载安装 paramiko</div><div class="line">wget http://<span class="keyword">files</span>.cnblogs.<span class="keyword">com</span>/<span class="keyword">files</span>/wupeiqi/paramiko-<span class="number">1.10</span>.<span class="number">1</span>.tar.gz</div><div class="line">tar -xvf paramiko-<span class="number">1.10</span>.<span class="number">1</span>.tar.gz</div><div class="line"><span class="keyword">cd</span> paramiko-<span class="number">1.10</span>.<span class="number">1</span></div><div class="line"><span class="keyword">python</span> setup.<span class="keyword">py</span> build</div><div class="line"><span class="keyword">python</span> setup.<span class="keyword">py</span> install</div><div class="line"> </div><div class="line"># 进入<span class="keyword">python</span>环境，导入paramiko检查是否安装成功</div></pre></td></tr></table></figure></p>
<h2 id="time-amp-datetime模块"><a href="#time-amp-datetime模块" class="headerlink" title="time &amp; datetime模块"></a>time &amp; datetime模块</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">import time</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> <span class="built_in">print</span>(time.clock()) <span class="comment">#返回处理器时间,3.3开始已废弃 , 改成了time.process_time()测量处理器运算时间,不包括sleep时间,不稳定,mac上测不出来</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span>(time.altzone)  <span class="comment">#返回与utc时间的时间差,以秒计算\</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span>(time.asctime()) <span class="comment">#返回时间格式"Tue May 26 15:09:27 2017",</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span>(time.localtime()) <span class="comment">#返回本地时间 的struct time对象格式</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span>(time.gmtime(time.time()-800000)) <span class="comment">#返回utc时间的struc时间对象格式</span></span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> <span class="built_in">print</span>(time.asctime(time.localtime())) <span class="comment">#返回时间格式"Tue May 26 15:10:33 2017",</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="built_in">print</span>(time.ctime()) <span class="comment">#返回Tue May 26 15:10:33 2017格式, 同上</span></span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 日期字符串 转成 时间戳</span></div><div class="line"><span class="meta">#</span><span class="bash"> string_2_struct = time.strptime(<span class="string">"2017/05/26"</span>,<span class="string">"%Y/%m/%d"</span>) <span class="comment">#将 日期字符串 转成 struct时间对象格式</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span>(string_2_struct)</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> struct_2_stamp = time.mktime(string_2_struct) <span class="comment">#将struct时间对象转成时间戳</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span>(struct_2_stamp)</span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash">将时间戳转为字符串格式</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span>(time.gmtime(time.time()-86640)) <span class="comment">#将utc时间戳转换成struct_time格式</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span>(time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,time.gmtime()) ) <span class="comment">#将utc struct_time格式转成指定的字符串格式</span></span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash">时间加减</span></div><div class="line">import datetime</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> <span class="built_in">print</span>(datetime.datetime.now()) <span class="comment">#返回 2017-05-26 15:11:59.775367</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="built_in">print</span>(datetime.date.fromtimestamp(time.time()) )  <span class="comment"># 时间戳直接转成日期格式 2017-05-26</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span>(datetime.datetime.now() )</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span>(datetime.datetime.now() + datetime.timedelta(3)) <span class="comment">#当前时间+3天</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span>(datetime.datetime.now() + datetime.timedelta(-3)) <span class="comment">#当前时间-3天</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span>(datetime.datetime.now() + datetime.timedelta(hours=3)) <span class="comment">#当前时间+3小时</span></span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span>(datetime.datetime.now() + datetime.timedelta(minutes=30)) <span class="comment">#当前时间+30分</span></span></div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> c_time  = datetime.datetime.now()</span></div><div class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span>(c_time.replace(minute=3,hour=2)) <span class="comment">#时间替换</span></span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Directive</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>%A</td>
<td>Locale’s full weekday name.</td>
</tr>
<tr>
<td>%b</td>
<td>Locale’s abbreviated month name.</td>
</tr>
<tr>
<td>%a</td>
<td>Locale’s abbreviated weekday name.</td>
</tr>
<tr>
<td>%B</td>
<td>Locale’s full month name.</td>
</tr>
<tr>
<td>%c</td>
<td>Locale’s appropriate date and time representation.</td>
</tr>
<tr>
<td>%d</td>
<td>Day of the month as a decimal number [01,31].</td>
</tr>
<tr>
<td>%H</td>
<td>Hour (24-hour clock) as a decimal number [00,23].</td>
</tr>
<tr>
<td>%I</td>
<td>Hour (12-hour clock) as a decimal number [01,12].</td>
</tr>
<tr>
<td>%j</td>
<td>Day of the year as a decimal number [001,366].</td>
</tr>
<tr>
<td>%m</td>
<td>Month as a decimal number [01,12].</td>
</tr>
<tr>
<td>%M</td>
<td>Minute as a decimal number [00,59].</td>
</tr>
<tr>
<td>%p</td>
<td>Locale’s equivalent of either AM or PM.</td>
</tr>
<tr>
<td>%S</td>
<td>Second as a decimal number [00,61].</td>
</tr>
<tr>
<td>%U</td>
<td>Week number of the year (Sunday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Sunday are considered to be in week 0.</td>
</tr>
<tr>
<td>%w</td>
<td>Weekday as a decimal number [0(Sunday),6].</td>
</tr>
<tr>
<td>%W</td>
<td>Week number of the year (Monday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Monday are considered to be in week 0.</td>
</tr>
<tr>
<td>%x</td>
<td>Locale’s appropriate date representation.</td>
</tr>
<tr>
<td>%X</td>
<td>Locale’s appropriate time representation.</td>
</tr>
<tr>
<td>%y</td>
<td>Year without century as a decimal number [00,99].</td>
</tr>
<tr>
<td>%Y</td>
<td>Year with century as a decimal number.</td>
</tr>
<tr>
<td>%z</td>
<td>Time zone offset indicating a positive or negative time difference from UTC/GMT of the form +HHMM or -HHMM, where H represents decimal hour digits and M represents decimal minute digits [-23:59, +23:59].</td>
</tr>
<tr>
<td>%Z</td>
<td>Time zone name (no characters if no time zone exists).</td>
</tr>
<tr>
<td>%%</td>
<td>A literal ‘%’ character.</td>
</tr>
</tbody>
</table>
<h2 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h2><p><strong>随机数</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mport <span class="built_in">random</span></div><div class="line"><span class="built_in">print</span> <span class="built_in">random</span>.<span class="built_in">random</span>()</div><div class="line"><span class="built_in">print</span> <span class="built_in">random</span>.randint(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line"><span class="built_in">print</span> <span class="built_in">random</span>.randrange(<span class="number">1</span>,<span class="number">10</span>)</div></pre></td></tr></table></figure></p>
<p><strong>生成随机验证码</strong><br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="built_in">random</span></div><div class="line">checkcode = <span class="string">''</span></div><div class="line"><span class="keyword">for</span> i in range(<span class="number">4</span>):</div><div class="line">    current = <span class="built_in">random</span>.randrange(<span class="number">0</span>,<span class="number">4</span>)</div><div class="line">    <span class="keyword">if</span> current != i:</div><div class="line">        temp = chr(<span class="built_in">random</span>.randint(<span class="number">65</span>,<span class="number">90</span>))</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        temp = <span class="built_in">random</span>.randint(<span class="number">0</span>,<span class="number">9</span>)</div><div class="line">    checkcode += <span class="built_in">str</span>(temp)</div><div class="line"><span class="built_in">print</span> checkcode</div></pre></td></tr></table></figure></p>
<h2 id="OS模块"><a href="#OS模块" class="headerlink" title="OS模块　"></a>OS模块　</h2><p>提供对操作系统进行调用的接口<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">os</span>.getcwd() 获取当前工作目录，即当前python脚本工作的目录路径</div><div class="line"><span class="built_in">os</span>.chdir(<span class="string">"dirname"</span>)  改变当前脚本工作目录；相当于shell下cd</div><div class="line"><span class="built_in">os</span>.curdir  返回当前目录: (<span class="string">'.'</span>)</div><div class="line"><span class="built_in">os</span>.pardir  获取当前目录的父目录字符串名：(<span class="string">'..'</span>)</div><div class="line"><span class="built_in">os</span>.makedirs(<span class="string">'dirname1/dirname2'</span>)    可生成多层递归目录</div><div class="line"><span class="built_in">os</span>.removedirs(<span class="string">'dirname1'</span>)    若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推</div><div class="line"><span class="built_in">os</span>.mkdir(<span class="string">'dirname'</span>)    生成单级目录；相当于shell中mkdir dirname</div><div class="line"><span class="built_in">os</span>.rmdir(<span class="string">'dirname'</span>)    删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirname</div><div class="line"><span class="built_in">os</span>.listdir(<span class="string">'dirname'</span>)    列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印</div><div class="line"><span class="built_in">os</span>.<span class="built_in">remove</span>()  删除一个文件</div><div class="line"><span class="built_in">os</span>.<span class="built_in">rename</span>(<span class="string">"oldname"</span>,<span class="string">"newname"</span>)  重命名文件/目录</div><div class="line"><span class="built_in">os</span>.stat(<span class="string">'path/filename'</span>)  获取文件/目录信息</div><div class="line"><span class="built_in">os</span>.sep    输出操作系统特定的路径分隔符，win下为<span class="string">"\\"</span>,Linux下为<span class="string">"/"</span></div><div class="line"><span class="built_in">os</span>.linesep    输出当前平台使用的行终止符，win下为<span class="string">"\t\n"</span>,Linux下为<span class="string">"\n"</span></div><div class="line"><span class="built_in">os</span>.pathsep    输出用于分割文件路径的字符串</div><div class="line"><span class="built_in">os</span>.name    输出字符串指示当前使用平台。win-&gt;<span class="string">'nt'</span>; Linux-&gt;<span class="string">'posix'</span></div><div class="line"><span class="built_in">os</span>.system(<span class="string">"bash command"</span>)  运行shell命令，直接显示</div><div class="line"><span class="built_in">os</span>.environ  获取系统环境变量</div><div class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.abspath(<span class="built_in">path</span>)  返回<span class="built_in">path</span>规范化的绝对路径</div><div class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.split(<span class="built_in">path</span>)  将<span class="built_in">path</span>分割成目录和文件名二元组返回</div><div class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.dirname(<span class="built_in">path</span>)  返回<span class="built_in">path</span>的目录。其实就是<span class="built_in">os</span>.<span class="built_in">path</span>.split(<span class="built_in">path</span>)的第一个元素</div><div class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.basename(<span class="built_in">path</span>)  返回<span class="built_in">path</span>最后的文件名。如何<span class="built_in">path</span>以／或\结尾，那么就会返回空值。即<span class="built_in">os</span>.<span class="built_in">path</span>.split(<span class="built_in">path</span>)的第二个元素</div><div class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.exists(<span class="built_in">path</span>)  如果<span class="built_in">path</span>存在，返回True；如果<span class="built_in">path</span>不存在，返回False</div><div class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.isabs(<span class="built_in">path</span>)  如果<span class="built_in">path</span>是绝对路径，返回True</div><div class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.isfile(<span class="built_in">path</span>)  如果<span class="built_in">path</span>是一个存在的文件，返回True。否则返回False</div><div class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.isdir(<span class="built_in">path</span>)  如果<span class="built_in">path</span>是一个存在的目录，则返回True。否则返回False</div><div class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.join(path1[, path2[, ...]])  将多个路径组合后返回，第一个绝对路径之前的参数将被忽略</div><div class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.getatime(<span class="built_in">path</span>)  返回<span class="built_in">path</span>所指向的文件或者目录的最后存取时间</div><div class="line"><span class="built_in">os</span>.<span class="built_in">path</span>.getmtime(<span class="built_in">path</span>)  返回<span class="built_in">path</span>所指向的文件或者目录的最后修改时间</div></pre></td></tr></table></figure></p>
<h2 id="shutil模块"><a href="#shutil模块" class="headerlink" title="shutil模块"></a>shutil模块</h2><p><strong>高级的 文件、文件夹、压缩包 处理模块</strong></p>
<p><code>shutil.copyfileobj(fsrc, fdst, length)</code>将文件内容拷贝到另一个文件中，可以<br><code>shutil.copyfile(src, dst)</code>拷贝文件<br><code>shutil.copymode(src, dst)</code>仅拷贝权限。内容、组、用户均不变<br><code>shutil.copystat(src, dst)</code>拷贝状态的信息，包括：mode bits, atime, mtime, flags<br><code>shutil.copy(src, dst)</code>拷贝文件和权限<br><code>shutil.copy2(src, dst)</code>拷贝文件和状态信息<br><code>shutil.ignore_patterns(*patterns)</code><br><code>shutil.copytree(src, dst, symlinks=False, ignore=None)</code>递归的去拷贝文件<br>　　例如：copytree(source, destination, ignore=ignore_patterns(‘<em>.pyc’, ‘tmp</em>‘))<br><code>shutil.rmtree(path, ignore_errors, onerror)</code>递归的去删除文件<br><code>shutil.move(src, dst)</code>递归的去移动文件</p>
<p><code>shutil.make_archive(base_name, format,...)</code>创建压缩包并返回文件路径，例如：zip、tar</p>
<ul>
<li>base_name： 压缩包的文件名，也可以是压缩包的路径。只是文件名时，则保存至当前目录，否则保存至指定路径，<br>　　如：www                        =&gt;保存至当前路径<br>　　如：/Users/dinson/www =&gt;保存至/Users/dinson/</li>
<li>format：    压缩包种类，“zip”, “tar”, “bztar”，“gztar”</li>
<li>root_dir：    要压缩的文件夹路径（默认当前目录）</li>
<li>owner：    用户，默认当前用户</li>
<li>group：    组，默认当前组</li>
<li>logger：    用于记录日志，通常是logging.Logger对象<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#将 /Users/dinson/Downloads/test 下的文件打包放置当前程序目录</div><div class="line"><span class="keyword">import</span> shutil</div><div class="line">ret = shutil.make_archive(<span class="string">"wwwwwwwwww"</span>, <span class="string">'gztar'</span>, root_dir=<span class="string">'/Users/dinson/Downloads/test'</span>)</div><div class="line"> </div><div class="line">#将 /Users/dinson/Downloads/test 下的文件打包放置 /Users/dinson/目录</div><div class="line"><span class="keyword">import</span> shutil</div><div class="line">ret = shutil.make_archive(<span class="string">"/Users/dinson/wwwwwwwwww"</span>, <span class="string">'gztar'</span>, root_dir=<span class="string">'/Users/dinson/Downloads/test'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="shutil-对压缩包的处理是调用-ZipFile-和-TarFile-两个模块来进行的，详细："><a href="#shutil-对压缩包的处理是调用-ZipFile-和-TarFile-两个模块来进行的，详细：" class="headerlink" title="shutil 对压缩包的处理是调用 ZipFile 和 TarFile 两个模块来进行的，详细："></a>shutil 对压缩包的处理是调用 ZipFile 和 TarFile 两个模块来进行的，详细：</h3><p>ZipFile:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import zipfile</div><div class="line"></div><div class="line"><span class="comment"># 压缩</span></div><div class="line">z = zipfile.ZipFile(<span class="string">'laxi.zip'</span>, <span class="string">'w'</span>)</div><div class="line">z.<span class="built_in">write</span>(<span class="string">'a.log'</span>)</div><div class="line">z.<span class="built_in">write</span>(<span class="string">'data.data'</span>)</div><div class="line">z.<span class="built_in">close</span>()</div><div class="line"></div><div class="line"><span class="comment"># 解压</span></div><div class="line">z = zipfile.ZipFile(<span class="string">'laxi.zip'</span>, <span class="string">'r'</span>)</div><div class="line">z.extractall()</div><div class="line">z.<span class="built_in">close</span>()</div></pre></td></tr></table></figure></p>
<p>TarFile:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import tarfile</div><div class="line"></div><div class="line"><span class="comment"># 压缩</span></div><div class="line">tar = tarfile.<span class="built_in">open</span>(<span class="string">'your.tar'</span>,<span class="string">'w'</span>)</div><div class="line">tar.<span class="built_in">add</span>(<span class="string">'/Users/wupeiqi/PycharmProjects/bbs2.zip'</span>, arcname=<span class="string">'bbs2.zip'</span>)</div><div class="line">tar.<span class="built_in">add</span>(<span class="string">'/Users/wupeiqi/PycharmProjects/cmdb.zip'</span>, arcname=<span class="string">'cmdb.zip'</span>)</div><div class="line">tar.<span class="built_in">close</span>()</div><div class="line"></div><div class="line"><span class="comment"># 解压</span></div><div class="line">tar = tarfile.<span class="built_in">open</span>(<span class="string">'your.tar'</span>,<span class="string">'r'</span>)</div><div class="line">tar.extractall()  <span class="comment"># 可设置解压地址</span></div><div class="line">tar.<span class="built_in">close</span>()</div></pre></td></tr></table></figure></p>
<h2 id="json-amp-pickle-模块"><a href="#json-amp-pickle-模块" class="headerlink" title="json &amp; pickle 模块"></a>json &amp; pickle 模块</h2><p><strong>用于序列化的两个模块</strong></p>
<ul>
<li>json，用于字符串 和 python数据类型间进行转换</li>
<li>pickle，用于python特有的类型 和 python的数据类型间进行转换</li>
</ul>
<p>Json模块提供了四个功能：dumps、dump、loads、load<br>pickle模块提供了四个功能：dumps、dump、loads、load<br><img src="http://ondlsj2sn.bkt.clouddn.com/FjXduLvXyf_mWqwvIBl0ms6M932P.png" alt=""></p>
<h2 id="shelve-模块"><a href="#shelve-模块" class="headerlink" title="shelve 模块"></a>shelve 模块</h2><p><strong>shelve模块是一个简单的k,v将内存数据通过文件持久化的模块，可以持久化任何pickle可支持的python数据格式</strong><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import shelve</div><div class="line"> </div><div class="line">d = shelve.open(<span class="string">'shelve_test'</span>) <span class="comment">#打开一个文件</span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="title">object</span>):</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,n)</span></span>:</div><div class="line">        <span class="keyword">self</span>.n = n</div><div class="line"> </div><div class="line">t = Test(<span class="number">123</span>) </div><div class="line">t2 = Test(<span class="number">123334</span>)</div><div class="line"> </div><div class="line">name = [<span class="string">"alex"</span>,<span class="string">"rain"</span>,<span class="string">"test"</span>]</div><div class="line">d[<span class="string">"test"</span>] = name <span class="comment">#持久化列表</span></div><div class="line">d[<span class="string">"t1"</span>] = t      <span class="comment">#持久化类</span></div><div class="line">d[<span class="string">"t2"</span>] = t2</div><div class="line"> </div><div class="line">d.close()</div></pre></td></tr></table></figure></p>
<h2 id="xml处理模块"><a href="#xml处理模块" class="headerlink" title="xml处理模块"></a>xml处理模块</h2><blockquote>
<p>xml是实现不同语言或程序之间进行数据交换的协议，跟json差不多，但json使用起来更简单，不过，古时候，在json还没诞生的黑暗年代，大家只能选择用xml呀，至今很多传统公司如金融行业的很多系统的接口还主要是xml。</p>
<p>xml的格式如下，就是通过&lt;&gt;节点来区别数据结构的:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">country</span> <span class="attr">name</span>=<span class="string">"Liechtenstein"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">rank</span> <span class="attr">updated</span>=<span class="string">"yes"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">rank</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">year</span>&gt;</span>2008<span class="tag">&lt;/<span class="name">year</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">gdppc</span>&gt;</span>141100<span class="tag">&lt;/<span class="name">gdppc</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">neighbor</span> <span class="attr">name</span>=<span class="string">"Austria"</span> <span class="attr">direction</span>=<span class="string">"E"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">neighbor</span> <span class="attr">name</span>=<span class="string">"Switzerland"</span> <span class="attr">direction</span>=<span class="string">"W"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">country</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">country</span> <span class="attr">name</span>=<span class="string">"Singapore"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">rank</span> <span class="attr">updated</span>=<span class="string">"yes"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">rank</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">year</span>&gt;</span>2011<span class="tag">&lt;/<span class="name">year</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">gdppc</span>&gt;</span>59900<span class="tag">&lt;/<span class="name">gdppc</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">neighbor</span> <span class="attr">name</span>=<span class="string">"Malaysia"</span> <span class="attr">direction</span>=<span class="string">"N"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">country</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">country</span> <span class="attr">name</span>=<span class="string">"Panama"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">rank</span> <span class="attr">updated</span>=<span class="string">"yes"</span>&gt;</span>69<span class="tag">&lt;/<span class="name">rank</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">year</span>&gt;</span>2011<span class="tag">&lt;/<span class="name">year</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">gdppc</span>&gt;</span>13600<span class="tag">&lt;/<span class="name">gdppc</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">neighbor</span> <span class="attr">name</span>=<span class="string">"Costa Rica"</span> <span class="attr">direction</span>=<span class="string">"W"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">neighbor</span> <span class="attr">name</span>=<span class="string">"Colombia"</span> <span class="attr">direction</span>=<span class="string">"E"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">country</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>xml协议在各个语言里的都 是支持的，在python中可以用以下模块操作xml 　</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import xml<span class="selector-class">.etree</span><span class="selector-class">.ElementTree</span> as ET</div><div class="line"> </div><div class="line">tree = ET.parse(<span class="string">"xmltest.xml"</span>)</div><div class="line">root = tree.getroot()</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(root.tag)</span></span></div><div class="line"> </div><div class="line">#遍历xml文档</div><div class="line"><span class="keyword">for</span> child <span class="keyword">in</span> root:</div><div class="line">    print(child<span class="selector-class">.tag</span>, child.attrib)</div><div class="line">    <span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> child:</div><div class="line">        print(<span class="selector-tag">i</span><span class="selector-class">.tag</span>,<span class="selector-tag">i</span>.text)</div><div class="line"> </div><div class="line">#只遍历year 节点</div><div class="line"><span class="keyword">for</span> node <span class="keyword">in</span> root.iter(<span class="string">'year'</span>):</div><div class="line">    print(node<span class="selector-class">.tag</span>,node.text)</div></pre></td></tr></table></figure>
<h3 id="修改和删除xml文档内容"><a href="#修改和删除xml文档内容" class="headerlink" title="修改和删除xml文档内容"></a>修改和删除xml文档内容</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">import xml.etree.ElementTree as ET</div><div class="line"> </div><div class="line">tree = ET.parse(<span class="string">"xmltest.xml"</span>)</div><div class="line">root = tree.getroot()</div><div class="line"> </div><div class="line"><span class="comment">#修改</span></div><div class="line">for <span class="keyword">node</span> <span class="title">in</span> root.iter('year'):</div><div class="line">    new_year = int(<span class="keyword">node</span>.<span class="title">text</span>) + <span class="number">1</span></div><div class="line">    <span class="keyword">node</span>.<span class="title">text</span> = str(new_year)</div><div class="line">    <span class="keyword">node</span>.<span class="title">set</span>(<span class="string">"updated"</span>,<span class="string">"yes"</span>)</div><div class="line"> </div><div class="line">tree.<span class="keyword">write</span>(<span class="string">"xmltest.xml"</span>)</div><div class="line"> </div><div class="line"><span class="comment">#删除node</span></div><div class="line">for country <span class="keyword">in</span> root.findall('country'):</div><div class="line">   rank = int(country.find('rank').text)</div><div class="line">   if rank &gt; <span class="number">50</span>:</div><div class="line">     root.remove(country)</div><div class="line"> </div><div class="line">tree.<span class="keyword">write</span>('output.xml')</div></pre></td></tr></table></figure>
<h3 id="自己创建xml文档"><a href="#自己创建xml文档" class="headerlink" title="自己创建xml文档"></a>自己创建xml文档</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import xml.etree.ElementTree as ET</div><div class="line"> </div><div class="line"> </div><div class="line">new_xml = ET.Element(<span class="string">"namelist"</span>)</div><div class="line">name = ET.SubElement(new_xml,<span class="string">"name"</span>,attrib=&#123;<span class="string">"enrolled"</span>:<span class="string">"yes"</span>&#125;)</div><div class="line">age = ET.SubElement(name,<span class="string">"age"</span>,attrib=&#123;<span class="string">"checked"</span>:<span class="string">"no"</span>&#125;)</div><div class="line">sex = ET.SubElement(name,<span class="string">"sex"</span>)</div><div class="line">sex.text = '33'</div><div class="line">name2 = ET.SubElement(new_xml,<span class="string">"name"</span>,attrib=&#123;<span class="string">"enrolled"</span>:<span class="string">"no"</span>&#125;)</div><div class="line">age = ET.SubElement(name2,<span class="string">"age"</span>)</div><div class="line">age.text = '19'</div><div class="line"> </div><div class="line">et = ET.ElementTree(new_xml) <span class="comment">#生成文档对象</span></div><div class="line">et.write(<span class="string">"test.xml"</span>, encoding=<span class="string">"utf-8"</span>,xml_declaration=True)</div><div class="line"> </div><div class="line">ET.dump(new_xml) <span class="comment">#打印生成的格式</span></div></pre></td></tr></table></figure>
<h2 id="PyYAML模块"><a href="#PyYAML模块" class="headerlink" title="PyYAML模块"></a>PyYAML模块</h2><p>Python也可以很容易的处理ymal文档格式，只不过需要安装一个模块，参考文档：<a href="http://pyyaml.org/wiki/PyYAMLDocumentation" target="_blank" rel="external">http://pyyaml.org/wiki/PyYAMLDocumentation</a> </p>
<h2 id="ConfigParser模块"><a href="#ConfigParser模块" class="headerlink" title="ConfigParser模块"></a>ConfigParser模块</h2><p><strong>用于生成和修改常见配置文档，当前模块的名称在 python 3.x 版本中变更为 configparser。</strong></p>
<p>来看一个好多软件的常见文档格式如下<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="section">[DEFAULT]</span></div><div class="line"><span class="attr">ServerAliveInterval</span> = <span class="number">45</span></div><div class="line"><span class="attr">Compression</span> = <span class="literal">yes</span></div><div class="line"><span class="attr">CompressionLevel</span> = <span class="number">9</span></div><div class="line"><span class="attr">ForwardX11</span> = <span class="literal">yes</span></div><div class="line"><span class="section"> </span></div><div class="line">[bitbucket.org]</div><div class="line"><span class="attr">User</span> = hg</div><div class="line"><span class="section"> </span></div><div class="line">[topsecret.server.com]</div><div class="line"><span class="attr">Port</span> = <span class="number">50022</span></div><div class="line"><span class="attr">ForwardX11</span> = <span class="literal">no</span></div></pre></td></tr></table></figure></p>
<h3 id="生成配置文档"><a href="#生成配置文档" class="headerlink" title="生成配置文档"></a>生成配置文档</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> configparser</div><div class="line"> </div><div class="line"><span class="built_in">config</span> = configparser.ConfigParser()</div><div class="line"><span class="built_in">config</span>[<span class="string">"DEFAULT"</span>] = &#123;<span class="string">'ServerAliveInterval'</span>: <span class="string">'45'</span>,</div><div class="line">                      <span class="string">'Compression'</span>: <span class="string">'yes'</span>,</div><div class="line">                     <span class="string">'CompressionLevel'</span>: <span class="string">'9'</span>&#125;</div><div class="line"> </div><div class="line"><span class="built_in">config</span>[<span class="string">'bitbucket.org'</span>] = &#123;&#125;</div><div class="line"><span class="built_in">config</span>[<span class="string">'bitbucket.org'</span>][<span class="string">'User'</span>] = <span class="string">'hg'</span></div><div class="line"><span class="built_in">config</span>[<span class="string">'topsecret.server.com'</span>] = &#123;&#125;</div><div class="line">topsecret = <span class="built_in">config</span>[<span class="string">'topsecret.server.com'</span>]</div><div class="line">topsecret[<span class="string">'Host Port'</span>] = <span class="string">'50022'</span>     <span class="meta"># mutates the parser</span></div><div class="line">topsecret[<span class="string">'ForwardX11'</span>] = <span class="string">'no'</span>  <span class="meta"># same here</span></div><div class="line"><span class="built_in">config</span>[<span class="string">'DEFAULT'</span>][<span class="string">'ForwardX11'</span>] = <span class="string">'yes'</span></div><div class="line">with <span class="built_in">open</span>(<span class="string">'example.ini'</span>, <span class="string">'w'</span>) as configfile:</div><div class="line">   <span class="built_in">config</span>.<span class="built_in">write</span>(configfile)</div></pre></td></tr></table></figure>
<h3 id="读取配置文档"><a href="#读取配置文档" class="headerlink" title="读取配置文档"></a>读取配置文档</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;</span>&gt; import configparser</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; config = configparser.ConfigParser()</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; config.sections()</div><div class="line">[]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; config.read(<span class="string">'example.ini'</span>)</div><div class="line">[<span class="string">'example.ini'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; config.sections()</div><div class="line">[<span class="string">'bitbucket.org'</span>, <span class="string">'topsecret.server.com'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'bitbucket.org'</span> in config</div><div class="line">True</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; <span class="string">'bytebong.com'</span> in config</div><div class="line">False</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; config[<span class="string">'bitbucket.org'</span>][<span class="string">'User'</span>]</div><div class="line"><span class="string">'hg'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; config[<span class="string">'DEFAULT'</span>][<span class="string">'Compression'</span>]</div><div class="line"><span class="string">'yes'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; topsecret = config[<span class="string">'topsecret.server.com'</span>]</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; topsecret[<span class="string">'ForwardX11'</span>]</div><div class="line"><span class="string">'no'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; topsecret[<span class="string">'Port'</span>]</div><div class="line"><span class="string">'50022'</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; for key in config[<span class="string">'bitbucket.org'</span>]: print(key)</div><div class="line">...</div><div class="line">user</div><div class="line">compressionlevel</div><div class="line">serveraliveinterval</div><div class="line">compression</div><div class="line">forwardx11</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; config[<span class="string">'bitbucket.org'</span>][<span class="string">'ForwardX11'</span>]</div><div class="line"><span class="string">'yes'</span></div></pre></td></tr></table></figure>
<h3 id="configparser增删改查语法"><a href="#configparser增删改查语法" class="headerlink" title="configparser增删改查语法"></a>configparser增删改查语法</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">[section1]</div><div class="line">k1 = v1</div><div class="line">k2:v2</div><div class="line">  </div><div class="line">[section2]</div><div class="line">k1 = v1</div><div class="line"> </div><div class="line"><span class="keyword">import</span> ConfigParser</div><div class="line">  </div><div class="line">config = ConfigParser.ConfigParser()</div><div class="line">config.read(<span class="string">'i.cfg'</span>)</div><div class="line">  </div><div class="line"># ########## 读 ##########</div><div class="line">#secs = config.sections()</div><div class="line">#print secs</div><div class="line">#options = config.options(<span class="string">'group2'</span>)</div><div class="line">#print options</div><div class="line">  </div><div class="line">#item_list = config.items(<span class="string">'group2'</span>)</div><div class="line">#print item_list</div><div class="line">  </div><div class="line">#val = config.get(<span class="string">'group1'</span>,<span class="string">'key'</span>)</div><div class="line">#val = config.getint(<span class="string">'group1'</span>,<span class="string">'key'</span>)</div><div class="line">  </div><div class="line"># ########## 改写 ##########</div><div class="line">#sec = config.remove_section(<span class="string">'group1'</span>)</div><div class="line">#config.write(open(<span class="string">'i.cfg'</span>, <span class="string">"w"</span>))</div><div class="line">  </div><div class="line">#sec = config.has_section(<span class="string">'wupeiqi'</span>)</div><div class="line">#sec = config.add_section(<span class="string">'wupeiqi'</span>)</div><div class="line">#config.write(open(<span class="string">'i.cfg'</span>, <span class="string">"w"</span>))</div><div class="line">  </div><div class="line">  </div><div class="line">#config.set(<span class="string">'group2'</span>,<span class="string">'k1'</span>,<span class="number">11111</span>)</div><div class="line">#config.write(open(<span class="string">'i.cfg'</span>, <span class="string">"w"</span>))</div><div class="line">  </div><div class="line">#config.remove_option(<span class="string">'group2'</span>,<span class="string">'age'</span>)</div><div class="line">#config.write(open(<span class="string">'i.cfg'</span>, <span class="string">"w"</span>))</div></pre></td></tr></table></figure>
<h2 id="hashlib模块"><a href="#hashlib模块" class="headerlink" title="hashlib模块　"></a>hashlib模块　</h2><p><strong>用于加密相关的操作，3.x里代替了md5模块和sha模块，主要提供 SHA1, SHA224, SHA256, SHA384, SHA512 ，MD5 算法</strong></p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"> </div><div class="line">m = hashlib.md5()</div><div class="line">m.update(b<span class="string">"Hello"</span>)</div><div class="line">m.update(b<span class="string">"It's me"</span>)</div><div class="line">print(m.digest())</div><div class="line">m.update(b<span class="string">"It's been a long time since last time we ..."</span>)</div><div class="line"> </div><div class="line">print(m.digest()) #<span class="number">2</span>进制格式hash</div><div class="line">print(len(m.hexdigest())) #<span class="number">16</span>进制格式hash</div><div class="line"></div><div class="line"># ######## md5 ########</div><div class="line"> </div><div class="line">hash = hashlib.md5()</div><div class="line">hash.update(<span class="string">'admin'</span>)</div><div class="line">print(hash.hexdigest())</div><div class="line"> </div><div class="line"># ######## sha1 ########</div><div class="line"> </div><div class="line">hash = hashlib.sha1()</div><div class="line">hash.update(<span class="string">'admin'</span>)</div><div class="line">print(hash.hexdigest())</div><div class="line"> </div><div class="line"># ######## sha256 ########</div><div class="line"> </div><div class="line">hash = hashlib.sha256()</div><div class="line">hash.update(<span class="string">'admin'</span>)</div><div class="line">print(hash.hexdigest())</div><div class="line"> </div><div class="line"> </div><div class="line"># ######## sha384 ########</div><div class="line"> </div><div class="line">hash = hashlib.sha384()</div><div class="line">hash.update(<span class="string">'admin'</span>)</div><div class="line">print(hash.hexdigest())</div><div class="line"> </div><div class="line"># ######## sha512 ########</div><div class="line"> </div><div class="line">hash = hashlib.sha512()</div><div class="line">hash.update(<span class="string">'admin'</span>)</div><div class="line">print(hash.hexdigest())</div></pre></td></tr></table></figure>
<p>还不够吊？python 还有一个 hmac 模块，它内部对我们创建 key 和 内容 再进行处理然后再加密</p>
<p>散列消息鉴别码，简称HMAC，是一种基于消息鉴别码MAC（Message Authentication Code）的鉴别机制。使用HMAC时,消息通讯的双方，通过验证消息中加入的鉴别密钥K来鉴别消息的真伪；</p>
<p>一般用于网络通信中消息加密，前提是双方先要约定好key,就像接头暗号一样，然后消息发送把用key把消息加密，接收方用key ＋ 消息明文再加密，拿加密后的值 跟 发送者的相对比是否相等，这样就能验证消息的真实性，及发送者的合法性了。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> hmac</div><div class="line">h = hmac.<span class="keyword">new</span>(b<span class="string">'天王盖地虎'</span>, b<span class="string">'宝塔镇河妖'</span>)</div><div class="line"><span class="built_in">print</span> h.hexdigest()</div></pre></td></tr></table></figure></p>
<p>更多关于md5,sha1,sha256等介绍的文章看这里<a href="https://www.tbs-certificates.co.uk/FAQ/en/sha256.html" target="_blank" rel="external">https://www.tbs-certificates.co.uk/FAQ/en/sha256.html</a> </p>
<h2 id="Subprocess模块"><a href="#Subprocess模块" class="headerlink" title="Subprocess模块"></a>Subprocess模块</h2><p>常用subprocess方法示例<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#执行命令，返回命令执行状态 ， 0 or 非0</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; retcode = subprocess.call([<span class="string">"ls"</span>, <span class="string">"-l"</span>])</div><div class="line"></div><div class="line"><span class="comment">#执行命令，如果命令结果为0，就正常返回，否则抛异常</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; subprocess.check_call([<span class="string">"ls"</span>, <span class="string">"-l"</span>])</div><div class="line"><span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">#接收字符串格式命令，返回元组形式，第1个元素是执行状态，第2个是命令结果 </span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; subprocess.getstatusoutput(<span class="string">'ls /bin/ls'</span>)</div><div class="line">(<span class="number">0</span>, <span class="string">'/bin/ls'</span>)</div><div class="line"></div><div class="line"><span class="comment">#接收字符串格式命令，并返回结果</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; subprocess.getoutput(<span class="string">'ls /bin/ls'</span>)</div><div class="line"><span class="string">'/bin/ls'</span></div><div class="line"></div><div class="line"><span class="comment">#执行命令，并返回结果，注意是返回结果，不是打印，下例结果返回给res</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; res=subprocess.check_output([<span class="string">'ls'</span>,<span class="string">'-l'</span>])</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; res</div><div class="line">b<span class="string">'total 0\ndrwxr-xr-x 12 alex staff 408 Nov 2 11:05 OldBoyCRM\n'</span></div><div class="line"></div><div class="line"><span class="comment">#上面那些方法，底层都是封装的subprocess.Popen</span></div><div class="line">poll()</div><div class="line">Check <span class="keyword">if</span> child process has terminated. Returns returncode</div><div class="line"></div><div class="line">wait()</div><div class="line">Wait <span class="keyword">for</span> child process to terminate. Returns returncode attribute.</div><div class="line"></div><div class="line">terminate() 杀掉所启动进程</div><div class="line">communicate() 等待任务结束</div><div class="line"></div><div class="line">stdin 标准输入</div><div class="line"></div><div class="line">stdout 标准输出</div><div class="line"></div><div class="line">stderr 标准错误</div><div class="line"></div><div class="line">pid</div><div class="line">The process ID of the child process.</div><div class="line"></div><div class="line"><span class="comment">#例子</span></div><div class="line"><span class="meta">&gt;&gt;</span>&gt; p = subprocess.Popen(<span class="string">"df -h|grep disk"</span>,stdin=subprocess.PIPE,stdout=subprocess.PIPE,shell=True)</div><div class="line"><span class="meta">&gt;&gt;</span>&gt; p.stdout.read()</div><div class="line">b<span class="string">'/dev/disk1 465Gi 64Gi 400Gi 14% 16901472 104938142 14% /\n</span></div><div class="line"></div><div class="line">&gt;&gt;&gt; subprocess.run(["ls", "-l"])  # doesn't capture output</div><div class="line">CompletedProcess(args=[<span class="string">'ls'</span>, <span class="string">'-l'</span>], returncode=<span class="number">0</span>)</div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;</span>&gt; subprocess.run(<span class="string">"exit 1"</span>, shell=True, check=True)</div><div class="line">Traceback (most recent call last):</div><div class="line">  ...</div><div class="line">subprocess.<span class="symbol">CalledProcessError:</span> Command <span class="string">'exit 1'</span> returned non-zero exit status <span class="number">1</span></div><div class="line"> </div><div class="line"><span class="meta">&gt;&gt;</span>&gt; subprocess.run([<span class="string">"ls"</span>, <span class="string">"-l"</span>, <span class="string">"/dev/null"</span>], stdout=subprocess.PIPE)</div><div class="line">CompletedProcess(args=[<span class="string">'ls'</span>, <span class="string">'-l'</span>, <span class="string">'/dev/null'</span>], returncode=<span class="number">0</span>,</div><div class="line">stdout=b<span class="string">'crw-rw-rw- 1 root root 1, 3 Jan 23 16:23 /dev/null\n'</span>)<span class="string">'</span></div></pre></td></tr></table></figure></p>
<p>调用subprocess.run(…)是推荐的常用方法，在大多数情况下能满足需求，但如果你可能需要进行一些复杂的与系统的交互的话，你还可以用subprocess.Popen(),语法如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> = subprocess.Popen(<span class="string">"find / -size +1000000 -exec ls -shl &#123;&#125; \;"</span>,shell=True,stdout=subprocess.PIPE)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(p.stdout.read()</span></span>)</div></pre></td></tr></table></figure></p>
<p>可用参数：</p>
<ul>
<li>args：shell命令，可以是字符串或者序列类型（如：list，元组）</li>
<li>bufsize：指定缓冲。0 无缓冲,1 行缓冲,其他 缓冲区大小,负值 系统缓冲</li>
<li>stdin, stdout, stderr：分别表示程序的标准输入、输出、错误句柄</li>
<li>preexec_fn：只在Unix平台下有效，用于指定一个可执行对象（callable object），它将在子进程运行之前被调用</li>
<li>close_sfs：在windows平台下，如果close_fds被设置为True，则新创建的子进程将不会继承父进程的输入、输出、错误管道。所以不能将close_fds设置为True同时重定向子进程的标准输入、输出与错误(stdin, stdout, stderr)。</li>
<li>shell：同上</li>
<li>cwd：用于设置子进程的当前目录</li>
<li>env：用于指定子进程的环境变量。如果env = None，子进程的环境变量将从父进程中继承。</li>
<li>universal_newlines：不同系统的换行符不同，True -&gt; 同意使用 \n</li>
<li>startupinfo与createionflags只在windows下有效<br>将被传递给底层的CreateProcess()函数，用于设置子进程的一些属性，如：主窗口的外观，进程的优先级等等</li>
</ul>
<p>终端输入的命令分为两种：</p>
<ul>
<li>输入即可得到输出，如：ifconfig</li>
<li>输入进行某环境，依赖再输入，如：python</li>
</ul>
<p>需要交互的命令示例</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import subprocess</div><div class="line"> </div><div class="line">obj = subprocess.Popen([<span class="string">"python"</span>], stdin=subprocess<span class="selector-class">.PIPE</span>, stdout=subprocess<span class="selector-class">.PIPE</span>, stderr=subprocess.PIPE)</div><div class="line">obj<span class="selector-class">.stdin</span><span class="selector-class">.write</span>(<span class="string">'print 1 \n '</span>)</div><div class="line">obj<span class="selector-class">.stdin</span><span class="selector-class">.write</span>(<span class="string">'print 2 \n '</span>)</div><div class="line">obj<span class="selector-class">.stdin</span><span class="selector-class">.write</span>(<span class="string">'print 3 \n '</span>)</div><div class="line">obj<span class="selector-class">.stdin</span><span class="selector-class">.write</span>(<span class="string">'print 4 \n '</span>)</div><div class="line"> </div><div class="line">out_error_list = obj.communicate(timeout=<span class="number">10</span>)</div><div class="line">print out_error_list</div></pre></td></tr></table></figure>
<p><strong>subprocess实现sudo 自动输入密码</strong><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import subprocess</div><div class="line"> </div><div class="line">def mypass():</div><div class="line">    mypass = <span class="string">'123'</span> <span class="comment">#or get the password from anywhere</span></div><div class="line">    <span class="literal">return</span> mypass</div><div class="line"> </div><div class="line">echo = subprocess.Popen([<span class="string">'echo'</span>,mypass()],</div><div class="line">                        <span class="keyword">stdout</span>=subprocess.PIPE,</div><div class="line">                        )</div><div class="line"> </div><div class="line">sudo = subprocess.Popen([<span class="string">'sudo'</span>,<span class="string">'-S'</span>,<span class="string">'iptables'</span>,<span class="string">'-L'</span>],</div><div class="line">                        <span class="keyword">stdin</span>=echo.<span class="keyword">stdout</span>,</div><div class="line">                        <span class="keyword">stdout</span>=subprocess.PIPE,</div><div class="line">                        )</div><div class="line"> </div><div class="line">end_of_pipe = sudo.<span class="keyword">stdout</span></div><div class="line"> </div><div class="line">print <span class="string">"Password ok \n Iptables Chains %s"</span> % end_of_pipe.<span class="built_in">read</span>()</div></pre></td></tr></table></figure></p>
<h2 id="logging模块"><a href="#logging模块" class="headerlink" title="logging模块"></a>logging模块</h2><blockquote>
<p>很多程序都有记录日志的需求，并且日志中包含的信息即有正常的程序访问日志，还可能有错误、警告等信息输出，python的logging模块提供了标准的日志接口，你可以通过它存储各种格式的日志，logging的日志可以分为 debug(), info(), warning(), error() and critical() 5个级别，下面我们看一下怎么用。</p>
</blockquote>
<p>最简单用法<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">import</span> <span class="selector-tag">logging</span></div><div class="line"> </div><div class="line"><span class="selector-tag">logging</span><span class="selector-class">.warning</span>(<span class="string">"user [alex] attempted wrong password more than 3 times"</span>)</div><div class="line"><span class="selector-tag">logging</span><span class="selector-class">.critical</span>(<span class="string">"server is down"</span>)</div><div class="line"> </div><div class="line">#输出</div><div class="line"><span class="selector-tag">WARNING</span><span class="selector-pseudo">:root</span><span class="selector-pseudo">:user</span> <span class="selector-attr">[alex]</span> <span class="selector-tag">attempted</span> <span class="selector-tag">wrong</span> <span class="selector-tag">password</span> <span class="selector-tag">more</span> <span class="selector-tag">than</span> <span class="selector-tag">3</span> <span class="selector-tag">times</span></div><div class="line"><span class="selector-tag">CRITICAL</span><span class="selector-pseudo">:root</span><span class="selector-pseudo">:server</span> <span class="selector-tag">is</span> <span class="selector-tag">down</span></div></pre></td></tr></table></figure></p>
<p>看一下这几个日志级别分别代表什么意思</p>
<table>
<thead>
<tr>
<th>Level</th>
<th>When it’s used</th>
</tr>
</thead>
<tbody>
<tr>
<td>DEBUG</td>
<td>Detailed information, typically of interest only when diagnosing problems.</td>
</tr>
<tr>
<td>INFO</td>
<td>Confirmation that things are working as expected.</td>
</tr>
<tr>
<td>WARNING</td>
<td>An indication that something unexpected happened, or indicative of some problem in the near future (e.g. ‘disk space low’). The software is still working as expected.</td>
</tr>
<tr>
<td>ERROR</td>
<td>Due to a more serious problem, the software has not been able to perform some function.</td>
</tr>
<tr>
<td>CRITICAL</td>
<td>A serious error, indicating that the program itself may be unable to continue running.</td>
</tr>
</tbody>
</table>
<p>如果想把日志写到文件里，也很简单<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">import</span> <span class="selector-tag">logging</span></div><div class="line"> </div><div class="line"><span class="selector-tag">logging</span><span class="selector-class">.basicConfig</span>(filename=<span class="string">'example.log'</span>,level=logging.INFO)</div><div class="line"><span class="selector-tag">logging</span><span class="selector-class">.debug</span>(<span class="string">'This message should go to the log file'</span>)</div><div class="line"><span class="selector-tag">logging</span><span class="selector-class">.info</span>(<span class="string">'So should this'</span>)</div><div class="line"><span class="selector-tag">logging</span><span class="selector-class">.warning</span>(<span class="string">'And this, too'</span>)</div></pre></td></tr></table></figure></p>
<p>其中下面这句中的level=loggin.INFO意思是，把日志纪录级别设置为INFO，也就是说，只有比日志是INFO或比INFO级别更高的日志才会被纪录到文件里，在这个例子， 第一条日志是不会被纪录的，如果希望纪录debug的日志，那把日志级别改成DEBUG就行了。<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logging.basicConfig<span class="params">(<span class="attr">filename</span>='example.log',<span class="attr">level</span>=logging.INFO)</span></div></pre></td></tr></table></figure></p>
<p>感觉上面的日志格式忘记加上时间啦，日志不知道时间怎么行呢，下面就来加上!<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line">logging.basicConfig(format=<span class="string">'%(asctime)s %(message)s'</span>, datefmt=<span class="string">'%m/%d/%Y %I:%M:%S %p'</span>)</div><div class="line">logging.warning(<span class="string">'is when this event was logged.'</span>)</div><div class="line"> </div><div class="line"><span class="comment">#输出</span></div><div class="line"><span class="number">12</span>/<span class="number">12</span>/<span class="number">2010</span> <span class="number">11</span>:<span class="number">46</span>:<span class="number">36</span> AM <span class="keyword">is</span> <span class="keyword">when</span> <span class="keyword">this</span> event was logged.</div></pre></td></tr></table></figure></p>
<h3 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h3><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>%(name)s</td>
<td>Logger的名字</td>
</tr>
<tr>
<td>%(levelno)s</td>
<td>数字形式的日志级别</td>
</tr>
<tr>
<td>%(levelname)s</td>
<td>文本形式的日志级别</td>
</tr>
<tr>
<td>%(pathname)s</td>
<td>调用日志输出函数的模块的完整路径名，可能没有</td>
</tr>
<tr>
<td>%(filename)s</td>
<td>调用日志输出函数的模块的文件名</td>
</tr>
<tr>
<td>%(module)s</td>
<td>调用日志输出函数的模块名</td>
</tr>
<tr>
<td>%(funcName)s</td>
<td>调用日志输出函数的函数名</td>
</tr>
<tr>
<td>%(lineno)d</td>
<td>调用日志输出函数的语句所在的代码行</td>
</tr>
<tr>
<td>%(created)f</td>
<td>当前时间，用UNIX标准的表示时间的浮 点数表示</td>
</tr>
<tr>
<td>%(relativeCreated)d</td>
<td>输出日志信息时的，自Logger创建以 来的毫秒数</td>
</tr>
<tr>
<td>%(asctime)s</td>
<td>字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒</td>
</tr>
<tr>
<td>%(thread)d</td>
<td>线程ID。可能没有</td>
</tr>
<tr>
<td>%(threadName)s</td>
<td>线程名。可能没有</td>
</tr>
<tr>
<td>%(process)d</td>
<td>进程ID。可能没有</td>
</tr>
<tr>
<td>%(message)s</td>
<td>用户输出的消息</td>
</tr>
</tbody>
</table>
<p>如果想同时把log打印在屏幕和文件日志里，就需要了解一点复杂的知识 了</p>
<p>Python 使用logging模块记录日志涉及四个主要类，使用官方文档中的概括最为合适：<br><strong>logger提供了应用程序可以直接使用的接口；</strong><br><strong>handler将(logger创建的)日志记录发送到合适的目的输出；</strong><br><strong>filter提供了细度设备来决定输出哪条日志记录；</strong><br><strong>formatter决定日志记录的最终输出格式</strong>。<br><code>logger</code><br>每个程序在输出信息之前都要获得一个Logger。Logger通常对应了程序的模块名，比如聊天工具的图形界面模块可以这样获得它的Logger：<br>LOG=logging.getLogger(”chat.gui”)<br>而核心模块可以这样：<br>LOG=logging.getLogger(”chat.kernel”)</p>
<p>Logger.setLevel(lel):指定最低的日志级别，低于lel的级别将被忽略。debug是最低的内置级别，critical为最高<br>Logger.addFilter(filt)、Logger.removeFilter(filt):添加或删除指定的filter<br>Logger.addHandler(hdlr)、Logger.removeHandler(hdlr)：增加或删除指定的handler<br>Logger.debug()、Logger.info()、Logger.warning()、Logger.error()、Logger.critical()：可以设置的日志级别</p>
<p><code>handler</code><br>handler对象负责发送相关的信息到指定目的地。Python的日志系统有多种Handler可以使用。有些Handler可以把信息输出到控制台，有些Logger可以把信息输出到文件，还有些 Handler可以把信息发送到网络上。如果觉得不够用，还可以编写自己的Handler。可以通过addHandler()方法添加多个多handler<br>Handler.setLevel(lel):指定被处理的信息级别，低于lel级别的信息将被忽略<br>Handler.setFormatter()：给这个handler选择一个格式<br>Handler.addFilter(filt)、Handler.removeFilter(filt)：新增或删除一个filter对象</p>
<p>每个Logger可以附加多个Handler。接下来我们就来介绍一些常用的Handler：<br>1) <code>logging.StreamHandler</code><br>使用这个Handler可以向类似与sys.stdout或者sys.stderr的任何文件对象(file object)输出信息。它的构造函数是：<br>StreamHandler([strm])<br>其中strm参数是一个文件对象。默认是sys.stderr</p>
<p>2) <code>logging.FileHandler</code><br>和StreamHandler类似，用于向一个文件输出日志信息。不过FileHandler会帮你打开这个文件。它的构造函数是：<br>FileHandler(filename[,mode])<br>filename是文件名，必须指定一个文件名。<br>mode是文件的打开方式。参见Python内置函数open()的用法。默认是’a’，即添加到文件末尾。</p>
<p>3) <code>logging.handlers.RotatingFileHandler</code><br>这个Handler类似于上面的FileHandler，但是它可以管理文件大小。当文件达到一定大小之后，它会自动将当前日志文件改名，然后创建 一个新的同名日志文件继续输出。比如日志文件是chat.log。当chat.log达到指定的大小之后，RotatingFileHandler自动把 文件改名为chat.log.1。不过，如果chat.log.1已经存在，会先把chat.log.1重命名为chat.log.2。。。最后重新创建 chat.log，继续输出日志信息。它的构造函数是：<br>RotatingFileHandler( filename[, mode[, maxBytes[, backupCount]]])<br>其中filename和mode两个参数和FileHandler一样。<br>maxBytes用于指定日志文件的最大文件大小。如果maxBytes为0，意味着日志文件可以无限大，这时上面描述的重命名过程就不会发生。<br>backupCount用于指定保留的备份文件的个数。比如，如果指定为2，当上面描述的重命名过程发生时，原有的chat.log.2并不会被更名，而是被删除。</p>
<p>4) <code>logging.handlers.TimedRotatingFileHandler</code><br>这个Handler和RotatingFileHandler类似，不过，它没有通过判断文件大小来决定何时重新创建日志文件，而是间隔一定时间就 自动创建新的日志文件。重命名的过程与RotatingFileHandler类似，不过新的文件不是附加数字，而是当前时间。它的构造函数是：<br>TimedRotatingFileHandler( filename [,when [,interval [,backupCount]]])<br>其中filename参数和backupCount参数和RotatingFileHandler具有相同的意义。<br>interval是时间间隔。<br>when参数是一个字符串。表示时间间隔的单位，不区分大小写。它有以下取值：<br>S 秒<br>M 分<br>H 小时<br>D 天<br>W 每星期（interval==0时代表星期一）<br>midnight 每天凌晨</p>
<p>示例<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">import logging</div><div class="line"> </div><div class="line">#create logger</div><div class="line">logger = logging.getLogger(<span class="string">'TEST-LOG'</span>)</div><div class="line">logger.setLevel(logging.DEBUG)</div><div class="line"> </div><div class="line"># create console handler <span class="built_in">and</span> <span class="keyword">set</span> level <span class="keyword">to</span> <span class="keyword">debug</span></div><div class="line">ch = logging.StreamHandler()</div><div class="line">ch.setLevel(logging.DEBUG)</div><div class="line"> </div><div class="line"># create <span class="keyword">file</span> handler <span class="built_in">and</span> <span class="keyword">set</span> level <span class="keyword">to</span> warning</div><div class="line">fh = logging.FileHandler(<span class="string">"access.log"</span>)</div><div class="line">fh.setLevel(logging.WARNING)</div><div class="line"># create formatter</div><div class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</div><div class="line"> </div><div class="line"># <span class="built_in">add</span> formatter <span class="keyword">to</span> ch <span class="built_in">and</span> fh</div><div class="line">ch.setFormatter(formatter)</div><div class="line">fh.setFormatter(formatter)</div><div class="line"> </div><div class="line"># <span class="built_in">add</span> ch <span class="built_in">and</span> fh <span class="keyword">to</span> logger</div><div class="line">logger.addHandler(ch)</div><div class="line">logger.addHandler(fh)</div><div class="line"> </div><div class="line"># <span class="string">'application'</span> code</div><div class="line">logger.<span class="keyword">debug</span>(<span class="string">'debug message'</span>)</div><div class="line">logger.info(<span class="string">'info message'</span>)</div><div class="line">logger.warn(<span class="string">'warn message'</span>)</div><div class="line">logger.error(<span class="string">'error message'</span>)</div><div class="line">logger.critical(<span class="string">'critical message'</span>)</div></pre></td></tr></table></figure></p>
<p>文件自动截断例子<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">import</span> logging</div><div class="line"></div><div class="line">from logging <span class="built_in">import</span> handlers</div><div class="line"></div><div class="line">logger = logging.getLogger(__name__)</div><div class="line"></div><div class="line">log_file = <span class="string">"timelog.log"</span></div><div class="line">#fh = handlers.RotatingFileHandler(filename=log_file,maxBytes=<span class="number">10</span>,backupCount=<span class="number">3</span>)</div><div class="line">fh = handlers.TimedRotatingFileHandler(filename=log_file,when=<span class="string">"S"</span>,interval=<span class="number">5</span>,backupCount=<span class="number">3</span>)</div><div class="line"></div><div class="line">formatter = logging.Formatter('%(asctime)s %(<span class="function"><span class="keyword">module</span>)<span class="title">s</span>:%<span class="params">(lineno)</span><span class="title">d</span> %<span class="params">(message)</span><span class="title">s</span>')</span></div><div class="line"></div><div class="line"><span class="title">fh</span>.<span class="title">setFormatter</span><span class="params">(formatter)</span></div><div class="line"></div><div class="line"><span class="title">logger</span>.<span class="title">addHandler</span><span class="params">(fh)</span></div><div class="line"></div><div class="line"><span class="title">logger</span>.<span class="title">warning</span><span class="params">(<span class="string">"test1"</span>)</span></div><div class="line"><span class="title">logger</span>.<span class="title">warning</span><span class="params">(<span class="string">"test12"</span>)</span></div><div class="line"><span class="title">logger</span>.<span class="title">warning</span><span class="params">(<span class="string">"test13"</span>)</span></div><div class="line"><span class="title">logger</span>.<span class="title">warning</span><span class="params">(<span class="string">"test14"</span>)</span></div></pre></td></tr></table></figure></p>
<h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="string">'.'</span>     默认匹配除\n之外的任意一个字符，若指定flag DOTALL,则匹配任意字符，包括换行</div><div class="line"><span class="string">'^'</span>     匹配字符开头，若指定flags MULTILINE,这种也可以匹配上(<span class="string">r"^a"</span>,<span class="string">"\nabc\neee"</span>,flags=re.MULTILINE)</div><div class="line"><span class="string">'$'</span>     匹配字符结尾，或e.search(<span class="string">"foo$"</span>,<span class="string">"bfoo\nsdfsf"</span>,flags=re.MULTILINE).group()也可以</div><div class="line"><span class="string">'*'</span>     匹配*号前的字符<span class="number">0</span>次或多次，re.findall(<span class="string">"ab*"</span>,<span class="string">"cabb3abcbbac"</span>)  结果为[<span class="string">'abb'</span>, <span class="string">'ab'</span>, <span class="string">'a'</span>]</div><div class="line"><span class="string">'+'</span>     匹配前一个字符<span class="number">1</span>次或多次，re.findall(<span class="string">"ab+"</span>,<span class="string">"ab+cd+abb+bba"</span>) 结果[<span class="string">'ab'</span>, <span class="string">'abb'</span>]</div><div class="line"><span class="string">'?'</span>     匹配前一个字符<span class="number">1</span>次或<span class="number">0</span>次</div><div class="line"><span class="string">'&#123;m&#125;'</span>   匹配前一个字符m次</div><div class="line"><span class="string">'&#123;n,m&#125;'</span> 匹配前一个字符n到m次，re.findall(<span class="string">"ab&#123;1,3&#125;"</span>,<span class="string">"abb abc abbcbbb"</span>) 结果<span class="string">'abb'</span>, <span class="string">'ab'</span>, <span class="string">'abb'</span>]</div><div class="line"><span class="string">'|'</span>     匹配|左或|右的字符，re.search(<span class="string">"abc|ABC"</span>,<span class="string">"ABCBabcCD"</span>).group() 结果<span class="string">'ABC'</span></div><div class="line"><span class="string">'(...)'</span> 分组匹配，re.search(<span class="string">"(abc)&#123;2&#125;a(123|456)c"</span>, <span class="string">"abcabca456c"</span>).group() 结果 abcabca456c</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="string">'\A'</span>    只从字符开头匹配，re.search(<span class="string">"\Aabc"</span>,<span class="string">"alexabc"</span>) 是匹配不到的</div><div class="line"><span class="string">'\Z'</span>    匹配字符结尾，同$</div><div class="line"><span class="string">'\d'</span>    匹配数字<span class="number">0</span>-<span class="number">9</span></div><div class="line"><span class="string">'\D'</span>    匹配非数字</div><div class="line"><span class="string">'\w'</span>    匹配[A-Za-z0-<span class="number">9</span>]</div><div class="line"><span class="string">'\W'</span>    匹配非[A-Za-z0-<span class="number">9</span>]</div><div class="line"><span class="string">'s'</span>     匹配空白字符、\t、\n、\r , re.search(<span class="string">"\s+"</span>,<span class="string">"ab\tc1\n3"</span>).group() 结果 <span class="string">'\t'</span></div><div class="line"><span class="string">'(?P&lt;name&gt;...)'</span> 分组匹配</div></pre></td></tr></table></figure>
<blockquote>
<p>re.search(“(?P<province>[0-9]{4})(?P<city>[0-9]{2})(?P<birthday>[0-9]{4})”,”371481199306143242”).groupdict(“city”) </birthday></city></province></p>
<p>结果{‘province’: ‘3714’, ‘city’: ‘81’, ‘birthday’: ‘1993’}</p>
</blockquote>
<p>最常用的匹配语法<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">re<span class="selector-class">.match</span> 从头开始匹配</div><div class="line">re<span class="selector-class">.search</span> 匹配包含</div><div class="line">re<span class="selector-class">.findall</span> 把所有匹配到的字符放到以列表中的元素返回</div><div class="line">re<span class="selector-class">.splitall</span> 以匹配到的字符当做列表分隔符</div><div class="line">re<span class="selector-class">.sub</span>      匹配字符并替换</div></pre></td></tr></table></figure></p>
<h3 id="反斜杠的困扰"><a href="#反斜杠的困扰" class="headerlink" title="反斜杠的困扰"></a>反斜杠的困扰</h3><p>与大多数编程语言相同，正则表达式里使用”\”作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符”\”，那么使用编程语言表示的正则表达式里将需要4个反斜杠”\\“：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。Python里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用r”\“表示。同样，匹配一个数字的”\d”可以写成r”\d”。有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。</p>
<p>仅需轻轻知道的几个匹配模式<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">re.I<span class="comment">(re.IGNORECASE)</span>: 忽略大小写（括号内是完整写法，下同）</div><div class="line">re.M<span class="comment">(MULTILINE)</span>: 多行模式，改变<span class="string">'^'</span>和<span class="string">'$'</span>的行为（参见上图）</div><div class="line">re.S<span class="comment">(DOTALL)</span>: 点任意匹配模式，改变<span class="string">'.'</span>的行为</div></pre></td></tr></table></figure></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=28190709&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;模块介绍&lt;/li&gt;
&lt;li&gt;time &amp;amp;datetime模块&lt;/li&gt;
&lt;li&gt;random模块&lt;/li&gt;
&lt;li&gt;os模块&lt;/li&gt;
&lt;li&gt;sys模块&lt;/li&gt;
&lt;li&gt;shutil模块&lt;/li&gt;
&lt;li&gt;json &amp;amp; picle模块&lt;/li&gt;
&lt;li&gt;shelve模块&lt;/li&gt;
&lt;li&gt;xml处理模块&lt;/li&gt;
&lt;li&gt;yaml处理模块&lt;/li&gt;
&lt;li&gt;configparser模块&lt;/li&gt;
&lt;li&gt;hashlib模块&lt;/li&gt;
&lt;li&gt;subprocess模块&lt;/li&gt;
&lt;li&gt;logging模块&lt;/li&gt;
&lt;li&gt;re正则表达式模块&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python从入门到放弃" scheme="http://dinson.win/categories/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
  </entry>
  
</feed>
